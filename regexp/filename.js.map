{"version":3,"sources":["@stdlib/regexp/filename/lib/index.js"],"names":["RE_FILENAME","setReadOnly","__var_0__","copy","__var_1__","IS_WINDOWS","__var_2__","posix","__var_3__","win32","__var_4__","RE_FILENAME$1"],"mappings":"wNA+CA,IASIA,EATAC,EAAcC,EACdC,EAAOC,EACPC,EAAaC,EAIbC,EAAQC,EACRC,EAAQC,EAUZT,EAFAD,EAAcG,EAJbH,EADIK,EACUI,EAEAF,GAIW,QAASA,GACnCN,EAAaD,EAAa,QAASS,GAInC,IAAAE,EAAeX","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from '@stdlib/assert/is-windows';\nimport __var_3__ from '@stdlib/regexp/filename-posix';\nimport __var_4__ from '@stdlib/regexp/filename-windows';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to split a filename.\n*\n* @module @stdlib/regexp/filename\n* @type {RegExp}\n*\n* @example\n* var RE_FILENAME = require( '@stdlib/regexp/filename' );\n*\n* // On a POSIX platform...\n* var parts = RE_FILENAME.exec( '/foo/bar/index.js' ).slice();\n* // returns [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n*\n* @example\n* var RE_FILENAME = require( '@stdlib/regexp/filename' );\n*\n* // On a Windows platform...\n* var parts = RE_FILENAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice();\n* // returns [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar copy = __var_1__;\nvar IS_WINDOWS = __var_2__;\n\n\n// MAIN //\nvar posix = __var_3__;\nvar win32 = __var_4__;\n\nvar RE_FILENAME;\nif ( IS_WINDOWS ) {\n\tRE_FILENAME = win32;\n} else {\n\tRE_FILENAME = posix;\n}\nRE_FILENAME = copy( RE_FILENAME );\n\nsetReadOnly( RE_FILENAME, 'posix', posix );\nsetReadOnly( RE_FILENAME, 'win32', win32 );\n\n\n// EXPORTS //\nexport default RE_FILENAME;\n"]}