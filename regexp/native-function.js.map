{"version":3,"sources":["@stdlib/regexp/native-function/lib/regexp.js","@stdlib/regexp/native-function/lib/index.js"],"names":["str","re","Function","prototype","toString","call","replace","__var_0__","RegExp","RE_NATIVE_FUNCTION"],"mappings":"AAuBA,IAAIA,EACAC,EAEJD,EAAM,GAYNA,EAAM,KAHNA,GAHAA,GAHAA,GAAOE,SAASC,UAAUC,SAASC,KAAMH,WAG/BI,QAAS,6BAA8B,SAGvCA,QAAS,mDAAoD,UAGrD,IAOlB,IAAAC,EAJAN,EAAK,IAAIO,OAAQR,GCebS,EAAqBF","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar str;\nvar re;\n\nstr = '';\n\n// Use a native function as a template:\nstr += Function.prototype.toString.call( Function );\n\n// Escape special RegExp characters:\nstr = str.replace( /([.*+?^=!:$(){}|[\\]\\/\\\\])/g, '\\\\$1' ); // eslint-disable-line no-useless-escape\n\n// Replace any mentions of `Function` to make template generic and replace `for ...` and additional info provided in other environments, such as Rhino.\nstr = str.replace( /Function|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?' );\n\n// Bracket the regular expression:\nstr = '^' + str + '$';\n\n// Create the regular expression:\nre = new RegExp( str );\n\n\n// EXPORTS //\nexport default re;\n","import __var_0__ from './regexp.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to match a native function.\n*\n* @module @stdlib/regexp/native-function\n* @type {RegExp}\n*\n* @example\n* var RE_NATIVE_FUNCTION = require( '@stdlib/regexp/native-function' );\n*\n* function isNativeFunction( fcn ) {\n*     return RE_NATIVE_FUNCTION.test( fcn.toString() );\n* }\n*\n* var bool = isNativeFunction( Math.sqrt );\n* // returns true\n*\n* bool = isNativeFunction( Int8Array );\n* // returns true\n*\n* bool = isNativeFunction( Object.prototype.toString );\n* // returns true\n*\n* bool = isNativeFunction( function noop() {} );\n* // returns false\n*/\n\n\n// MAIN //\n\n/**\n* Match a native function.\n*\n* @constant\n* @type {RegExp}\n*/\nvar RE_NATIVE_FUNCTION = __var_0__;\n\n\n// EXPORTS //\nexport default RE_NATIVE_FUNCTION;\n"]}