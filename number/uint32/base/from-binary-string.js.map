{"version":3,"sources":["@stdlib/number/uint32/base/from-binary-string/lib/main.js","@stdlib/number/uint32/base/from-binary-string/lib/index.js"],"names":["pow","__var_0__","toUint32","__var_1__","NBITS","fromBinaryStringUint32","bstr","sum","i","length","Error"],"mappings":"oGAuBA,IAAIA,EAAMC,EACNC,EAAWC,EAKXC,EAAQ,GAgCZ,SAASC,EAAwBC,GAChC,IAAIC,EACAC,EACJ,GAAKF,EAAKG,SAAWL,EACpB,MAAM,IAAIM,MAAO,8DAA8DN,EAAM,aAAaE,EAAK,MAGxG,IADAC,EAAM,EACAC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACV,MAAdF,EAAME,KACVD,GAAOP,EAAK,EAAII,EAAMI,EAAE,IAG1B,OAAON,EAAUK,GC1Bf,IAACF,EAAyBJ","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/pow';\nimport __var_1__ from '@stdlib/number/float64/base/to-uint32';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\nvar toUint32 = __var_1__;\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 32-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000000000000000000000000000010';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111111111111111111111111111';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\nfunction fromBinaryStringUint32( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( 'invalid argument. Input string must have a length equal to '+NBITS+'. Value: `'+bstr+'`.' );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn toUint32( sum );\n}\n\n\n// EXPORTS //\nexport default fromBinaryStringUint32;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 32-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint32 = require( '@stdlib/number/uint32/base/from-binary-string' );\n*\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* bstr = '00000000000000000000000000000000';\n* val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* bstr = '00000000000000000000000000000010';\n* val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* bstr = '11111111111111111111111111111111';\n* val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\n\n// MODULES //\nvar fromBinaryStringUint32 = __var_0__;\n\n\n// EXPORTS //\nexport default fromBinaryStringUint32;\n"]}