{"version":3,"sources":["@stdlib/number/float64/base/normalize/lib/normalize.js","@stdlib/number/float64/base/normalize/lib/main.js","@stdlib/number/float64/base/normalize/lib/index.js"],"names":["FLOAT64_SMALLEST_NORMAL","__var_0__","isInfinite","__var_1__","isnan","__var_2__","abs","__var_3__","SCALAR","normalize","out","x","fcn","arguments","length"],"mappings":"sOAyBA,IAAIA,EAA0BC,EAC1BC,EAAaC,EACbC,EAAQC,EACRC,EAAMC,EAMNC,EAAS,iBAyCb,SAASC,EAAWC,EAAKC,GACxB,OAAKP,EAAOO,IAAOT,EAAYS,IAC9BD,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,GAEG,IAANC,GAAaL,EAAKK,GAAMX,GAC5BU,EAAK,GAAMC,EAAIH,EACfE,EAAK,IAAO,GACLA,IAERA,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,GClER,IAAIE,EAAMX,EAoDV,SAASQ,EAAWC,EAAKC,GACxB,OAA0B,IAArBE,UAAUC,OACPF,EAAK,CAAE,EAAK,GAAKF,GAElBE,EAAKF,EAAKC,GCzBf,IAACF,EAAYR","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-smallest-normal';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar FLOAT64_SMALLEST_NORMAL = __var_0__;\nvar isInfinite = __var_1__;\nvar isnan = __var_2__;\nvar abs = __var_3__;\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( new Array( 2 ), 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( new Array( 2 ), 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( new Array( 2 ), Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( new Array( 2 ), -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( new Array( 2 ), NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ 0 ] = x * SCALAR;\n\t\tout[ 1 ] = -52;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default normalize;\n","import __var_0__ from './normalize.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar fcn = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( new Array( 2 ), 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = normalize( new Array( 2 ), 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = normalize( new Array( 2 ), Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( new Array( 2 ), -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( new Array( 2 ), NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\nexport default normalize;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float64/base/normalize\n*\n* @example\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar normalize = __var_0__;\n\n\n// EXPORTS //\nexport default normalize;\n"]}