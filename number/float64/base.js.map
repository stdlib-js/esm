{"version":3,"sources":["@stdlib/number/float64/base/lib/index.js"],"names":["setReadOnly","__var_0__","ns","__var_1__","__var_2__","__var_3__","__var_4__","__var_5__","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","__var_13__","__var_14__"],"mappings":"62CAuCA,IAAAA,EAAAC,EAUAC,EAAA,GASAF,EAAAE,EAAA,WAAAC,GASAH,EAAAE,EAAA,mBAAAE,GASAJ,EAAAE,EAAA,YAAAG,GASAL,EAAAE,EAAA,cAAAI,GASAN,EAAAE,EAAA,aAAAK,GASAP,EAAAE,EAAA,YAAAM,GASAR,EAAAE,EAAA,cAAAO,GASAT,EAAAE,EAAA,aAAAQ,GASAV,EAAAE,EAAA,UAAAS,GASAX,EAAAE,EAAA,iBAAAU,GASAZ,EAAAE,EAAA,mBAAAW,GASAb,EAAAE,EAAA,iBAAAY,GASAd,EAAAE,EAAA,kBAAAa,GASAf,EAAAE,EAAA,UAAAc","sourcesContent":["import __var_0__ from '@stdlib/utils/define-read-only-property';\nimport __var_1__ from '@stdlib/number/float64/base/exponent';\nimport __var_2__ from '@stdlib/number/float64/base/from-binary-string';\nimport __var_3__ from '@stdlib/number/float64/base/from-words';\nimport __var_4__ from '@stdlib/number/float64/base/get-high-word';\nimport __var_5__ from '@stdlib/number/float64/base/get-low-word';\nimport __var_6__ from '@stdlib/number/float64/base/normalize';\nimport __var_7__ from '@stdlib/number/float64/base/set-high-word';\nimport __var_8__ from '@stdlib/number/float64/base/set-low-word';\nimport __var_9__ from '@stdlib/number/float64/base/signbit';\nimport __var_10__ from '@stdlib/number/float64/base/to-binary-string';\nimport __var_11__ from '@stdlib/number/float64/base/to-float32';\nimport __var_12__ from '@stdlib/number/float64/base/to-int32';\nimport __var_13__ from '@stdlib/number/float64/base/to-uint32';\nimport __var_14__ from '@stdlib/number/float64/base/to-words';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name exponent\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/exponent}\n*/\nsetReadOnly( ns, 'exponent', __var_1__);\n\n/**\n* @name fromBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryString', __var_2__);\n\n/**\n* @name fromWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-words}\n*/\nsetReadOnly( ns, 'fromWords', __var_3__);\n\n/**\n* @name getHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-high-word}\n*/\nsetReadOnly( ns, 'getHighWord', __var_4__);\n\n/**\n* @name getLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-low-word}\n*/\nsetReadOnly( ns, 'getLowWord', __var_5__);\n\n/**\n* @name normalize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/normalize}\n*/\nsetReadOnly( ns, 'normalize', __var_6__);\n\n/**\n* @name setHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-high-word}\n*/\nsetReadOnly( ns, 'setHighWord', __var_7__);\n\n/**\n* @name setLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-low-word}\n*/\nsetReadOnly( ns, 'setLowWord', __var_8__);\n\n/**\n* @name signbit\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/signbit}\n*/\nsetReadOnly( ns, 'signbit', __var_9__);\n\n/**\n* @name toBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryString', __var_10__);\n\n/**\n* @name float64ToFloat32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-float32}\n*/\nsetReadOnly( ns, 'float64ToFloat32', __var_11__);\n\n/**\n* @name float64ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int32}\n*/\nsetReadOnly( ns, 'float64ToInt32', __var_12__);\n\n/**\n* @name float64ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-uint32}\n*/\nsetReadOnly( ns, 'float64ToUint32', __var_13__);\n\n/**\n* @name toWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-words}\n*/\nsetReadOnly( ns, 'toWords', __var_14__);\n\n\n// EXPORTS //\nexport default ns;\n\nexport { __var_1__ as exponent, __var_2__ as fromBinaryString, __var_3__ as fromWords, __var_4__ as getHighWord, __var_5__ as getLowWord, __var_6__ as normalize, __var_7__ as setHighWord, __var_8__ as setLowWord, __var_9__ as signbit, __var_10__ as toBinaryString, __var_11__ as float64ToFloat32, __var_12__ as float64ToInt32, __var_13__ as float64ToUint32, __var_14__ as toWords};"]}