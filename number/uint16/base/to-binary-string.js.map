{"version":3,"sources":["@stdlib/number/uint16/base/to-binary-string/lib/div2.js","@stdlib/number/uint16/base/to-binary-string/lib/main.js","@stdlib/number/uint16/base/to-binary-string/lib/index.js"],"names":["floor","__var_0__","NBITS","div2","x","i","y","str","lpad","__var_1__","toBinaryString","b"],"mappings":"kGAsBA,IAAIA,EAAQC,EAKRC,EAAQ,GA4BZ,SAASC,EAAMC,GACd,IACIC,EACAC,EAFAC,EAAM,GAMV,IADAF,EAAIH,EACIE,EAAI,GAAKC,GAIfE,GAHDD,EAAIF,EAAI,MACRA,EAAIJ,EAAOM,IAEJ,IAAMC,EAEN,IAAMA,EAEbF,GAAK,EAEN,OAAOE,ECjDR,IAAIC,EAAOP,EACPE,EAAOM,EAKPP,EAAQ,GA0BZ,SAASQ,EAAgBN,GACxB,IAAIO,EAQJ,OALAA,EAAIR,EAAMC,GAGVO,EAAIH,EAAMG,EAAGT,EAAO,KCrBlB,IAACQ,EAAiBT","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default div2;\n","import __var_0__ from '@stdlib/string/left-pad';\nimport __var_1__ from './div2.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar lpad = __var_0__;\nvar div2 = __var_1__;\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @param {uinteger16} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint16Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* @example\n* var a = new Uint16Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000100'\n*\n* @example\n* var a = new Uint16Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 16 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\nexport default toBinaryString;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @module @stdlib/number/uint16/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint16/base/to-binary-string' );\n* var a = new Uint16Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '0000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '0000000000001001'\n*/\n\n// MODULES //\nvar toBinaryString = __var_0__;\n\n\n// EXPORTS //\nexport default toBinaryString;\n"]}