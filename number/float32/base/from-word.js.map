{"version":3,"sources":["@stdlib/number/float32/base/from-word/lib/main.js","@stdlib/number/float32/base/from-word/lib/index.js"],"names":["Uint32Array","__var_0__","Float32Array","__var_1__","UINT32_VIEW","FLOAT32_VIEW","buffer","fromWordf","x"],"mappings":"qFAuBA,IAAIA,EAAcC,EACdC,EAAeC,EAKfC,EAAc,IAAIJ,EAAa,GAC/BK,EAAe,IAAIH,EAAcE,EAAYE,QAiBjD,SAASC,EAAWC,GAEnB,OADAJ,EAAa,GAAMI,EACZH,EAAc,GCbnB,IAACE,EAAYN","sourcesContent":["import __var_0__ from '@stdlib/array/uint32';\nimport __var_1__ from '@stdlib/array/float32';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Uint32Array = __var_0__;\nvar Float32Array = __var_1__;\n\n\n// VARIABLES //\n\nvar UINT32_VIEW = new Uint32Array( 1 );\nvar FLOAT32_VIEW = new Float32Array( UINT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @param {uinteger32} x - unsigned integer\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWordf( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\nfunction fromWordf( x ) {\n\tUINT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\nexport default fromWordf;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @module @stdlib/number/float32/base/from-word\n*\n* @example\n* var fromWord = require( '@stdlib/number/float32/base/from-word' );\n*\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWord( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\nvar fromWordf = __var_0__;\n\n\n// EXPORTS //\nexport default fromWordf;\n"]}