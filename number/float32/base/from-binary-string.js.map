{"version":3,"sources":["@stdlib/number/float32/base/from-binary-string/lib/tofrac.js","@stdlib/number/float32/base/from-binary-string/lib/main.js","@stdlib/number/float32/base/from-binary-string/lib/index.js"],"names":["pow","__var_0__","toFrac","frac","i","sum","length","PINF","NINF","__var_1__","BIAS","__var_2__","__var_3__","toFloat32","__var_4__","__var_5__","fromBinaryStringf","bstr","sign","exp","Error","parseInt","substring","NaN"],"mappings":"yRAsBA,IAAIA,EAAMC,EAoBV,SAASC,EAAQC,GAChB,IACIC,EADAC,EAAM,EAEV,IAAMD,EAAI,EAAGA,EAAID,EAAKG,OAAQF,IACV,MAAdD,EAAMC,KACVC,GAAOL,EAAK,IAAOI,EAAE,KAGvB,OAAOC,ECvBR,IAAIE,EAAON,EACPO,EAAOC,EACPC,EAAOC,EACPX,EAAMY,EACNC,EAAYC,EACZZ,EAASa,EAqCb,SAASC,EAAmBC,GAC3B,IAAIC,EACAf,EACAgB,EAEJ,GAAqB,KAAhBF,EAAKX,OACT,MAAM,IAAIc,MAAO,0EAA0EH,EAAK,MAYjG,GATAC,EAAqB,MAAZD,EAAK,IAAgB,EAAM,EAGpCE,EAAME,SAAUJ,EAAKK,UAAU,EAAG,GAAI,GAAMZ,EAG5CP,EAAOD,EAAQe,EAAKK,UAAW,IAG1BH,KAAST,EAAO,CACpB,GAAc,IAATP,EACJ,OAAkB,IAATe,EAAiB,GAAO,EAElCC,IAAQT,EAAK,OAGT,CAAA,GAAKS,IAAQT,EAAK,EACtB,OAAc,IAATP,EACc,IAATe,EAAiBX,EAAOC,EAE3Be,IAKPpB,GAAQ,EAET,OAAOU,EAAWK,EAAKf,EAAKH,EAAI,EAAGmB,IC9DjC,IAACH,EAAoBf","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\n\n\n// MAIN //\n\n/**\n* Converts a float's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {BinaryString} frac - literal bit representation of a float's fraction bit sequence\n* @returns {number} fraction value\n*\n* @example\n* var v = toFrac( '10001100010111110011000' );\n* // returns ~0.548\n*\n* @example\n* var v = toFrac( '11110101000101011111111' );\n* // returns ~0.957\n*/\nfunction toFrac( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\nexport default toFrac;\n","import __var_0__ from '@stdlib/constants/math/float32-pinf';\nimport __var_1__ from '@stdlib/constants/math/float32-ninf';\nimport __var_2__ from '@stdlib/constants/math/float32-exponent-bias';\nimport __var_3__ from '@stdlib/math/base/special/pow';\nimport __var_4__ from '@stdlib/number/float64/base/to-float32';\nimport __var_5__ from './tofrac.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar PINF = __var_0__;\nvar NINF = __var_1__;\nvar BIAS = __var_2__;\nvar pow = __var_3__;\nvar toFloat32 = __var_4__;\nvar toFrac = __var_5__;\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var bstr = '01000000100000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '01000000010010010000111111011011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* @example\n* var bstr = '11111111011011000011101000110011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var v =  fromBinaryStringf( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '10000000000000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns -0.0\n*/\nfunction fromBinaryStringf( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 32 ) {\n\t\tthrow new Error( 'invalid argument. Input string must have a length equal to 32. Value: `'+bstr+'`.' );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 9), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toFrac( bstr.substring( 9 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -(BIAS-1); // subnormals are special in that their exponent is constant\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn toFloat32( sign*frac*pow(2, exp) );\n}\n\n\n// EXPORTS //\nexport default fromBinaryStringf;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @module @stdlib/number/float32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringf = require( '@stdlib/number/float32/base/from-binary-string' );\n*\n* var bstr = '01000000100000000000000000000000';\n* var val = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* bstr = '01000000010010010000111111011011';\n* val = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* bstr = '11111111011011000011101000110011';\n* val = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*/\n\n// MODULES //\nvar fromBinaryStringf = __var_0__;\n\n\n// EXPORTS //\nexport default fromBinaryStringf;\n"]}