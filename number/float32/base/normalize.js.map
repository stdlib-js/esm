{"version":3,"sources":["@stdlib/number/float32/base/normalize/lib/normalize.js","@stdlib/number/float32/base/normalize/lib/main.js","@stdlib/number/float32/base/normalize/lib/index.js"],"names":["FLOAT32_SMALLEST_NORMAL","__var_0__","PINF","__var_1__","NINF","__var_2__","abs","__var_3__","toFloat32","__var_4__","SCALAR","normalizef","out","x","normalize","arguments","length"],"mappings":"2RA0BA,IAAIA,EAA0BC,EAC1BC,EAAOC,EACPC,EAAOC,EACPC,EAAMC,EACNC,EAAYC,EAMZC,EAAS,QAuCb,SAASC,EAAYC,EAAKC,GACzB,OACCA,GAAMA,GACNA,IAAMX,GACNW,IAAMT,GAENQ,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,GAEG,IAANC,GAAaP,EAAKO,GAAMb,GAC5Ba,EAAIL,EAAWK,EAAEH,GACjBE,EAAK,GAAMC,EACXD,EAAK,IAAO,GACLA,IAERA,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,GCvER,IAAIE,EAAYb,EAkDhB,SAASU,EAAYC,EAAKC,GACzB,OAA0B,IAArBE,UAAUC,OACPF,EAAW,CAAE,EAAK,GAAKF,GAExBE,EAAWF,EAAKC,GCrBrB,IAACF,EAAaV","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float32-smallest-normal';\nimport __var_1__ from '@stdlib/constants/math/float32-pinf';\nimport __var_2__ from '@stdlib/constants/math/float32-ninf';\nimport __var_3__ from '@stdlib/math/base/special/abs';\nimport __var_4__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar FLOAT32_SMALLEST_NORMAL = __var_0__;\nvar PINF = __var_1__;\nvar NINF = __var_2__;\nvar abs = __var_3__;\nvar toFloat32 = __var_4__;\n\n\n// VARIABLES //\n\n// (1<<32)\nvar SCALAR = 8388608;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - single-precision floating-point number\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( new Array( 2 ), toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( new Array( 2 ), 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants/math/float32-pinf' );\n*\n* var v = normalizef( new Array( 2 ), PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/math/float32-ninf' );\n*\n* var v = normalizef( new Array( 2 ), NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( new Array( 2 ), NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( out, x ) {\n\tif (\n\t\tx !== x ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {\n\t\tx = toFloat32( x*SCALAR );\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = -23;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default normalizef;\n","import __var_0__ from './normalize.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar normalize = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - single-precision floating-point number\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef( out, toFloat32( 1.401e-45 ) );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = normalizef( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var PINF = require( '@stdlib/constants/math/float32-pinf' );\n*\n* var v = normalizef( PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/math/float32-ninf' );\n*\n* var v = normalizef( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn normalize( [ 0.0, 0 ], out );\n\t}\n\treturn normalize( out, x );\n}\n\n\n// EXPORTS //\nexport default normalizef;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float32/base/normalize\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2,exp) === toFloat32(1.401e-45) );\n* // returns true\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef( out, toFloat32( 1.401e-45 ) );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar normalizef = __var_0__;\n\n\n// EXPORTS //\nexport default normalizef;\n"]}