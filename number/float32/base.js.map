{"version":3,"sources":["@stdlib/number/float32/base/lib/index.js"],"names":["setReadOnly","__var_0__","ns","__var_1__","__var_2__","__var_3__","__var_4__","__var_5__","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__"],"mappings":"s+BAmCA,IAAAA,EAAAC,EAUAC,EAAA,GASAF,EAAAE,EAAA,YAAAC,GASAH,EAAAE,EAAA,oBAAAE,GASAJ,EAAAE,EAAA,YAAAG,GASAL,EAAAE,EAAA,aAAAI,GASAN,EAAAE,EAAA,WAAAK,GASAP,EAAAE,EAAA,eAAAM,GASAR,EAAAE,EAAA,kBAAAO,GASAT,EAAAE,EAAA,iBAAAQ,GASAV,EAAAE,EAAA,kBAAAS,GASAX,EAAAE,EAAA,UAAAU","sourcesContent":["import __var_0__ from '@stdlib/utils/define-read-only-property';\nimport __var_1__ from '@stdlib/number/float32/base/exponent';\nimport __var_2__ from '@stdlib/number/float32/base/from-binary-string';\nimport __var_3__ from '@stdlib/number/float32/base/from-word';\nimport __var_4__ from '@stdlib/number/float32/base/normalize';\nimport __var_5__ from '@stdlib/number/float32/base/signbit';\nimport __var_6__ from '@stdlib/number/float32/base/significand';\nimport __var_7__ from '@stdlib/number/float32/base/to-binary-string';\nimport __var_8__ from '@stdlib/number/float32/base/to-int32';\nimport __var_9__ from '@stdlib/number/float32/base/to-uint32';\nimport __var_10__ from '@stdlib/number/float32/base/to-word';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name exponentf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/exponent}\n*/\nsetReadOnly( ns, 'exponentf', __var_1__);\n\n/**\n* @name fromBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringf', __var_2__);\n\n/**\n* @name fromWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-word}\n*/\nsetReadOnly( ns, 'fromWordf', __var_3__);\n\n/**\n* @name normalizef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/normalize}\n*/\nsetReadOnly( ns, 'normalizef', __var_4__);\n\n/**\n* @name signbitf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/signbit}\n*/\nsetReadOnly( ns, 'signbitf', __var_5__);\n\n/**\n* @name significandf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/significand}\n*/\nsetReadOnly( ns, 'significandf', __var_6__);\n\n/**\n* @name toBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringf', __var_7__);\n\n/**\n* @name float32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-int32}\n*/\nsetReadOnly( ns, 'float32ToInt32', __var_8__);\n\n/**\n* @name float32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-uint32}\n*/\nsetReadOnly( ns, 'float32ToUint32', __var_9__);\n\n/**\n* @name toWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-word}\n*/\nsetReadOnly( ns, 'toWordf', __var_10__);\n\n\n// EXPORTS //\nexport default ns;\n\nexport { __var_1__ as exponentf, __var_2__ as fromBinaryStringf, __var_3__ as fromWordf, __var_4__ as normalizef, __var_5__ as signbitf, __var_6__ as significandf, __var_7__ as toBinaryStringf, __var_8__ as float32ToInt32, __var_9__ as float32ToUint32, __var_10__ as toWordf};"]}