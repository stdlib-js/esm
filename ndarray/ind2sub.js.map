{"version":3,"sources":["@stdlib/ndarray/ind2sub/lib/validate.js","@stdlib/ndarray/ind2sub/lib/main.js","@stdlib/ndarray/ind2sub/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isOrder","__var_2__","isIndexMode","__var_3__","validate","opts","options","mode","TypeError","order","isNonNegativeIntegerArray","primitives","isInteger","isPrimitive","shape2strides","getSubscripts","defaults","__var_4__","__var_5__","ind2sub","strides","shape","idx","out","err","arguments","length","Array"],"mappings":"+YAyBIA,EAAWC,EACXC,EAAaC,EACbC,EAAUC,EACVC,EAAcC,EA0BlB,SAASC,EAAUC,EAAMC,GACxB,OAAMV,EAAUU,GAGXR,EAAYQ,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdL,EAAaG,EAAKE,OAChB,IAAIC,UAAW,+EAAiFH,EAAKE,KAAO,MAGhHT,EAAYQ,EAAS,WACzBD,EAAKI,MAAQH,EAAQG,OACfT,EAASK,EAAKI,QACZ,IAAID,UAAW,iFAAmFH,EAAKI,MAAQ,MAGjH,KAdC,IAAID,UAAW,wDAA0DF,EAAU,MC7B5F,IAAII,EAA4Bb,EAAUc,WACtCC,EAAYb,EAAUc,YACtBC,EAAgBb,EAChBc,EAAgBZ,EAChBa,EAAWC,EACXb,EAAWc,EA6Cf,SAASC,IACR,IACIC,EAEAC,EACAhB,EACAiB,EACAC,EACAC,EAKJ,IAHAnB,EAAO,IACFE,KAAOS,EAAST,KACrBF,EAAKI,MAAQO,EAASP,MACI,IAArBgB,UAAUC,OACdL,EAAQI,UAAW,GACnBH,EAAMG,UAAW,QACX,GAA0B,IAArBA,UAAUC,OACrB,GAAKd,EAAWa,UAAW,KAK1B,GAJAJ,EAAQI,UAAW,GACnBH,EAAMG,UAAW,GAEjBD,EAAMpB,EAAUC,EADNoB,UAAW,IAGpB,MAAMD,MAED,CAEN,GAAoB,iBADpBD,EAAME,UAAW,KACuB,OAARF,EAC/B,MAAM,IAAIf,UAAW,8FAAgGe,EAAM,MAE5HF,EAAQI,UAAW,GACnBH,EAAMG,UAAW,OAEZ,CAEN,GAAoB,iBADpBF,EAAME,UAAW,KACuB,OAARF,EAC/B,MAAM,IAAIf,UAAW,8FAAgGe,EAAM,MAM5H,GAJAF,EAAQI,UAAW,GACnBH,EAAMG,UAAW,GAEjBD,EAAMpB,EAAUC,EADNoB,UAAW,IAGpB,MAAMD,EAGR,IAAMd,EAA2BW,GAChC,MAAM,IAAIb,UAAW,0GAA4Ga,EAAQ,MAE1I,IAAMT,EAAWU,GAChB,MAAM,IAAId,UAAW,2EAA6Ec,EAAM,MAOzG,YALa,IAARC,IACJA,EAAM,IAAII,MAAON,EAAMK,SAExBN,EAAUN,EAAeO,EAAOhB,EAAKI,OAE9BM,EAAeQ,EAAKF,EAAOD,EADzB,EAC0Cf,EAAKI,MAAOa,EAAKjB,EAAKE,MCxFvE,IAACY,EAAUtB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/ndarray/base/assert/is-order';\nimport __var_3__ from '@stdlib/ndarray/base/assert/is-index-mode';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isOrder = __var_2__;\nvar isIndexMode = __var_3__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mode` option must be a supported/recognized mode. Option: `' + opts.mode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( 'invalid option. `order` option must be a supported/recognized order. Option: `' + opts.order + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer-array';\nimport __var_1__ from '@stdlib/assert/is-integer';\nimport __var_2__ from '@stdlib/ndarray/base/shape2strides';\nimport __var_3__ from '@stdlib/ndarray/base/ind2sub';\nimport __var_4__ from './defaults.json';\nimport __var_5__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeIntegerArray = __var_0__.primitives;\nvar isInteger = __var_1__.isPrimitive;\nvar shape2strides = __var_2__;\nvar getSubscripts = __var_3__;\nvar defaults = __var_4__;\nvar validate = __var_5__;\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   `throw`: throws an error when a linear index exceeds array dimensions.\n*     -   `wrap`: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   `clamp`: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} output argument must be either an array, typed array, or an object\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var out = new Array( shape.length );\n*\n* var s = ind2sub( out, shape, 17 );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\nfunction ind2sub() {\n\tvar options;\n\tvar strides;\n\tvar offset;\n\tvar shape;\n\tvar opts;\n\tvar idx;\n\tvar out;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tidx = arguments[ 1 ];\n\t} else if ( arguments.length === 3 ) {\n\t\tif ( isInteger( arguments[ 1 ] ) ) {\n\t\t\tshape = arguments[ 0 ];\n\t\t\tidx = arguments[ 1 ];\n\t\t\toptions = arguments[ 2 ];\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\tout = arguments[ 0 ];\n\t\t\tif ( typeof out !== 'object' || out === null ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `' + out + '`.' );\n\t\t\t}\n\t\t\tshape = arguments[ 1 ];\n\t\t\tidx = arguments[ 2 ];\n\t\t}\n\t} else {\n\t\tout = arguments[ 0 ];\n\t\tif ( typeof out !== 'object' || out === null ) {\n\t\t\tthrow new TypeError( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `' + out + '`.' );\n\t\t}\n\t\tshape = arguments[ 1 ];\n\t\tidx = arguments[ 2 ];\n\t\toptions = arguments[ 3 ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `' + shape + '`.' );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( 'invalid argument. Linear index argument must be integer valued. Value: `' + idx + '`.' );\n\t}\n\tif ( out === void 0 ) {\n\t\tout = new Array( shape.length );\n\t}\n\tstrides = shape2strides( shape, opts.order );\n\toffset = 0; // strides are positive, so offset is always zero\n\treturn getSubscripts( out, shape, strides, offset, opts.order, idx, opts.mode ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default ind2sub;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a linear index to an array of subscripts.\n*\n* @module @stdlib/ndarray/ind2sub\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray/ind2sub' );\n*\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* var ind2sub = require( '@stdlib/ndarray/ind2sub' );\n*\n* var shape = [ 3, 3, 3 ];\n* var out = new Array( shape.length );\n*\n* var s = ind2sub( out, shape, 17 );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\n\n// MODULES //\nvar ind2sub = __var_0__;\n\n\n// EXPORTS //\nexport default ind2sub;\n"]}