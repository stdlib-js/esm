{"version":3,"sources":["@stdlib/ndarray/base/memoized-ctor/lib/key.js","@stdlib/ndarray/base/memoized-ctor/lib/cache.js","@stdlib/ndarray/base/memoized-ctor/lib/main.js","@stdlib/ndarray/base/memoized-ctor/lib/index.js"],"names":["options","__var_0__","nopts","length","N","getKey","dtype","opts","key","i","dtypes","KEY_OPTION_VALUES","__var_1__","DTYPES","len","cache","out","dt","j","baseCtor","defaults","__var_2__","__var_3__","CACHE","ctor","ndims","ctors","f","codegen","arguments","push"],"mappings":"4FAsBIA,EAAUC,EAKVC,EAAQF,EAAQG,OAChBC,EAAIF,EAAQ,EAqBhB,SAASG,EAAQC,EAAOC,GACvB,IAAIC,EACAC,EAGJ,IADAD,EAAMF,EAAQ,IACRG,EAAI,EAAGA,EAAIP,EAAOO,IAEvBD,GAAOR,EAASS,GAAM,IAAMF,EAAMP,EAAQS,IACrCA,EAAIL,IACRI,GAAO,KAGT,OAAOA,yCCtCJE,EAAST,EACTU,EAAoBC,EAKpBC,EAASH,IACTI,EAAMD,EAAOV,OACbC,EAAIO,EAAkBR,OAyB1B,SAASY,IACR,IAAIC,EAEAC,EACAR,EACAS,EAGJ,IADAF,EAAM,GACAP,EAAI,EAAGA,EAAIK,EAAKL,IAErB,IADAQ,EAAKJ,EAAQJ,GACPS,EAAI,EAAGA,EAAId,EAAGc,IAEnBF,EADMC,EAAK,IAAMN,EAAmBO,IACvB,GAGf,OAAOF,EC9CR,IAAIG,EAAWlB,EACXmB,EAAWR,EACXP,EAASgB,EACTN,EAAQO,EAKRC,EAAQR,IA+BZ,SAASS,EAAMlB,EAAOmB,EAAOzB,GAC5B,IAAI0B,EACAnB,EACAC,EACAM,EACAa,EACAlB,EAaJ,IAXAF,EAAO,IAEDqB,QADDC,UAAU1B,OAAS,OACc,IAApBH,EAAQ4B,QAAuBR,EAASQ,QAAU5B,EAAQ4B,QAE5DR,EAASQ,QAEzBpB,EAAMH,EAAQC,EAAOC,GAKhBkB,IADLX,GAHAY,EAAQH,EAAOf,IAGHL,SAGA,KADXwB,EAAID,EAAOD,EAAM,MAEhBE,EAAIR,EAAUb,EAAOmB,EAAOlB,GAC5BmB,EAAOD,EAAM,GAAME,OAEd,CACN,IAAMlB,EAAIK,EAAI,EAAGL,EAAIgB,EAAOhB,IAC3BiB,EAAMI,MAAM,GAEbH,EAAIR,EAAUb,EAAOmB,EAAOlB,GAC5BmB,EAAMI,KAAMH,GAEb,OAAOA,ECjDL,IAACH,EAAOvB","sourcesContent":["import __var_0__ from './options.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar options = __var_0__;\n\n\n// VARIABLES //\n\nvar nopts = options.length;\nvar N = nopts - 1;\n\n\n// MAIN //\n\n/**\n* Returns a cache key.\n*\n* @private\n* @param {string} dtype - data type\n* @param {Options} opts - function options\n* @param {boolean} opts.codegen - boolean indicating whether to use code generation\n* @returns {string} cache key\n*\n* @example\n* var opts = {\n*     'codegen': true\n* };\n* var key = getKey( 'float64', opts );\n* // returns 'float64;codegen=true'\n*/\nfunction getKey( dtype, opts ) {\n\tvar key;\n\tvar i;\n\n\tkey = dtype + ';';\n\tfor ( i = 0; i < nopts; i++ ) {\n\t\t// Note: we assume that an option value can be uniquely serialized to a `string` via `toString()`...\n\t\tkey += options[ i ] + '=' + opts[ options[i] ];\n\t\tif ( i < N ) {\n\t\t\tkey += ',';\n\t\t}\n\t}\n\treturn key;\n}\n\n\n// EXPORTS //\nexport default getKey;\n","import __var_0__ from '@stdlib/ndarray/dtypes';\nimport __var_1__ from './key_option_values.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dtypes = __var_0__;\nvar KEY_OPTION_VALUES = __var_1__;\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar len = DTYPES.length;\nvar N = KEY_OPTION_VALUES.length;\n\n\n// MAIN //\n\n/**\n* Returns a constructor cache.\n*\n* ## Notes\n*\n* -   Should return something similar to the following:\n*\n*     ```text\n*     {\n*         \"float64;codegen=true\": [],\n*         \"float64;codegen=false\": [],\n*         \"float32;codegen=true\": [],\n*         \"float32;codegen=false\": [],\n*         ...\n*     }\n*     ```\n*\n* @private\n* @returns {Object} constructor cache\n*/\nfunction cache() {\n\tvar out;\n\tvar key;\n\tvar dt;\n\tvar i;\n\tvar j;\n\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdt = DTYPES[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tkey = dt + ';' + KEY_OPTION_VALUES[ j ];\n\t\t\tout[ key ] = []; // Note: we use an array to avoid unordered key look-up\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default cache;\n","import __var_0__ from '@stdlib/ndarray/base/ctor';\nimport __var_1__ from './defaults.json';\nimport __var_2__ from './key.js';\nimport __var_3__ from './cache.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar baseCtor = __var_0__;\nvar defaults = __var_1__;\nvar getKey = __var_2__;\nvar cache = __var_3__;\n\n\n// VARIABLES //\n\nvar CACHE = cache();\n\n\n// MAIN //\n\n/**\n* Returns a memoized ndarray constructor.\n*\n* @param {string} dtype - data type\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {Options} [options] - function options\n* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation\n* @returns {Function} memoized ndarray constructor\n*\n* @example\n* var f1 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var f2 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var bool = ( f1 === f2 );\n* // returns true\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = f1( buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ctor( dtype, ndims, options ) {\n\tvar ctors;\n\tvar opts;\n\tvar key;\n\tvar len;\n\tvar f;\n\tvar i;\n\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\topts.codegen = ( options.codegen === void 0 ) ? defaults.codegen : options.codegen; // eslint-disable-line max-len\n\t} else {\n\t\topts.codegen = defaults.codegen;\n\t}\n\tkey = getKey( dtype, opts );\n\tctors = CACHE[ key ];\n\n\t// If the constructor has not already been created, create it; otherwise, return a memoized constructor...\n\tlen = ctors.length;\n\tif ( ndims <= len ) {\n\t\tf = ctors[ ndims-1 ];\n\t\tif ( f === false ) {\n\t\t\tf = baseCtor( dtype, ndims, opts );\n\t\t\tctors[ ndims-1 ] = f;\n\t\t}\n\t} else {\n\t\tfor ( i = len+1; i < ndims; i++ ) {\n\t\t\tctors.push( false );\n\t\t}\n\t\tf = baseCtor( dtype, ndims, opts );\n\t\tctors.push( f );\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\nexport default ctor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a memoized ndarray constructor.\n*\n* @module @stdlib/ndarray/base/memoized-ctor\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/base/memoized-ctor' );\n*\n* var f1 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var f2 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var bool = ( f1 === f2 );\n* // returns true\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = f1( buffer, shape, strides, offset, 'row-major' );\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}