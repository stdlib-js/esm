{"version":3,"sources":["@stdlib/ndarray/base/to-array/lib/recurse.js","@stdlib/ndarray/base/to-array/lib/main.js","@stdlib/ndarray/base/to-array/lib/index.js"],"names":["recurse","buffer","shape","strides","offset","order","dim","stride","item","out","n","i","length","push","__var_0__","ndarray2array"],"mappings":"AAmCA,SAASA,EAASC,EAAQC,EAAOC,EAASC,EAAQC,EAAOC,GACxD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKL,GAAOJ,EAAMU,OACjB,OAAOX,EAAQG,GAOhB,IALAK,EAAM,GAENC,EAAIR,EAAOI,GACXC,EAASJ,EAASG,GAEZK,EAAI,EAAGA,EAAID,EAAGC,IACnBH,EAAOR,EAASC,EAAQC,EAAOC,EAASC,EAAQC,EAAOC,EAAI,GAC3DG,EAAII,KAAML,GACVJ,GAAUG,EAEX,OAAOE,ECjCR,IAAIT,EAAUc,EAyBd,SAASC,EAAed,EAAQC,EAAOC,EAASC,EAAQC,GACvD,IAAIM,EACJ,GAAsB,IAAjBT,EAAMU,OACV,MAAO,GAER,IAAMD,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAC9B,GAAoB,IAAfT,EAAOS,GACX,MAAO,GAGT,OAAOX,EAASC,EAAQC,EAAOC,EAASC,EAAQC,EAAO,GCjBrD,IAACU,EAAgBD","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Recursively converts an ndarray to a generic array.\n*\n* @private\n* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeInteger} dim - dimension\n* @returns {(Array|Array<Array>)} output array\n*/\nfunction recurse( buffer, shape, strides, offset, order, dim ) {\n\tvar stride;\n\tvar item;\n\tvar out;\n\tvar n;\n\tvar i;\n\n\tif ( dim >= shape.length ) {\n\t\treturn buffer[ offset ];\n\t}\n\tout = [];\n\n\tn = shape[ dim ];\n\tstride = strides[ dim ];\n\n\tfor ( i = 0; i < n; i++ ) {\n\t\titem = recurse( buffer, shape, strides, offset, order, dim+1 );\n\t\tout.push( item );\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default recurse;\n","import __var_0__ from './recurse.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar recurse = __var_0__;\n\n\n// MAIN //\n\n/**\n* Converts an ndarray buffer to a generic array (which may include nested arrays).\n*\n* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(EmptyArray|Array|Array<Array>)} array (which may include nested arrays)\n*\n* @example\n* var buffer = [ 1, 2, 3, 4 ];\n* var shape = [ 2, 2 ];\n* var order = 'row-major';\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray2array( buffer, shape, strides, offset, order );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\nfunction ndarray2array( buffer, shape, strides, offset, order ) {\n\tvar i;\n\tif ( shape.length === 0 ) {\n\t\treturn [];\n\t}\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t}\n\treturn recurse( buffer, shape, strides, offset, order, 0 );\n}\n\n\n// EXPORTS //\nexport default ndarray2array;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an ndarray buffer to a generic array (which may include nested arrays).\n*\n* @module @stdlib/ndarray/base/to-array\n*\n* @example\n* var ndarray2array = require( '@stdlib/ndarray/base/to-array' );\n*\n* var buffer = [ 1, 2, 3, 4 ];\n* var shape = [ 2, 2 ];\n* var order = 'row-major';\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray2array( buffer, shape, strides, offset, order );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\n\n// MODULES //\nvar ndarray2array = __var_0__;\n\n\n// EXPORTS //\nexport default ndarray2array;\n"]}