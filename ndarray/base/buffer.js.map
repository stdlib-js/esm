{"version":3,"sources":["@stdlib/ndarray/base/buffer/lib/zeros.js","@stdlib/ndarray/base/buffer/lib/main.js","@stdlib/ndarray/base/buffer/lib/index.js"],"names":["zeros","v","i","length","bufferCtors","__var_0__","allocUnsafe","__var_1__","__var_2__","buffer","dtype","size","ctor","buf","push"],"mappings":"+EAkCA,SAASA,EAAOC,GACf,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAID,EAAEE,OAAQD,IAC1BD,EAAGC,GAAM,EAEV,OAAOD,ECfR,IAAIG,EAAcC,EACdC,EAAcC,EACdP,EAAQQ,EAgBZ,SAASC,EAAQC,EAAOC,GACvB,IAAIC,EACAC,EACAX,EAEJ,GAAe,YAAVQ,EAAsB,CAE1B,IADAG,EAAM,GACAX,EAAI,EAAGA,EAAIS,EAAMT,IACtBW,EAAIC,KAAM,GAEX,OAAOD,EAER,MAAe,WAAVH,EACGV,EAAOM,EAAaK,KAE5BC,EAAOR,EAAaM,IAEZ,IAAIE,EAAMD,GAEX,KC3BL,IAACF,EAASJ","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills an array-like object with zeros.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} v - array-like object to fill\n* @returns {(Array|TypedArray|Buffer)} input value\n*\n* @example\n* var arr = zeros( new Array( 2 ) );\n* // returns [ 0, 0 ]\n*/\nfunction zeros( v ) {\n\tvar i;\n\tfor ( i = 0; i < v.length; i++ ) {\n\t\tv[ i ] = 0;\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\nexport default zeros;\n","import __var_0__ from '@stdlib/ndarray/base/buffer-ctors';\nimport __var_1__ from '@stdlib/buffer/alloc-unsafe';\nimport __var_2__ from './zeros.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar bufferCtors = __var_0__;\nvar allocUnsafe = __var_1__;\nvar zeros = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled contiguous linear ndarray data buffer.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(Array|TypedArray|Buffer)|null} data buffer\n*\n* @example\n* var buf = buffer( 'float64', 3 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]\n*/\nfunction buffer( dtype, size ) {\n\tvar ctor;\n\tvar buf;\n\tvar i;\n\n\tif ( dtype === 'generic' ) {\n\t\tbuf = [];\n\t\tfor ( i = 0; i < size; i++ ) {\n\t\t\tbuf.push( 0 );\n\t\t}\n\t\treturn buf;\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn zeros( allocUnsafe( size ) );\n\t}\n\tctor = bufferCtors( dtype );\n\tif ( ctor ) {\n\t\treturn new ctor( size );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default buffer;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a zero-filled contiguous linear ndarray data buffer.\n*\n* @module @stdlib/ndarray/base/buffer\n*\n* @example\n* var buffer = require( '@stdlib/ndarray/base/buffer' );\n*\n* var buf = buffer( 'float64', 3 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\nvar buffer = __var_0__;\n\n\n// EXPORTS //\nexport default buffer;\n"]}