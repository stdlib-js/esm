{"version":3,"sources":["@stdlib/ndarray/base/ctor/lib/is_column_major_contiguous.js","@stdlib/ndarray/base/ctor/lib/is_row_major_contiguous.js","@stdlib/ndarray/base/ctor/lib/is_contiguous.js","@stdlib/ndarray/base/ctor/lib/copy_flags.js","@stdlib/ndarray/base/ctor/lib/compile_set.js","@stdlib/ndarray/base/ctor/lib/compile_get.js","@stdlib/ndarray/base/ctor/lib/iget.js","@stdlib/ndarray/base/ctor/lib/iset.js","@stdlib/ndarray/base/ctor/lib/set.js","@stdlib/ndarray/base/ctor/lib/get.js","@stdlib/ndarray/base/ctor/lib/tojson.js","@stdlib/ndarray/base/ctor/lib/tostring.js","@stdlib/ndarray/base/ctor/lib/main.js","@stdlib/ndarray/base/ctor/lib/index.js"],"names":["isColumnMajorContiguous","order","contiguous","isRowMajorContiguous","minmaxViewBufferIndex","__var_0__","BUFFER","isContiguous","len","shape","strides","offset","iterationOrder","setReadOnly","copyFlags","flags","out","ROW_MAJOR_CONTIGUOUS","COLUMN_MAJOR_CONTIGUOUS","set","ndims","f","i","n","Function","get","iget","idx","ind","s","this","_iterationOrder","_buffer","_offset","_shape","length","_strides","_order","iset","v","arguments","toJSON","_length","type","dtype","slice","data","push","replace","CTORS","int8","uint8","uint8c","int16","uint16","int32","uint32","float32","float64","generic","binary","toString","buffer","ctor","str","join","setReadOnlyAccessor","__var_1__","bytesPerElement","__var_2__","__var_3__","strides2order","__var_4__","__var_5__","__var_6__","__var_7__","__var_8__","compileSet","__var_9__","compileGet","__var_10__","igetValue","__var_11__","isetValue","__var_12__","setValue","__var_13__","getValue","__var_14__","__var_15__","__var_16__","defaults","__var_17__","options","opts","ndarray","nbytes","ord","BYTES_PER_ELEMENT","_byteLength","_flags","codegen","prototype"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is column-major contiguous.\n*\n* @private\n* @param {string} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is column-major contiguous\n*/\nfunction isColumnMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 'column-major' || order === 'both' );\n}\n\n\n// EXPORTS //\nexport default isColumnMajorContiguous;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is row-major contiguous.\n*\n* @private\n* @param {string} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is row-major contiguous\n*/\nfunction isRowMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 'row-major' || order === 'both' );\n}\n\n\n// EXPORTS //\nexport default isRowMajorContiguous;\n","import __var_0__ from '@stdlib/ndarray/base/minmax-view-buffer-index';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar minmaxViewBufferIndex = __var_0__;\n\n\n// VARIABLES //\n\nvar BUFFER = [ 0, 0 ]; // WARNING: in C, this is not thread safe\n\n\n// MAIN //\n\n/**\n* Determines if an array is contiguous.\n*\n* @private\n* @param {NonNegativeInteger} len - array length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @param {integer} iterationOrder - iteration order\n* @returns {boolean} boolean indicating if an array is contiguous\n*/\nfunction isContiguous( len, shape, strides, offset, iterationOrder ) {\n\t// If an array does not contain any elements, then no data to store, and, if the array is unordered, adjacent array elements are not guaranteed to be stored next to each other.\n\tif ( len === 0 || iterationOrder === 0 ) {\n\t\treturn false;\n\t}\n\t// Ensure that the array is compatible with a single memory segment:\n\tminmaxViewBufferIndex( BUFFER, shape, strides, offset );\n\treturn ( len === ( BUFFER[1]-BUFFER[0]+1 ) );\n}\n\n\n// EXPORTS //\nexport default isContiguous;\n","import __var_0__ from '@stdlib/utils/define-read-only-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\n\n\n// MAIN //\n\n/**\n* Copies ndarray flags.\n*\n* @private\n* @param {Object} flags - flags\n* @returns {Object} copy of input object\n*/\nfunction copyFlags( flags ) {\n\tvar out = {};\n\tsetReadOnly( out, 'ROW_MAJOR_CONTIGUOUS', flags.ROW_MAJOR_CONTIGUOUS );\n\tsetReadOnly( out, 'COLUMN_MAJOR_CONTIGUOUS', flags.COLUMN_MAJOR_CONTIGUOUS );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default copyFlags;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a setter function for arrays having a specified number of dimensions.\n*\n* @private\n* @param {PositiveInteger} ndims - array dimensions\n* @returns {Function} setter\n*\n* @example\n* var f = set( 3 );\n* // returns <Function>\n*/\nfunction set( ndims ) {\n\tvar n = ndims - 1;\n\tvar f;\n\tvar i;\n\n\t// Code generation. Start with the function definition...\n\tf = 'return function set(';\n\n\t/*\n\t* Create the index input arguments...\n\t* > function set( i0, i1,..., v ) {\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i' + i + ',';\n\t}\n\t// Add the value argument...\n\tf += 'v){';\n\n\t// Create the function body...\n\n\t/*\n\t* Index into the array according to the offset and strides...\n\t* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;\n\t*/\n\tf += 'this._buffer[this._offset+';\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'this._strides[' + i + ']*i' + i;\n\t\tif ( i < n ) {\n\t\t\tf += '+';\n\t\t}\n\t}\n\tf += ']';\n\n\t// Set the value:\n\tf += '=v;';\n\n\t// Return the instance:\n\tf += 'return this;';\n\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=ndarray.ctor.set.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Function( f ) )(); // eslint-disable-line no-new-func\n\n\t/*\n\t* e.g.,\n\t*     function set( i0, i1, i2, v ) {\n\t*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;\n\t*         return this;\n\t*     }\n\t*/\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a getter function for arrays having a specified number of dimensions.\n*\n* @private\n* @param {PositiveInteger} ndims - array dimensions\n* @returns {Function} getter\n*\n* @example\n* var f = get( 3 );\n* // returns <Function>\n*/\nfunction get( ndims ) {\n\tvar n = ndims - 1;\n\tvar f;\n\tvar i;\n\n\t// Code generation. Start with function definition...\n\tf = 'return function get(';\n\n\t/*\n\t* Create the index input arguments...\n\t* > function get( i0, i1, ...) {\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i' + i;\n\t\tif ( i < n ) {\n\t\t\tf += ',';\n\t\t}\n\t}\n\tf += '){';\n\n\t// Create the function body...\n\n\t/*\n\t* Index into the array according to the offset and strides...\n\t* > return data[offset+strides[0]*i0+strides[1]*i1+...];\n\t*/\n\tf += 'return this._buffer[this._offset+';\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'this._strides[' + i + ']*i' + i;\n\t\tif ( i < n ) {\n\t\t\tf += '+';\n\t\t}\n\t}\n\tf += '];';\n\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=ndarray.ctor.get.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Function( f ) )(); // eslint-disable-line no-new-func\n\n\t/*\n\t* e.g.,\n\t*     function get( i0, i1, i2 ) {\n\t*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];\n\t*     }\n\t*/\n}\n\n\n// EXPORTS //\nexport default get;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element located a specified linear view index.\n*\n* @private\n* @param {integer} idx - linear view index\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\t// Trivial case where we have all positive strides...\n\tif ( this._iterationOrder === 1 ) {\n\t\treturn this._buffer[ this._offset + idx ];\n\t}\n\t// Trivial case where we have all negative strides...\n\tif ( this._iterationOrder === -1 ) {\n\t\treturn this._buffer[ this._offset - idx ];\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tndims = this._shape.length;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\treturn this._buffer[ ind ];\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\treturn this._buffer[ ind ];\n}\n\n\n// EXPORTS //\nexport default iget;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element located a specified linear view index.\n*\n* @private\n* @param {integer} idx - linear view index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\t// Trivial case where we have all positive strides...\n\tif ( this._iterationOrder === 1 ) {\n\t\tthis._buffer[ this._offset + idx ] = v;\n\t\treturn this;\n\t}\n\t// Trivial case where we have all negative strides...\n\tif ( this._iterationOrder === -1 ) {\n\t\tthis._buffer[ this._offset - idx ] = v;\n\t\treturn this;\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tndims = this._shape.length;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\tthis._buffer[ ind ] = v;\n\t\treturn this;\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\tthis._buffer[ ind ] = v;\n\treturn this;\n}\n\n\n// EXPORTS //\nexport default iset;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* @private\n* @param {...integer} idx - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\tthis._buffer[ idx ] = arguments[ i ];\n\treturn this;\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* @private\n* @param {...integer} idx - indices\n* @returns {*} array element\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\nexport default get;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tlen = this._length;\n\n\t// Build an object containing all ndarray properties needed to revive a serialized ndarray...\n\tout = {};\n\tout.type = 'ndarray';\n\tout.dtype = this.dtype;\n\tout.flags = {}; // TODO: reserved for future use\n\tout.order = this._order;\n\tout.shape = this._shape.slice();\n\tout.strides = this._strides.slice();\n\n\t// Flip the signs of negative strides:\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( out.strides[ i ] < 0 ) {\n\t\t\tout.strides[ i ] *= -1;\n\t\t}\n\t}\n\t// Cast data to generic array...\n\tout.data = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.data.push( this.iget( i ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default toJSON;\n","import __var_0__ from '@stdlib/string/replace';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar replace = __var_0__;\n\n\n// VARIABLES //\n\nvar CTORS = {\n\t'int8': 'new Int8Array( [ {{data}} ] )',\n\t'uint8': 'new Uint8Array( [ {{data}} ] )',\n\t'uint8c': 'new Uint8ClampedArray( [ {{data}} ] )',\n\t'int16': 'new Int16Array( [ {{data}} ] )',\n\t'uint16': 'new Uint16Array( [ {{data}} ] )',\n\t'int32': 'new Int32Array( [ {{data}} ] )',\n\t'uint32': 'new Uint32Array( [ {{data}} ] )',\n\t'float32': 'new Float32Array( [ {{data}} ] )',\n\t'float64': 'new Float64Array( [ {{data}} ] )',\n\t'generic': '[ {{data}} ]',\n\t'binary': 'new Buffer( [ {{data}} ] )'\n};\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a string.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {string} string representation\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar buffer;\n\tvar ndims;\n\tvar ctor;\n\tvar str;\n\tvar i;\n\n\tndims = this._shape.length;\n\n\t// Function to invoke to create an ndarray:\n\tstr = 'ndarray( ';\n\n\t// Data buffer parameter...\n\tbuffer = '';\n\tif ( this._length <= 100 ) {\n\t\tfor ( i = 0; i < this._length; i++ ) {\n\t\t\tbuffer += this.iget( i );\n\t\t\tif ( i < this._length-1 ) {\n\t\t\t\tbuffer += ', ';\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// First three values...\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tbuffer += this.iget( i );\n\t\t\tif ( i < 2 ) {\n\t\t\t\tbuffer += ', ';\n\t\t\t}\n\t\t}\n\t\tbuffer += ', ..., ';\n\n\t\t// Last three values...\n\t\tfor ( i = 2; i >= 0; i-- ) {\n\t\t\tbuffer += this.iget( this._length-1-i );\n\t\t\tif ( i > 0 ) {\n\t\t\t\tbuffer += ', ';\n\t\t\t}\n\t\t}\n\t}\n\tctor = CTORS[ this.dtype ];\n\tstr += replace( ctor, '{{data}}', buffer );\n\tstr += ', ';\n\n\t// Array shape:\n\tstr += '[ ' + this._shape.join( ', ' ) + ' ]';\n\tstr += ', ';\n\n\t// Stride array...\n\tstr += '[ ';\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( this._strides[ i ] < 0 ) {\n\t\t\tstr += -this._strides[ i ];\n\t\t} else {\n\t\t\tstr += this._strides[ i ];\n\t\t}\n\t\tif ( i < ndims-1 ) {\n\t\t\tstr += ', ';\n\t\t}\n\t}\n\tstr += ' ]';\n\tstr += ', ';\n\n\t// Buffer offset:\n\tstr += '0';\n\tstr += ', ';\n\n\t// Order:\n\tstr += '\\'' + this._order + '\\'';\n\n\t// Close the function call:\n\tstr += ' )';\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default toString;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/ndarray/base/bytes-per-element';\nimport __var_3__ from '@stdlib/ndarray/base/iteration-order';\nimport __var_4__ from '@stdlib/ndarray/base/strides2order';\nimport __var_5__ from './is_column_major_contiguous.js';\nimport __var_6__ from './is_row_major_contiguous.js';\nimport __var_7__ from './is_contiguous.js';\nimport __var_8__ from './copy_flags.js';\nimport __var_9__ from './compile_set.js';\nimport __var_10__ from './compile_get.js';\nimport __var_11__ from './iget.js';\nimport __var_12__ from './iset.js';\nimport __var_13__ from './set.js';\nimport __var_14__ from './get.js';\nimport __var_15__ from './tojson.js';\nimport __var_16__ from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\nimport __var_17__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar bytesPerElement = __var_2__;\nvar iterationOrder = __var_3__;\nvar strides2order = __var_4__;\nvar isColumnMajorContiguous = __var_5__;\nvar isRowMajorContiguous = __var_6__;\nvar isContiguous = __var_7__;\nvar copyFlags = __var_8__;\nvar compileSet = __var_9__;\nvar compileGet = __var_10__;\nvar igetValue = __var_11__;\nvar isetValue = __var_12__;\nvar setValue = __var_13__;\nvar getValue = __var_14__;\nvar toJSON = __var_15__;\nvar toString = __var_16__;\nvar defaults = __var_17__;\n\n\n// MAIN //\n\n/**\n* Returns an ndarray constructor.\n*\n* @param {string} dtype - data type\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {Options} [options] - function options\n* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation\n* @returns {Function} ndarray constructor\n*\n* @example\n* var ndarray = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ctor( dtype, ndims, options ) {\n\t/* eslint-disable no-restricted-syntax */\n\tvar opts = {};\n\tif ( arguments.length > 2 ) {\n\t\topts.codegen = ( options.codegen === void 0 ) ? defaults.codegen : options.codegen; // eslint-disable-line max-len\n\t} else {\n\t\topts.codegen = defaults.codegen;\n\t}\n\n\t/**\n\t* ndarray constructor.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n\t* @param {NonNegativeIntegerArray} shape - array shape\n\t* @param {IntegerArray} strides - array strides\n\t* @param {NonNegativeInteger} offset - index offset\n\t* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction ndarray( buffer, shape, strides, offset, order ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar contiguous;\n\t\tvar nbytes;\n\t\tvar ord;\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !(this instanceof ndarray) ) {\n\t\t\treturn new ndarray( buffer, shape, strides, offset, order );\n\t\t}\n\t\t// Compute the number of elements...\n\t\tlen = 1;\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tlen *= shape[ i ];\n\t\t}\n\t\t// Compute the number of bytes...\n\t\tif ( ndarray.BYTES_PER_ELEMENT ) {\n\t\t\tnbytes = ndarray.BYTES_PER_ELEMENT * len;\n\t\t} else {\n\t\t\tnbytes = null;\n\t\t}\n\t\t// Set private properties...\n\t\tthis._byteLength = nbytes;\n\t\tthis._buffer = buffer;\n\t\tthis._length = len;\n\t\tthis._offset = offset;\n\t\tthis._order = order;\n\t\tthis._shape = shape;\n\t\tthis._strides = strides;\n\n\t\tthis._iterationOrder = iterationOrder( strides );\n\n\t\t// Determine if the array can be stored contiguously:\n\t\tcontiguous = isContiguous( len, shape, strides, offset, this._iterationOrder ); // eslint-disable-line max-len\n\n\t\t// Infer the array \"order\" from the stride array (this is supplementary to the `order` parameter):\n\t\tord = strides2order( strides );\n\n\t\tthis._flags = {\n\t\t\t'ROW_MAJOR_CONTIGUOUS': isRowMajorContiguous( ord, contiguous ),\n\t\t\t'COLUMN_MAJOR_CONTIGUOUS': isColumnMajorContiguous( ord, contiguous )\n\t\t};\n\n\t\treturn this;\n\t}\n\n\t/**\n\t* Size (in bytes) of each array element (if known).\n\t*\n\t* @private\n\t* @name BYTES_PER_ELEMENT\n\t* @memberof ndarray\n\t* @type {(PositiveInteger|null)}\n\t*\n\t* @example\n\t* var nbytes = ndarray.BYTES_PER_ELEMENT;\n\t* // returns <number>\n\t*/\n\tsetReadOnly( ndarray, 'BYTES_PER_ELEMENT', bytesPerElement( dtype ) );\n\n\t/**\n\t* Underlying data type.\n\t*\n\t* @private\n\t* @name dtype\n\t* @memberof ndarray\n\t* @type {string}\n\t*\n\t* @example\n\t* var dtype = ndarray.dtype;\n\t* // returns <string>\n\t*/\n\tsetReadOnly( ndarray, 'dtype', dtype );\n\n\t/**\n\t* Number of dimensions.\n\t*\n\t* @private\n\t* @name ndims\n\t* @memberof ndarray\n\t* @type {PositiveInteger}\n\t*\n\t* @example\n\t* var ndims = ndarray.ndims;\n\t* // returns <number>\n\t*/\n\tsetReadOnly( ndarray, 'ndims', ndims );\n\n\t/**\n\t* Size (in bytes) of the array (if known).\n\t*\n\t* @private\n\t* @name byteLength\n\t* @memberof ndarray.prototype\n\t* @type {(NonNegativeInteger|null)}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var byteLength = x.byteLength;\n\t* // returns <number>\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'byteLength', function get() {\n\t\treturn this._byteLength;\n\t});\n\n\t/**\n\t* Size (in bytes) of each array element (if known).\n\t*\n\t* @private\n\t* @name BYTES_PER_ELEMENT\n\t* @memberof ndarray.prototype\n\t* @type {(PositiveInteger|null)}\n\t*\n\t* @example\n\t* var Float64Array = require( '@stdlib/array/float64' );\n\t*\n\t* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var nbytes = x.BYTES_PER_ELEMENT;\n\t* // returns 8\n\t*/\n\tsetReadOnly( ndarray.prototype, 'BYTES_PER_ELEMENT', ndarray.BYTES_PER_ELEMENT );\n\n\t/**\n\t* Pointer to the underlying data buffer.\n\t*\n\t* @private\n\t* @name data\n\t* @memberof ndarray.prototype\n\t* @type {(Array|TypedArray|Buffer)}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var data = x.data;\n\t* // returns [ 1, 2, 3, 4, 5, 6 ]\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'data', function get() {\n\t\treturn this._buffer;\n\t});\n\n\t/**\n\t* Underlying data type.\n\t*\n\t* @private\n\t* @name dtype\n\t* @memberof ndarray.prototype\n\t* @type {string}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var dtype = x.dtype;\n\t* // returns <string>\n\t*/\n\tsetReadOnly( ndarray.prototype, 'dtype', ndarray.dtype );\n\n\t/**\n\t* Information about the memory layout of the array.\n\t*\n\t* @private\n\t* @name flags\n\t* @memberof ndarray.prototype\n\t* @type {Object}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var flgs = x.flags;\n\t* // returns <Object>\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'flags', function get() {\n\t\treturn copyFlags( this._flags );\n\t});\n\n\t/**\n\t* Length of the array.\n\t*\n\t* @private\n\t* @name length\n\t* @memberof ndarray.prototype\n\t* @type {NonNegativeInteger}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var len = x.length;\n\t* // returns 6\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'length', function get() {\n\t\treturn this._length;\n\t});\n\n\t/**\n\t* Number of dimensions.\n\t*\n\t* @private\n\t* @name ndims\n\t* @memberof ndarray.prototype\n\t* @type {PositiveInteger}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var ndims = x.ndims;\n\t* // returns <number>\n\t*/\n\tsetReadOnly( ndarray.prototype, 'ndims', ndims );\n\n\t/**\n\t* Index offset which specifies the buffer index at which to start iterating over array elements.\n\t*\n\t* @private\n\t* @name offset\n\t* @memberof ndarray.prototype\n\t* @type {NonNegativeInteger}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var o = x.offset;\n\t* // returns 0\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'offset', function get() {\n\t\treturn this._offset;\n\t});\n\n\t/**\n\t* Array order.\n\t*\n\t* ## Notes\n\t*\n\t* -   The array order is either row-major (C-style) or column-major (Fortran-style).\n\t*\n\t*\n\t* @private\n\t* @name order\n\t* @memberof ndarray.prototype\n\t* @type {string}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var order = x.order;\n\t* // returns 'row-major'\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'order', function get() {\n\t\treturn this._order;\n\t});\n\n\t/**\n\t* Shape of the array.\n\t*\n\t* @private\n\t* @name shape\n\t* @memberof ndarray.prototype\n\t* @type {NonNegativeIntegerArray}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var s = x.shape;\n\t* // returns [ 3, 2 ]\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'shape', function get() {\n\t\treturn this._shape.slice();\n\t});\n\n\t/**\n\t* Index strides which specify how to access data along corresponding array dimensions.\n\t*\n\t* @private\n\t* @name strides\n\t* @memberof ndarray.prototype\n\t* @type {IntegerArray}\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var s = x.strides;\n\t* // returns [ 2, 1 ]\n\t*/\n\tsetReadOnlyAccessor( ndarray.prototype, 'strides', function get() {\n\t\treturn this._strides.slice();\n\t});\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @name get\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {...integer} idx - indices\n\t* @returns {*} array element\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.get( 1, 1 );\n\t* // returns 4\n\t*/\n\tsetReadOnly( ndarray.prototype, 'get', ( opts.codegen ) ? compileGet( ndims ) : getValue );\n\n\t/**\n\t* Returns an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @name iget\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {integer} idx - linear index\n\t* @returns {*} array element\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.iget( 3 );\n\t* // returns 4\n\t*/\n\tsetReadOnly( ndarray.prototype, 'iget', igetValue );\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @name set\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {...integer} idx - indices\n\t* @param {*} v - value to set\n\t* @returns {ndarray} ndarray instance\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.get( 1, 1 );\n\t* // returns 4\n\t*\n\t* x.set( 1, 1, 10 );\n\t*\n\t* var b = x.data;\n\t* // returns [ 1, 2, 3, 10, 5, 6 ]\n\t*\n\t* v = x.get( 1, 1 );\n\t* // returns 10\n\t*/\n\tsetReadOnly( ndarray.prototype, 'set', ( opts.codegen ) ? compileSet( ndims ) : setValue );\n\n\t/**\n\t* Sets an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @name iset\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {integer} idx - linear index\n\t* @param {*} v - value to set\n\t* @returns {ndarray} ndarray instance\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.iget( 3 );\n\t* // returns 4\n\t*\n\t* x.iset( 3, 10 );\n\t*\n\t* var b = x.data;\n\t* // returns [ 1, 2, 3, 10, 5, 6 ]\n\t*\n\t* v = x.iget( 3 );\n\t* // returns 10\n\t*/\n\tsetReadOnly( ndarray.prototype, 'iset', isetValue );\n\n\t/**\n\t* Serializes an ndarray as a string.\n\t*\n\t* ## Notes\n\t*\n\t* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n\t*\n\t*\n\t* @private\n\t* @name toString\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @returns {string} serialized ndarray\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 2;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var str = x.toString();\n\t* // e.g., returns 'ndarray( [ 3, 4, 5, 6, 7, 8 ], [ 3, 2 ], [ 2, 1 ], 0, \"row-major\" )'\n\t*/\n\tsetReadOnly( ndarray.prototype, 'toString', toString );\n\n\t/**\n\t* Serializes an ndarray as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndarray` instance.\n\t* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n\t*\n\t*\n\t* @private\n\t* @name toJSON\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @returns {Object} serialized ndarray\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 2;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var o = x.toJSON();\n\t* // e.g., returns { 'type': 'ndarray', 'dtype': '<dtype>', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }\n\t*/\n\tsetReadOnly( ndarray.prototype, 'toJSON', toJSON );\n\n\treturn ndarray;\n}\n\n\n// EXPORTS //\nexport default ctor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an ndarray constructor.\n*\n* @module @stdlib/ndarray/base/ctor\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/base/ctor' );\n*\n* var ndarray = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( buffer, shape, strides, offset, 'row-major' );\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}