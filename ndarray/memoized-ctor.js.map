{"version":3,"sources":["@stdlib/ndarray/memoized-ctor/lib/key.js","@stdlib/ndarray/memoized-ctor/lib/cache.js","@stdlib/ndarray/memoized-ctor/lib/main.js","@stdlib/ndarray/memoized-ctor/lib/index.js"],"names":["options","__var_0__","nopts","length","N","getKey","dtype","opts","key","i","JSON","stringify","cache","isObject","hasOwnProp","__var_1__","baseCtor","__var_2__","defaults","__var_3__","__var_4__","__var_5__","CACHE","ctor","ndims","ctors","len","f","arguments","TypeError","codegen","mode","submode","push"],"mappings":"6LAsBIA,EAAUC,EAKVC,EAAQF,EAAQG,OAChBC,EAAIF,EAAQ,EAyBhB,SAASG,EAAQC,EAAOC,GACvB,IAAIC,EACAC,EAGJ,IADAD,EAAMF,EAAQ,IACRG,EAAI,EAAGA,EAAIP,EAAOO,IAEvBD,GAAOR,EAASS,GAAM,IAAMC,KAAKC,UAAWJ,EAAMP,EAAQS,KACrDA,EAAIL,IACRI,GAAO,KAGT,OAAOA,ECpCR,SAASI,IACR,MAAO,GCHR,IAAIC,EAAWZ,EACXa,EAAaC,EACbC,EAAWC,EACXC,EAAWC,EACXd,EAASe,EACTR,EAAQS,EAKRC,EAAQV,IAqCZ,SAASW,EAAMjB,EAAOkB,EAAOxB,GAC5B,IAAIyB,EACAlB,EACAC,EACAkB,EACAC,EACAlB,EAGJ,GADAF,EAAO,GACFqB,UAAUzB,OAAS,EAAI,CAC3B,IAAMU,EAAUb,GACf,MAAM,IAAI6B,UAAW,iEAAmE7B,EAAU,MAE9Fc,EAAYd,EAAS,WACzBO,EAAKuB,QAAU9B,EAAQ8B,QAEvBvB,EAAKuB,QAAUZ,EAASY,QAEpBhB,EAAYd,EAAS,QACzBO,EAAKwB,KAAO/B,EAAQ+B,KAEpBxB,EAAKwB,KAAOb,EAASa,KAEjBjB,EAAYd,EAAS,WACzBO,EAAKyB,QAAUhC,EAAQgC,QAEvBzB,EAAKyB,QAAU,CAAEzB,EAAKwB,WAGvBxB,EAAKuB,QAAUZ,EAASY,QACxBvB,EAAKwB,KAAOb,EAASa,KACrBxB,EAAKyB,QAAU,CAAEzB,EAAKwB,MAMvB,GAJAvB,EAAMH,EAAQC,EAAOC,QAIN,KAHfkB,EAAQH,EAAOd,IAGS,CAKvB,IAJAmB,EAAIX,EAAUV,EAAOkB,EAAOjB,GAG5BkB,EAAQ,GACFhB,EAAI,EAAGA,EAAIe,EAAM,EAAGf,IACzBgB,EAAMQ,MAAM,GAIb,OAFAR,EAAMQ,KAAMN,GACZL,EAAOd,GAAQiB,EACRE,EAIR,GAAKH,IADLE,EAAMD,EAAMtB,SAGA,KADXwB,EAAIF,EAAOD,EAAM,MAEhBG,EAAIX,EAAUV,EAAOkB,EAAOjB,GAC5BkB,EAAOD,EAAM,GAAMG,OAEd,CACN,IAAMlB,EAAIiB,EAAI,EAAGjB,EAAIe,EAAOf,IAC3BgB,EAAMQ,MAAM,GAEbN,EAAIX,EAAUV,EAAOkB,EAAOjB,GAC5BkB,EAAMQ,KAAMN,GAEb,OAAOA,EC3FL,IAACJ,EAAOtB","sourcesContent":["import __var_0__ from './options.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar options = __var_0__;\n\n\n// VARIABLES //\n\nvar nopts = options.length;\nvar N = nopts - 1;\n\n\n// MAIN //\n\n/**\n* Returns a cache key.\n*\n* @private\n* @param {string} dtype - data type\n* @param {Options} opts - function options\n* @param {boolean} opts.codegen - boolean indicating whether to use code generation\n* @param {string} opts.mode - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} opts.submode - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @returns {string} cache key\n*\n* @example\n* var opts = {\n*     'codegen': true,\n*     'mode': 'throw',\n*     'submode': [ 'throw' ]\n* };\n* var key = getKey( 'float64', opts );\n* // returns 'float64;codegen=true,mode=\"throw\",submode=[\"throw\"]'\n*/\nfunction getKey( dtype, opts ) {\n\tvar key;\n\tvar i;\n\n\tkey = dtype + ';';\n\tfor ( i = 0; i < nopts; i++ ) {\n\t\t// Note: we assume that an option value can be uniquely serialized to a `string` via `JSON.stringify()`...\n\t\tkey += options[ i ] + '=' + JSON.stringify( opts[ options[i] ] );\n\t\tif ( i < N ) {\n\t\t\tkey += ',';\n\t\t}\n\t}\n\treturn key;\n}\n\n\n// EXPORTS //\nexport default getKey;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a constructor cache.\n*\n* @private\n* @returns {Object} constructor cache\n*/\nfunction cache() {\n\treturn {};\n}\n\n\n// EXPORTS //\nexport default cache;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/ndarray/ctor';\nimport __var_3__ from './defaults.json';\nimport __var_4__ from './key.js';\nimport __var_5__ from './cache.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar baseCtor = __var_2__;\nvar defaults = __var_3__;\nvar getKey = __var_4__;\nvar cache = __var_5__;\n\n\n// VARIABLES //\n\nvar CACHE = cache();\n\n\n// MAIN //\n\n/**\n* Returns a memoized ndarray constructor.\n*\n* @param {string} dtype - data type\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {Options} [options] - function options\n* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @throws {TypeError} first argument must be a supported ndarray data type\n* @throws {TypeError} second argument must be a number having a positive integer value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} memoized ndarray constructor\n*\n* @example\n* var f1 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var f2 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var bool = ( f1 === f2 );\n* // returns true\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = f1( buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ctor( dtype, ndims, options ) {\n\tvar ctors;\n\tvar opts;\n\tvar key;\n\tvar len;\n\tvar f;\n\tvar i;\n\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'codegen' ) ) {\n\t\t\topts.codegen = options.codegen;\n\t\t} else {\n\t\t\topts.codegen = defaults.codegen;\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t} else {\n\t\t\topts.mode = defaults.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t} else {\n\t\t\topts.submode = [ opts.mode ];\n\t\t}\n\t} else {\n\t\topts.codegen = defaults.codegen;\n\t\topts.mode = defaults.mode;\n\t\topts.submode = [ opts.mode ];\n\t}\n\tkey = getKey( dtype, opts );\n\tctors = CACHE[ key ];\n\n\t// If we didn't find any constructors, this could be due to 1) we have yet to create the constructor or 2) we have been provided invalid options. Either way, let's attempt to create an ndarray constructor...\n\tif ( ctors === void 0 ) {\n\t\tf = baseCtor( dtype, ndims, opts );\n\n\t\t// If the previous statement did not throw an error, we can cache the constructor...\n\t\tctors = []; // Note: we use an array to avoid unordered key look-up\n\t\tfor ( i = 0; i < ndims-1; i++ ) {\n\t\t\tctors.push( false );\n\t\t}\n\t\tctors.push( f );\n\t\tCACHE[ key ] = ctors;\n\t\treturn f;\n\t}\n\t// If the constructor has not already been created, create it; otherwise, return a memoized constructor...\n\tlen = ctors.length;\n\tif ( ndims <= len ) {\n\t\tf = ctors[ ndims-1 ];\n\t\tif ( f === false ) {\n\t\t\tf = baseCtor( dtype, ndims, opts );\n\t\t\tctors[ ndims-1 ] = f;\n\t\t}\n\t} else {\n\t\tfor ( i = len+1; i < ndims; i++ ) {\n\t\t\tctors.push( false );\n\t\t}\n\t\tf = baseCtor( dtype, ndims, opts );\n\t\tctors.push( f );\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\nexport default ctor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a memoized ndarray constructor.\n*\n* @module @stdlib/ndarray/memoized-ctor\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/memoized-ctor' );\n*\n* var f1 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var f2 = ctor( 'float64', 3 );\n* // returns <Function>\n*\n* var bool = ( f1 === f2 );\n* // returns true\n*\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = f1( buffer, shape, strides, offset, 'row-major' );\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}