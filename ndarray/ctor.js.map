{"version":3,"sources":["@stdlib/ndarray/ctor/lib/iget.js","@stdlib/ndarray/ctor/lib/iset.js","@stdlib/ndarray/ctor/lib/compile_get.js","@stdlib/ndarray/ctor/lib/get1d.js","@stdlib/ndarray/ctor/lib/get2d.js","@stdlib/ndarray/ctor/lib/get3d.js","@stdlib/ndarray/ctor/lib/get4d.js","@stdlib/ndarray/ctor/lib/getnd.js","@stdlib/ndarray/ctor/lib/get.js","@stdlib/ndarray/ctor/lib/compile_set.js","@stdlib/ndarray/ctor/lib/set1d.js","@stdlib/ndarray/ctor/lib/set2d.js","@stdlib/ndarray/ctor/lib/set3d.js","@stdlib/ndarray/ctor/lib/set4d.js","@stdlib/ndarray/ctor/lib/setnd.js","@stdlib/ndarray/ctor/lib/set.js","@stdlib/ndarray/ctor/lib/copy_array.js","@stdlib/ndarray/ctor/lib/validate.js","@stdlib/ndarray/ctor/lib/main.js","@stdlib/ndarray/ctor/lib/index.js"],"names":["isInteger","__var_0__","isPrimitive","getIndex","__var_1__","wrap","base","mode","idx","TypeError","this","_length","call","v","get","ndims","n","f","i","length","eval","__isint__","__get_index__","_shape","_buffer","_offset","_strides","mi","mj","j","mk","k","ml","l","M","len","ind","arguments","compile","get1d","get2d","__var_2__","get3d","__var_3__","get4d","__var_4__","getnd","__var_5__","codegen","set","set1d","set2d","set3d","set4d","setnd","copy","arr","out","push","isObject","hasOwnProp","isArray","isBoolean","isIndexMode","validate","opts","options","submode","join","slice","setReadOnly","isArrayLikeObject","isTypedArrayLike","isBuffer","isNonNegativeIntegerArray","primitives","isNonNegativeInteger","isPositiveInteger","__var_6__","isIntegerArray","__var_7__","isOrder","__var_8__","isDataType","__var_9__","isBufferLengthCompatible","__var_10__","bytesPerElement","__var_11__","baseCtor","__var_12__","inherit","__var_13__","defaults","__var_14__","igetValue","__var_15__","isetValue","__var_16__","getValue","__var_17__","setValue","__var_18__","__var_19__","__var_20__","MAX_DIMS","ctor","dtype","parent","err","RangeError","ndarray","buffer","shape","strides","offset","order","sh","st","Error","prototype","iget","iset"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// MODULES //\n\n/**\n* Returns a method for getting an array element located at a specified linear index.\n*\n* @private\n* @param {Function} base - parent (super) method\n* @param {string} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for getting an array element\n*/\nfunction wrap( base, mode ) {\n\treturn iget;\n\n\t/**\n\t* Returns an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @param {integer} idx - linear view index\n\t* @throws {TypeError} index must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction iget( idx ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index must be an integer value. Value: `'+idx+'`.' );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, mode );\n\t\treturn base.call( this, idx );\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// METHODS //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// MODULES //\n\n/**\n* Returns a method for setting an array element located at a specified linear index.\n*\n* @private\n* @param {Function} base - parent (super) method\n* @param {string} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( base, mode ) {\n\treturn iset;\n\n\t/**\n\t* Sets an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @param {integer} idx - linear view index\n\t* @param {*} v - value to set\n\t* @throws {TypeError} index must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction iset( idx, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index must be an integer value. Value: `'+idx+'`.' );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, mode );\n\t\tbase.call( this, idx, v );\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a getter function for arrays having a specified number of dimensions.\n*\n* @private\n* @param {PositiveInteger} ndims - array dimensions\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} getter\n*\n* @example\n* var f = get( 3 );\n* // returns <Function>\n*/\nfunction get( ndims, mode ) {\n\tvar n = ndims - 1;\n\tvar f;\n\tvar i;\n\n\t// Code generation. Start with function definition...\n\tf = '(function iife(){return function get(';\n\n\t/*\n\t* Create the index input arguments...\n\t* > function get( i0, i1, ...) {\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i' + i;\n\t\tif ( i < n ) {\n\t\t\tf += ',';\n\t\t}\n\t}\n\tf += '){';\n\n\t// Create the function body...\n\n\t/*\n\t* Type check each index.\n\t* > if ( !isInteger( i0 ) ) { throw new TypeError( ... ) }\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'if(!f.__isint__(i'+i+')){throw new TypeError(\\'invalid argument. Indices must be integer valued. Argument: '+i+'. Value: `\\'+i'+i+'+\\'`.\\');}';\n\t}\n\t/*\n\t* Resolve indices based on the index mode.\n\t* > i0 = getIndex( i0, shape[0]-1, mode );\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i'+i+'=f.__get_index__(i'+i+',this._shape['+i+']-1,\\''+mode[i%mode.length]+'\\');';\n\t}\n\t/*\n\t* Index into the array according to the offset and strides...\n\t* > return data[offset+strides[0]*i0+strides[1]*i1+...];\n\t*/\n\tf += 'return this._buffer[this._offset+';\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'this._strides['+i+']*i'+i;\n\t\tif ( i < n ) {\n\t\t\tf += '+';\n\t\t}\n\t}\n\tf += '];';\n\n\t// Close the function:\n\tf += '}';\n\n\t// Close the IIFE:\n\tf += '})()';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=ndarray.ctor.get.js';\n\n\t// Create the function in the current scope to allow access to required modules:\n\tf = eval( f ); // eslint-disable-line no-eval\n\tf.__isint__ = isInteger; // eslint-disable-line no-underscore-dangle\n\tf.__get_index__ = getIndex; // eslint-disable-line no-underscore-dangle\n\n\treturn f;\n\n\t/*\n\t* e.g.,\n\t*     function get( i0, i1, i2 ) {\n\t*         if ( !isInteger( i0 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );\n\t*         }\n\t*         if ( !isInteger( i1 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );\n\t*         }\n\t*         if ( !isInteger( i2 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );\n\t*         }\n\t*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );\n\t*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );\n\t*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );\n\t*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];\n\t*     }\n\t*/\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for returning an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for returning an array element\n*/\nfunction wrap( mode ) {\n\tmode = mode[ 0 ];\n\treturn get;\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index\n\t* @throws {TypeError} index must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction get( i ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mode );\n\t\treturn this._buffer[ this._offset + ( this._strides[0]*i ) ];\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for returning an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for returning an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\treturn get;\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j );\n\t\treturn this._buffer[ idx ];\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for returning an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for returning an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\tvar mk = mode[ 2%mode.length ];\n\treturn get;\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @param {integer} k - index for third dimension\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {TypeError} index for third dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction get( i, j, k ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\tif ( !isInteger( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tk = getIndex( k, this._shape[2]-1, mk );\n\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ); // eslint-disable-line max-len\n\t\treturn this._buffer[ idx ];\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for returning an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for returning an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\tvar mk = mode[ 2%mode.length ];\n\tvar ml = mode[ 3%mode.length ];\n\treturn get;\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @param {integer} k - index for third dimension\n\t* @param {integer} l - index for fourth dimension\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {TypeError} index for third dimension must be an integer value\n\t* @throws {TypeError} index for fourth dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction get( i, j, k, l ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\tif ( !isInteger( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );\n\t\t}\n\t\tif ( !isInteger( l ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for fourth dimension must be an integer value. Value: `'+l+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tk = getIndex( k, this._shape[2]-1, mk );\n\t\tl = getIndex( l, this._shape[3]-1, ml );\n\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ) + ( this._strides[3]*l ); // eslint-disable-line max-len\n\t\treturn this._buffer[ idx ];\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for returning an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for returning an array element\n*/\nfunction wrap( mode ) {\n\tvar M = mode.length;\n\treturn get;\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @param {...integer} idx - indices\n\t* @throws {TypeError} provided indices must be integer valued\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {*} array element\n\t*/\n\tfunction get() {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar len;\n\t\tvar idx;\n\t\tvar ind;\n\t\tvar i;\n\n\t\tlen = arguments.length;\n\t\tidx = this._offset;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Indices must be integer valued. Argument: '+i+'. Value: `'+arguments[i]+'`.' );\n\t\t\t}\n\t\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, mode[ i%M ] );\n\t\t\tidx += this._strides[ i ] * ind;\n\t\t}\n\t\treturn this._buffer[ idx ];\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from './compile_get.js';\nimport __var_1__ from './get1d.js';\nimport __var_2__ from './get2d.js';\nimport __var_3__ from './get3d.js';\nimport __var_4__ from './get4d.js';\nimport __var_5__ from './getnd.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar compile = __var_0__;\nvar get1d = __var_1__;\nvar get2d = __var_2__;\nvar get3d = __var_3__;\nvar get4d = __var_4__;\nvar getnd = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a method to return an array element.\n*\n* @private\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {boolean} codegen - boolean indicating whether to use code generation\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method to return an array element\n*/\nfunction get( ndims, codegen, mode ) {\n\tif ( codegen ) {\n\t\treturn compile( ndims, mode );\n\t}\n\tif ( ndims === 1 ) {\n\t\treturn get1d( mode );\n\t}\n\tif ( ndims === 2 ) {\n\t\treturn get2d( mode );\n\t}\n\tif ( ndims === 3 ) {\n\t\treturn get3d( mode );\n\t}\n\tif ( ndims === 4 ) {\n\t\treturn get4d( mode );\n\t}\n\treturn getnd( mode );\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a setter function for arrays having a specified number of dimensions.\n*\n* @private\n* @param {PositiveInteger} ndims - array dimensions\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} setter\n*\n* @example\n* var f = set( 3 );\n* // returns <Function>\n*/\nfunction set( ndims, mode ) {\n\tvar n = ndims - 1;\n\tvar f;\n\tvar i;\n\n\t// Code generation. Start with function definition...\n\tf = '(function iife(){return function set(';\n\n\t/*\n\t* Create the index input arguments along with the value to set...\n\t* > function set( i0, i1, ..., v ) {\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i' + i + ',';\n\t}\n\tf += 'v){';\n\n\t// Create the function body...\n\n\t/*\n\t* Type check each index.\n\t* > if ( !isInteger( i0 ) ) { throw new TypeError( ... ) }\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'if(!f.__isint__(i'+i+')){throw new TypeError(\\'invalid argument. Indices must be integer valued. Argument: '+i+'. Value: `\\'+i'+i+'+\\'`.\\');}';\n\t}\n\t/*\n\t* Resolve indices based on the index mode.\n\t* > i0 = getIndex( i0, shape[0]-1, mode );\n\t*/\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'i'+i+'=f.__get_index__(i'+i+',this._shape['+i+']-1,\\''+mode[i%mode.length]+'\\');';\n\t}\n\t/*\n\t* Index into the array according to the offset and strides...\n\t* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;\n\t*/\n\tf += 'this._buffer[this._offset+';\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tf += 'this._strides['+i+']*i'+i;\n\t\tif ( i < n ) {\n\t\t\tf += '+';\n\t\t}\n\t}\n\tf += ']=v;';\n\n\t// Return the ndarray instance:\n\tf += 'return this;';\n\n\t// Close the function:\n\tf += '}';\n\n\t// Close the IIFE:\n\tf += '})()';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=ndarray.ctor.set.js';\n\n\t// Create the function in the current scope to allow access to required modules:\n\tf = eval( f ); // eslint-disable-line no-eval\n\tf.__isint__ = isInteger; // eslint-disable-line no-underscore-dangle\n\tf.__get_index__ = getIndex; // eslint-disable-line no-underscore-dangle\n\n\treturn f;\n\n\t/*\n\t* e.g.,\n\t*     function set( i0, i1, i2, v ) {\n\t*         if ( !isInteger( i0 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );\n\t*         }\n\t*         if ( !isInteger( i1 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );\n\t*         }\n\t*         if ( !isInteger( i2 ) ) {\n\t*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );\n\t*         }\n\t*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );\n\t*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );\n\t*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );\n\t*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;\n\t*         return this;\n\t*     }\n\t*/\n}\n\n\n// EXPORTS //\nexport default set;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for setting an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( mode ) {\n\tmode = mode[ 0 ];\n\treturn set;\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index\n\t* @param {*} v - value to set\n\t* @throws {TypeError} index must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction set( i, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mode );\n\t\tthis._buffer[ this._offset + ( this._strides[0]*i ) ] = v;\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for setting an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\treturn set;\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @param {*} v - value to set\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j );\n\t\tthis._buffer[ idx ] = v;\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for setting an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\tvar mk = mode[ 2%mode.length ];\n\treturn set;\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @param {integer} k - index for third dimension\n\t* @param {*} v - value to set\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {TypeError} index for third dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction set( i, j, k, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\tif ( !isInteger( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tk = getIndex( k, this._shape[2]-1, mk );\n\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ); // eslint-disable-line max-len\n\t\tthis._buffer[ idx ] = v;\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for setting an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( mode ) {\n\tvar mi = mode[ 0%mode.length ];\n\tvar mj = mode[ 1%mode.length ];\n\tvar mk = mode[ 2%mode.length ];\n\tvar ml = mode[ 3%mode.length ];\n\treturn set;\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @param {integer} i - index for first dimension\n\t* @param {integer} j - index for second dimension\n\t* @param {integer} k - index for third dimension\n\t* @param {integer} l - index for fourth dimension\n\t* @param {*} v - value to set\n\t* @throws {TypeError} index for first dimension must be an integer value\n\t* @throws {TypeError} index for second dimension must be an integer value\n\t* @throws {TypeError} index for third dimension must be an integer value\n\t* @throws {TypeError} index for fourth dimension must be an integer value\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction set( i, j, k, l, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx;\n\t\tif ( !isInteger( i ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );\n\t\t}\n\t\tif ( !isInteger( j ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );\n\t\t}\n\t\tif ( !isInteger( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );\n\t\t}\n\t\tif ( !isInteger( l ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index for fourth dimension must be an integer value. Value: `'+l+'`.' );\n\t\t}\n\t\ti = getIndex( i, this._shape[0]-1, mi );\n\t\tj = getIndex( j, this._shape[1]-1, mj );\n\t\tk = getIndex( k, this._shape[2]-1, mk );\n\t\tl = getIndex( l, this._shape[3]-1, ml );\n\n\t\tidx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ) + ( this._strides[3]*l ); // eslint-disable-line max-len\n\t\tthis._buffer[ idx ] = v;\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/ndarray/base/ind';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar getIndex = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a method for setting an array element.\n*\n* @private\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method for setting an array element\n*/\nfunction wrap( mode ) {\n\tvar M = mode.length;\n\treturn set;\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @param {...integer} idx - indices\n\t* @param {*} v - value to set\n\t* @throws {TypeError} provided indices must be integer valued\n\t* @throws {RangeError} index exceeds array dimensions\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction set() {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar len;\n\t\tvar idx;\n\t\tvar ind;\n\t\tvar i;\n\n\t\tlen = arguments.length;\n\t\tidx = this._offset;\n\t\tfor ( i = 0; i < len-1; i++ ) {\n\t\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Indices must be integer valued. Argument: '+i+'. Value: `'+arguments[i]+'`.' );\n\t\t\t}\n\t\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, mode[ i%M ] );\n\t\t\tidx += this._strides[ i ] * ind;\n\t\t}\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from './compile_set.js';\nimport __var_1__ from './set1d.js';\nimport __var_2__ from './set2d.js';\nimport __var_3__ from './set3d.js';\nimport __var_4__ from './set4d.js';\nimport __var_5__ from './setnd.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar compile = __var_0__;\nvar set1d = __var_1__;\nvar set2d = __var_2__;\nvar set3d = __var_3__;\nvar set4d = __var_4__;\nvar setnd = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a method to set an array element.\n*\n* @private\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {boolean} codegen - boolean indicating whether to use code generation\n* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions\n* @returns {Function} method to set an array element\n*/\nfunction set( ndims, codegen, mode ) {\n\tif ( codegen ) {\n\t\treturn compile( ndims, mode );\n\t}\n\tif ( ndims === 1 ) {\n\t\treturn set1d( mode );\n\t}\n\tif ( ndims === 2 ) {\n\t\treturn set2d( mode );\n\t}\n\tif ( ndims === 3 ) {\n\t\treturn set3d( mode );\n\t}\n\tif ( ndims === 4 ) {\n\t\treturn set4d( mode );\n\t}\n\treturn setnd( mode );\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the contents of array-like object to a new array.\n*\n*\n* @private\n* @param {ArrayLike} arr - input array\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0 ];\n*\n* var out = copy( arr, arr.length );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( arr === out );\n* // returns false\n*/\nfunction copy( arr, len ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default copy;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/ndarray/base/assert/is-index-mode';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isArray = __var_2__;\nvar isBoolean = __var_3__.isPrimitive;\nvar isIndexMode = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.codegen] - boolean indicating whether to use code generation\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'clamp',\n*     'submode': [ 'throw', 'wrap', 'clamp' ],\n*     'codegen': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'codegen' ) ) {\n\t\topts.codegen = options.codegen;\n\t\tif ( !isBoolean( opts.codegen ) ) {\n\t\t\treturn new TypeError( 'invalid option. `codegen` option must be a boolean primitive. Option: `' + opts.codegen + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mode` option must be a recognized mode. Option: `' + opts.mode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t\tif ( !isArray( opts.submode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `submode` option must be an array containing recognized modes. Option: `' + opts.submode + '`.' );\n\t\t}\n\t\tif ( opts.submode.length === 0 ) {\n\t\t\treturn new TypeError( 'invalid option. `submode` option must be an array containing recognized modes. Option: `' + opts.submode.join( ',' ) + '`.' );\n\t\t}\n\t\tfor ( i = 0; i < opts.submode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.submode[ i ] ) ) {\n\t\t\t\treturn new TypeError( 'invalid option. Each `submode` must be a recognized modes. Option: `' + opts.submode[ i ] + '`.' );\n\t\t\t}\n\t\t}\n\t\topts.submode = opts.submode.slice();\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-typed-array-like';\nimport __var_3__ from '@stdlib/assert/is-buffer';\nimport __var_4__ from '@stdlib/assert/is-nonnegative-integer-array';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_6__ from '@stdlib/assert/is-positive-integer';\nimport __var_7__ from '@stdlib/assert/is-integer-array';\nimport __var_8__ from '@stdlib/ndarray/base/assert/is-order';\nimport __var_9__ from '@stdlib/ndarray/base/assert/is-data-type';\nimport __var_10__ from '@stdlib/ndarray/base/assert/is-buffer-length-compatible';\nimport __var_11__ from '@stdlib/ndarray/base/bytes-per-element';\nimport __var_12__ from '@stdlib/ndarray/base/memoized-ctor';\nimport __var_13__ from '@stdlib/utils/inherit';\nimport __var_14__ from './defaults.json';\nimport __var_15__ from './iget.js';\nimport __var_16__ from './iset.js';\nimport __var_17__ from './get.js';\nimport __var_18__ from './set.js';\nimport __var_19__ from './copy_array.js';\nimport __var_20__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isArrayLikeObject = __var_1__;\nvar isTypedArrayLike = __var_2__;\nvar isBuffer = __var_3__;\nvar isNonNegativeIntegerArray = __var_4__.primitives;\nvar isNonNegativeInteger = __var_5__.isPrimitive;\nvar isPositiveInteger = __var_6__.isPrimitive;\nvar isIntegerArray = __var_7__.primitives;\nvar isOrder = __var_8__;\nvar isDataType = __var_9__;\nvar isBufferLengthCompatible = __var_10__;\nvar bytesPerElement = __var_11__;\nvar baseCtor = __var_12__;\nvar inherit = __var_13__;\nvar defaults = __var_14__;\nvar igetValue = __var_15__;\nvar isetValue = __var_16__;\nvar getValue = __var_17__;\nvar setValue = __var_18__;\nvar copy = __var_19__;\nvar validate = __var_20__;\n\n\n// VARIABLES //\n\n/*\n* See the following references:\n*\n* -  https://stackoverflow.com/questions/22747068/is-there-a-max-number-of-arguments-javascript-functions-can-accept\n* -  https://bugs.webkit.org/show_bug.cgi?id=80797\n* -  https://github.com/numpy/numpy/issues/5744\n*\n* Note that the maximum number of function arguments can vary from engine to engine. Here, we choose something of a lowest common denominator which may **not** be valid everywhere.\n*/\nvar MAX_DIMS = 32767|0;\n\n\n// MAIN //\n\n/**\n* Returns an ndarray constructor.\n*\n* @param {string} dtype - data type\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {Options} [options] - function options\n* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @throws {TypeError} first argument must be a supported ndarray data type\n* @throws {TypeError} second argument must be a number having a positive integer value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {Function} ndarray constructor\n*\n* @example\n* var ndarray = ctor( 'generic', 2 );\n* // returns <Function>\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ctor( dtype, ndims, options ) {\n\tvar parent;\n\tvar opts;\n\tvar err;\n\n\tif ( !isDataType( dtype ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a supported ndarray data type. Value: `' + dtype + '`.' );\n\t}\n\tif ( !isPositiveInteger( ndims ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + ndims + '`.' );\n\t}\n\tif ( ndims > MAX_DIMS ) {\n\t\tthrow new RangeError( 'invalid argument. Number of dimensions must not exceed ' + MAX_DIMS + ' due to stack limits. Value: `' + ndims + '`.' );\n\t}\n\topts = {};\n\topts.codegen = defaults.codegen;\n\topts.mode = defaults.mode;\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.submode === void 0 ) {\n\t\topts.submode = [ opts.mode ];\n\t}\n\t// Create a lower-level base constructor:\n\tparent = baseCtor( dtype, ndims, opts );\n\n\t/**\n\t* ndarray constructor.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n\t* @param {NonNegativeIntegerArray} shape - array shape\n\t* @param {IntegerArray} strides - array strides\n\t* @param {NonNegativeInteger} offset - index offset\n\t* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n\t* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n\t* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n\t* @throws {Error} `shape` argument length must equal the number of dimensions\n\t* @throws {TypeError} `strides` argument must be an array-like object containing integers\n\t* @throws {Error} `strides` argument length must equal the number of dimensions\n\t* @throws {TypeError} `offset` argument must be a nonnegative integer\n\t* @throws {TypeError} `order` argument must be a supported ndarray order\n\t* @throws {Error} `buffer` argument must be compatible with specified meta data\n\t* @returns {ndarray} ndarray instance\n\t*/\n\tfunction ndarray( buffer, shape, strides, offset, order ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar sh;\n\t\tvar st;\n\t\tif ( !(this instanceof ndarray) ) {\n\t\t\treturn new ndarray( buffer, shape, strides, offset, order );\n\t\t}\n\t\tif (\n\t\t\t!isArrayLikeObject( buffer ) &&\n\t\t\t!isTypedArrayLike( buffer ) &&\n\t\t\t!isBuffer( buffer )\n\t\t) {\n\t\t\tthrow new TypeError( 'invalid argument. `buffer` argument must be an array-like object, typed-array-like, or a Buffer. Value: `' + buffer + '`.' );\n\t\t}\n\t\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `shape` argument must be an array-like object containing nonnegative integers. Value: `' + shape + '`.' );\n\t\t}\n\t\tif ( shape.length !== ndims ) {\n\t\t\tthrow new Error( 'invalid argument. `shape` length must match the number of dimensions. Expected number of dimensions: ' + ndims + '. Shape length: ' + shape.length + '.' );\n\t\t}\n\t\tif ( !isIntegerArray( strides ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `strides` argument must be an array-like object containing integers. Value: `' + strides + '`.' );\n\t\t}\n\t\tif ( strides.length !== ndims ) {\n\t\t\tthrow new Error( 'invalid argument. `strides` length must match the number of dimensions. Expected number of dimensions: ' + ndims + '. Strides length: ' + strides.length + '.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `offset` argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t\t}\n\t\tif ( !isOrder( order ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `order` argument must be a supported order. Value: `' + order + '`.' );\n\t\t}\n\t\tif ( !isBufferLengthCompatible( buffer.length, shape, strides, offset ) ) { // eslint-disable-line max-len\n\t\t\tthrow new Error( 'invalid arguments. The input buffer is incompatible with the specified meta data. Ensure that the offset is valid with regard to the stride array and that the buffer has enough elements to satisfy the desired array shape.' );\n\t\t}\n\t\t// Copy `shape` and `strides` to prevent external mutation:\n\t\tsh = copy( shape, ndims );\n\t\tst = copy( strides, ndims );\n\n\t\t// Call the parent constructor:\n\t\tparent.call( this, buffer, sh, st, offset, order );\n\n\t\t// Cache references to the parent constructor and parent constructor methods:\n\t\tsetReadOnly( this, '_parent', parent );\n\n\t\treturn this;\n\n\t\t/* eslint-enable no-invalid-this */\n\t}\n\n\t/**\n\t* Size (in bytes) of each array element (if known).\n\t*\n\t* @private\n\t* @name BYTES_PER_ELEMENT\n\t* @memberof ndarray\n\t* @type {(PositiveInteger|null)}\n\t*\n\t* @example\n\t* var nbytes = ndarray.BYTES_PER_ELEMENT;\n\t* // returns <number>\n\t*/\n\tsetReadOnly( ndarray, 'BYTES_PER_ELEMENT', bytesPerElement( dtype ) );\n\n\t/**\n\t* Underlying data type.\n\t*\n\t* @private\n\t* @name dtype\n\t* @memberof ndarray\n\t* @type {string}\n\t*\n\t* @example\n\t* var dtype = ndarray.dtype;\n\t* // returns <string>\n\t*/\n\tsetReadOnly( ndarray, 'dtype', dtype );\n\n\t/**\n\t* Number of dimensions.\n\t*\n\t* @private\n\t* @name ndims\n\t* @memberof ndarray\n\t* @type {PositiveInteger}\n\t*\n\t* @example\n\t* var ndims = ndarray.ndims;\n\t* // returns <number>\n\t*/\n\tsetReadOnly( ndarray, 'ndims', ndims );\n\n\t// Inherit from the parent constructor:\n\tinherit( ndarray, parent );\n\n\t/**\n\t* Returns an array element.\n\t*\n\t* @private\n\t* @name get\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {...integer} idx - indices\n\t* @returns {*} array element\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.get( 1, 1 );\n\t* // returns 4\n\t*/\n\tsetReadOnly( ndarray.prototype, 'get', getValue( ndims, opts.codegen, opts.submode ) );\n\n\t/**\n\t* Returns an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @name iget\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {integer} idx - linear index\n\t* @returns {*} array element\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.iget( 3 );\n\t* // returns 4\n\t*/\n\tsetReadOnly( ndarray.prototype, 'iget', igetValue( parent.prototype.iget, opts.mode ) );\n\n\t/**\n\t* Sets an array element.\n\t*\n\t* @private\n\t* @name set\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {...integer} idx - indices\n\t* @param {*} v - value to set\n\t* @returns {ndarray} ndarray instance\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.get( 1, 1 );\n\t* // returns 4\n\t*\n\t* x.set( 1, 1, 10 );\n\t*\n\t* var b = x.data;\n\t* // returns [ 1, 2, 3, 10, 5, 6 ]\n\t*\n\t* v = x.get( 1, 1 );\n\t* // returns 10\n\t*/\n\tsetReadOnly( ndarray.prototype, 'set', setValue( ndims, opts.codegen, opts.submode ) );\n\n\t/**\n\t* Sets an array element located at a specified linear index.\n\t*\n\t* @private\n\t* @name iset\n\t* @memberof ndarray.prototype\n\t* @type {Function}\n\t* @param {integer} idx - linear index\n\t* @param {*} v - value to set\n\t* @returns {ndarray} ndarray instance\n\t*\n\t* @example\n\t* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n\t* var shape = [ 3, 2 ];\n\t* var strides = [ 2, 1 ];\n\t* var offset = 0;\n\t*\n\t* var x = ndarray( buffer, shape, strides, offset, 'row-major' );\n\t*\n\t* var v = x.iget( 3 );\n\t* // returns 4\n\t*\n\t* x.iset( 3, 10 );\n\t*\n\t* var b = x.data;\n\t* // returns [ 1, 2, 3, 10, 5, 6 ]\n\t*\n\t* v = x.iget( 3 );\n\t* // returns 10\n\t*/\n\tsetReadOnly( ndarray.prototype, 'iset', isetValue( parent.prototype.iset, opts.mode ) );\n\n\treturn ndarray;\n}\n\n\n// EXPORTS //\nexport default ctor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an ndarray constructor.\n*\n* @module @stdlib/ndarray/ctor\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/ctor' );\n*\n* var ndarray = ctor( 'generic', 3 );\n* // returns <Function>\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( buffer, shape, strides, offset, 'row-major' );\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}