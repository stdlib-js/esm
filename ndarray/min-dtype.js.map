{"version":3,"sources":["@stdlib/ndarray/min-dtype/lib/main.js","@stdlib/ndarray/min-dtype/lib/index.js"],"names":["isInteger","__var_0__","isNegativeZero","__var_1__","PINF","__var_2__","NINF","__var_3__","FLOAT32_SMALLEST_SUBNORMAL","__var_4__","INT8_MIN","__var_5__","INT16_MIN","__var_6__","INT32_MIN","__var_7__","UINT8_MAX","__var_8__","UINT16_MAX","__var_9__","UINT32_MAX","__var_10__","minDataType","value"],"mappings":"ojBAgCA,IAAIA,EAAYC,EACZC,EAAiBC,EACjBC,EAAOC,EACPC,EAAOC,EACPC,EAA6BC,EAC7BC,EAAWC,EACXC,EAAYC,EACZC,EAAYC,EACZC,EAAYC,EACZC,EAAaC,EACbC,EAAaC,EAmBjB,SAASC,EAAaC,GACrB,MAAsB,iBAAVA,EACJ,UAEHA,GAAUA,GAASA,IAAUnB,GAAQmB,IAAUjB,EAC5C,UAEHN,EAAWuB,GACA,IAAVA,GAAerB,EAAgBqB,GAC5B,UAEHA,EAAQ,EACPA,GAASb,EACN,OAEHa,GAASX,EACN,QAEHW,GAAST,EACN,QAED,UAEHS,GAASP,EACN,QAEHO,GAASL,EACN,SAEHK,GAASH,EACN,SAED,UAIPG,GAASf,GACTe,EAAQf,EAED,UAGD,UClEL,IAACc,EAAcrB","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\nimport __var_4__ from '@stdlib/constants/math/float32-smallest-subnormal'; // eslint-disable-line id-length\nimport __var_5__ from '@stdlib/constants/math/int8-min';\nimport __var_6__ from '@stdlib/constants/math/int16-min';\nimport __var_7__ from '@stdlib/constants/math/int32-min';\nimport __var_8__ from '@stdlib/constants/math/uint8-max';\nimport __var_9__ from '@stdlib/constants/math/uint16-max';\nimport __var_10__ from '@stdlib/constants/math/uint32-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__;\nvar isNegativeZero = __var_1__;\nvar PINF = __var_2__;\nvar NINF = __var_3__;\nvar FLOAT32_SMALLEST_SUBNORMAL = __var_4__;\nvar INT8_MIN = __var_5__;\nvar INT16_MIN = __var_6__;\nvar INT32_MIN = __var_7__;\nvar UINT8_MAX = __var_8__;\nvar UINT16_MAX = __var_9__;\nvar UINT32_MAX = __var_10__;\n\n\n// MAIN //\n\n/**\n* Returns the minimum ndarray data type of the closest \"kind\" necessary for storing a provided scalar value.\n*\n* @param {*} value - scalar value\n* @returns {string} ndarray data type\n*\n* @example\n* var dt = minDataType( 3.141592653589793 );\n* // returns 'float32'\n*\n* @example\n* var dt = minDataType( 3 );\n* // returns 'uint8'\n*/\nfunction minDataType( value ) {\n\tif ( typeof value !== 'number' ) {\n\t\treturn 'generic';\n\t}\n\tif ( value !== value || value === PINF || value === NINF ) {\n\t\treturn 'float32';\n\t}\n\tif ( isInteger( value ) ) {\n\t\tif ( value === 0 && isNegativeZero( value ) ) {\n\t\t\treturn 'float32';\n\t\t}\n\t\tif ( value < 0 ) {\n\t\t\tif ( value >= INT8_MIN ) {\n\t\t\t\treturn 'int8';\n\t\t\t}\n\t\t\tif ( value >= INT16_MIN ) {\n\t\t\t\treturn 'int16';\n\t\t\t}\n\t\t\tif ( value >= INT32_MIN ) {\n\t\t\t\treturn 'int32';\n\t\t\t}\n\t\t\treturn 'float64';\n\t\t}\n\t\tif ( value <= UINT8_MAX ) {\n\t\t\treturn 'uint8';\n\t\t}\n\t\tif ( value <= UINT16_MAX ) {\n\t\t\treturn 'uint16';\n\t\t}\n\t\tif ( value <= UINT32_MAX ) {\n\t\t\treturn 'uint32';\n\t\t}\n\t\treturn 'float64';\n\t}\n\t// Assume that if we are provided a tiny value, we don't want to underflow to zero by storing as `float32`...\n\tif (\n\t\tvalue > -FLOAT32_SMALLEST_SUBNORMAL &&\n\t\tvalue < FLOAT32_SMALLEST_SUBNORMAL\n\t) {\n\t\treturn 'float64';\n\t}\n\t// Any number which reaches this point is less than the maximum single-precision floating-point number, as floating-point format supports a limited number of decimals (e.g., (1.0+EPS)*10**15 => 1000000000000000.2, which is less than ~3.4e38)...\n\treturn 'float32';\n}\n\n\n// EXPORTS //\nexport default minDataType;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the minimum ndarray data type of the closest \"kind\" necessary for storing a provided scalar value.\n*\n* @module @stdlib/ndarray/min-dtype\n*\n* @example\n* var minDataType = require( '@stdlib/ndarray/min-dtype' );\n*\n* var dt = minDataType( 3.141592653589793 );\n* // returns 'float32'\n*\n* dt = minDataType( 3 );\n* // returns 'uint8'\n*/\n\n// MODULES //\nvar minDataType = __var_0__;\n\n\n// EXPORTS //\nexport default minDataType;\n"]}