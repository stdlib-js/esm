{"version":3,"sources":["@stdlib/ndarray/same-kind-casts/lib/main.js","@stdlib/ndarray/same-kind-casts/lib/index.js"],"names":["TABLE","objectKeys","__var_0__","hasOwnProp","__var_1__","SAME_KIND_CASTS","__var_2__","generateFullTable","dtypes","ntypes","out","tmp","dt1","dt2","o","j","i","length","generateTable","push","sameKindCasts","dtype","arguments","slice"],"mappings":"qFA+BIA,8rCAPAC,EAAaC,EACbC,EAAaC,EACbC,EAAkBC,EAgBtB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAN,EAAM,GAEND,GADAD,EAASP,EAAYI,IACLY,OACVD,EAAI,EAAGA,EAAIP,EAAQO,IAAM,CAI9B,IAHAJ,EAAMJ,EAAQQ,GACdF,EAAIT,EAAiBO,GACrBD,EAAM,GACAI,EAAI,EAAGA,EAAIN,EAAQM,IAExBJ,EADAE,EAAML,EAAQO,IACDD,EAAGD,GAEjBH,EAAKE,GAAQD,EAEd,OAAOD,EASR,SAASQ,IACR,IAAIV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAN,EAAM,GAEND,GADAD,EAASP,EAAYI,IACLY,OACVD,EAAI,EAAGA,EAAIP,EAAQO,IAAM,CAI9B,IAHAJ,EAAMJ,EAAQQ,GACdF,EAAIT,EAAiBO,GACrBD,EAAM,GACAI,EAAI,EAAGA,EAAIN,EAAQM,IAEN,IAAbD,EADLD,EAAML,EAAQO,KAEbJ,EAAIQ,KAAMN,GAGZH,EAAKE,GAAQD,EAEd,OAAOD,EAgBR,SAASU,EAAeC,GACvB,OAA0B,IAArBC,UAAUL,OACPV,UAEO,IAAVP,IAEJA,EAAQkB,KAEJf,EAAYH,EAAOqB,GAChBrB,EAAOqB,GAAQE,QAEhB,MC9FL,IAACH,EAAgBlB","sourcesContent":["import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from './same_kind_casts.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar hasOwnProp = __var_1__;\nvar SAME_KIND_CASTS = __var_2__;\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of same \"kind\" casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAME_KIND_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAME_KIND_CASTS[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n/**\n* Generates a table of same \"kind\" casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAME_KIND_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAME_KIND_CASTS[ dt1 ];\n\t\ttmp = [];\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\tif ( o[ dt2 ] === 1 ) {\n\t\t\t\ttmp.push( dt2 );\n\t\t\t}\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same \"kind\".\n*\n* @param {string} [dtype] - ndarray data type\n* @returns {(Object|StringArray|null)} list of ndarray data types or null\n*\n* @example\n* var list = sameKindCasts( 'float32' );\n* // returns [...]\n*/\nfunction sameKindCasts( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\t// Lazily generate table...\n\t\tTABLE = generateTable();\n\t}\n\tif ( hasOwnProp( TABLE, dtype ) ) {\n\t\treturn TABLE[ dtype ].slice();\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default sameKindCasts;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same \"kind\".\n*\n* @module @stdlib/ndarray/same-kind-casts\n*\n* @example\n* var sameKindCasts = require( '@stdlib/ndarray/same-kind-casts' );\n*\n* var list = sameKindCasts( 'float32' );\n* // returns [...]\n*/\n\n// MODULES //\nvar sameKindCasts = __var_0__;\n\n\n// EXPORTS //\nexport default sameKindCasts;\n"]}