{"version":3,"sources":["@stdlib/ndarray/promotion-rules/lib/main.js","@stdlib/ndarray/promotion-rules/lib/index.js"],"names":["objectKeys","__var_0__","hasOwnProp","__var_1__","PROMOTION_RULES","__var_2__","generateFullTable","dtypes","ntypes","out","tmp","dt1","dt2","o","j","i","length","promotionRules","dtype1","dtype2","arguments"],"mappings":"qhEAwBIA,EAAaC,EACbC,EAAaC,EACbC,EAAkBC,EAWtB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAN,EAAM,GAEND,GADAD,EAASP,EAAYI,IACLY,OACVD,EAAI,EAAGA,EAAIP,EAAQO,IAAM,CAI9B,IAHAJ,EAAMJ,EAAQQ,GACdF,EAAIT,EAAiBO,GACrBD,EAAM,GACAI,EAAI,EAAGA,EAAIN,EAAQM,IAExBJ,EADAE,EAAML,EAAQO,IACDD,EAAGD,GAEjBH,EAAKE,GAAQD,EAEd,OAAOD,EA6BR,SAASQ,EAAgBC,EAAQC,GAChC,IAAIN,EACJ,OAA0B,IAArBO,UAAUJ,OACPV,IAEHJ,EAAYE,EAAiBc,KACjCL,EAAIT,EAAiBc,GAChBhB,EAAYW,EAAGM,IACZN,EAAGM,GAGL,KC1DL,IAACF,EAAiBhB","sourcesContent":["import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from './promotion_rules.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar hasOwnProp = __var_1__;\nvar PROMOTION_RULES = __var_2__;\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of promotion rules.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( PROMOTION_RULES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = PROMOTION_RULES[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the ndarray data type with the smallest size and closest \"kind\" to which ndarray data types can be safely cast.\n*\n* @param {string} [dtype1] - ndarray data type\n* @param {string} [dtype2] - ndarray data type\n* @returns {(Object|integer|string|null)} promotion rule(s) or null\n*\n* @example\n* var table = promotionRules();\n* // returns {...}\n*\n* @example\n* var dt = promotionRules( 'float32', 'uint32' );\n* // returns 'float64'\n*\n* @example\n* var dt = promotionRules( 'binary', 'generic' );\n* // returns -1\n*\n* @example\n* var dt = promotionRules( 'float32', 'foo' );\n* // returns null\n*/\nfunction promotionRules( dtype1, dtype2 ) {\n\tvar o;\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( hasOwnProp( PROMOTION_RULES, dtype1 ) ) {\n\t\to = PROMOTION_RULES[ dtype1 ];\n\t\tif ( hasOwnProp( o, dtype2 ) ) {\n\t\t\treturn o[ dtype2 ];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default promotionRules;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the ndarray data type with the smallest size and closest \"kind\" to which ndarray data types can be safely cast.\n*\n* @module @stdlib/ndarray/promotion-rules\n*\n* @example\n* var promotionRules = require( '@stdlib/ndarray/promotion-rules' );\n*\n* var table = promotionRules();\n* // returns {...}\n*\n* var dt = promotionRules( 'float32', 'uint32' );\n* // returns 'float64'\n*\n* dt = promotionRules( 'binary', 'generic' );\n* // returns -1\n*\n* dt = promotionRules( 'float32', 'foo' );\n* // returns null\n*/\n\n// MODULES //\nvar promotionRules = __var_0__;\n\n\n// EXPORTS //\nexport default promotionRules;\n"]}