{"version":3,"sources":["@stdlib/blas/gswap/lib/index.js"],"names":["isndarrayLike","__var_0__","isArrayLikeObject","__var_1__","isFloat64Array","__var_2__","isFloat32Array","__var_3__","dswap","__var_4__","ndarray","sswap","__var_5__","swap","__var_6__","gswap","x","y","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","ndims","strides","length","data","TypeError","RangeError","offset"],"mappings":"0RA4BA,IAAIA,EAAgBC,EAChBC,EAAoBC,EACpBC,EAAiBC,EACjBC,EAAiBC,EACjBC,EAAQC,EAAUC,QAClBC,EAAQC,EAAUF,QAClBG,EAAOC,EAAUJ,QA2BrB,SAASK,EAAOC,EAAGC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAOtB,EAAegB,GACtBQ,EAAOxB,EAAeiB,GACtBM,EAAOD,GAAoB,IAAZN,EAAEU,OAAoC,IAArBV,EAAEW,QAAQC,OAC1CH,EAAOD,GAAoB,IAAZP,EAAES,OAAoC,IAArBT,EAAEU,QAAQC,OACrCL,EAEJJ,IADAD,EAASd,EAAgBY,EAAEa,QACGvB,EAAgBU,EAAEa,UAC1C,CAAA,IAAc,IAATP,IAAkBpB,EAAmBc,GAIhD,MAAM,IAAIc,UAAW,4GAA8Gd,EAAI,MAFvIG,IADAD,EAASd,EAAgBY,KACKV,EAAgBU,GAI/C,GAAKS,EAEJJ,IADAD,EAAShB,EAAgBa,EAAEY,QACGvB,EAAgBW,EAAEY,UAC1C,CAAA,IAAc,IAATL,IAAkBtB,EAAmBe,GAIhD,MAAM,IAAIa,UAAW,6GAA+Gb,EAAI,MAFxII,IADAD,EAAShB,EAAgBa,KACKX,EAAgBW,GAI/C,GAAKD,EAAEY,SAAWX,EAAEW,OACnB,MAAM,IAAIG,WAAY,4EAA8Ef,EAAEY,OAAS,6BAA+BX,EAAEW,OAAS,KAE1J,OAAKL,GAAQE,EACPP,GAAUE,GACdZ,EAAOQ,EAAEY,OAAQZ,EAAEa,KAAMb,EAAEW,QAAS,GAAKX,EAAEgB,OAAQf,EAAEY,KAAMZ,EAAEU,QAAS,GAAKV,EAAEe,QACtEf,GAEHE,GAAUE,GACdV,EAAOK,EAAEY,OAAQZ,EAAEa,KAAMb,EAAEW,QAAS,GAAKX,EAAEgB,OAAQf,EAAEY,KAAMZ,EAAEU,QAAS,GAAKV,EAAEe,QACtEf,IAERJ,EAAMG,EAAEY,OAAQZ,EAAEa,KAAMb,EAAEW,QAAS,GAAKX,EAAEgB,OAAQf,EAAEY,KAAMZ,EAAEU,QAAS,GAAKV,EAAEe,QACrEf,GAEHM,GACJV,EAAMG,EAAEY,OAAQZ,EAAEa,KAAMb,EAAEW,QAAS,GAAKX,EAAEgB,OAAQf,EAAG,EAAG,GACjDA,GAEHQ,GACJZ,EAAMG,EAAEY,OAAQZ,EAAG,EAAG,EAAGC,EAAEY,KAAMZ,EAAEU,QAAS,GAAKV,EAAEe,QAC5Cf,IAERJ,EAAMG,EAAEY,OAAQZ,EAAG,EAAG,EAAGC,EAAG,EAAG,GACxBA","sourcesContent":["import __var_0__ from '@stdlib/assert/is-ndarray-like';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-float64array';\nimport __var_3__ from '@stdlib/assert/is-float32array';\nimport __var_4__ from '@stdlib/blas/base/dswap';\nimport __var_5__ from '@stdlib/blas/base/sswap';\nimport __var_6__ from '@stdlib/blas/base/gswap';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isndarrayLike = __var_0__;\nvar isArrayLikeObject = __var_1__;\nvar isFloat64Array = __var_2__;\nvar isFloat32Array = __var_3__;\nvar dswap = __var_4__.ndarray;\nvar sswap = __var_5__.ndarray;\nvar swap = __var_6__.ndarray;\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(ArrayLike|VectorLike)} x - first input array\n* @param {(ArrayLike|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(ArrayLike|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isArrayLikeObject( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( 'invalid argument. First argument must be either an array-like object or a 1-dimensional ndarray. Value: `' + x + '`.' );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isArrayLikeObject( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be either an array-like object or a 1-dimensional ndarray. Value: `' + y + '`.' );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( 'invalid argument. Arrays must be the same length. First argument length: ' + x.length + '. Second argument length: ' + y.length + '.' );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default gswap;\n"]}