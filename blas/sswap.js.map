{"version":3,"sources":["@stdlib/blas/sswap/lib/index.js"],"names":["isFloat32VectorLike","__var_0__","swap","__var_1__","ndarray","sswap","x","y","TypeError","length","RangeError","data","strides","offset"],"mappings":"mFAuBA,IAAIA,EAAsBC,EACtBC,EAAOC,EAAUC,QA8BrB,SAASC,EAAOC,EAAGC,GAClB,IAAMP,EAAqBM,GAC1B,MAAM,IAAIE,UAAW,kMAAoMF,EAAI,MAE9N,IAAMN,EAAqBO,GAC1B,MAAM,IAAIC,UAAW,mMAAqMD,EAAI,MAE/N,GAAKD,EAAEG,SAAWF,EAAEE,OACnB,MAAM,IAAIC,WAAY,4EAA8EJ,EAAEG,OAAS,6BAA+BF,EAAEE,OAAS,KAG1J,OADAP,EAAMI,EAAEG,OAAQH,EAAEK,KAAML,EAAEM,QAAS,GAAKN,EAAEO,OAAQN,EAAEI,KAAMJ,EAAEK,QAAS,GAAKL,EAAEM,QACrEN","sourcesContent":["import __var_0__ from '@stdlib/assert/is-float32vector-like';\nimport __var_1__ from '@stdlib/blas/base/sswap';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFloat32VectorLike = __var_0__;\nvar swap = __var_1__.ndarray;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {VectorLike} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* sswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float32Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float32Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction sswap( x, y ) {\n\tif ( !isFloat32VectorLike( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a 1-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `' + x + '`.' );\n\t}\n\tif ( !isFloat32VectorLike( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a 1-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `' + y + '`.' );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( 'invalid argument. Arrays must be the same length. First argument length: ' + x.length + '. Second argument length: ' + y.length + '.' );\n\t}\n\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default sswap;\n"]}