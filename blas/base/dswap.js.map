{"version":3,"sources":["@stdlib/blas/base/dswap/lib/dswap.js","@stdlib/blas/base/dswap/lib/ndarray.js","@stdlib/blas/base/dswap/lib/index.js"],"names":["M","dswap","N","x","strideX","y","strideY","tmp","ix","iy","m","i","j","offsetX","offsetY","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAuBA,IAAIA,EAAI,EAyBR,SAASC,EAAOC,EAAGC,EAAGC,EAASC,EAAGC,GACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKV,GAAK,EACT,OAAOG,EAGR,GAAiB,IAAZD,GAA6B,IAAZE,EAAgB,CAIrC,IAHAI,EAAIR,EAAIF,GAGC,EACR,IAAMW,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAMJ,EAAGQ,GACTR,EAAGQ,GAAMN,EAAGM,GACZN,EAAGM,GAAMJ,EAGX,GAAKL,EAAIF,EACR,OAAOK,EAER,IAAMM,EAAID,EAAGC,EAAIT,EAAGS,GAAKX,EACxBO,EAAMJ,EAAGQ,GACTR,EAAGQ,GAAMN,EAAGM,GACZN,EAAGM,GAAMJ,EAGTA,EAAMJ,EADNS,EAAID,EAAI,GAERR,EAAGS,GAAMP,EAAGO,GACZP,EAAGO,GAAML,EAGTA,EAAMJ,EADNS,GAAK,GAELT,EAAGS,GAAMP,EAAGO,GACZP,EAAGO,GAAML,EAEV,OAAOF,EAYR,IATCG,EADIJ,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLK,EADIH,EAAU,GACR,EAAEJ,GAAKI,EAER,EAEAK,EAAI,EAAGA,EAAIT,EAAGS,IACnBJ,EAAMJ,EAAGK,GACTL,EAAGK,GAAOH,EAAGI,GACbJ,EAAGI,GAAOF,EACVC,GAAMJ,EACNK,GAAMH,EAEP,OAAOD,ECpFR,IAAIL,EAAI,EA2BR,SAASC,EAAOC,EAAGC,EAAGC,EAASS,EAASR,EAAGC,EAASQ,GACnD,IAAIP,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKT,GAAK,EACT,OAAOG,EAMR,GAJAG,EAAKK,EACLJ,EAAKK,EAGY,IAAZV,GAA6B,IAAZE,EAAgB,CAIrC,IAHAI,EAAIR,EAAIF,GAGC,EACR,IAAMW,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAMJ,EAAGK,GACTL,EAAGK,GAAOH,EAAGI,GACbJ,EAAGI,GAAOF,EACVC,GAAMJ,EACNK,GAAMH,EAGR,GAAKJ,EAAIF,EACR,OAAOK,EAER,IAAMM,EAAID,EAAGC,EAAIT,EAAGS,GAAKX,EACxBO,EAAMJ,EAAGK,GACTL,EAAGK,GAAOH,EAAGI,GACbJ,EAAGI,GAAOF,EAEVA,EAAMJ,EAAGK,EAAG,GACZL,EAAGK,EAAG,GAAMH,EAAGI,EAAG,GAClBJ,EAAGI,EAAG,GAAMF,EAEZA,EAAMJ,EAAGK,EAAG,GACZL,EAAGK,EAAG,GAAMH,EAAGI,EAAG,GAClBJ,EAAGI,EAAG,GAAMF,EAEZC,GAAMR,EACNS,GAAMT,EAEP,OAAOK,EAER,IAAMM,EAAI,EAAGA,EAAIT,EAAGS,IACnBJ,EAAMJ,EAAGK,GACTL,EAAGK,GAAOH,EAAGI,GACbJ,EAAGI,GAAOF,EACVC,GAAMJ,EACNK,GAAMH,EAEP,OAAOD,EChFR,IAAIU,EAAcC,EACdf,EAAQgB,EACRC,EAAUC,EAKdJ,EAAad,EAAO,UAAWiB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, y, 1 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tvar j;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default dswap;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default dswap;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dswap.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dswap = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dswap;\n"]}