{"version":3,"sources":["@stdlib/blas/base/gscal/lib/main.js","@stdlib/blas/base/gscal/lib/ndarray.js","@stdlib/blas/base/gscal/lib/index.js"],"names":["M","gscal","N","alpha","x","stride","m","i","offset","ix","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAuBA,IAAIA,EAAI,EAoBR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,GAC5B,IAAIC,EACAC,EAEJ,GAAKL,GAAK,GAAKG,GAAU,GAAc,IAAVF,EAC5B,OAAOC,EAGR,GAAgB,IAAXC,EAAe,CAInB,IAHAC,EAAIJ,EAAIF,GAGC,EACR,IAAMO,EAAI,EAAGA,EAAID,EAAGC,GAAK,EACxBH,EAAGG,IAAOJ,EAGZ,GAAKD,EAAIF,EACR,OAAOI,EAER,IAAMG,EAAID,EAAGC,EAAIL,EAAGK,GAAKP,EACxBI,EAAGG,IAAOJ,EACVC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EAEb,OAAOC,EAGR,IADAF,GAAKG,EACCE,EAAI,EAAGA,EAAIL,EAAGK,GAAKF,EACxBD,EAAGG,IAAOJ,EAEX,OAAOC,ECrDR,IAAIJ,EAAI,EAqBR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAAQG,GACpC,IAAIC,EACAH,EACAC,EAEJ,GAAKL,GAAK,GAAe,IAAVC,EACd,OAAOC,EAKR,GAHAK,EAAKD,EAGW,IAAXH,EAAe,CAInB,IAHAC,EAAIJ,EAAIF,GAGC,EACR,IAAMO,EAAI,EAAGA,EAAID,EAAGC,IACnBH,EAAGK,IAAQN,EACXM,GAAMJ,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMG,EAAID,EAAGC,EAAIL,EAAGK,GAAKP,EACxBI,EAAGG,IAAOJ,EACVC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EACZC,EAAGG,EAAE,IAAOJ,EAEb,OAAOC,EAER,IAAMG,EAAI,EAAGA,EAAIL,EAAGK,IACnBH,EAAGK,IAAQN,EACXM,GAAMJ,EAEP,OAAOD,ECnCR,IAAIM,EAAcC,EACdV,EAAQW,EACRC,EAAUC,EAKdJ,EAAaT,EAAO,UAAWY","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i += 1 ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default gscal;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default gscal;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas/base/gscal\n*\n* @example\n* var gscal = require( '@stdlib/blas/base/gscal' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* var gscal = require( '@stdlib/blas/base/gscal' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar gscal = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( gscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default gscal;\n"]}