{"version":3,"sources":["@stdlib/blas/base/cswap/lib/cswap.js","@stdlib/blas/base/cswap/lib/ndarray.js","@stdlib/blas/base/cswap/lib/index.js"],"names":["Float32Array","__var_0__","cswap","N","x","strideX","y","strideY","viewX","viewY","tmp","sx","sy","ix","iy","i","j","buffer","byteOffset","length","offsetX","offsetY","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"gHAsBA,IAAIA,EAAeC,EA2CnB,SAASC,EAAOC,EAAGC,EAAGC,EAASC,EAAGC,GACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAOG,EAIR,GAFAE,EAAQ,IAAIR,EAAcI,EAAEa,OAAQb,EAAEc,WAAqB,EAATd,EAAEe,QACpDV,EAAQ,IAAIT,EAAcM,EAAEW,OAAQX,EAAEY,WAAqB,EAATZ,EAAEa,QACnC,IAAZd,GAA6B,IAAZE,EAAgB,CACrC,IAAMQ,EAAI,EAAGA,EAAM,EAAFZ,EAAKY,GAAK,EAC1BL,EAAMF,EAAOO,GACbP,EAAOO,GAAMN,EAAOM,GACpBN,EAAOM,GAAML,EAGbA,EAAMF,EADNQ,EAAID,EAAI,GAERP,EAAOQ,GAAMP,EAAOO,GACpBP,EAAOO,GAAMN,EAEd,OAAOJ,EAcR,IAXCO,EADIR,EAAU,EACT,GAAK,EAAEF,GAAKE,EAEZ,EAGLS,EADIP,EAAU,EACT,GAAK,EAAEJ,GAAKI,EAEZ,EAENI,EAAe,EAAVN,EACLO,EAAe,EAAVL,EACCQ,EAAI,EAAGA,EAAIZ,EAAGY,IACnBL,EAAMF,EAAOK,GACbL,EAAOK,GAAOJ,EAAOK,GACrBL,EAAOK,GAAOJ,EAEdA,EAAMF,EAAOK,EAAG,GAChBL,EAAOK,EAAG,GAAMJ,EAAOK,EAAG,GAC1BL,EAAOK,EAAG,GAAMJ,EAEhBG,GAAMF,EACNG,GAAMF,EAEP,OAAON,EChGR,IAAIN,EAAeC,EA6CnB,SAASC,EAAOC,EAAGC,EAAGC,EAASe,EAASd,EAAGC,EAASc,GACnD,IAAIb,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAOG,EAQR,IANAE,EAAQ,IAAIR,EAAcI,EAAEa,OAAQb,EAAEc,WAAqB,EAATd,EAAEe,QACpDV,EAAQ,IAAIT,EAAcM,EAAEW,OAAQX,EAAEY,WAAqB,EAATZ,EAAEa,QACpDR,EAAe,EAAVN,EACLO,EAAe,EAAVL,EACLM,EAAe,EAAVO,EACLN,EAAe,EAAVO,EACCN,EAAI,EAAGA,EAAIZ,EAAGY,IACnBL,EAAMF,EAAOK,GACbL,EAAOK,GAAOJ,EAAOK,GACrBL,EAAOK,GAAOJ,EAEdA,EAAMF,EAAOK,EAAG,GAChBL,EAAOK,EAAG,GAAMJ,EAAOK,EAAG,GAC1BL,EAAOK,EAAG,GAAMJ,EAEhBG,GAAMF,EACNG,GAAMF,EAEP,OAAON,EC1ER,IAAIgB,EAAcrB,EACdC,EAAQqB,EACRC,EAAUC,EAKdH,EAAapB,EAAO,UAAWsB","sourcesContent":["import __var_0__ from '@stdlib/array/float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Float32Array = __var_0__;\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\ttmp = viewX[ i ];\n\t\t\tviewX[ i ] = viewY[ i ];\n\t\t\tviewY[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = viewX[ j ];\n\t\t\tviewX[ j ] = viewY[ j ];\n\t\t\tviewY[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default cswap;\n","import __var_0__ from '@stdlib/array/float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Float32Array = __var_0__;\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default cswap;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './cswap.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cswap = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default cswap;\n"]}