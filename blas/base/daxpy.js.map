{"version":3,"sources":["@stdlib/blas/base/daxpy/lib/daxpy.js","@stdlib/blas/base/daxpy/lib/ndarray.js","@stdlib/blas/base/daxpy/lib/index.js"],"names":["M","daxpy","N","alpha","x","strideX","y","strideY","ix","iy","m","i","offsetX","offsetY","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAuBA,IAAIA,EAAI,EA0BR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAAGC,GACxC,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAKT,GAAK,GAAe,IAAVC,EACd,OAAOG,EAGR,GAAiB,IAAZD,GAA6B,IAAZE,EAAgB,CAIrC,IAHAG,EAAIR,EAAIF,GAGC,EACR,IAAMW,EAAI,EAAGA,EAAID,EAAGC,IACnBL,EAAGK,IAAOR,EAAQC,EAAGO,GAGvB,GAAKT,EAAIF,EACR,OAAOM,EAER,IAAMK,EAAID,EAAGC,EAAIT,EAAGS,GAAKX,EACxBM,EAAGK,IAAOR,EAAQC,EAAGO,GACrBL,EAAGK,EAAE,IAAOR,EAAQC,EAAGO,EAAE,GACzBL,EAAGK,EAAE,IAAOR,EAAQC,EAAGO,EAAE,GACzBL,EAAGK,EAAE,IAAOR,EAAQC,EAAGO,EAAE,GAE1B,OAAOL,EAYR,IATCE,EADIH,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLI,EADIF,EAAU,GACR,EAAEL,GAAKK,EAER,EAEAI,EAAI,EAAGA,EAAIT,EAAGS,IACnBL,EAAGG,IAAQN,EAAQC,EAAGI,GACtBA,GAAMH,EACNI,GAAMF,EAEP,OAAOD,ECtER,IAAIN,EAAI,EA4BR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAASO,EAASN,EAAGC,EAASM,GAC1D,IAAIL,EACAC,EACAC,EACAC,EACJ,GAAKT,GAAK,GAAe,IAAVC,EACd,OAAOG,EAMR,GAJAE,EAAKI,EACLH,EAAKI,EAGY,IAAZR,GAA6B,IAAZE,EAAgB,CAIrC,IAHAG,EAAIR,EAAIF,GAGC,EACR,IAAMW,EAAI,EAAGA,EAAID,EAAGC,IACnBL,EAAGG,IAAQN,EAAQC,EAAGI,GACtBA,GAAMH,EACNI,GAAMF,EAGR,GAAKL,EAAIF,EACR,OAAOM,EAER,IAAMK,EAAID,EAAGC,EAAIT,EAAGS,GAAKX,EACxBM,EAAGG,IAAQN,EAAQC,EAAGI,GACtBF,EAAGG,EAAG,IAAON,EAAQC,EAAGI,EAAG,GAC3BF,EAAGG,EAAG,IAAON,EAAQC,EAAGI,EAAG,GAC3BF,EAAGG,EAAG,IAAON,EAAQC,EAAGI,EAAG,GAC3BA,GAAMR,EACNS,GAAMT,EAEP,OAAOM,EAER,IAAMK,EAAI,EAAGA,EAAIT,EAAGS,IACnBL,EAAGG,IAAQN,EAAQC,EAAGI,GACtBA,GAAMH,EACNI,GAAMF,EAEP,OAAOD,ECpER,IAAIQ,EAAcC,EACdd,EAAQe,EACRC,EAAUC,EAKdJ,EAAab,EAAO,UAAWgB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default daxpy;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default daxpy;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './daxpy.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar daxpy = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( daxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default daxpy;\n"]}