{"version":3,"sources":["@stdlib/blas/ext/base/dnannsumors/lib/dnannsumors.js","@stdlib/blas/ext/base/dnannsumors/lib/ndarray.js","@stdlib/blas/ext/base/dnannsumors/lib/index.js"],"names":["isnan","__var_0__","dnannsumors","N","x","strideX","out","strideOut","sum","ix","io","n","i","offsetX","offsetOut","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"gIAsBA,IAAIA,EAAQC,EAwBZ,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAAKC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAaJ,GAVCH,EADIJ,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLK,EADIH,EAAY,GACVA,EAED,EAENC,EAAM,EACDL,GAAK,EAGT,OAFAG,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAc,EACfD,EAER,GAAW,IAANH,GAAuB,IAAZE,EACf,OAAKL,EAAOI,EAAGK,KACdH,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAc,EACfD,IAERA,EAAKI,GAAON,EAAGK,GACfH,EAAKI,EAAGH,GAAc,EACfD,GAGR,IADAK,EAAI,EACEC,EAAI,EAAGA,EAAIT,EAAGS,KACO,IAArBZ,EAAOI,EAAGK,MACdD,GAAOJ,EAAGK,GACVE,GAAK,GAENF,GAAMJ,EAIP,OAFAC,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAcI,EACfL,ECnER,IAAIN,EAAQC,EA6BZ,SAASC,EAAaC,EAAGC,EAAGC,EAASQ,EAASP,EAAKC,EAAWO,GAC7D,IAAIN,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAKI,EACLH,EAAKI,EAELN,EAAM,EACDL,GAAK,EAGT,OAFAG,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAc,EACfD,EAER,GAAW,IAANH,GAAuB,IAAZE,EACf,OAAKL,EAAOI,EAAGK,KACdH,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAc,EACfD,IAERA,EAAKI,GAAON,EAAGK,GACfH,EAAKI,EAAGH,GAAc,EACfD,GAGR,IADAK,EAAI,EACEC,EAAI,EAAGA,EAAIT,EAAGS,KACO,IAArBZ,EAAOI,EAAGK,MACdD,GAAOJ,EAAGK,GACVE,GAAK,GAENF,GAAMJ,EAIP,OAFAC,EAAKI,GAAOF,EACZF,EAAKI,EAAGH,GAAcI,EACfL,EC/DR,IAAIS,EAAcd,EACdC,EAAcc,EACdC,EAAUC,EAKdH,EAAab,EAAa,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dnannsumors;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumors( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dnannsumors;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dnannsumors.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dnannsumors = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dnannsumors;\n"]}