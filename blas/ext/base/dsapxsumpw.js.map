{"version":3,"sources":["@stdlib/blas/ext/base/dsapxsumpw/lib/ndarray.js","@stdlib/blas/ext/base/dsapxsumpw/lib/dsapxsumpw.js","@stdlib/blas/ext/base/dsapxsumpw/lib/index.js"],"names":["floor","__var_0__","BLOCKSIZE","dsapxsumpw","N","alpha","x","stride","offset","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","i","sum","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"gIAsBA,IAAIA,EAAQC,EAMRC,EAAY,IAiChB,SAASC,EAAYC,EAAGC,EAAOC,EAAGC,EAAQC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKjB,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXG,EACf,OAAOF,EAAQC,EAAGE,GAGnB,GADAC,EAAKD,EACAJ,EAAI,EAAI,CAGZ,IADAe,EAAI,EACEE,EAAI,EAAGA,EAAIjB,EAAGiB,IACnBF,GAAKd,EAAQC,EAAGG,GAChBA,GAAMF,EAEP,OAAOY,EAER,GAAKf,GAAKF,EAAY,CAarB,IAXAQ,EAAKL,EAAQC,EAAGG,GAChBE,EAAKN,EAAQC,EAAGG,EAAGF,GACnBK,EAAKP,EAAQC,EAAGG,EAAI,EAAEF,GACtBM,EAAKR,EAAQC,EAAGG,EAAI,EAAEF,GACtBO,EAAKT,EAAQC,EAAGG,EAAI,EAAEF,GACtBQ,EAAKV,EAAQC,EAAGG,EAAI,EAAEF,GACtBS,EAAKX,EAAQC,EAAGG,EAAI,EAAEF,GACtBU,EAAKZ,EAAQC,EAAGG,EAAI,EAAEF,GACtBE,GAAM,EAAIF,EAEVW,EAAId,EAAI,EACFiB,EAAI,EAAGA,EAAIjB,EAAEc,EAAGG,GAAK,EAC1BX,GAAML,EAAQC,EAAGG,GACjBE,GAAMN,EAAQC,EAAGG,EAAGF,GACpBK,GAAMP,EAAQC,EAAGG,EAAI,EAAEF,GACvBM,GAAMR,EAAQC,EAAGG,EAAI,EAAEF,GACvBO,GAAMT,EAAQC,EAAGG,EAAI,EAAEF,GACvBQ,GAAMV,EAAQC,EAAGG,EAAI,EAAEF,GACvBS,GAAMX,EAAQC,EAAGG,EAAI,EAAEF,GACvBU,GAAMZ,EAAQC,EAAGG,EAAI,EAAEF,GACvBE,GAAM,EAAIF,EAMX,IAHAY,EAAMT,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhCI,EAAIjB,EAAGiB,IACfF,GAAKd,EAAQC,EAAGG,GAChBA,GAAMF,EAEP,OAAOY,EAKR,OAFAC,EAAIpB,EAAOI,EAAE,GAEND,EADPiB,GAAKA,EAAI,EACaf,EAAOC,EAAGC,EAAQE,GAAON,EAAYC,EAAEgB,EAAGf,EAAOC,EAAGC,EAAQE,EAAIW,EAAEb,GC3GzF,IAAIe,EAAMrB,EA+BV,SAASE,EAAYC,EAAGC,EAAOC,EAAGC,GACjC,IAAIE,EACAU,EACAE,EAEJ,GAAKjB,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXG,EACf,OAAOF,EAAQC,EAAG,GAOnB,GAJCG,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAEDH,EAAI,EAAI,CAGZ,IADAe,EAAI,EACEE,EAAI,EAAGA,EAAIjB,EAAGiB,IACnBF,GAAKd,EAAQC,EAAGG,GAChBA,GAAMF,EAEP,OAAOY,EAER,OAAOG,EAAKlB,EAAGC,EAAOC,EAAGC,EAAQE,GCtDlC,IAAIc,EAActB,EACdE,EAAaqB,EACbC,EAAUC,EAKdH,EAAapB,EAAY,UAAWsB","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, stride, ix ) + dsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default dsapxsumpw;\n","import __var_0__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sum = __var_0__;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\nexport default dsapxsumpw;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsapxsumpw.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsapxsumpw = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsapxsumpw;\n"]}