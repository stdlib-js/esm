{"version":3,"sources":["@stdlib/blas/ext/base/dsumors/lib/dsumors.js","@stdlib/blas/ext/base/dsumors/lib/ndarray.js","@stdlib/blas/ext/base/dsumors/lib/index.js"],"names":["M","dsumors","N","x","stride","sum","ix","m","i","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"2EAuBA,IAAIA,EAAI,EAsBR,SAASC,EAASC,EAAGC,EAAGC,GACvB,IAAIC,EACAC,EACAC,EACAC,EAGJ,GADAH,EAAM,EACDH,GAAK,EACT,OAAOG,EAER,GAAW,IAANH,GAAsB,IAAXE,EACf,OAAOD,EAAG,GAGX,GAAgB,IAAXC,EAAe,CAInB,IAHAG,EAAIL,EAAIF,GAGC,EACR,IAAMQ,EAAI,EAAGA,EAAID,EAAGC,IACnBH,GAAOF,EAAGK,GAGZ,GAAKN,EAAIF,EACR,OAAOK,EAER,IAAMG,EAAID,EAAGC,EAAIN,EAAGM,GAAKR,EACxBK,GAAOF,EAAEK,GAAKL,EAAEK,EAAE,GAAKL,EAAEK,EAAE,GAAKL,EAAEK,EAAE,GAAKL,EAAEK,EAAE,GAAKL,EAAEK,EAAE,GAEvD,OAAOH,EAOR,IAJCC,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAEAI,EAAI,EAAGA,EAAIN,EAAGM,IACnBH,GAAOF,EAAGG,GACVA,GAAMF,EAEP,OAAOC,EC9DR,IAAIL,EAAI,EAwBR,SAASC,EAASC,EAAGC,EAAGC,EAAQK,GAC/B,IAAIJ,EACAC,EACAC,EACAC,EAGJ,GADAH,EAAM,EACDH,GAAK,EACT,OAAOG,EAER,GAAW,IAANH,GAAsB,IAAXE,EACf,OAAOD,EAAGM,GAKX,GAHAH,EAAKG,EAGW,IAAXL,EAAe,CAInB,IAHAG,EAAIL,EAAIF,GAGC,EACR,IAAMQ,EAAI,EAAGA,EAAID,EAAGC,IACnBH,GAAOF,EAAGG,GACVA,GAAMF,EAGR,GAAKF,EAAIF,EACR,OAAOK,EAER,IAAMG,EAAID,EAAGC,EAAIN,EAAGM,GAAKR,EACxBK,GAAOF,EAAEG,GAAMH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAC5DA,GAAMN,EAEP,OAAOK,EAER,IAAMG,EAAI,EAAGA,EAAIN,EAAGM,IACnBH,GAAOF,EAAGG,GACVA,GAAMF,EAEP,OAAOC,EC9DR,IAAIK,EAAcC,EACdV,EAAUW,EACVC,EAAUC,EAKdJ,EAAaT,EAAS,UAAWY","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\nexport default dsumors;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\nexport default dsumors;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsumors.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsumors = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsumors;\n"]}