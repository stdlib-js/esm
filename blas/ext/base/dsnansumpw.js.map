{"version":3,"sources":["@stdlib/blas/ext/base/dsnansumpw/lib/ndarray.js","@stdlib/blas/ext/base/dsnansumpw/lib/dsnansumpw.js","@stdlib/blas/ext/base/dsnansumpw/lib/index.js"],"names":["isnanf","__var_0__","floor","__var_1__","BLOCKSIZE","dsnansumpw","N","x","stride","offset","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","i","sum","setReadOnly","ndarray","__var_2__"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar floor = __var_1__;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, stride, ix ) + dsnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default dsnansumpw;\n","import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar sum = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\nexport default dsnansumpw;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsnansumpw.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsnansumpw = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsnansumpw;\n"]}