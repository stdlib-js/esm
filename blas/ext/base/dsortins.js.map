{"version":3,"sources":["@stdlib/blas/ext/base/dsortins/lib/dsortins.js","@stdlib/blas/ext/base/dsortins/lib/ndarray.js","@stdlib/blas/ext/base/dsortins/lib/index.js"],"names":["isNegativeZero","__var_0__","isnan","__var_1__","dsortins","N","order","x","stride","flg","ix","jx","fx","lx","v","u","i","offset","setReadOnly","ndarray","__var_2__"],"mappings":"+LAuBA,IAAIA,EAAiBC,EACjBC,EAAQC,EAsBZ,SAASC,EAAUC,EAAGC,EAAOC,EAAGC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,GAAe,IAAVC,EACd,OAAOC,EAMR,GAHKD,EAAQ,IACZE,IAAW,GAEPA,EAAS,EAAI,CAOjB,IAJAK,EAAK,EACLH,GAFAE,GAAM,EAAEP,GAAKG,GAEHA,EAGJQ,EAAI,EAAGA,EAAIX,EAAGW,IAInB,GAHAF,EAAIP,EAAGG,GAGFR,EAAOY,GAAM,CAIjB,IAHAH,EAAKD,EAGGC,EAAKE,GACZN,EAAGI,GAAOJ,EAAGI,EAAGH,GAChBG,GAAMH,EAEPD,EAAGM,GAAOC,MACJ,CAKN,IAJAL,EAAMT,EAAgBc,GACtBH,EAAKD,EAAKF,EAGFG,GAAMC,OACbG,EAAIR,EAAGI,KACGG,IAAOL,GAAOM,IAAMD,IAA6B,IAAxBd,EAAgBe,KAInDR,EAAGI,EAAGH,GAAWO,EACjBJ,GAAMH,EAEPD,EAAGI,EAAGH,GAAWM,EACjBJ,GAAMF,EAGR,OAAOD,EAQR,IAJAM,GAAMR,EAAE,GAAKG,EACbE,GAFAE,EAAK,GAEKJ,EAGJQ,EAAI,EAAGA,EAAIX,EAAGW,IAInB,GAHAF,EAAIP,EAAGG,GAGFR,EAAOY,GAAM,CAIjB,IAHAH,EAAKD,EAGGC,EAAKE,GACZN,EAAGI,GAAOJ,EAAGI,EAAGH,GAChBG,GAAMH,EAEPD,EAAGM,GAAOC,MACJ,CAKN,IAJAL,EAAMT,EAAgBc,GACtBH,EAAKD,EAAKF,EAGFG,GAAMC,OACbG,EAAIR,EAAGI,KACGG,IAAOL,GAAOM,IAAMD,IAA6B,IAAxBd,EAAgBe,KAInDR,EAAGI,EAAGH,GAAWO,EACjBJ,GAAMH,EAEPD,EAAGI,EAAGH,GAAWM,EACjBJ,GAAMF,EAGR,OAAOD,ECrHR,IAAIP,EAAiBC,EACjBC,EAAQC,EAuBZ,SAASC,EAAUC,EAAGC,EAAOC,EAAGC,EAAQS,GACvC,IAAIR,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,GAAe,IAAVC,EACd,OAAOC,EAWR,GARKD,EAAQ,IAEZW,IAAWZ,EAAE,IADbG,IAAW,IAIZK,GADAD,EAAKK,IACOZ,EAAE,GAAGG,EACjBE,EAAKE,EAAKJ,EAELA,EAAS,EAAI,CAIjB,IAAMQ,EAAI,EAAGA,EAAIX,EAAGW,IAInB,GAHAF,EAAIP,EAAGG,GAGFR,EAAOY,GAAM,CAIjB,IAHAH,EAAKD,EAGGC,EAAKE,GACZN,EAAGI,GAAOJ,EAAGI,EAAGH,GAChBG,GAAMH,EAEPD,EAAGM,GAAOC,MACJ,CAKN,IAJAL,EAAMT,EAAgBc,GACtBH,EAAKD,EAAKF,EAGFG,GAAMC,OACbG,EAAIR,EAAGI,KACGG,IAAOL,GAAOM,IAAMD,IAA6B,IAAxBd,EAAgBe,KAInDR,EAAGI,EAAGH,GAAWO,EACjBJ,GAAMH,EAEPD,EAAGI,EAAGH,GAAWM,EACjBJ,GAAMF,EAGR,OAAOD,EAKR,IAAMS,EAAI,EAAGA,EAAIX,EAAGW,IAInB,GAHAF,EAAIP,EAAGG,GAGFR,EAAOY,GAAM,CAIjB,IAHAH,EAAKD,EAGGC,EAAKE,GACZN,EAAGI,GAAOJ,EAAGI,EAAGH,GAChBG,GAAMH,EAEPD,EAAGM,GAAOC,MACJ,CAKN,IAJAL,EAAMT,EAAgBc,GACtBH,EAAKD,EAAKF,EAGFG,GAAMC,OACbG,EAAIR,EAAGI,KACGG,IAAOL,GAAOM,IAAMD,IAA6B,IAAxBd,EAAgBe,KAInDR,EAAGI,EAAGH,GAAWO,EACjBJ,GAAMH,EAEPD,EAAGI,EAAGH,GAAWM,EACjBJ,GAAMF,EAGR,OAAOD,ECpHR,IAAIW,EAAcjB,EACdG,EAAWD,EACXgB,EAAUC,EAKdF,EAAad,EAAU,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsortins;\n","import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsortins;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsortins.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsortins = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsortins;\n"]}