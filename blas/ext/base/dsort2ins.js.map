{"version":3,"sources":["@stdlib/blas/ext/base/dsort2ins/lib/dsort2ins.js","@stdlib/blas/ext/base/dsort2ins/lib/ndarray.js","@stdlib/blas/ext/base/dsort2ins/lib/index.js"],"names":["isNegativeZero","__var_0__","isnan","__var_1__","dsort2ins","N","order","x","strideX","y","strideY","flg","ix","jx","fx","lx","iy","jy","fy","ly","vx","vy","ux","i","offsetX","offsetY","setReadOnly","ndarray","__var_2__"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsort2ins;\n","import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsort2ins;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsort2ins.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsort2ins = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsort2ins;\n"]}