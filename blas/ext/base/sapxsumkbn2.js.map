{"version":3,"sources":["@stdlib/blas/ext/base/sapxsumkbn2/lib/sapxsumkbn2.js","@stdlib/blas/ext/base/sapxsumkbn2/lib/ndarray.js","@stdlib/blas/ext/base/sapxsumkbn2/lib/index.js"],"names":["float64ToFloat32","__var_0__","abs","__var_1__","sapxsumkbn2","N","alpha","x","stride","sum","ccs","ix","cs","cc","v","t","c","i","offset","setReadOnly","ndarray","__var_2__"],"mappings":"0LAuBA,IAAIA,EAAmBC,EACnBC,EAAMC,EA+BV,SAASC,EAAaC,EAAGC,EAAOC,EAAGC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXG,EACf,OAAOR,EAAkBM,EAAQC,EAAG,IAUrC,IAPCI,EADIH,EAAS,GACP,EAAEH,GAAKG,EAER,EAENC,EAAM,EACNC,EAAM,EACNE,EAAK,EACCK,EAAI,EAAGA,EAAIZ,EAAGY,IACnBH,EAAId,EAAkBM,EAAQC,EAAGI,IACjCI,EAAIf,EAAkBS,EAAIK,GAEzBE,EADId,EAAKO,IAASP,EAAKY,GACnBd,EAAkBA,EAAkBS,EAAIM,GAAMD,GAE9Cd,EAAkBA,EAAkBc,EAAEC,GAAMN,GAEjDA,EAAMM,EACNA,EAAIf,EAAkBY,EAAGI,GAExBH,EADIX,EAAKU,IAAQV,EAAKc,GACjBhB,EAAkBA,EAAkBY,EAAGG,GAAMC,GAE7ChB,EAAkBA,EAAkBgB,EAAED,GAAMH,GAElDA,EAAKG,EACLL,EAAMV,EAAkBU,EAAIG,GAC5BF,GAAMH,EAEP,OAAOR,EAAkBS,EAAMT,EAAkBY,EAAGF,IC5ErD,IAAIV,EAAmBC,EACnBC,EAAMC,EAiCV,SAASC,EAAaC,EAAGC,EAAOC,EAAGC,EAAQU,GAC1C,IAAIT,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXG,EACf,OAAOR,EAAkBM,EAAQC,EAAGW,IAMrC,IAJAP,EAAKO,EACLT,EAAM,EACNC,EAAM,EACNE,EAAK,EACCK,EAAI,EAAGA,EAAIZ,EAAGY,IACnBH,EAAId,EAAkBM,EAAQC,EAAGI,IACjCI,EAAIf,EAAkBS,EAAIK,GAEzBE,EADId,EAAKO,IAASP,EAAKY,GACnBd,EAAkBA,EAAkBS,EAAIM,GAAMD,GAE9Cd,EAAkBA,EAAkBc,EAAEC,GAAMN,GAEjDA,EAAMM,EACNA,EAAIf,EAAkBY,EAAGI,GAExBH,EADIX,EAAKU,IAAQV,EAAKc,GACjBhB,EAAkBA,EAAkBY,EAAGG,GAAMC,GAE7ChB,EAAkBA,EAAkBgB,EAAED,GAAMH,GAElDA,EAAKG,EACLL,EAAMV,EAAkBU,EAAIG,GAC5BF,GAAMH,EAEP,OAAOR,EAAkBS,EAAMT,EAAkBY,EAAGF,ICzErD,IAAIS,EAAclB,EACdG,EAAcD,EACdiB,EAAUC,EAKdF,EAAaf,EAAa,UAAWgB","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\nexport default sapxsumkbn2;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\nexport default sapxsumkbn2;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './sapxsumkbn2.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar sapxsumkbn2 = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default sapxsumkbn2;\n"]}