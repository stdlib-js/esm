{"version":3,"sources":["@stdlib/blas/ext/base/dsort2sh/lib/dsort2sh.js","@stdlib/blas/ext/base/dsort2sh/lib/ndarray.js","@stdlib/blas/ext/base/dsort2sh/lib/index.js"],"names":["isNegativeZero","__var_0__","isnan","__var_1__","GAPS","__var_2__","NGAPS","length","dsort2sh","N","order","x","strideX","y","strideY","offsetX","offsetY","flg","gap","vx","vy","ux","i","j","k","setReadOnly","ndarray"],"mappings":"gOAwBIA,EAAiBC,EACjBC,EAAQC,EACRC,EAAOC,EAKPC,EAAQF,EAAKG,OAuCjB,SAASC,EAAUC,EAAGC,EAAOC,EAAGC,EAASC,EAAGC,GAC3C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKf,GAAK,GAAe,IAAVC,EACd,OAAOC,EAiBR,IAdKD,EAAQ,IACZE,IAAY,EACZE,IAAY,GAGZC,EADIH,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADIF,EAAU,GACH,EAAEL,GAAKK,EAER,EAELQ,EAAI,EAAGA,EAAIhB,EAAOgB,IAEvB,IAAMC,EADNL,EAAMd,EAAMkB,GACGC,EAAId,EAAGc,IAIrB,GAHAJ,EAAKR,EAAGI,EAASQ,EAAEX,IAGdV,EAAOiB,GAAZ,CAOA,IAJAC,EAAKP,EAAGG,EAASO,EAAET,GAGnBG,EAAMjB,EAAgBmB,GAChBK,EAAID,EAAGC,GAAKN,OACjBG,EAAKV,EAAGI,GAAUS,EAAEN,GAAKN,KACdO,IAAQF,GAAOI,IAAOF,GAFXK,GAAKN,EAK3BP,EAAGI,EAASS,EAAEZ,GAAaS,EAC3BR,EAAGG,EAASQ,EAAEV,GAAaD,EAAGG,GAAUQ,EAAEN,GAAKJ,GAEhDH,EAAGI,EAASS,EAAEZ,GAAaO,EAC3BN,EAAGG,EAASQ,EAAEV,GAAaM,EAG7B,OAAOT,ECrGR,IAAIX,EAAiBC,EACjBC,EAAQC,EACRC,EAAOC,EAKPC,EAAQF,EAAKG,OAyCjB,SAASC,EAAUC,EAAGC,EAAOC,EAAGC,EAASG,EAASF,EAAGC,EAASE,GAC7D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKf,GAAK,GAAe,IAAVC,EACd,OAAOC,EASR,IANKD,EAAQ,IAGZK,IAAYN,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdK,IAAY,IAIPQ,EAAI,EAAGA,EAAIhB,EAAOgB,IAEvB,IAAMC,EADNL,EAAMd,EAAMkB,GACGC,EAAId,EAAGc,IAIrB,GAHAJ,EAAKR,EAAGI,EAASQ,EAAEX,IAGdV,EAAOiB,GAAZ,CAOA,IAJAC,EAAKP,EAAGG,EAASO,EAAET,GAGnBG,EAAMjB,EAAgBmB,GAChBK,EAAID,EAAGC,GAAKN,OACjBG,EAAKV,EAAGI,GAAUS,EAAEN,GAAKN,KACdO,IAAQF,GAAOI,IAAOF,GAFXK,GAAKN,EAK3BP,EAAGI,EAASS,EAAEZ,GAAaS,EAC3BR,EAAGG,EAASQ,EAAEV,GAAaD,EAAGG,GAAUQ,EAAEN,GAAKJ,GAEhDH,EAAGI,EAASS,EAAEZ,GAAaO,EAC3BN,EAAGG,EAASQ,EAAEV,GAAaM,EAG7B,OAAOT,EC7FR,IAAIc,EAAcxB,EACdO,EAAWL,EACXuB,EAAUrB,EAKdoB,EAAajB,EAAU,UAAWkB","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from './gaps.json';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\nvar GAPS = __var_2__;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsort2sh;\n","import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from './gaps.json';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\nvar isnan = __var_1__;\nvar GAPS = __var_2__;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default dsort2sh;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dsort2sh.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dsort2sh = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dsort2sh;\n"]}