{"version":3,"sources":["@stdlib/blas/ext/base/scusum/lib/scusum.js","@stdlib/blas/ext/base/scusum/lib/ndarray.js","@stdlib/blas/ext/base/scusum/lib/index.js"],"names":["scusumkbn","__var_0__","scusum","N","sum","x","strideX","y","strideY","ndarray","offsetX","offsetY","setReadOnly","__var_1__","__var_2__"],"mappings":"yGAsBA,IAAIA,EAAYC,EA0BhB,SAASC,EAAQC,EAAGC,EAAKC,EAAGC,EAASC,EAAGC,GACvC,OAAOR,EAAWG,EAAGC,EAAKC,EAAGC,EAASC,EAAGC,GC3B1C,IAAIR,EAAYC,EAAUQ,QA6B1B,SAASP,EAAQC,EAAGC,EAAKC,EAAGC,EAASI,EAASH,EAAGC,EAASG,GACzD,OAAOX,EAAWG,EAAGC,EAAKC,EAAGC,EAASI,EAASH,EAAGC,EAASG,GC5B5D,IAAIC,EAAcX,EACdC,EAASW,EACTJ,EAAUK,EAKdF,EAAaV,EAAQ,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/blas/ext/base/scusumkbn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar scusumkbn = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusum( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\nexport default scusum;\n","import __var_0__ from '@stdlib/blas/ext/base/scusumkbn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar scusumkbn = __var_0__.ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\nexport default scusum;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './scusum.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar scusum = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default scusum;\n"]}