{"version":3,"sources":["@stdlib/blas/ext/base/snansumkbn2/lib/snansumkbn2.js","@stdlib/blas/ext/base/snansumkbn2/lib/ndarray.js","@stdlib/blas/ext/base/snansumkbn2/lib/index.js"],"names":["float64ToFloat32","__var_0__","isnanf","__var_1__","abs","__var_2__","snansumkbn2","N","x","stride","sum","ccs","ix","cs","cc","v","t","c","i","offset","setReadOnly","ndarray"],"mappings":"gPAwBA,IAAIA,EAAmBC,EACnBC,EAASC,EACTC,EAAMC,EA8BV,SAASC,EAAaC,EAAGC,EAAGC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXE,EACf,OAAKP,EAAQM,EAAG,IACR,EAEDA,EAAG,GAUX,IAPCI,EADIH,EAAS,GACP,EAAEF,GAAKE,EAER,EAENC,EAAM,EACNC,EAAM,EACNE,EAAK,EACCK,EAAI,EAAGA,EAAIX,EAAGW,IACnBH,EAAIP,EAAGI,IACc,IAAhBV,EAAQa,KACZC,EAAIhB,EAAkBU,EAAMK,GAE3BE,EADIb,EAAKM,IAASN,EAAKW,GACnBf,EAAkBA,EAAkBU,EAAIM,GAAMD,GAE9Cf,EAAkBA,EAAkBe,EAAEC,GAAMN,GAEjDA,EAAMM,EACNA,EAAIhB,EAAkBa,EAAKI,GAE1BH,EADIV,EAAKS,IAAQT,EAAKa,GACjBjB,EAAkBA,EAAiBa,EAAGG,GAAKC,GAE3CjB,EAAkBA,EAAiBiB,EAAED,GAAKH,GAEhDA,EAAKG,EACLL,EAAMX,EAAkBW,EAAMG,IAE/BF,GAAMH,EAEP,OAAOT,EAAkBU,EAAMV,EAAkBa,EAAKF,ICjFvD,IAAIX,EAAmBC,EACnBC,EAASC,EACTC,EAAMC,EAgCV,SAASC,EAAaC,EAAGC,EAAGC,EAAQU,GACnC,IAAIT,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXE,EACf,OAAKP,EAAQM,EAAGW,IACR,EAEDX,EAAGW,GAMX,IAJAP,EAAKO,EACLT,EAAM,EACNC,EAAM,EACNE,EAAK,EACCK,EAAI,EAAGA,EAAIX,EAAGW,IACnBH,EAAIP,EAAGI,IACc,IAAhBV,EAAQa,KACZC,EAAIhB,EAAkBU,EAAMK,GAE3BE,EADIb,EAAKM,IAASN,EAAKW,GACnBf,EAAkBA,EAAkBU,EAAIM,GAAMD,GAE9Cf,EAAkBA,EAAkBe,EAAEC,GAAMN,GAEjDA,EAAMM,EACNA,EAAIhB,EAAkBa,EAAKI,GAE1BH,EADIV,EAAKS,IAAQT,EAAKa,GACjBjB,EAAkBA,EAAiBa,EAAGG,GAAKC,GAE3CjB,EAAkBA,EAAiBiB,EAAED,GAAKH,GAEhDA,EAAKG,EACLL,EAAMX,EAAkBW,EAAMG,IAE/BF,GAAMH,EAEP,OAAOT,EAAkBU,EAAMV,EAAkBa,EAAKF,IC/EvD,IAAIS,EAAcnB,EACdK,EAAcH,EACdkB,EAAUhB,EAKde,EAAad,EAAa,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_2__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar isnanf = __var_1__;\nvar abs = __var_2__;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\nexport default snansumkbn2;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_2__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar isnanf = __var_1__;\nvar abs = __var_2__;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\nexport default snansumkbn2;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './snansumkbn2.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar snansumkbn2 = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default snansumkbn2;\n"]}