{"version":3,"sources":["@stdlib/string/left-pad/lib/left_pad.js","@stdlib/string/left-pad/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isPrimitive","isString","__var_1__","repeat","__var_2__","ceil","__var_3__","FLOAT64_MAX_SAFE_INTEGER","__var_4__","lpad","str","len","pad","n","p","TypeError","arguments","length","RangeError"],"mappings":"qOA0BA,IAAIA,EAAuBC,EAAUC,YACjCC,EAAWC,EAAUF,YACrBG,EAASC,EACTC,EAAOC,EACPC,EAA2BC,EA6B/B,SAASC,EAAMC,EAAKC,EAAKC,GACxB,IAAIC,EACAC,EACJ,IAAMb,EAAUS,GACf,MAAM,IAAIK,UAAW,8DAAgEL,EAAM,MAE5F,IAAMZ,EAAsBa,GAC3B,MAAM,IAAII,UAAW,4EAA8EJ,EAAM,MAE1G,GAAKK,UAAUC,OAAS,EAAI,CAE3B,IAAMhB,EADNa,EAAIF,GAEH,MAAM,IAAIG,UAAW,8DAAgED,EAAI,MAE1F,GAAkB,IAAbA,EAAEG,OACN,MAAM,IAAIC,WAAY,sEAGvBJ,EAAI,IAEL,GAAKH,EAAMJ,EACV,MAAM,IAAIW,WAAY,iFAGvB,OADAL,GAAMF,EAAMD,EAAIO,QAAWH,EAAEG,SACnB,EACFP,GAERG,EAAIR,EAAMQ,GACHV,EAAQW,EAAGD,GAAMH,GC/CtB,IAACD,EAAOV","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/string/repeat';\nimport __var_3__ from '@stdlib/math/base/special/ceil';\nimport __var_4__ from '@stdlib/constants/math/float64-max-safe-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar repeat = __var_2__;\nvar ceil = __var_3__;\nvar FLOAT64_MAX_SAFE_INTEGER = __var_4__;\n\n\n// MAIN //\n\n/**\n* Left pads a string such that the padded string has a length of at least `len`.\n*\n* @param {string} str - string to pad\n* @param {NonNegativeInteger} len - minimum string length\n* @param {string} [pad=' '] - string used to pad\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @throws {RangeError} padding must have a length greater than `0`\n* @returns {string} padded string\n*\n* @example\n* var str = lpad( 'a', 5 );\n* // returns '    a'\n*\n* @example\n* var str = lpad( 'beep', 10, 'b' );\n* // returns 'bbbbbbbeep'\n*\n* @example\n* var str = lpad( 'boop', 12, 'beep' );\n* // returns 'beepbeepboop'\n*/\nfunction lpad( str, len, pad ) {\n\tvar n;\n\tvar p;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tp = pad;\n\t\tif ( !isString( p ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a string. Value: `' + p + '`.' );\n\t\t}\n\t\tif ( p.length === 0 ) {\n\t\t\tthrow new RangeError( 'invalid argument. Third argument must not be an empty string.' );\n\t\t}\n\t} else {\n\t\tp = ' ';\n\t}\n\tif ( len > FLOAT64_MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( 'invalid argument. Output string length exceeds maximum allowed string length.' );\n\t}\n\tn = ( len - str.length ) / p.length;\n\tif ( n <= 0 ) {\n\t\treturn str;\n\t}\n\tn = ceil( n );\n\treturn repeat( p, n ) + str;\n}\n\n\n// EXPORTS //\nexport default lpad;\n","import __var_0__ from './left_pad.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Left pad a string such that the padded string has a length of at least `len`.\n*\n* @module @stdlib/string/left-pad\n*\n* @example\n* var lpad = require( '@stdlib/string/left-pad' );\n*\n* var str = lpad( 'a', 5 );\n* // returns '    a'\n*\n* str = lpad( 'beep', 10, 'b' );\n* // returns 'bbbbbbbeep'\n*\n* str = lpad( 'boop', 12, 'beep' );\n* // returns 'beepbeepboop'\n*/\n\n// MODULES //\nvar lpad = __var_0__;\n\n\n// EXPORTS //\nexport default lpad;\n"]}