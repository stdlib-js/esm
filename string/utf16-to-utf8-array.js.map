{"version":3,"sources":["@stdlib/string/utf16-to-utf8-array/lib/main.js","@stdlib/string/utf16-to-utf8-array/lib/index.js"],"names":["isString","__var_0__","isPrimitive","Ox3F","Ox80","OxC0","OxE0","OxF0","Ox3FF","Ox800","OxD800","OxE000","Ox10000","utf16ToUTF8Array","str","code","out","len","i","TypeError","length","charCodeAt","push"],"mappings":"wCAsBA,IAAIA,EAAWC,EAAUC,YAMrBC,EAAO,GAGPC,EAAO,IAGPC,EAAO,IAGPC,EAAO,IAGPC,EAAO,IAGPC,EAAQ,KAGRC,EAAQ,KAGRC,EAAS,MAGTC,EAAS,MAGTC,EAAU,MAwDd,SAASC,EAAkBC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EAEJ,IAAMlB,EAAUc,GACf,MAAM,IAAIK,UAAW,oDAAoDL,EAAI,MAI9E,IAFAG,EAAMH,EAAIM,OACVJ,EAAM,GACAE,EAAI,EAAGA,EAAID,EAAKC,KACrBH,EAAOD,EAAIO,WAAYH,IAGXd,EACXY,EAAIM,KAAMP,GAGDA,EAAON,GAChBO,EAAIM,KAAMjB,EAAQU,GAAM,GACxBC,EAAIM,KAAMlB,EAAQW,EAAOZ,IAEhBY,EAAOL,GAAUK,GAAQJ,GAClCK,EAAIM,KAAMhB,EAAQS,GAAM,IACxBC,EAAIM,KAAMlB,EAASW,GAAM,EAAKZ,GAC9Ba,EAAIM,KAAMlB,EAAQW,EAAOZ,KAIzBe,GAAK,EAGLH,EAAOH,IAAaG,EAAOP,IAAQ,GAAOM,EAAIO,WAAWH,GAAKV,GAE9DQ,EAAIM,KAAMf,EAAQQ,GAAM,IACxBC,EAAIM,KAAMlB,EAASW,GAAM,GAAMZ,GAC/Ba,EAAIM,KAAMlB,EAASW,GAAM,EAAKZ,GAC9Ba,EAAIM,KAAMlB,EAAQW,EAAOZ,IAG3B,OAAOa,ECrHL,IAACH,EAAmBZ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\n\n\n// VARIABLES //\n\n// 2^6-1 = 63 => 0x3f => 00111111\nvar Ox3F = 63|0;\n\n// 2^7 = 128 => 0x80 => 10000000\nvar Ox80 = 128|0;\n\n// 192 => 0xc0 => 11000000\nvar OxC0 = 192|0;\n\n// 224 => 0xe0 => 11100000\nvar OxE0 = 224|0;\n\n// 240 => 0xf0 => 11110000\nvar OxF0 = 240|0;\n\n// 2^10-1 = 1023 => 0x3ff => 00000011 11111111\nvar Ox3FF = 1023|0;\n\n// 2^11 = 2048 => 0x800 => 00001000 00000000\nvar Ox800 = 2048|0;\n\n// 55296 => 11011000 00000000\nvar OxD800 = 55296|0;\n\n// 57344 => 11100000 00000000\nvar OxE000 = 57344|0;\n\n// 2^16 = 65536 => 00000000 00000001 00000000 00000000\nvar Ox10000 = 65536|0;\n\n\n// MAIN //\n\n/**\n* Converts a UTF-16 encoded string to an array of integers using UTF-8 encoding.\n*\n* ## Method\n*\n* -   UTF-8 is defined to encode code points in one to four bytes, depending on the number of significant bits in the numerical value of the code point.\n*\n* -   UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).\n*\n* -   UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words.\n*\n* -   Let `N` be the number of significant bits.\n*\n* -   If `N <= 7` (i.e., U+0000 to U+007F), a code point is encoded in a single byte.\n*\n*     ```text\n*     0xxxxxxx\n*     ```\n*\n*     where an `x` refers to a code point bit.\n*\n* -   If `N <= 11` (i.e., U+0080 to U+07FF; ASCII characters), a code point is encoded in two bytes (5+6 bits).\n*\n*     ```text\n*     110xxxxx 10xxxxxx\n*     ```\n*\n* -   If `N <= 16` (i.e., U+0800 to U+FFFF), a code point is encoded in three bytes (4+6+6 bits).\n*\n*     ```text\n*     1110xxxx 10xxxxxx 10xxxxxx\n*     ```\n*\n* -   If `N <= 21` (i.e., U+10000 to U+10FFFF), a code point is encoded in four bytes (3+6+6+6 bits).\n*\n*     ```text\n*     11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n*     ```\n*\n*\n* @param {string} str - string to convert\n* @throws {TypeError} must provide a string\n* @returns {Array} array of integers\n* @see [UTF-8]{@link https://en.wikipedia.org/wiki/UTF-8}\n* @see [Stack Overflow]{@link https://stackoverflow.com/questions/6240055/manually-converting-unicode-codepoints-into-utf-8-and-utf-16}\n*\n* @example\n* var str = '☃';\n* var out = utf16ToUTF8Array( str );\n* // returns [ 226, 152, 131 ]\n*/\nfunction utf16ToUTF8Array( str ) {\n\tvar code;\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a string. Value: `'+str+'`.' );\n\t}\n\tlen = str.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tcode = str.charCodeAt( i );\n\n\t\t// ASCII...\n\t\tif ( code < Ox80 ) {\n\t\t\tout.push( code );\n\t\t}\n\t\t// UTF-16 non-surrogate pair...\n\t\telse if ( code < Ox800 ) {\n\t\t\tout.push( OxC0 | (code>>6) );\n\t\t\tout.push( Ox80 | (code & Ox3F) );\n\t\t}\n\t\telse if ( code < OxD800 || code >= OxE000 ) {\n\t\t\tout.push( OxE0 | (code>>12) );\n\t\t\tout.push( Ox80 | ((code>>6) & Ox3F) );\n\t\t\tout.push( Ox80 | (code & Ox3F) );\n\t\t}\n\t\t// UTF-16 surrogate pair...\n\t\telse {\n\t\t\ti += 1;\n\n\t\t\t// eslint-disable-next-line max-len\n\t\t\tcode = Ox10000 + (((code & Ox3FF)<<10) | (str.charCodeAt(i) & Ox3FF));\n\n\t\t\tout.push( OxF0 | (code>>18) );\n\t\t\tout.push( Ox80 | ((code>>12) & Ox3F) );\n\t\t\tout.push( Ox80 | ((code>>6) & Ox3F) );\n\t\t\tout.push( Ox80 | (code & Ox3F) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default utf16ToUTF8Array;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a UTF-16 encoded string to an array of integers using UTF-8 encoding.\n*\n* @module @stdlib/string/utf16-to-utf8-array\n*\n* @example\n* var utf16ToUTF8Array = require( '@stdlib/string/utf16-to-utf8-array' );\n*\n* var str = '☃';\n* var out = utf16ToUTF8Array( str );\n* // returns [ 226, 152, 131 ]\n*/\n\n// MODULES //\nvar utf16ToUTF8Array = __var_0__;\n\n\n// EXPORTS //\nexport default utf16ToUTF8Array;\n"]}