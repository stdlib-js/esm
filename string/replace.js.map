{"version":3,"sources":["@stdlib/string/replace/lib/replace.js","@stdlib/string/replace/lib/index.js"],"names":["rescape","__var_0__","isFunction","__var_1__","isString","__var_2__","isPrimitive","isRegExp","__var_3__","replace","str","search","newval","TypeError","RegExp"],"mappings":"4KAyBA,IAAIA,EAAUC,EACVC,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAWC,EAsCf,SAASC,EAASC,EAAKC,EAAQC,GAC9B,IAAMR,EAAUM,GACf,MAAM,IAAIG,UAAW,wEAA0EH,EAAM,MAEtG,GAAKN,EAAUO,GACdA,EAASX,EAASW,GAClBA,EAAS,IAAIG,OAAQH,EAAQ,UAEzB,IAAMJ,EAAUI,GACpB,MAAM,IAAIE,UAAW,+FAAiGF,EAAS,MAEhI,IAAMP,EAAUQ,KAAaV,EAAYU,GACxC,MAAM,IAAIC,UAAW,gGAAkGD,EAAS,MAEjI,OAAOF,EAAID,QAASE,EAAQC,GCzC1B,IAACH,EAAUR","sourcesContent":["import __var_0__ from '@stdlib/utils/escape-regexp-string';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-regexp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar rescape = __var_0__;\nvar isFunction = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isRegExp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Replace search occurrences with a replacement string.\n*\n* @param {string} str - input string\n* @param {(string|RegExp)} search - search expression\n* @param {(string|Function)} newval - replacement value or function\n* @throws {TypeError} first argument must be a string primitive\n* @throws {TypeError} second argument argument must be a string primitive or regular expression\n* @throws {TypeError} third argument must be a string primitive or function\n* @returns {string} new string containing replacement(s)\n*\n* @example\n* var str = 'beep';\n* var out = replace( str, 'e', 'o' );\n* // returns 'boop'\n*\n* @example\n* var str = 'Hello World';\n* var out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*\n* @example\n* var capitalize = require( '@stdlib/string/capitalize' );\n*\n* var str = 'Oranges and lemons say the bells of St. Clement\\'s';\n*\n* function replacer( match, p1 ) {\n*     return capitalize( p1 );\n* }\n*\n* var out = replace( str, /([^\\s]*)/gi, replacer);\n* // returns 'Oranges And Lemons Say The Bells Of St. Clement\\'s'\n*/\nfunction replace( str, search, newval ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `' + str + '`.' );\n\t}\n\tif ( isString( search ) ) {\n\t\tsearch = rescape( search );\n\t\tsearch = new RegExp( search, 'g' );\n\t}\n\telse if ( !isRegExp( search ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a string primitive or regular expression. Value: `' + search + '`.' );\n\t}\n\tif ( !isString( newval ) && !isFunction( newval ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a string primitive or replacement function. Value: `' + newval + '`.' );\n\t}\n\treturn str.replace( search, newval );\n}\n\n\n// EXPORTS //\nexport default replace;\n","import __var_0__ from './replace.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Replace search occurrences with a replacement string.\n*\n* @module @stdlib/string/replace\n*\n* @example\n* var replace = require( '@stdlib/string/replace' );\n*\n* var str = 'beep';\n* var out = replace( str, 'e', 'o' );\n* // returns 'boop'\n*\n* str = 'Hello World';\n* out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*/\n\n// MODULES //\nvar replace = __var_0__;\n\n\n// EXPORTS //\nexport default replace;\n"]}