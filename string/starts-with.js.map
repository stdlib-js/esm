{"version":3,"sources":["@stdlib/string/starts-with/lib/starts_with.js","@stdlib/string/starts-with/lib/index.js"],"names":["isInteger","__var_0__","isPrimitive","isString","__var_1__","startsWith","str","search","position","pos","i","TypeError","arguments","length","charCodeAt"],"mappings":"iFAuBA,IAAIA,EAAYC,EAAUC,YACtBC,EAAWC,EAAUF,YAwCzB,SAASG,EAAYC,EAAKC,EAAQC,GACjC,IAAIC,EACAC,EACJ,IAAMP,EAAUG,GACf,MAAM,IAAIK,UAAW,wEAA0EL,EAAM,MAEtG,IAAMH,EAAUI,GACf,MAAM,IAAII,UAAW,yEAA2EJ,EAAS,MAE1G,GAAKK,UAAUC,OAAS,EAAI,CAC3B,IAAMb,EAAWQ,GAChB,MAAM,IAAIG,UAAW,gEAAkEH,EAAW,MAGlGC,EADID,EAAW,EACTF,EAAIO,OAASL,EAEbA,OAGPC,EAAM,EAEP,GAAuB,IAAlBF,EAAOM,OACX,OAAO,EAER,GACCJ,EAAM,GACNA,EAAMF,EAAOM,OAASP,EAAIO,OAE1B,OAAO,EAER,IAAMH,EAAI,EAAGA,EAAIH,EAAOM,OAAQH,IAC/B,GAAKJ,EAAIQ,WAAYL,EAAMC,KAAQH,EAAOO,WAAYJ,GACrD,OAAO,EAGT,OAAO,ECvDL,IAACL,EAAaJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-integer';\nimport __var_1__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests if a string starts with the characters of another string.\n*\n* @param {string} str - input string\n* @param {string} search - search string\n* @param {integer} [position=0] - position at which to start searching\n* @throws {TypeError} first argument must be a string primitive\n* @throws {TypeError} second argument must be a string primitive\n* @throws {TypeError} third argument must be an integer\n* @returns {boolean} boolean indicating if the input string starts with the search string\n*\n* @example\n* var bool = startsWith( 'Remember the story I used to tell you when you were a boy?', 'Remember' );\n* // returns true\n*\n* @example\n* var bool = startsWith( 'Remember the story I used to tell you when you were a boy?', 'Remember, remember' );\n* // returns false\n*\n* @example\n* var bool = startsWith( 'To be, or not to be, that is the question.', 'To be' );\n* // returns true\n*\n* @example\n* var bool = startsWith( 'To be, or not to be, that is the question.', 'to be' );\n* // returns false\n*\n* @example\n* var bool = startsWith( 'To be, or not to be, that is the question.', 'to be', 14 );\n* // returns true\n*\n* @example\n* var bool = startsWith( 'To be, or not to be, that is the question.', 'quest', -9 );\n* // returns true\n*/\nfunction startsWith( str, search, position ) {\n\tvar pos;\n\tvar i;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `' + str + '`.' );\n\t}\n\tif ( !isString( search ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a string primitive. Value: `' + search + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isInteger( position ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + position + '`.' );\n\t\t}\n\t\tif ( position < 0 ) {\n\t\t\tpos = str.length + position;\n\t\t} else {\n\t\t\tpos = position;\n\t\t}\n\t} else {\n\t\tpos = 0;\n\t}\n\tif ( search.length === 0 ) {\n\t\treturn true;\n\t}\n\tif (\n\t\tpos < 0 ||\n\t\tpos + search.length > str.length\n\t) {\n\t\treturn false;\n\t}\n\tfor ( i = 0; i < search.length; i++ ) {\n\t\tif ( str.charCodeAt( pos + i ) !== search.charCodeAt( i ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\nexport default startsWith;\n","import __var_0__ from './starts_with.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a string starts with the characters of another string.\n*\n* @module @stdlib/string/starts-with\n*\n* @example\n* var startsWith = require( '@stdlib/string/starts-with' );\n*\n* var str = 'Fair is foul, and foul is fair, hover through fog and filthy air';\n* var bool = startsWith( str, 'Fair' );\n* // returns true\n*\n* bool = startsWith( str, 'fair' );\n* // returns false\n*\n* bool = startsWith( str, 'foul', 8 );\n* // returns true\n*\n* bool = startsWith( str, 'filthy', -10 );\n* // returns true\n*/\n\n// MODULES //\nvar startsWith = __var_0__;\n\n\n// EXPORTS //\nexport default startsWith;\n"]}