{"version":3,"sources":["@stdlib/string/pad/lib/validate.js","@stdlib/string/pad/lib/pad.js","@stdlib/string/pad/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isString","__var_2__","isPrimitive","isBoolean","__var_3__","validate","opts","options","lpad","TypeError","rpad","centerRight","isNonNegativeInteger","repeat","floor","ceil","__var_4__","__var_5__","__var_6__","abs","__var_7__","FLOAT64_MAX_SAFE_INTEGER","__var_8__","__var_9__","pad","str","len","nright","nleft","isodd","right","left","err","tmp","n","RangeError","arguments","length","substring"],"mappings":"kgBAyBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAYC,EAAUF,YA2B1B,SAASG,EAAUC,EAAMC,GACxB,OAAMX,EAAeW,GAGhBT,EAAYS,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdR,EAAUM,EAAKE,OACb,IAAIC,UAAW,sEAAwEH,EAAKE,KAAO,MAGvGV,EAAYS,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdV,EAAUM,EAAKI,OACb,IAAID,UAAW,sEAAwEH,EAAKI,KAAO,MAGvGZ,EAAYS,EAAS,iBACzBD,EAAKK,YAAcJ,EAAQI,aACrBR,EAAWG,EAAKK,cACd,IAAIF,UAAW,8EAAgFH,EAAKK,YAAc,MAGpH,KApBC,IAAIF,UAAW,iEAAmEF,EAAU,MC1BrG,IAAIK,EAAuBf,EAAUK,YACjCF,EAAWD,EAAUG,YACrBW,EAASZ,EACTa,EAAQV,EACRW,EAAOC,EACPR,EAAOS,EACPP,EAAOQ,EACPC,EAAMC,EACNC,EAA2BC,EAC3BjB,EAAWkB,EAsDf,SAASC,EAAKC,EAAKC,EAAKnB,GACvB,IAAIoB,EACAC,EACAC,EACAC,EACAC,EACAzB,EACA0B,EACAC,EACAC,EACJ,IAAMlC,EAAUyB,GACf,MAAM,IAAIhB,UAAW,8DAAgEgB,EAAM,MAE5F,IAAMb,EAAsBc,GAC3B,MAAM,IAAIjB,UAAW,4EAA8EiB,EAAM,MAE1G,GAAKA,EAAML,EACV,MAAM,IAAIc,WAAY,yFAAyFT,EAAI,MAGpH,GADApB,EAAO,GACF8B,UAAUC,OAAS,IACvBL,EAAM3B,EAAUC,EAAMC,IAErB,MAAMyB,EAGR,GAAK1B,EAAKE,MAAQF,EAAKI,KAEtB,OAAW,KADXwB,GAAMR,EAAID,EAAIY,QAAW,GAEjBZ,IAERQ,EAAMnB,EAAOoB,MACAA,IACZL,GAAQ,GAEJK,EAAI,GAERN,EADAM,EAAIpB,EAAOK,EAAKe,IAEhBP,EAASF,EAAIY,OAASH,EAGjBL,IACCvB,EAAKK,YACTgB,GAAU,EAEVC,GAAS,GAGJH,EAAIa,UAAWV,EAAOD,KAE9BC,EAAQb,EAAMmB,EAAI5B,EAAKE,KAAK6B,QAC5BN,EAAOlB,EAAQP,EAAKE,KAAMoB,GAE1BD,EAASZ,EAAMmB,EAAI5B,EAAKI,KAAK2B,QAC7BP,EAAQjB,EAAQP,EAAKI,KAAMiB,GAI3BC,EADAM,EAAID,EAEJN,EAASO,EACJL,IACCvB,EAAKK,YACTiB,GAAS,EAETD,GAAU,IAGZI,EAAOA,EAAKO,UAAW,EAAGV,IAEZH,GADdK,EAAQA,EAAMQ,UAAW,EAAGX,MAG7B,GAAKrB,EAAKE,KAET,OADAyB,EAAMzB,EAAMiB,EAAKC,EAAKpB,EAAKE,OAChB8B,UAAWL,EAAII,OAAOX,GAElC,GAAKpB,EAAKI,KACT,OAASA,EAAMe,EAAKC,EAAKpB,EAAKI,MAAS4B,UAAW,EAAGZ,GAEtD,QAAmB,IAAdpB,EAAKI,KACT,OAASA,EAAMe,EAAKC,EAAK,KAAQY,UAAW,EAAGZ,GAEhD,MAAM,IAAIS,WAAY,mGAAqG7B,EAAKE,KAAO,sBAAwBF,EAAKI,KAAO,MCpHzK,IAACc,EAAM3B","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-boolean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isBoolean = __var_3__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.lpad] - string used to left pad\n* @param {string} [options.rpad] - string used to right pad\n* @param {boolean} [options.centerRight] - boolean indicating whether to center right in the event of a tie\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'lpad': 'a',\n*     'rpad': 'b'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'lpad' ) ) {\n\t\topts.lpad = options.lpad;\n\t\tif ( !isString( opts.lpad ) ) {\n\t\t\treturn new TypeError( 'invalid option. `lpad` option must be a string primitive. Option: `' + opts.lpad + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'rpad' ) ) {\n\t\topts.rpad = options.rpad;\n\t\tif ( !isString( opts.rpad ) ) {\n\t\t\treturn new TypeError( 'invalid option. `rpad` option must be a string primitive. Option: `' + opts.rpad + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'centerRight' ) ) {\n\t\topts.centerRight = options.centerRight;\n\t\tif ( !isBoolean( opts.centerRight ) ) {\n\t\t\treturn new TypeError( 'invalid option. `centerRight` option must be a boolean primitive. Option: `' + opts.centerRight + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/string/repeat';\nimport __var_3__ from '@stdlib/math/base/special/floor';\nimport __var_4__ from '@stdlib/math/base/special/ceil';\nimport __var_5__ from '@stdlib/string/left-pad';\nimport __var_6__ from '@stdlib/string/right-pad';\nimport __var_7__ from '@stdlib/math/base/special/abs';\nimport __var_8__ from '@stdlib/constants/math/float64-max-safe-integer';\nimport __var_9__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar repeat = __var_2__;\nvar floor = __var_3__;\nvar ceil = __var_4__;\nvar lpad = __var_5__;\nvar rpad = __var_6__;\nvar abs = __var_7__;\nvar FLOAT64_MAX_SAFE_INTEGER = __var_8__;\nvar validate = __var_9__;\n\n\n// MAIN //\n\n/**\n* Pads a string such that the padded string has a length of `len`.\n*\n* @param {string} str - string to pad\n* @param {NonNegativeInteger} len - string length\n* @param {Options} [options] - function options\n* @param {string} [options.lpad=''] - string used to left pad\n* @param {string} [options.rpad=' '] - string used to right pad\n* @param {boolean} [options.centerRight=false] - boolean indicating whether to center right in the event of a tie\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} at least one padding must have a length greater than `0`\n* @returns {string} padded string\n*\n* @example\n* var str = pad( 'a', 5 );\n* // returns 'a    '\n*\n* @example\n* var str = pad( 'a', 10, {\n*     'lpad': 'b'\n* });\n* // returns 'bbbbbbbbba'\n*\n* @example\n* var str = pad( 'a', 12, {\n*     'rpad': 'b'\n* });\n* // returns 'abbbbbbbbbbb'\n*\n* @example\n* var opts = {\n*     'lpad': 'a',\n*     'rpad': 'c'\n* };\n* var str = pad( 'b', 10, opts );\n* // returns 'aaaabccccc'\n*\n* @example\n* var opts = {\n*     'lpad': 'a',\n*     'rpad': 'c',\n*     'centerRight': true\n* };\n* var str = pad( 'b', 10, opts );\n* // returns 'aaaaabcccc'\n*/\nfunction pad( str, len, options ) {\n\tvar nright;\n\tvar nleft;\n\tvar isodd;\n\tvar right;\n\tvar left;\n\tvar opts;\n\tvar err;\n\tvar tmp;\n\tvar n;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );\n\t}\n\tif ( len > FLOAT64_MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( 'invalid argument. Output string length exceeds maximum allowed string length. Value: `'+len+'`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.lpad && opts.rpad ) {\n\t\tn = ( len-str.length ) / 2;\n\t\tif ( n === 0 ) {\n\t\t\treturn str;\n\t\t}\n\t\ttmp = floor( n );\n\t\tif ( tmp !== n ) {\n\t\t\tisodd = true;\n\t\t}\n\t\tif ( n < 0 ) {\n\t\t\tn = floor( abs( n ) );\n\t\t\tnleft = n;\n\t\t\tnright = str.length - n;\n\n\t\t\t// If |len-str.length| is an odd number, take away an additional character from one side...\n\t\t\tif ( isodd ) {\n\t\t\t\tif ( opts.centerRight ) {\n\t\t\t\t\tnright -= 1;\n\t\t\t\t} else {\n\t\t\t\t\tnleft += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str.substring( nleft, nright );\n\t\t}\n\t\tnleft = ceil( n / opts.lpad.length );\n\t\tleft = repeat( opts.lpad, nleft );\n\n\t\tnright = ceil( n / opts.rpad.length );\n\t\tright = repeat( opts.rpad, nright );\n\n\t\t// If (len-str.length) is an odd number, give one side one extra character...\n\t\tn = tmp;\n\t\tnleft = n;\n\t\tnright = n;\n\t\tif ( isodd ) {\n\t\t\tif ( opts.centerRight ) {\n\t\t\t\tnleft += 1;\n\t\t\t} else {\n\t\t\t\tnright += 1;\n\t\t\t}\n\t\t}\n\t\tleft = left.substring( 0, nleft );\n\t\tright = right.substring( 0, nright );\n\t\treturn left + str + right;\n\t}\n\tif ( opts.lpad ) {\n\t\ttmp = lpad( str, len, opts.lpad );\n\t\treturn tmp.substring( tmp.length-len );\n\t}\n\tif ( opts.rpad ) {\n\t\treturn ( rpad( str, len, opts.rpad ) ).substring( 0, len );\n\t}\n\tif ( opts.rpad === void 0 ) {\n\t\treturn ( rpad( str, len, ' ' ) ).substring( 0, len );\n\t}\n\tthrow new RangeError( 'invalid argument. At least one padding option must have a length greater than 0. Left padding: `' + opts.lpad + '`. Right padding: `' + opts.rpad + '`.' );\n}\n\n\n// EXPORTS //\nexport default pad;\n","import __var_0__ from './pad.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pad a string.\n*\n* @module @stdlib/string/pad\n*\n* @example\n* var pad = require( '@stdlib/string/pad' );\n*\n* var str = pad( 'a', 5 );\n* // returns 'a    '\n*\n* str = pad( 'a', 10, {\n*     'lpad': 'b'\n* });\n* // returns 'bbbbbbbbba'\n*\n* str = pad( 'a', 12, {\n*     'rpad': 'b'\n* });\n* // returns 'abbbbbbbbbbb'\n*\n* var opts = {\n*     'lpad': 'a',\n*     'rpad': 'c'\n* };\n* str = pad( 'b', 10, opts );\n* // returns 'aaaabccccc'\n*\n* opts = {\n*     'lpad': 'a',\n*     'rpad': 'c',\n*     'centerRight': true\n* };\n* str = pad( 'b', 10, opts );\n* // returns 'aaaaabcccc'\n*/\n\n// MODULES //\nvar pad = __var_0__;\n\n\n// EXPORTS //\nexport default pad;\n"]}