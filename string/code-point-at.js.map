{"version":3,"sources":["@stdlib/string/code-point-at/lib/main.js","@stdlib/string/code-point-at/lib/index.js"],"names":["isBoolean","__var_0__","isPrimitive","isString","__var_1__","isNonNegativeInteger","__var_2__","Ox10000","Ox400","OxD800","OxDBFF","OxDC00","OxDFFF","codePointAt","str","idx","backward","code","FLG","low","hi","TypeError","length","RangeError","arguments","charCodeAt"],"mappings":"sIAwBA,IAAIA,EAAYC,EAAUC,YACtBC,EAAWC,EAAUF,YACrBG,EAAuBC,EAAUJ,YAMjCK,EAAU,MACVC,EAAQ,KAGRC,EAAS,MACTC,EAAS,MAGTC,EAAS,MACTC,EAAS,MAuCb,SAASC,EAAaC,EAAKC,EAAKC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EAEJ,IAAMjB,EAAUW,GACf,MAAM,IAAIO,UAAW,oDAAsDP,EAAM,MAElF,IAAMT,EAAsBU,GAC3B,MAAM,IAAIM,UAAW,kFAAoFN,EAAM,MAEhH,GAAKA,GAAOD,EAAIQ,OACf,MAAM,IAAIC,WAAY,mFAAqFR,EAAM,MAElH,GAAKS,UAAUF,OAAS,EAAI,CAC3B,IAAMtB,EAAWgB,GAChB,MAAM,IAAIK,UAAW,+DAAiEL,EAAW,MAElGE,EAAMF,OAENE,GAAM,EAKP,OAHAD,EAAOH,EAAIW,WAAYV,KAGVN,GAAUQ,GAAQP,GAAUK,EAAMD,EAAIQ,OAAS,GAC3DF,EAAKH,EACLE,EAAML,EAAIW,WAAYV,EAAI,GACrBJ,GAAUQ,GAAOA,GAAOP,GACjBQ,EAAKX,GAAWD,GAAYW,EAAMR,GAAWJ,EAElDa,GAGHF,GACCD,GAAQN,GAAUM,GAAQL,GAAUG,GAAO,GAC/CK,EAAKN,EAAIW,WAAYV,EAAI,GACzBI,EAAMF,EACDR,GAAUW,GAAMA,GAAMV,GACfU,EAAKX,GAAWD,GAAYW,EAAMR,GAAWJ,EAElDY,GAGFF,ECxFL,IAACJ,EAAcZ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar isNonNegativeInteger = __var_2__.isPrimitive;\n\n\n// VARIABLES //\n\n// Factors for converting individual surrogates\nvar Ox10000 = 0x10000|0; // 65536\nvar Ox400 = 0x400|0; // 1024\n\n// Range for a high surrogate\nvar OxD800 = 0xD800|0; // 55296\nvar OxDBFF = 0xDBFF|0; // 56319\n\n// Range for a low surrogate\nvar OxDC00 = 0xDC00|0; // 56320\nvar OxDFFF = 0xDFFF|0; // 57343\n\n\n// MAIN //\n\n/**\n* Returns a Unicode code point from a string at a specified position.\n*\n* ## Notes\n*\n* -   UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).\n* -   UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words: a high and a low surrogate.\n*\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} idx - position\n* @param {boolean} [backward=false] - backward iteration for low surrogates\n* @throws {TypeError} first argument must be a string primitive\n* @throws {TypeError} second argument must be a number primitive having a nonnegative integer\n* @throws {TypeError} third argument must be a boolean primitive\n* @throws {RangeError} position must be a valid index in string\n* @returns {NonNegativeInteger} code point\n*\n* @example\n* var out = codePointAt( 'last man standing', 4 );\n* // returns 32\n*\n* @example\n* var out = codePointAt( 'presidential election', 8, true );\n* // returns 116\n*\n* @example\n* var out = codePointAt( 'अनुच्छेद', 2 );\n* // returns 2369\n*\n* @example\n* var out = codePointAt( '🌷', 1, true );\n* // returns 127799\n*/\nfunction codePointAt( str, idx, backward ) {\n\tvar code;\n\tvar FLG;\n\tvar low;\n\tvar hi;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a valid position (nonnegative integer). Value: `' + idx + '`.' );\n\t}\n\tif ( idx >= str.length ) {\n\t\tthrow new RangeError( 'invalid argument. Must provide a valid position (within string bounds). Value: `' + idx + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isBoolean( backward ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a boolean. Value: `' + backward + '`.' );\n\t\t}\n\t\tFLG = backward;\n\t} else {\n\t\tFLG = false;\n\t}\n\tcode = str.charCodeAt( idx );\n\n\t// High surrogate\n\tif ( code >= OxD800 && code <= OxDBFF && idx < str.length - 1 ) {\n\t\thi = code;\n\t\tlow = str.charCodeAt( idx+1 );\n\t\tif ( OxDC00 <= low && low <= OxDFFF ) {\n\t\t\treturn ( ( hi - OxD800 ) * Ox400 ) + ( low - OxDC00 ) + Ox10000;\n\t\t}\n\t\treturn hi;\n\t}\n\t// Low surrogate - support only if backward iteration is desired\n\tif ( FLG ) {\n\t\tif ( code >= OxDC00 && code <= OxDFFF && idx >= 1 ) {\n\t\t\thi = str.charCodeAt( idx-1 );\n\t\t\tlow = code;\n\t\t\tif ( OxD800 <= hi && hi <= OxDBFF ) {\n\t\t\t\treturn ( ( hi - OxD800 ) * Ox400 ) + ( low - OxDC00 ) + Ox10000;\n\t\t\t}\n\t\t\treturn low;\n\t\t}\n\t}\n\treturn code;\n}\n\n\n// EXPORTS //\nexport default codePointAt;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a Unicode code point from a string at a specified position.\n*\n* @module @stdlib/string/code-point-at\n*\n* @example\n* var codePointAt = require( '@stdlib/string/code-point-at' );\n*\n* var out = codePointAt( 'अनुच्छेद', 2 );\n* // returns 2369\n*\n* out = codePointAt( '🌷', 1, true );\n* // returns 127799\n*/\n\n// MODULES //\nvar codePointAt = __var_0__;\n\n\n// EXPORTS //\nexport default codePointAt;\n"]}