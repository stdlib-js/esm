{"version":3,"sources":["@stdlib/utils/memoize/lib/memoize.js","@stdlib/utils/memoize/lib/index.js"],"names":["isFunction","__var_0__","setReadOnly","__var_1__","identity","__var_2__","hasOwnProp","__var_3__","memoize","fcn","hashFunction","toKey","cache","TypeError","arguments","length","memoized","args","out","key","i","Array","toString","apply"],"mappings":"2LAyBA,IAAIA,EAAaC,EACbC,EAAcC,EACdC,EAAWC,EACXC,EAAaC,EAiCjB,SAASC,EAASC,EAAKC,GACtB,IAAIC,EACAC,EACJ,IAAMZ,EAAYS,GACjB,MAAM,IAAII,UAAW,gEAAgEJ,EAAI,MAE1F,GAAKK,UAAUC,OAAS,EACvBJ,EAAQP,OAGR,IAAMJ,EADNW,EAAQD,GAEP,MAAM,IAAIG,UAAW,wEAA0EF,EAAQ,MAKzG,OADAT,EAAac,EAAU,QADvBJ,EAAQ,IAEDI,EASP,SAASA,IACR,IAAIC,EACAC,EACAC,EACAC,EAEJ,IADAH,EAAO,IAAII,MAAOP,UAAUC,QACtBK,EAAI,EAAGA,EAAIN,UAAUC,OAAQK,IAClCH,EAAMG,GAAMN,UAAWM,GAGxB,OADAD,EAAMR,EAAOM,GAAOK,WACfhB,EAAYM,EAAOO,GAChBP,EAAOO,IAEfD,EAAMT,EAAIc,MAAO,KAAMN,GACvBL,EAAOO,GAAQD,EACRA,ICpDN,IAACV,EAAUP","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/identity-function';\nimport __var_3__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar setReadOnly = __var_1__;\nvar identity = __var_2__;\nvar hasOwnProp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a memoized function.\n*\n* @param {Function} fcn - function to memoize\n* @param {Function} [hashFunction] - function to map a set of arguments to a single value identifying that set\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} memoized function\n*\n* @example\n* function factorial( n ) {\n*     var prod;\n*     var i;\n*     prod = 1;\n*     for ( i = n; i > 1; i-- ) {\n*         prod *= i;\n*     }\n*     return prod;\n* }\n*\n* var memoized = memoize( factorial );\n*\n* var v = memoized( 5 );\n* // returns 120\n*\n* v = memoized( 5 );\n* // returns 120\n*/\nfunction memoize( fcn, hashFunction ) {\n\tvar toKey;\n\tvar cache;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\ttoKey = identity;\n\t} else {\n\t\ttoKey = hashFunction;\n\t\tif ( !isFunction( toKey ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Hash function argument must be a function. Value: `' + toKey + '`.' );\n\t\t}\n\t}\n\tcache = {};\n\tsetReadOnly( memoized, 'cache', cache );\n\treturn memoized;\n\n\t/**\n\t* Memoized function.\n\t*\n\t* @private\n\t* @param {...*} args - function arguments\n\t* @returns {*} memoized function result\n\t*/\n\tfunction memoized() {\n\t\tvar args;\n\t\tvar out;\n\t\tvar key;\n\t\tvar i;\n\t\targs = new Array( arguments.length );\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\t\tkey = toKey( args ).toString();\n\t\tif ( hasOwnProp( cache, key ) ) {\n\t\t\treturn cache[ key ];\n\t\t}\n\t\tout = fcn.apply( null, args );\n\t\tcache[ key ] = out;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default memoize;\n","import __var_0__ from './memoize.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Memoize a function.\n*\n* @module @stdlib/utils/memoize\n*\n* @example\n* var memoize = require( '@stdlib/utils/memoize' );\n*\n* function factorial( n ) {\n*     var prod;\n*     var i;\n*     prod = 1;\n*     for ( i = n; i > 1; i-- ) {\n*         prod *= i;\n*     }\n*     return prod;\n* }\n*\n* var memoized = memoize( factorial );\n*\n* var v = memoized( 5 );\n* // returns 120\n*\n* v = memoized( 5 );\n* // returns 120\n*/\n\n// MODULES //\nvar memoize = __var_0__;\n\n\n// EXPORTS //\nexport default memoize;\n"]}