{"version":3,"sources":["@stdlib/utils/doubly-linked-list/lib/node.js","@stdlib/utils/doubly-linked-list/lib/main.js","@stdlib/utils/doubly-linked-list/lib/index.js"],"names":["defineProperty","__var_0__","Node","value","this","configurable","enumerable","get","_next","_prev","writable","setReadOnly","setReadOnlyAccessor","__var_1__","iteratorSymbol","__var_2__","__var_3__","DoublyLinkedList","_length","_first","_last","prototype","node","location","loc","n","arguments","length","Error","push","unshift","direction","values","iter","self","FLG","dir","inc","i","toArray","next","end","factory","done","iterator","shift","pop","out","type","data","doublyLinkedList"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\n\n\n// MAIN //\n\n/**\n* List node constructor.\n*\n* @private\n* @constructor\n* @param {*} value - node value\n* @returns {Node} Node instance\n*\n* @example\n* var node = new Node( 'foo' );\n* // returns <Node>\n*/\nfunction Node( value ) { // eslint-disable-line stdlib/no-redeclare\n\t// Why getters? Because some of the list APIs will return the list \"node\", not the value. In which case, the node API is no longer private and we have to guard against users mucking about (deleting, updating, etc) with property values (in particular, the `next` and `prev` properties).\n\tdefineProperty( this, 'next', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() { // eslint-disable-line no-restricted-syntax\n\t\t\treturn this._next;\n\t\t}\n\t});\n\tdefineProperty( this, 'prev', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() { // eslint-disable-line no-restricted-syntax\n\t\t\treturn this._prev;\n\t\t}\n\t});\n\tthis.value = value;\n\n\tdefineProperty( this, '_next', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': null\n\t});\n\tdefineProperty( this, '_prev', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': null\n\t});\n\n\treturn this;\n}\n\n\n// EXPORTS //\nexport default Node;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/symbol/iterator';\nimport __var_3__ from './node.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar iteratorSymbol = __var_2__;\nvar Node = __var_3__;\n\n\n// MAIN //\n\n/**\n* Doubly linked list constructor.\n*\n* @constructor\n* @returns {DoublyLinkedList} linked list instance\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Remove the last value:\n* var v = list.pop();\n* // returns 'bar'\n*\n* // Add a new value to the list:\n* list.push( 'beep' );\n*\n* // Remove the first value:\n* v = list.shift();\n* // returns 'foo'\n*/\nfunction DoublyLinkedList() {\n\tif ( !(this instanceof DoublyLinkedList) ) {\n\t\treturn new DoublyLinkedList();\n\t}\n\tthis._length = 0;\n\tthis._first = null;\n\tthis._last = null;\n\treturn this;\n}\n\n/**\n* Clears the list.\n*\n* @name clear\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {DoublyLinkedList} list instance\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the first value:\n* var v = list.first().value;\n* // returns 'foo'\n*\n* // Examine the list length:\n* var len = list.length;\n* // returns 2\n*\n* // Clear all list items:\n* list.clear();\n*\n* // Peek at the first value:\n* v = list.first();\n* // returns undefined\n*\n* // Examine the list length:\n* len = list.length;\n* // returns 0\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'clear', function clear() {\n\tthis._length = 0;\n\tthis._first = null;\n\tthis._last = null;\n\treturn this;\n});\n\n/**\n* Returns the first list node.\n*\n* @name first\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {(Node|void)} list node\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the first value:\n* var v = list.first().value;\n* // returns 'foo'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'first', function first() {\n\tif ( this._length ) {\n\t\treturn this._first;\n\t}\n});\n\n/**\n* Inserts a value into the list either before or after a provided list node.\n*\n* @name insert\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @param {Node} node - node after which to insert the value\n* @param {*} value - value to insert\n* @param {string} [location='after'] - location\n* @throws {Error} must provide a node belonging to the list\n* @throws {Error} must provide a recognized location\n* @returns {DoublyLinkedList} list instance\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' ).push( 'beep' );\n*\n* // Determine the list length:\n* var len = list.length;\n* // returns 3\n*\n* // Get the second node:\n* var node = list.first().next;\n*\n* // Insert a value after the second node:\n* list.insert( node, 'boop' );\n*\n* // Determine the list length:\n* len = list.length;\n* // returns 4\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'insert', function insert( node, value, location ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar loc;\n\tvar n;\n\tif ( arguments.length > 2 ) {\n\t\tloc = location;\n\t\tif ( loc !== 'before' && loc !== 'after' ) {\n\t\t\tthrow new Error( 'invalid argument. Third argument must be a recognized location. Value: `' + loc + '`.' );\n\t\t}\n\t} else {\n\t\tloc = 'after';\n\t}\n\t// Case: insert after last node (equivalent to `push()`)\n\tif ( loc === 'after' && node === this._last ) {\n\t\treturn this.push( value );\n\t}\n\t// Case: insert before first node (equivalent to `unshift()`)\n\tif ( loc === 'before' && node === this._first ) {\n\t\treturn this.unshift( value );\n\t}\n\t// Unfortunately, we need to check whether we have been provided a node belonging to our list by walking the list. If we don't, we could erroneously increment the list length. This means our runtime goes from the theoretical O(1) to O(N).\n\tn = this._first;\n\twhile ( n !== this._last && n !== node ) {\n\t\tn = n._next;\n\t}\n\t// Check if we iterated through the entire list:\n\tif ( n === this._last && n !== node ) {\n\t\tthrow new Error( 'invalid argument. The list does not contain the provided list node.' );\n\t}\n\t// Create a new list node:\n\tn = new Node( value );\n\n\t// Update pointers...\n\tif ( loc === 'after' ) {\n\t\tnode._next._prev = n;\n\t\tn._next = node._next;\n\n\t\tnode._next = n;\n\t\tn._prev = node;\n\t} else {\n\t\tnode._prev._next = n;\n\t\tn._prev = node._prev;\n\n\t\tnode._prev = n;\n\t\tn._next = node;\n\t}\n\t// Increment the list length:\n\tthis._length += 1;\n\n\treturn this;\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Returns an iterator for iterating over a list.\n*\n* ## Notes\n*\n* -   In order to prevent confusion arising from list mutation during iteration, a returned iterator **always** iterates over a list \"snapshot\", which is defined as the list of elements at the time of this method's invocation.\n*\n* @name iterator\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @param {string} [direction=\"forward\"] - iteration direction\n* @throws {Error} must provide a recognized iteration direction\n* @returns {Iterator} iterator\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Create an iterator:\n* var it = list.iterator();\n*\n* // Iterate over the list...\n* var v = it.next().value;\n* // returns 'foo'\n*\n* v = it.next().value;\n* // returns 'bar'\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'iterator', function iterator( direction ) {\n\tvar values;\n\tvar iter;\n\tvar self;\n\tvar FLG;\n\tvar dir;\n\tvar inc;\n\tvar i;\n\tif ( arguments.length ) {\n\t\tdir = direction;\n\t\tif ( dir !== 'forward' && dir !== 'reverse' ) {\n\t\t\tthrow new Error( 'invalid argument. Must provide a recognized iteration direction. Value: `' + dir + '`.' );\n\t\t}\n\t} else {\n\t\tdir = 'forward';\n\t}\n\tself = this;\n\n\t// Initialize the iteration index:\n\tif ( dir === 'forward' ) {\n\t\ti = -1;\n\t\tinc = 1;\n\t} else {\n\t\ti = this._length;\n\t\tinc = -1;\n\t}\n\t// Create a copy of list values (necessary in order to \"snapshot\" the list; otherwise, values could come and go between calls to `next`):\n\tvalues = this.toArray();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += inc;\n\t\tif ( FLG || i < 0 || i >= values.length ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': values[ i ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.iterator();\n\t}\n});\n\n/**\n* Returns the last node.\n*\n* @name last\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {(Node|void)} list node\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the last value:\n* var v = list.last().value;\n* // returns 'bar'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'last', function last() {\n\tif ( this._length ) {\n\t\treturn this._last;\n\t}\n});\n\n/**\n* List length.\n*\n* @name length\n* @memberof DoublyLinkedList.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Examine the initial list length:\n* var len = list.length;\n* // returns 0\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Retrieve the current list length:\n* len = list.length;\n* // returns 2\n*/\nsetReadOnlyAccessor( DoublyLinkedList.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Removes a value from the end of the list.\n*\n* @name pop\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {(*|void)} removed value\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Remove the last value:\n* var v = list.pop();\n* // returns 'bar'\n*\n* // Add a new value to the list:\n* list.push( 'beep' );\n*\n* // Remove the last value:\n* v = list.pop();\n* // returns 'beep'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'pop', function pop() {\n\t/* eslint-disable no-underscore-dangle */\n\tvar value;\n\tif ( this._length ) {\n\t\t// Retrieve the last value:\n\t\tvalue = this._last.value;\n\n\t\t// Check whether we have a new \"tail\" or whether we have emptied the list...\n\t\tif ( this._last._prev ) {\n\t\t\tthis._last = this._last._prev;\n\t\t\tthis._last._next = null;\n\t\t} else {\n\t\t\t// List is empty:\n\t\t\tthis._first = null;\n\t\t\tthis._last = null;\n\t\t}\n\t\t// Decrement the list length:\n\t\tthis._length -= 1;\n\t}\n\treturn value;\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Adds a value to the end of the list.\n*\n* @name push\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {DoublyLinkedList} list instance\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Remove the last value:\n* var v = list.pop();\n* // returns 'bar'\n*\n* // Add a new value to the list:\n* list.push( 'beep' );\n*\n* // Remove the last value:\n* v = list.pop();\n* // returns 'beep'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'push', function push( value ) {\n\tvar node;\n\n\t// Create a new list node:\n\tnode = new Node( value );\n\n\t// Check whether the list is currently empty...\n\tif ( this._length === 0 ) {\n\t\t// This is the only list node, making it both the first and last node:\n\t\tthis._first = node;\n\t\tthis._last = node;\n\t} else {\n\t\t// Link the new node to the previous last node:\n\t\tnode._prev = this._last; // eslint-disable-line no-underscore-dangle\n\n\t\t// Link the previous last node to the new node:\n\t\tthis._last._next = node; // eslint-disable-line no-underscore-dangle\n\n\t\t// Update the pointer for the last node:\n\t\tthis._last = node;\n\t}\n\t// Increment the list length:\n\tthis._length += 1;\n\n\treturn this;\n});\n\n/**\n* Removes a list node from the list.\n*\n* @name remove\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @param {Node} node - node to remove\n* @throws {Error} must provide a node belonging to the list\n* @returns {(*|void)} removed value\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' ).push( 'beep' );\n*\n* // Determine the list length:\n* var len = list.length;\n* // returns 3\n*\n* // Get the second node:\n* var node = list.first().next;\n*\n* // Remove the second node:\n* var v = list.remove( node );\n* // returns 'bar'\n*\n* // Determine the list length:\n* len = list.length;\n* // returns 2\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'remove', function remove( node ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar value;\n\tvar n;\n\n\t// Case: first node (equivalent to `shift()`)\n\tif ( node === this._first ) {\n\t\treturn this.shift();\n\t}\n\t// Case: last node (equivalent to `pop()`)\n\tif ( node === this._last ) {\n\t\treturn this.pop();\n\t}\n\t// Retrieve the node value:\n\tvalue = node.value;\n\n\t// Unfortunately, we need to check whether we have been provided a node belonging to our list by walking the list. If we don't, we could erroneously decrement the list length. This means our runtime goes from the theoretical O(1) to O(N).\n\tn = this._first;\n\twhile ( n !== this._last && n !== node ) {\n\t\tn = n._next;\n\t}\n\t// Check if we iterated through the entire list:\n\tif ( n === this._last ) {\n\t\tthrow new Error( 'invalid argument. The list does not contain the provided list node.' );\n\t}\n\t// Update pointers:\n\tnode._prev._next = node._next;\n\tnode._next._prev = node._prev;\n\n\t// Decrement the list length:\n\tthis._length -= 1;\n\n\treturn value;\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Removes a value from the beginning of the list.\n*\n* @name shift\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {(*|void)} removed value\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Remove the first value:\n* var v = list.shift();\n* // returns 'foo'\n*\n* // Add a new value to the list:\n* list.push( 'beep' );\n*\n* // Remove the first value:\n* v = list.shift();\n* // returns 'bar'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'shift', function shift() {\n\t/* eslint-disable no-underscore-dangle */\n\tvar value;\n\tif ( this._length ) {\n\t\t// Retrieve the first value:\n\t\tvalue = this._first.value;\n\n\t\t// Check whether we have a new \"head\" or whether we have emptied the list...\n\t\tif ( this._first._next ) {\n\t\t\tthis._first = this._first._next;\n\t\t\tthis._first._prev = null;\n\t\t} else {\n\t\t\t// List is empty:\n\t\t\tthis._first = null;\n\t\t\tthis._last = null;\n\t\t}\n\t\t// Decrement the list length:\n\t\tthis._length -= 1;\n\t}\n\treturn value;\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Returns an array of list values.\n*\n* @name toArray\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {Array} list values\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Get an array of list values:\n* var vals = list.toArray();\n* // returns [ 'foo', 'bar' ]\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'toArray', function toArray() {\n\tvar node;\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tnode = this._first;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( node.value );\n\t\tnode = node.next;\n\t}\n\treturn out;\n});\n\n/**\n* Serializes a list as JSON.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `DoublyLinkedList` instance.\n*\n* @name toJSON\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {Object} serialized list\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Serialize to JSON:\n* var o = list.toJSON();\n* // returns { 'type': 'doubly-linked-list', 'data': [ 'foo', 'bar' ] }\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'toJSON', function toJSON() {\n\tvar out = {};\n\tout.type = 'doubly-linked-list';\n\tout.data = this.toArray();\n\treturn out;\n});\n\n/**\n* Adds a value to the beginning of the list.\n*\n* @name unshift\n* @memberof DoublyLinkedList.prototype\n* @type {Function}\n* @returns {DoublyLinkedList} list instance\n*\n* @example\n* var list = new DoublyLinkedList();\n*\n* // Add values to the beginning of the list:\n* list.unshift( 'foo' ).unshift( 'bar' );\n*\n* // Remove the last value:\n* var v = list.pop();\n* // returns 'foo'\n*\n* // Add a new value to the beginning of the list:\n* list.unshift( 'beep' );\n*\n* // Remove the last value:\n* v = list.pop();\n* // returns 'bar'\n*/\nsetReadOnly( DoublyLinkedList.prototype, 'unshift', function unshift( value ) {\n\tvar node;\n\n\t// Create a new list node:\n\tnode = new Node( value );\n\n\t// Check whether the list is currently empty...\n\tif ( this._length === 0 ) {\n\t\t// This is the only list node, making it both the first and last node:\n\t\tthis._first = node;\n\t\tthis._last = node;\n\t} else {\n\t\t// Link the new node to the previous first node:\n\t\tnode._next = this._first; // eslint-disable-line no-underscore-dangle\n\n\t\t// Link the previous first node to the new node:\n\t\tthis._first._prev = node; // eslint-disable-line no-underscore-dangle\n\n\t\t// Update the pointer for the first node:\n\t\tthis._first = node;\n\t}\n\t// Increment the list length:\n\tthis._length += 1;\n\n\treturn this;\n});\n\n\n// EXPORTS //\nexport default DoublyLinkedList;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Doubly linked list.\n*\n* @module @stdlib/utils/doubly-linked-list\n*\n* @example\n* var doublyLinkedList = require( '@stdlib/utils/doubly-linked-list' );\n*\n* var list = doublyLinkedList();\n*\n* // Add values to the list:\n* list.push( 'foo' ).push( 'bar' );\n*\n* // Remove the last value:\n* var v = list.pop();\n* // returns 'bar'\n*\n* // Add a new value to the list:\n* list.push( 'beep' );\n*\n* // Remove the first list value:\n* v = list.shift();\n* // returns 'foo'\n*/\n\n// MODULES //\nvar doublyLinkedList = __var_0__;\n\n\n// EXPORTS //\nexport default doublyLinkedList;\n"]}