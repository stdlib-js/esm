{"version":3,"sources":["@stdlib/utils/keys-in/lib/main.js","@stdlib/utils/keys-in/lib/index.js"],"names":["keysIn","obj","out","key","push","__var_0__"],"mappings":"AA0CA,SAASA,EAAQC,GAChB,IAAIC,EACAC,EAGJ,IAAMA,KADND,EAAM,GACOD,EACZC,EAAIE,KAAMD,GAEX,OAAOD,ECPL,IAACF,EAASK","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of an object's own and inherited enumerable property names.\n*\n* @param {ObjectLike} obj - input object\n* @returns {Array} key array\n*\n* @example\n* function Foo() {\n*     this.beep = 'boop';\n*     return this;\n* }\n*\n* Foo.prototype.foo = 'bar';\n*\n* var obj = new Foo();\n*\n* var keys = keysIn( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keysIn( obj ) {\n\tvar out;\n\tvar key;\n\n\tout = [];\n\tfor ( key in obj ) { // eslint-disable-line guard-for-in\n\t\tout.push( key );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default keysIn;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array of an object's own and inherited enumerable property names.\n*\n* @module @stdlib/utils/keys-in\n*\n* @example\n* var keysIn = require( '@stdlib/utils/keys-in' );\n*\n* function Foo() {\n*     this.beep = 'boop';\n*     return this;\n* }\n*\n* Foo.prototype.foo = 'bar';\n*\n* var obj = new Foo();\n*\n* var keys = keysIn( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\n\n// MODULES //\nvar keysIn = __var_0__;\n\n\n// EXPORTS //\nexport default keysIn;\n"]}