{"version":3,"sources":["@stdlib/utils/reverse-arguments/lib/reverse_arguments.js","@stdlib/utils/reverse-arguments/lib/index.js"],"names":["isFunction","__var_0__","reverseArguments","fcn","thisArg","TypeError","args","len","i","arguments","length","Array","apply"],"mappings":"0CAsBA,IAAIA,EAAaC,EAuBjB,SAASC,EAAkBC,EAAKC,GAC/B,IAAMJ,EAAYG,GACjB,MAAM,IAAIE,UAAW,gEAAgEF,EAAI,MAE1F,OASA,WACC,IAAIG,EACAC,EACAC,EAIJ,IAFAD,EAAME,UAAUC,OAChBJ,EAAO,IAAIK,MAAOJ,GACZC,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAMC,EAAI,EAAEC,GAAMC,UAAWD,GAE9B,OAAOL,EAAIS,MAAOR,EAASE,IC5B1B,IAACJ,EAAmBD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a function that invokes a provided function with arguments in reverse order.\n*\n* @param {Function} fcn - input function\n* @param {*} [thisArg] - function context\n* @throws {TypeError} first argument must be a function\n* @returns {Function} reverse arguments function\n*\n* @example\n* function foo( a, b, c ) {\n*     return [ a, b, c ];\n* }\n*\n* var bar = reverseArguments( foo );\n*\n* var out = bar( 1, 2, 3 );\n* // returns [ 3, 2, 1 ]\n*/\nfunction reverseArguments( fcn, thisArg ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\treturn reversed;\n\n\t/**\n\t* Invokes a function with arguments in reverse order.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction reversed() {\n\t\tvar args;\n\t\tvar len;\n\t\tvar i;\n\n\t\tlen = arguments.length;\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ len-1-i ] = arguments[ i ];\n\t\t}\n\t\treturn fcn.apply( thisArg, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default reverseArguments;\n","import __var_0__ from './reverse_arguments.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a function that invokes a provided function with arguments in reverse order.\n*\n* @module @stdlib/utils/reverse-arguments\n*\n* @example\n* var reverseArguments = require( '@stdlib/utils/reverse-arguments' );\n*\n* function foo( a, b, c ) {\n*     return [ a, b, c ];\n* }\n*\n* var bar = reverseArguments( foo );\n*\n* var out = bar( 1, 2, 3 );\n* // returns [ 3, 2, 1 ]\n*/\n\n// MODULES //\nvar reverseArguments = __var_0__;\n\n\n// EXPORTS //\nexport default reverseArguments;\n"]}