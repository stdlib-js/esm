{"version":3,"sources":["@stdlib/utils/zip/lib/zip.js","@stdlib/utils/zip/lib/index.js"],"names":["isBoolean","__var_0__","isPrimitive","isObject","__var_1__","isArray","__var_2__","hasOwnProp","__var_3__","zip","nargs","args","fill","opts","arg","flg","len","arr","out","val","i","j","Array","prototype","slice","call","arguments","length","TypeError","pop","Error","trunc","arrays"],"mappings":"6KAyBA,IAAIA,EAAYC,EAAUC,YACtBC,EAAWC,EACXC,EAAUC,EACVC,EAAaC,EAuDjB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAR,EAAO,GACPD,EAAO,KAEPF,GADAC,EAAOW,MAAMC,UAAUC,MAAMC,KAAMC,YACtBC,OAEPP,EAAI,EAAGA,EAAIV,EAAM,EAAGU,IACzB,IAAMf,EAASM,EAAKS,IACnB,MAAM,IAAIQ,UAAW,2DAA6DjB,EAAKS,GAAK,MAK9F,GAFAN,EAAMH,EAAMD,EAAM,KAClBK,EAAMZ,EAAUW,MACFT,EAASS,GACtB,MAAM,IAAIc,UAAW,yFAA2Fd,EAAM,MAMvH,GAJKC,IACJF,EAAOF,EAAKkB,OAGE,KADfnB,EAAQC,EAAKgB,QAEZ,MAAM,IAAIG,MAAO,kEAElB,GAAKvB,EAAYM,EAAM,UACtB,IAAMb,EAAWa,EAAKkB,OACrB,MAAM,IAAIH,UAAW,8DAAgEf,EAAKkB,MAAQ,WAGnGlB,EAAKkB,OAAQ,EAKd,GAHKxB,EAAYM,EAAM,UACtBD,EAAOC,EAAKD,MAERL,EAAYM,EAAM,WACtB,IAAMb,EAAWa,EAAKmB,QACrB,MAAM,IAAIJ,UAAW,8DAAgEf,EAAKmB,OAAS,WAGpGnB,EAAKmB,QAAS,EAQf,GANe,IAAVtB,GAAeG,EAAKmB,SAGxBtB,GADAC,EAAOA,EAAM,IACAgB,QAEdX,EAAML,EAAM,GAAIgB,OACXd,EAAKkB,MAET,IAAMX,EAAI,EAAGA,EAAIV,EAAOU,KACvBD,EAAMR,EAAMS,GAAIO,QACLX,IACVA,EAAMG,QAKR,IAAMC,EAAI,EAAGA,EAAIV,EAAOU,KACvBD,EAAMR,EAAMS,GAAIO,QACLX,IACVA,EAAMG,GAKT,IADAD,EAAM,IAAII,MAAON,GACXK,EAAI,EAAGA,EAAIL,EAAKK,IAAM,CAK3B,IAHAJ,EAAM,IAAIK,MAAOZ,GAGXU,EAAI,EAAGA,EAAIV,EAAOU,KACvBN,EAAMH,EAAMS,IAGHO,QAAUN,EAClBJ,EAAKG,GAAMR,EAGZK,EAAKG,GAAMN,EAAKO,GAEjBH,EAAKG,GAAMJ,EAEZ,OAAOC,ECxIL,IAACT,EAAMR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isArray = __var_2__;\nvar hasOwnProp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Generates array tuples from input arrays.\n*\n* @param {...Array} arr - input arrays to be zipped\n* @param {Object} [opts] - function options\n* @param {boolean} [opts.trunc=true] - boolean indicating whether to truncate arrays longer than the shortest input array\n* @param {*} [opts.fill=null] - fill value used for arrays of unequal length\n* @param {boolean} [opts.arrays=false] - boolean indicating whether an input array should be interpreted as an array of arrays to be zipped\n* @throws {TypeError} must provide array arguments\n* @throws {Error} must provide at least one array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} output array of arrays\n*\n* @example\n* var zipped = zip( [ 1, 2 ], [ 'a', 'b' ] );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ] ]\n*\n* @example\n* var zipped = zip( [ 1, 2, 3 ], [ 'a', 'b' ] );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ] ]\n*\n* @example\n* var opts = {\n*     'trunc': false\n* };\n*\n* var zipped = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n*\n* @example\n* var opts = {\n*     'trunc': false,\n*     'fill': ''\n* };\n*\n* var zipped = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ], [ 3, '' ] ]\n*\n* @example\n* var arr = [ [ 1, 2 ], [ 'a', 'b' ] ];\n*\n* // Default behavior:\n* var zipped = zip( arr );\n* // returns [ [ [ 1, 2 ] ], [ [ 'a', 'b' ] ] ]\n*\n* // Array of arrays:\n* zipped = zip( arr, { 'arrays': true } );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ] ]\n*/\nfunction zip() {\n\tvar nargs;\n\tvar args;\n\tvar fill;\n\tvar opts;\n\tvar arg;\n\tvar flg;\n\tvar len;\n\tvar arr;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\topts = {};\n\tfill = null;\n\targs = Array.prototype.slice.call( arguments );\n\tnargs = args.length;\n\n\tfor ( i = 0; i < nargs-1; i++ ) {\n\t\tif ( !isArray( args[i] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide array arguments. Value: `' + args[i] + '`.' );\n\t\t}\n\t}\n\targ = args[ nargs-1 ];\n\tflg = isObject( arg );\n\tif ( !flg && !isArray( arg ) ) {\n\t\tthrow new TypeError( 'invalid argument. Last argument must be either an array or an options object. Value: `' + arg + '`.' );\n\t}\n\tif ( flg ) {\n\t\topts = args.pop();\n\t}\n\tnargs = args.length;\n\tif ( nargs === 0 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide at least one array.' );\n\t}\n\tif ( hasOwnProp( opts, 'trunc' ) ) {\n\t\tif ( !isBoolean( opts.trunc ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `trunc` option must be a boolean.  Value: `' + opts.trunc + '`.' );\n\t\t}\n\t} else {\n\t\topts.trunc = true;\n\t}\n\tif ( hasOwnProp( opts, 'fill' ) ) {\n\t\tfill = opts.fill;\n\t}\n\tif ( hasOwnProp( opts, 'arrays' ) ) {\n\t\tif ( !isBoolean( opts.arrays ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `arrays` option must be a boolean. Value: `' + opts.arrays + '`.' );\n\t\t}\n\t} else {\n\t\topts.arrays = false;\n\t}\n\tif ( nargs === 1 && opts.arrays ) {\n\t\t// Treat the lone array argument as an array of arrays to be zipped...\n\t\targs = args[ 0 ];\n\t\tnargs = args.length;\n\t}\n\tlen = args[ 0 ].length;\n\tif ( opts.trunc ) {\n\t\t// Find the min array length...\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tval = args[ i ].length;\n\t\t\tif ( val < len ) {\n\t\t\t\tlen = val;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Find the max array length...\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tval = args[ i ].length;\n\t\t\tif ( val > len ) {\n\t\t\t\tlen = val;\n\t\t\t}\n\t\t}\n\t}\n\tout = new Array( len );\n\tfor ( j = 0; j < len; j++ ) {\n\t\t// Temporary array to store tuples...\n\t\tarr = new Array( nargs );\n\n\t\t// Create the tuples...\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\targ = args[ i ];\n\n\t\t\t// If an array is too short, use a fill value...\n\t\t\tif ( arg.length <= j ) {\n\t\t\t\tarr[ i ] = fill;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tarr[ i ] = arg[ j ];\n\t\t}\n\t\tout[ j ] = arr;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default zip;\n","import __var_0__ from './zip.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate array tuples from input arrays.\n*\n* @module @stdlib/utils/zip\n*\n* @example\n* var zip = require( '@stdlib/utils/zip' );\n*\n* var zipped = zip( [ 1, 2 ], [ 'a', 'b' ] );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ] ]\n*\n* var opts = {\n*    'trunc': false\n* };\n*\n* zipped = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts );\n* // returns [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n*/\n\n// MODULES //\nvar zip = __var_0__;\n\n\n// EXPORTS //\nexport default zip;\n"]}