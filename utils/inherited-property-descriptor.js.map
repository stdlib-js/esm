{"version":3,"sources":["@stdlib/utils/inherited-property-descriptor/lib/main.js","@stdlib/utils/inherited-property-descriptor/lib/index.js"],"names":["MAX_SAFE_INTEGER","__var_0__","isPositiveInteger","__var_1__","isPrimitive","getOwnPropertyDescriptor","__var_2__","getPrototypeOf","__var_3__","inheritedPropertyDescriptor","value","property","level","desc","obj","N","n","arguments","length","TypeError","main"],"mappings":"8LAyBA,IAAIA,EAAmBC,EACnBC,EAAoBC,EAAUC,YAC9BC,EAA2BC,EAC3BC,EAAiBC,EAwBrB,SAASC,EAA6BC,EAAOC,EAAUC,GACtD,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EAAI,CAC3B,IAAMhB,EAAmBU,GACxB,MAAM,IAAIO,UAAW,wEAA0EP,EAAQ,MAExGG,EAAIH,OAEJG,EAAIf,EAEL,GAAKU,MAAAA,EACJ,OAAO,KAOR,IAJAI,EAAMP,EAAgBG,GAGtBM,EAAI,EACIF,GAAOE,GAAKD,GAAI,CAEvB,GADAF,EAAOR,EAA0BS,EAAKH,GAErC,OAAOE,EAERC,EAAMP,EAAgBO,GACtBE,GAAK,EAEN,OAAO,KC/CL,IAACI,EAAOnB","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-max-safe-integer';\nimport __var_1__ from '@stdlib/assert/is-positive-integer';\nimport __var_2__ from '@stdlib/utils/property-descriptor';\nimport __var_3__ from '@stdlib/utils/get-prototype-of';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar MAX_SAFE_INTEGER = __var_0__;\nvar isPositiveInteger = __var_1__.isPrimitive;\nvar getOwnPropertyDescriptor = __var_2__;\nvar getPrototypeOf = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a property descriptor for an object's inherited property.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have an inherited provided property, rather than `undefined`.\n*\n* @private\n* @param {*} value - input object\n* @param {(string|symbol)} property - property\n* @param {PositiveInteger} [level] - inheritance level\n* @throws {TypeError} third argument must be a positive integer\n* @returns {(Object|null)} property descriptor or null\n*\n* @example\n* var desc = inheritedPropertyDescriptor( {}, 'toString' );\n* // returns {...}\n*/\nfunction inheritedPropertyDescriptor( value, property, level ) { // eslint-disable-line id-length\n\tvar desc;\n\tvar obj;\n\tvar N;\n\tvar n;\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPositiveInteger( level ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a positive integer. Value: `' + level + '`.' );\n\t\t}\n\t\tN = level;\n\t} else {\n\t\tN = MAX_SAFE_INTEGER;\n\t}\n\tif ( value === null || value === void 0 ) {\n\t\treturn null;\n\t}\n\t// Get the value's prototype:\n\tobj = getPrototypeOf( value );\n\n\t// Walk the prototype chain in search of a specified property...\n\tn = 1;\n\twhile ( obj && n <= N ) {\n\t\tdesc = getOwnPropertyDescriptor( obj, property );\n\t\tif ( desc ) {\n\t\t\treturn desc;\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t\tn += 1;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default inheritedPropertyDescriptor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a property descriptor for an object's inherited property.\n*\n* @module @stdlib/utils/inherited-property-descriptor\n*\n* @example\n* var inheritedPropertyDescriptor = require( '@stdlib/utils/inherited-property-descriptor' );\n*\n* var desc = inheritedPropertyDescriptor( {}, 'toString' );\n* // returns {...}\n*/\n\n// MODULES //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}