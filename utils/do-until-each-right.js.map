{"version":3,"sources":["@stdlib/utils/do-until-each-right/lib/do_until_each_right.js","@stdlib/utils/do-until-each-right/lib/index.js"],"names":["isCollection","__var_0__","isFunction","__var_1__","doUntilEachRight","collection","fcn","predicate","thisArg","len","i","TypeError","length","call"],"mappings":"sFAuBA,IAAIA,EAAeC,EACfC,EAAaC,EAqCjB,SAASC,EAAkBC,EAAYC,EAAKC,EAAWC,GACtD,IAAIC,EACAC,EACJ,IAAMV,EAAcK,GACnB,MAAM,IAAIM,UAAW,kEAAkEN,EAAW,MAEnG,IAAMH,EAAYI,GACjB,MAAM,IAAIK,UAAW,iEAAiEL,EAAI,MAE3F,IAAMJ,EAAYK,GACjB,MAAM,IAAII,UAAW,gEAAgEJ,EAAU,MAGhG,GAAa,KADbE,EAAMJ,EAAWO,UAEhBN,EAAIO,KAAML,OAAS,OAAQ,EAAQH,GAEtB,KADbI,EAAMJ,EAAWO,SAEhB,OAAOP,EAGTK,EAAID,EAAM,EACV,GACCH,EAAIO,KAAML,EAASH,EAAYK,GAAKA,EAAGL,GAGlCI,IAAQJ,EAAWO,SACvBF,GAAOL,EAAWO,OAASH,EAC3BA,EAAMJ,EAAWO,QAElBF,GAAK,QAELA,GAAK,IACJH,EAAWF,EAAYK,EAAE,GAAKA,EAAE,EAAGL,IAErC,OAAOA,ECpDL,IAACD,EAAmBH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar isFunction = __var_1__;\n\n\n// MAIN //\n\n/**\n* Until a test condition is true, invokes a function once for each element in a collection, iterating from right to left.\n*\n* ## Notes\n*\n* -   For dynamic array resizing, the only behavior made intentionally consistent with `doUntilEach` (iterating from left to right) is when elements are pushed onto the beginning (end) of an array. In other words, for `doUntilEach()`, `[].push()` behavior is consistent with `doUntilEachRight()` `[].unshift()` behavior.\n* -   The condition is evaluated **after** executing the function to invoke; thus, the provided function **always** executes at least once.\n* -   If provided an empty collection, the function invokes the provided function with the collection index set to `undefined`.\n*\n*\n* @param {Collection} collection - input collection\n* @param {Function} fcn - function to invoke\n* @param {Function} predicate - function which indicates whether to stop iterating over a collection\n* @param {*} [thisArg] - execution context for the applied function\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} third argument must be a function\n* @returns {Collection} input collection\n*\n* @example\n* function predicate( v, index, collection ) {\n*     return ( v !== v );\n* }\n*\n* function log( v, index, collection ) {\n*     console.log( '%s: %d', index, v );\n* }\n*\n* var arr = [ 1, NaN, 2, 3, 4, 5 ];\n*\n* doUntilEachRight( arr, log, predicate );\n*/\nfunction doUntilEachRight( collection, fcn, predicate, thisArg ) {\n\tvar len;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a function. Value: `'+predicate+'`.' );\n\t}\n\tlen = collection.length;\n\tif ( len === 0 ) {\n\t\tfcn.call( thisArg, void 0, void 0, collection );\n\t\tlen = collection.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn collection;\n\t\t}\n\t}\n\ti = len - 1;\n\tdo {\n\t\tfcn.call( thisArg, collection[ i ], i, collection );\n\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\ti += ( collection.length - len );\n\t\t\tlen = collection.length;\n\t\t}\n\t\ti -= 1;\n\t} while (\n\t\ti >= 0 &&\n\t\t!predicate( collection[ i+1 ], i+1, collection )\n\t);\n\treturn collection;\n}\n\n\n// EXPORTS //\nexport default doUntilEachRight;\n","import __var_0__ from './do_until_each_right.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Until a test condition is true, invoke a function once for each element in a collection, iterating from right to left.\n*\n* @module @stdlib/utils/do-until-each-right\n*\n* @example\n* var doUntilEachRight = require( '@stdlib/utils/do-until-each-right' );\n*\n* function predicate( v, index, collection ) {\n*     return ( v !== v );\n* }\n*\n* function log( v, index, collection ) {\n*     console.log( '%s: %d', index, v );\n* }\n*\n* var arr = [ 1, NaN, 2, 3, 4, 5 ];\n*\n* doUntilEachRight( arr, log, predicate );\n*/\n\n// MODULES //\nvar doUntilEachRight = __var_0__;\n\n\n// EXPORTS //\nexport default doUntilEachRight;\n"]}