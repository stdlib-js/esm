{"version":3,"sources":["@stdlib/utils/fifo/lib/node.js","@stdlib/utils/fifo/lib/main.js","@stdlib/utils/fifo/lib/index.js"],"names":["Node","value","this","next","prev","setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","iteratorSymbol","__var_2__","__var_3__","FIFO","_length","_first","_last","prototype","values","iter","self","FLG","i","toArray","length","done","arguments","iterator","node","out","push","type","data","fifo"],"mappings":"+JAmCA,SAASA,EAAMC,GAId,OAHAC,KAAKC,KAAO,KACZD,KAAKE,KAAO,KACZF,KAAKD,MAAQA,EACNC,KCZR,IAAIG,EAAcC,EACdC,EAAsBC,EACtBC,EAAiBC,EACjBV,EAAOW,EA4BX,SAASC,IACR,OAAOV,gBAAgBU,GAGvBV,KAAKW,QAAU,EACfX,KAAKY,OAAS,KACdZ,KAAKa,MAAQ,KACNb,MALC,IAAIU,EAyCbP,EAAaO,EAAKI,UAAW,SAAS,WAIrC,OAHAd,KAAKW,QAAU,EACfX,KAAKY,OAAS,KACdZ,KAAKa,MAAQ,KACNb,QAqBRG,EAAaO,EAAKI,UAAW,SAAS,WACrC,GAAKd,KAAKW,QACT,OAAOX,KAAKY,OAAOb,SAmCrBI,EAAaO,EAAKI,UAAW,YAAY,WACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAiBJ,OAfAF,EAAOjB,KAGPmB,GAAK,EAGLJ,EAASf,KAAKoB,UAIdjB,EADAa,EAAO,GACY,QAanB,WAEC,GADAG,GAAK,EACAD,GAAOC,GAAKJ,EAAOM,OACvB,MAAO,CACNC,MAAQ,GAGV,MAAO,CACNvB,MAASgB,EAAQI,GACjBG,MAAQ,MArBVnB,EAAaa,EAAM,UAgCnB,SAAcjB,GAEb,GADAmB,GAAM,EACDK,UAAUF,OACd,MAAO,CACNtB,MAASA,EACTuB,MAAQ,GAGV,MAAO,CACNA,MAAQ,MAxCLf,GACJJ,EAAaa,EAAMT,GAiDpB,WACC,OAAOU,EAAKO,cAhDNR,KAsERb,EAAaO,EAAKI,UAAW,QAAQ,WACpC,GAAKd,KAAKW,QACT,OAAOX,KAAKa,MAAMd,SAyBpBM,EAAqBK,EAAKI,UAAW,UAAU,WAC9C,OAAOd,KAAKW,WA4BbR,EAAaO,EAAKI,UAAW,OAAO,WACnC,IAAIf,EAiBJ,OAhBKC,KAAKW,UAETZ,EAAQC,KAAKY,OAAOb,MAGfC,KAAKY,OAAOX,MAChBD,KAAKY,OAASZ,KAAKY,OAAOX,KAC1BD,KAAKY,OAAOV,KAAO,OAGnBF,KAAKY,OAAS,KACdZ,KAAKa,MAAQ,MAGdb,KAAKW,SAAW,GAEVZ,KA4BRI,EAAaO,EAAKI,UAAW,QAAQ,SAAef,GACnD,IAAI0B,EAuBJ,OApBAA,EAAO,IAAI3B,EAAMC,GAGK,IAAjBC,KAAKW,SAETX,KAAKY,OAASa,EACdzB,KAAKa,MAAQY,IAGbA,EAAKvB,KAAOF,KAAKa,MAGjBb,KAAKa,MAAMZ,KAAOwB,EAGlBzB,KAAKa,MAAQY,GAGdzB,KAAKW,SAAW,EAETX,QAqBRG,EAAaO,EAAKI,UAAW,WAAW,WACvC,IAAIW,EACAC,EACAP,EAIJ,IAFAO,EAAM,GACND,EAAOzB,KAAKY,OACNO,EAAI,EAAGA,EAAInB,KAAKW,QAASQ,IAC9BO,EAAIC,KAAMF,EAAK1B,OACf0B,EAAOA,EAAKxB,KAEb,OAAOyB,KAyBRvB,EAAaO,EAAKI,UAAW,UAAU,WACtC,IAAIY,EAAM,CACVE,KAAW,QAEX,OADAF,EAAIG,KAAO7B,KAAKoB,UACTM,KC3YL,IAACI,EAAO1B","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Queue node constructor.\n*\n* @private\n* @constructor\n* @param {*} value - node value\n* @returns {Node} Node instance\n*\n* @example\n* var node = new Node( 'foo' );\n* // returns <Node>\n*/\nfunction Node( value ) { // eslint-disable-line stdlib/no-redeclare\n\tthis.next = null;\n\tthis.prev = null;\n\tthis.value = value;\n\treturn this;\n}\n\n\n// EXPORTS //\nexport default Node;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/symbol/iterator';\nimport __var_3__ from './node.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar iteratorSymbol = __var_2__;\nvar Node = __var_3__;\n\n\n// MAIN //\n\n/**\n* First-in-first-out queue constructor.\n*\n* @constructor\n* @returns {FIFO} FIFO queue instance\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Remove the first value:\n* var v = queue.pop();\n* // returns 'foo'\n*\n* // Add a new value to the queue:\n* queue.push( 'beep' );\n*\n* // Remove the \"oldest\" queue value:\n* v = queue.pop();\n* // returns 'bar'\n*/\nfunction FIFO() {\n\tif ( !(this instanceof FIFO) ) {\n\t\treturn new FIFO();\n\t}\n\tthis._length = 0;\n\tthis._first = null;\n\tthis._last = null;\n\treturn this;\n}\n\n/**\n* Clears the queue.\n*\n* @name clear\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {FIFO} queue instance\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the first value:\n* var v = queue.first();\n* // returns 'foo'\n*\n* // Examine the queue length:\n* var len = queue.length;\n* // returns 2\n*\n* // Clear all queue items:\n* queue.clear();\n*\n* // Peek at the first value:\n* v = queue.first();\n* // returns undefined\n*\n* // Examine the queue length:\n* len = queue.length;\n* // returns 0\n*/\nsetReadOnly( FIFO.prototype, 'clear', function clear() {\n\tthis._length = 0;\n\tthis._first = null;\n\tthis._last = null;\n\treturn this;\n});\n\n/**\n* Returns the \"oldest\" queue value (i.e., the value which is \"first-out\").\n*\n* @name first\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {(*|void)} \"oldest\" queue value\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the first value:\n* var v = queue.first();\n* // returns 'foo'\n*/\nsetReadOnly( FIFO.prototype, 'first', function first() {\n\tif ( this._length ) {\n\t\treturn this._first.value;\n\t}\n});\n\n/**\n* Returns an iterator for iterating over a queue.\n*\n* ## Notes\n*\n* -   In order to prevent confusion arising from queue mutation during iteration, a returned iterator **always** iterates over a queue \"snapshot\", which is defined as the list of queue elements at the time of this method's invocation.\n*\n* @name iterator\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {Iterator} iterator\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Create an iterator:\n* var it = queue.iterator();\n*\n* // Iterate over the queue...\n* var v = it.next().value;\n* // returns 'foo'\n*\n* v = it.next().value;\n* // returns 'bar'\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( FIFO.prototype, 'iterator', function iterator() {\n\tvar values;\n\tvar iter;\n\tvar self;\n\tvar FLG;\n\tvar i;\n\n\tself = this;\n\n\t// Initialize the iteration index:\n\ti = -1;\n\n\t// Create a copy of queue values (necessary in order to \"snapshot\" the queue; otherwise, values could come and go between calls to `next`):\n\tvalues = this.toArray();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= values.length ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': values[ i ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.iterator();\n\t}\n});\n\n/**\n* Returns the \"newest\" queue value (i.e., the value which is currently \"last-out\").\n*\n* @name last\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {(*|void)} \"newest\" queue value\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Peek at the last value:\n* var v = queue.last();\n* // returns 'bar'\n*/\nsetReadOnly( FIFO.prototype, 'last', function last() {\n\tif ( this._length ) {\n\t\treturn this._last.value;\n\t}\n});\n\n/**\n* Queue length.\n*\n* @name length\n* @memberof FIFO.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var queue = new FIFO();\n*\n* // Examine the initial queue length:\n* var len = queue.length;\n* // returns 0\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Retrieve the current queue length:\n* len = queue.length;\n* // returns 2\n*/\nsetReadOnlyAccessor( FIFO.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Removes a value from the queue.\n*\n* @name pop\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {(*|void)} removed value\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Remove the first value:\n* var v = queue.pop();\n* // returns 'foo'\n*\n* // Add a new value to the queue:\n* queue.push( 'beep' );\n*\n* // Remove the \"oldest\" queue value:\n* v = queue.pop();\n* // returns 'bar'\n*/\nsetReadOnly( FIFO.prototype, 'pop', function pop() {\n\tvar value;\n\tif ( this._length ) {\n\t\t// Retrieve the \"first-out\" value:\n\t\tvalue = this._first.value;\n\n\t\t// Check whether we have a new \"first-out\" or whether we have drained the queue...\n\t\tif ( this._first.next ) {\n\t\t\tthis._first = this._first.next;\n\t\t\tthis._first.prev = null;\n\t\t} else {\n\t\t\t// Queue is empty:\n\t\t\tthis._first = null;\n\t\t\tthis._last = null;\n\t\t}\n\t\t// Decrement the queue length:\n\t\tthis._length -= 1;\n\t}\n\treturn value;\n});\n\n/**\n* Adds a value to the queue.\n*\n* @name push\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {FIFO} queue instance\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Remove the first value:\n* var v = queue.pop();\n* // returns 'foo'\n*\n* // Add a new value to the queue:\n* queue.push( 'beep' );\n*\n* // Remove the \"oldest\" queue value:\n* v = queue.pop();\n* // returns 'bar'\n*/\nsetReadOnly( FIFO.prototype, 'push', function push( value ) {\n\tvar node;\n\n\t// Create a new queue node:\n\tnode = new Node( value );\n\n\t// Check whether the queue is currently empty...\n\tif ( this._length === 0 ) {\n\t\t// This is the only queued node, making it both the first and last node:\n\t\tthis._first = node;\n\t\tthis._last = node;\n\t} else {\n\t\t// Link the node to the previous most \"recent\" node:\n\t\tnode.prev = this._last;\n\n\t\t// Link the previous most \"recent\" node to the new node:\n\t\tthis._last.next = node;\n\n\t\t// Update the queue pointer for the \"last\" node to the new node:\n\t\tthis._last = node;\n\t}\n\t// Increment the queue length:\n\tthis._length += 1;\n\n\treturn this;\n});\n\n/**\n* Returns an array of queue values.\n*\n* @name toArray\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {Array} queue values\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Get an array of queue values:\n* var vals = queue.toArray();\n* // returns [ 'foo', 'bar' ]\n*/\nsetReadOnly( FIFO.prototype, 'toArray', function toArray() {\n\tvar node;\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tnode = this._first;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( node.value );\n\t\tnode = node.next;\n\t}\n\treturn out;\n});\n\n/**\n* Serializes a queue as JSON.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `FIFO` instance.\n*\n* @name toJSON\n* @memberof FIFO.prototype\n* @type {Function}\n* @returns {Object} serialized queue\n*\n* @example\n* var queue = new FIFO();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Serialize to JSON:\n* var o = queue.toJSON();\n* // returns { 'type': 'fifo', 'data': [ 'foo', 'bar' ] }\n*/\nsetReadOnly( FIFO.prototype, 'toJSON', function toJSON() {\n\tvar out = {};\n\tout.type = 'fifo';\n\tout.data = this.toArray();\n\treturn out;\n});\n\n\n// EXPORTS //\nexport default FIFO;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* First-in-first-out queue.\n*\n* @module @stdlib/utils/fifo\n*\n* @example\n* var fifo = require( '@stdlib/utils/fifo' );\n*\n* var queue = fifo();\n*\n* // Add values to the queue:\n* queue.push( 'foo' ).push( 'bar' );\n*\n* // Remove the first value:\n* var v = queue.pop();\n* // returns 'foo'\n*\n* // Add a new value to the queue:\n* queue.push( 'beep' );\n*\n* // Remove the \"oldest\" queue value:\n* v = queue.pop();\n* // returns 'bar'\n*/\n\n// MODULES //\nvar fifo = __var_0__;\n\n\n// EXPORTS //\nexport default fifo;\n"]}