{"version":3,"sources":["@stdlib/utils/property-descriptors/lib/has_builtin.js","@stdlib/utils/property-descriptors/lib/builtin.js","@stdlib/utils/property-descriptors/lib/polyfill.js","@stdlib/utils/property-descriptors/lib/index.js"],"names":["bool","Object","getOwnPropertyDescriptors","propertyDescriptors","value","propertyNames","__var_0__","propertySymbols","__var_1__","propertyDescriptor","__var_2__","defineProperty","__var_3__","symbols","names","desc","out","i","length","configurable","enumerable","writable","main","HAS_BUILTIN","builtin","polyfill","main$1"],"mappings":"oJAuBA,IAAIA,OAAqD,IAArCC,OAAOC,0BCAvBC,EAAsBF,OAAOC,0BAyBjC,SAASA,EAA2BE,GACnC,OAAOD,EAAqBF,OAAQG,ICxBrC,IAAIC,EAAgBC,EAChBC,EAAkBC,EAClBC,EAAqBC,EACrBC,EAAiBC,EAyBrB,SAASV,EAA2BE,GACnC,IAAIS,EACAC,EACAC,EACAC,EACAC,EAQJ,IANAD,EAAM,GAGNF,EAAQT,EAAeD,GAGjBa,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,KAC9BF,EAAON,EAAoBL,EAAOU,EAAOG,MAGxCN,EAAgBK,EAAKF,EAAOG,GAAK,CAChCE,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZjB,MAASW,IASZ,IAHAF,EAAUN,EAAiBH,GAGrBa,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,KAChCF,EAAON,EAAoBL,EAAOS,EAASI,MAG1CN,EAAgBK,EAAKH,EAASI,GAAK,CAClCE,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZjB,MAASW,IAKZ,OAAOC,ECvDR,IAOIM,EAPAC,EAAcjB,EACdkB,EAAUhB,EACViB,EAAWf,EAcfgB,EAPCJ,EADIC,EACGC,EAEAC","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof Object.getOwnPropertyDescriptors !== 'undefined' );\n\n\n// EXPORTS //\nexport default bool;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar propertyDescriptors = Object.getOwnPropertyDescriptors;\n\n\n// MAIN //\n\n/**\n* Returns an object's own property descriptors.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptors()`, this function returns an empty object if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Object} property descriptors\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var desc = getOwnPropertyDescriptors( obj );\n* // returns {...}\n*/\nfunction getOwnPropertyDescriptors( value ) {\n\treturn propertyDescriptors( Object( value ) );\n}\n\n\n// EXPORTS //\nexport default getOwnPropertyDescriptors;\n","import __var_0__ from '@stdlib/utils/property-names';\nimport __var_1__ from '@stdlib/utils/property-symbols';\nimport __var_2__ from '@stdlib/utils/property-descriptor';\nimport __var_3__ from '@stdlib/utils/define-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar propertyNames = __var_0__;\nvar propertySymbols = __var_1__;\nvar propertyDescriptor = __var_2__;\nvar defineProperty = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an object's own property descriptors.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptors()`, this function returns an empty object if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Object} property descriptors\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var desc = getOwnPropertyDescriptors( obj, 'foo' );\n* // returns {...}\n*/\nfunction getOwnPropertyDescriptors( value ) {\n\tvar symbols;\n\tvar names;\n\tvar desc;\n\tvar out;\n\tvar i;\n\n\tout = {};\n\n\t// Get the value's own enumerable and non-enumerable properties:\n\tnames = propertyNames( value );\n\n\t// For each property name, retrieve the property descriptor...\n\tfor ( i = 0; i < names.length; i++ ) {\n\t\tdesc = propertyDescriptor( value, names[ i ] );\n\t\tif ( desc ) {\n\t\t\t// The following is equivalent to `out[ names[i] ] = desc`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\tdefineProperty( out, names[ i ], {\n\t\t\t\t'configurable': true,\n\t\t\t\t'enumerable': true,\n\t\t\t\t'writable': true,\n\t\t\t\t'value': desc\n\t\t\t});\n\t\t}\n\t}\n\n\t// Get the value's symbol properties:\n\tsymbols = propertySymbols( value );\n\n\t// For each symbol property, retrieve the property descriptor...\n\tfor ( i = 0; i < symbols.length; i++ ) {\n\t\tdesc = propertyDescriptor( value, symbols[ i ] );\n\t\tif ( desc ) {\n\t\t\t// The following is equivalent to `out[ symbols[i] ] = desc`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\tdefineProperty( out, symbols[ i ], {\n\t\t\t\t'configurable': true,\n\t\t\t\t'enumerable': true,\n\t\t\t\t'writable': true,\n\t\t\t\t'value': desc\n\t\t\t});\n\t\t}\n\t}\n\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default getOwnPropertyDescriptors;\n","import __var_0__ from './has_builtin.js';\nimport __var_1__ from './builtin.js';\nimport __var_2__ from './polyfill.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an object's own property descriptors.\n*\n* @module @stdlib/utils/property-descriptors\n*\n* @example\n* var getOwnPropertyDescriptors = require( '@stdlib/utils/property-descriptors' );\n*\n* var obj = {\n*   'foo': 'bar',\n*   'beep': 'boop'\n* };\n*\n* var keys = getOwnPropertyDescriptors( obj, 'foo' );\n* // returns {...}\n*/\n\n// MODULES //\nvar HAS_BUILTIN = __var_0__;\nvar builtin = __var_1__;\nvar polyfill = __var_2__;\n\n\n// MAIN //\n\nvar main;\nif ( HAS_BUILTIN ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\nexport default main;\n"]}