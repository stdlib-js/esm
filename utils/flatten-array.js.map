{"version":3,"sources":["@stdlib/utils/flatten-array/lib/defaults.js","@stdlib/utils/flatten-array/lib/validate.js","@stdlib/utils/flatten-array/lib/recurse.js","@stdlib/utils/flatten-array/lib/flatten_array.js","@stdlib/utils/flatten-array/lib/gen_fcn.js","@stdlib/utils/flatten-array/lib/wrap_flatten.js","@stdlib/utils/flatten-array/lib/wrap_flatten_copy.js","@stdlib/utils/flatten-array/lib/factory.js","@stdlib/utils/flatten-array/lib/index.js"],"names":["FLOAT64_MAX","__var_0__","defaults","copy","depth","isObject","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isNonNegativeInteger","__var_3__","validate","opts","options","TypeError","isArray","recurse","out","arr","v","i","length","push","__var_4__","flattenArray","err","arguments","genFcn","dims","len","n","f","Function","wrap","flatten","isPositiveIntegerArray","primitives","__var_5__","wrapFlatten","__var_6__","wrapFlattenCopy","__var_7__","factory","copyFLG","setReadOnly"],"mappings":"iaAsBA,IAAIA,EAAcC,EAKdC,EAAW,CACdC,MAAQ,EACRC,MAASJ,GCJNK,EAAWJ,EACXK,EAAaC,EACbC,EAAYC,EAAUC,YACtBC,EAAuBC,EAAUF,YA0BrC,SAASG,EAAUC,EAAMC,GACxB,OAAMV,EAAUU,GAGXT,EAAYS,EAAS,WACzBD,EAAKV,MAAQW,EAAQX,OACfO,EAAsBG,EAAKV,QACzB,IAAIY,UAAW,0EAA4EF,EAAKV,MAAQ,MAG5GE,EAAYS,EAAS,UACzBD,EAAKX,KAAOY,EAAQZ,MACdK,EAAWM,EAAKX,OACd,IAAIa,UAAW,uEAAyEF,EAAKX,KAAO,MAGtG,KAdC,IAAIa,UAAW,iEAAmED,EAAU,MClCrG,IAAIE,EAAUhB,EAcd,SAASiB,EAASC,EAAKC,EAAKhB,GAC3B,IAAIiB,EACAC,EACJ,IAAMA,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC5BD,EAAID,EAAKE,GACJlB,GAASa,EAASI,GACtBH,EAASC,EAAKE,EAAGjB,EAAM,GAEvBe,EAAIK,KAAMH,GAGZ,OAAOF,ECrBR,IAAIhB,EAAOF,EACPgB,EAAUV,EACVL,EAAWO,EACXI,EAAWD,EACXM,EAAUO,EAuBd,SAASC,EAAcN,EAAKL,GAC3B,IAAID,EACAa,EACAR,EACJ,IAAMF,EAASG,GACd,MAAM,IAAIJ,UAAW,8DAAgEI,EAAM,MAM5F,GAJAN,EAAO,CACNX,KAAQD,EAASC,KACjBC,MAASF,EAASE,OAEdwB,UAAUL,OAAS,IACvBI,EAAMd,EAAUC,EAAMC,IAErB,MAAMY,EAQR,OAJCR,EADmB,IAAfL,EAAKV,MACHgB,EAEAF,EAAS,GAAIE,EAAKN,EAAKV,OAEzBU,EAAKX,KACFA,EAAMgB,GAEPA,EClDR,SAASU,EAAQC,GAChB,IAAIC,EACAC,EACAC,EACAX,EAWJ,IARAW,EAAI,mCAIJD,GADAD,EAAMD,EAAKP,QACD,EAGVU,GAAK,gBACCX,EAAI,EAAGA,EAAIS,EAAKT,IACrBW,GAAK,IAAMX,EAEVW,GADIX,EAAIU,EACH,IAEA,IAIP,IAAMV,EAAI,EAAGA,EAAIS,EAAKT,IACrBW,GAAK,QAAUX,EAAI,OAASA,EAAI,IAAMQ,EAAMR,GAAM,KAAOA,EAAI,OAI9D,IADAW,GAAK,WACCX,EAAI,EAAGA,EAAIS,EAAKT,IACrBW,GAAK,KAAOX,EAAI,IAKjB,IAHAW,GAAK,KAGCX,EAAI,EAAGA,EAAIS,EAAKT,IACrBW,GAAK,IAWN,OATAA,GAAK,YAGLA,GAAK,IAGLA,GAAK,yCAGE,IAAMC,SAAUD,EAAhB,GCrDR,IAAIhB,EAAUhB,EAYd,SAASkC,EAAMC,GACd,OAUA,SAAuBhB,GACtB,IAAMH,EAASG,GACd,MAAM,IAAIJ,UAAW,oDAAsDI,EAAM,MAElF,OAAOgB,EAAShB,IC1BlB,IAAIH,EAAUhB,EACVE,EAAOI,EAYX,SAAS4B,EAAMC,GACd,OAUA,SAAuBhB,GACtB,IAAMH,EAASG,GACd,MAAM,IAAIJ,UAAW,oDAAsDI,EAAM,MAElF,OAAOjB,EAAMiC,EAAShB,KCtBxB,IAAIiB,EAAyBpC,EAAUqC,WACnCjC,EAAWE,EACXD,EAAaG,EACbD,EAAYI,EAAUF,YACtBR,EAAWuB,EACXI,EAASU,EACTC,EAAcC,EACdC,EAAkBC,EA2BtB,SAASC,EAASd,EAAMf,GACvB,IAAI8B,EACAT,EACJ,IAAMC,EAAwBP,GAC7B,MAAM,IAAId,UAAW,mFAAqFc,EAAO,MAGlH,GADAe,EAAU3C,EAASC,KACdyB,UAAUL,OAAS,EAAI,CAC3B,IAAMlB,EAAUU,GACf,MAAM,IAAIC,UAAW,iEAAmED,EAAU,MAEnG,GAAKT,EAAYS,EAAS,UACzB8B,EAAU9B,EAAQZ,MACZK,EAAWqC,IAChB,MAAM,IAAI7B,UAAW,uEAAyE6B,EAAU,MAK3G,OADAT,EAAUP,EAAQC,GACbe,EACGH,EAAiBN,GAElBI,EAAaJ,GClCrB,IAAIU,EAAc7C,EACdyB,EAAenB,EACfqC,EAAUnC,EAKdqC,EAAapB,EAAc,UAAWkB","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar FLOAT64_MAX = __var_0__;\n\n\n// MAIN //\n\nvar defaults = {\n\t'copy': false,\n\t'depth': FLOAT64_MAX\n};\n\n\n// EXPORTS //\nexport default defaults;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.depth] - depth to flatten\n* @param {boolean} [options.copy] - boolean indicating whether to deep copy array elements\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'depth': 10,\n*     'copy': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\topts.depth = options.depth;\n\t\tif ( !isNonNegativeInteger( opts.depth ) ) {\n\t\t\treturn new TypeError( 'invalid option. `depth` option must be a nonnegative integer. Option: `' + opts.depth + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be a boolean primitive. Option: `' + opts.copy + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\n\n\n// MAIN //\n\n/**\n* Recursively flattens an array.\n*\n* @private\n* @param {Array} out - output array\n* @param {Array} arr - input array\n* @param {NonNegativeInteger} depth - recursion depth\n* @returns {Array} output array\n*/\nfunction recurse( out, arr, depth ) {\n\tvar v;\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( depth && isArray( v ) ) {\n\t\t\trecurse( out, v, depth-1 );\n\t\t} else {\n\t\t\tout.push( v );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default recurse;\n","import __var_0__ from '@stdlib/utils/copy';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from './defaults.js';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './recurse.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\nvar isArray = __var_1__;\nvar defaults = __var_2__;\nvar validate = __var_3__;\nvar recurse = __var_4__;\n\n\n// MAIN //\n\n/**\n* Flattens an array.\n*\n* @param {Array} arr - input array\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten\n* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements\n* @throws {TypeError} first argument must be an array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} flattened array\n*\n* @example\n* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];\n*\n* var out = flattenArray( arr );\n* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n*/\nfunction flattenArray( arr, options ) {\n\tvar opts;\n\tvar err;\n\tvar out;\n\tif ( !isArray( arr ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + arr + '`.' );\n\t}\n\topts = {\n\t\t'copy': defaults.copy,\n\t\t'depth': defaults.depth\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.depth === 0 ) {\n\t\tout = arr;\n\t} else {\n\t\tout = recurse( [], arr, opts.depth );\n\t}\n\tif ( opts.copy ) {\n\t\treturn copy( out );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default flattenArray;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a function to flatten an array containing elements all having the same dimensions.\n*\n* @private\n* @param {PositiveIntegerArray} dims - dimensions\n* @returns {Function} flatten function\n*/\nfunction genFcn( dims ) {\n\tvar len;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Code generation. Start with the function definition:\n\tf = 'return function flattenArray(x){';\n\n\t// Create the function body...\n\tlen = dims.length;\n\tn = len - 1;\n\n\t// Create the variables...\n\tf += 'var o=[];var ';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tf += 'i' + i;\n\t\tif ( i < n ) {\n\t\t\tf += ',';\n\t\t} else {\n\t\t\tf += ';';\n\t\t}\n\t}\n\t// Create the nested for loops...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tf += 'for(i' + i + '=0;i' + i + '<' + dims[ i ] + ';i' + i + '++){';\n\t}\n\t// Create the code which accesses the nested array values and pushes them onto the flattened array.\n\tf += 'o.push(x';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tf += '[i' + i + ']';\n\t}\n\tf += ');';\n\n\t// Closing braces...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tf += '}';\n\t}\n\tf += 'return o;';\n\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=flatten_array.gen_fcn.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Function( f ) )(); // eslint-disable-line no-new-func\n\n\t/*\n\t* e.g.,\n\t*\n\t*   function flattenArray( x ) {\n\t*       var o = [];\n\t*       var i0, i1;\n\t*       for ( i0 = 0; i0 < 2; i0++ ) {\n\t*           for ( i1 = 0; i1 < 2; i1++ ) {\n\t*               o.push( x[i0][i1] );\n\t*           }\n\t*       }\n\t*       return o;\n\t*   }\n\t*/\n}\n\n\n// EXPORTS //\nexport default genFcn;\n","import __var_0__ from '@stdlib/assert/is-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a function to flatten an array.\n*\n* @private\n* @param {Function} flatten - flatten function\n* @returns {Function} wrapped flatten function\n*/\nfunction wrap( flatten ) {\n\treturn flattenArray;\n\n\t/**\n\t* Flattens an array.\n\t*\n\t* @private\n\t* @param {Array} arr - array to flatten\n\t* @throws {TypeError} must provide an array\n\t* @returns {Array} flattened array\n\t*/\n\tfunction flattenArray( arr ) {\n\t\tif ( !isArray( arr ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an array. Value: `' + arr + '`.' );\n\t\t}\n\t\treturn flatten( arr );\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-array';\nimport __var_1__ from '@stdlib/utils/copy';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\nvar copy = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a function to flatten an array and deep copy.\n*\n* @private\n* @param {Function} flatten - flatten function\n* @returns {Function} wrapped flatten function\n*/\nfunction wrap( flatten ) {\n\treturn flattenArray;\n\n\t/**\n\t* Flattens an array and deep copies array elements.\n\t*\n\t* @private\n\t* @param {Array} arr - array to flatten\n\t* @throws {TypeError} must provide an array\n\t* @returns {Array} flattened array\n\t*/\n\tfunction flattenArray( arr ) {\n\t\tif ( !isArray( arr ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an array. Value: `' + arr + '`.' );\n\t\t}\n\t\treturn copy( flatten( arr ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/assert/is-positive-integer-array';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from './defaults.js';\nimport __var_5__ from './gen_fcn.js';\nimport __var_6__ from './wrap_flatten.js';\nimport __var_7__ from './wrap_flatten_copy.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveIntegerArray = __var_0__.primitives;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\nvar isBoolean = __var_3__.isPrimitive;\nvar defaults = __var_4__;\nvar genFcn = __var_5__;\nvar wrapFlatten = __var_6__;\nvar wrapFlattenCopy = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function for flattening arrays having specified dimensions.\n*\n* @param {PositiveIntegerArray} dims - dimensions\n* @param {Options} [options] - function options\n* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements\n* @throws {TypeError} first argument must be an array of positive integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} flatten function\n*\n* @example\n* var flatten = factory( [2,2], {\n*     'copy': false\n* });\n*\n* var out = flatten( [[1,2],[3,4]] );\n* // returns [ 1, 2, 3, 4 ]\n*\n* out = flatten( [[5,6],[7,8]] );\n* // returns [ 5, 6, 7, 8 ]\n*/\nfunction factory( dims, options ) {\n\tvar copyFLG;\n\tvar flatten;\n\tif ( !isPositiveIntegerArray( dims ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array of positive integers. Value: `' + dims + '`.' );\n\t}\n\tcopyFLG = defaults.copy;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\tcopyFLG = options.copy;\n\t\t\tif ( !isBoolean( copyFLG ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean primitive. Option: `' + copyFLG + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tflatten = genFcn( dims );\n\tif ( copyFLG ) {\n\t\treturn wrapFlattenCopy( flatten );\n\t}\n\treturn wrapFlatten( flatten );\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './flatten_array.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Flatten an array.\n*\n* @module @stdlib/utils/flatten-array\n*\n* @example\n* var flattenArray = require( '@stdlib/utils/flatten-array' );\n*\n* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];\n*\n* var out = flattenArray( arr );\n* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n*\n* @example\n* var flattenArray = require( '@stdlib/utils/flatten-array' );\n*\n* var flatten = flattenArray.factory( [2,2], {\n*     'copy': false\n* });\n*\n* var out = flatten( [[1,2],[3,4]] );\n* // returns [ 1, 2, 3, 4 ]\n*\n* out = flatten( [[5,6],[7,8]] );\n* // returns [ 5, 6, 7, 8 ]\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar flattenArray = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( flattenArray, 'factory', factory );\n\n\n// EXPORTS //\nexport default flattenArray;\n"]}