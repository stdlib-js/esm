{"version":3,"sources":["@stdlib/utils/parse-json/lib/parse_json.js","@stdlib/utils/parse-json/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isFunction","__var_1__","parseJSON","str","reviver","TypeError","arguments","length","JSON","parse","error"],"mappings":"kFAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAaC,EAkBjB,SAASC,EAAWC,EAAKC,GACxB,IAAMP,EAAUM,GACf,MAAM,IAAIE,UAAW,8DAAgEF,EAAM,MAE5F,GAAKG,UAAUC,OAAS,IACjBP,EAAYI,GACjB,MAAM,IAAIC,UAAW,kEAAoED,EAAU,MAGrG,IACC,OAAOI,KAAKC,MAAON,EAAKC,GACvB,MAAQM,GACT,OAAOA,GCpBN,IAACR,EAAYJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isFunction = __var_1__;\n\n\n// MAIN //\n\n/**\n* Attempts to parse a string as JSON.\n*\n* @param {string} str - string to parse\n* @param {Function} [reviver] - transformation function\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} reviver must be a function\n* @returns {(*|Error)} parsed value or parse error\n*\n* @example\n* var obj = parseJSON( '{\"beep\":\"boop\"}' );\n* // returns {'beep':'boop'}\n*/\nfunction parseJSON( str, reviver ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isFunction( reviver ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Reviver argument must be a function. Value: `' + reviver + '`.' );\n\t\t}\n\t}\n\ttry {\n\t\treturn JSON.parse( str, reviver );\n\t} catch ( error ) {\n\t\treturn error;\n\t}\n}\n\n\n// EXPORTS //\nexport default parseJSON;\n","import __var_0__ from './parse_json.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a string as JSON.\n*\n* @module @stdlib/utils/parse-json\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var obj = parseJSON( '{\"beep\":\"boop\"}' );\n* // returns {'beep':'boop'}\n*/\n\n// MODULES //\nvar parseJSON = __var_0__;\n\n\n// EXPORTS //\nexport default parseJSON;\n"]}