{"version":3,"sources":["@stdlib/utils/reorder-arguments/lib/reorder_arguments.js","@stdlib/utils/reorder-arguments/lib/index.js"],"names":["isFunction","__var_0__","isNonNegativeIntegerArray","__var_1__","reorderArguments","fcn","indices","thisArg","TypeError","args","len","i","arguments","length","Error","Array","apply"],"mappings":"qGAuBA,IAAIA,EAAaC,EACbC,EAA4BC,EAyBhC,SAASC,EAAkBC,EAAKC,EAASC,GACxC,IAAMP,EAAYK,GACjB,MAAM,IAAIG,UAAW,gEAAgEH,EAAI,MAE1F,IAAMH,EAA2BI,GAChC,MAAM,IAAIE,UAAW,oGAAoGF,EAAQ,MAElI,OAUA,WACC,IAAIG,EACAC,EACAC,EAGJ,IADAD,EAAME,UAAUC,UACHP,EAAQO,OACpB,MAAM,IAAIC,MAAO,uEAAuER,EAAQO,OAAO,aAAaH,EAAI,KAGzH,IADAD,EAAO,IAAIM,MAAOL,GACZC,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAME,GAAMC,UAAWN,EAAQK,IAEhC,OAAON,EAAIW,MAAOT,EAASE,ICvC1B,IAACL,EAAmBH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isNonNegativeIntegerArray = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a function that invokes a provided function with reordered arguments.\n*\n* @param {Function} fcn - input function\n* @param {NonNegativeIntegerArray} indices - argument indices\n* @param {*} [thisArg] - function context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of nonnegative integers\n* @returns {Function} function with reordered arguments\n*\n* @example\n* function foo( a, b, c ) {\n*     return [ a, b, c ];\n* }\n*\n* var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n*\n* var out = bar( 1, 2, 3 );\n* // returns [ 3, 1, 2 ]\n*/\nfunction reorderArguments( fcn, indices, thisArg ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tif ( !isNonNegativeIntegerArray( indices ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be an array containing only nonnegative integers. Value: `'+indices+'`.' );\n\t}\n\treturn reordered;\n\n\t/**\n\t* Invokes a function with reordered arguments.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @throws {Error} must provide expected number of input arguments\n\t* @returns {*} return value\n\t*/\n\tfunction reordered() {\n\t\tvar args;\n\t\tvar len;\n\t\tvar i;\n\n\t\tlen = arguments.length;\n\t\tif ( len !== indices.length ) {\n\t\t\tthrow new Error( 'invalid invocation. Unexpected number of input arguments. Expected: '+indices.length+'. Actual: '+len+'.' );\n\t\t}\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ indices[i] ];\n\t\t}\n\t\treturn fcn.apply( thisArg, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default reorderArguments;\n","import __var_0__ from './reorder_arguments.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a function that invokes a provided function with reordered arguments.\n*\n* @module @stdlib/utils/reorder-arguments\n*\n* @example\n* var reorderArguments = require( '@stdlib/utils/reorder-arguments' );\n*\n* function foo( a, b, c ) {\n*     return [ a, b, c ];\n* }\n*\n* var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n*\n* var out = bar( 1, 2, 3 );\n* // returns [ 3, 1, 2 ]\n*/\n\n// MODULES //\nvar reorderArguments = __var_0__;\n\n\n// EXPORTS //\nexport default reorderArguments;\n"]}