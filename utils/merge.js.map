{"version":3,"sources":["@stdlib/utils/merge/lib/defaults.js","@stdlib/utils/merge/lib/deepmerge.js","@stdlib/utils/merge/lib/mergefcn.js","@stdlib/utils/merge/lib/merge.js","@stdlib/utils/merge/lib/validate.js","@stdlib/utils/merge/lib/factory.js","@stdlib/utils/merge/lib/index.js"],"names":["PINF","__var_0__","DEFAULTS","level","override","extend","copy","objectKeys","isObject","__var_1__","hasOwnProp","__var_2__","isBuffer","__var_3__","isFunction","__var_4__","typeOf","__var_5__","deepCopy","__var_6__","deepMerge","target","source","hasProp","isFunc","name","keys","curr","key","val","tmp","i","length","mergefcn","opts","nargs","arg","src","arguments","Error","TypeError","Array","defaults","merge","isBoolean","isPrimitive","isPositiveInteger","validate","options","factory","err","setReadOnly"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar PINF = __var_0__;\n\n\n// MAIN //\n\nvar DEFAULTS = {\n\t'level': PINF,\n\t'override': true,\n\t'extend': true,\n\t'copy': true\n};\n\n\n// EXPORTS //\nexport default DEFAULTS;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/is-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from '@stdlib/assert/is-buffer';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/utils/type-of';\nimport __var_6__ from '@stdlib/utils/copy';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\nvar isBuffer = __var_3__;\nvar isFunction = __var_4__;\nvar typeOf = __var_5__;\nvar deepCopy = __var_6__;\n\n\n// MAIN //\n\n/**\n* Merges a source object into a target object.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @param {number} level - merge level\n* @param {boolean} copy - indicates whether to perform a deep copy of merged values\n* @param {(boolean|Function)} override - defines the merge strategy\n* @param {boolean} extend - indicates whether new properties can be added to the target object\n*/\nfunction deepMerge( target, source, level, copy, override, extend ) {\n\tvar hasProp;\n\tvar isFunc;\n\tvar name;\n\tvar keys;\n\tvar curr;\n\tvar key;\n\tvar val;\n\tvar tmp;\n\tvar i;\n\n\t// Determine if we were provided a custom override strategy:\n\tisFunc = isFunction( override );\n\n\t// Decrement the level:\n\tlevel -= 1;\n\n\t// Loop through the source keys and implement the merge strategy...\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tkey = keys[ i ];\n\t\thasProp = hasOwnProp( target, key );\n\n\t\t// Can we add new properties to the target?\n\t\tif ( !hasProp && !extend ) {\n\t\t\tcontinue;\n\t\t}\n\t\tval = source[ key ];\n\n\t\tif ( hasProp ) {\n\t\t\tcurr = target[ key ];\n\t\t\tname = typeOf( curr );\n\n\t\t\t// Should we recurse to perform a deep(er) merge? (only if both the current value and the proposed value are objects and the level is > 0)\n\t\t\tif (\n\t\t\t\t!isBuffer( curr ) &&\n\t\t\t\tname === 'object' &&\n\t\t\t\tisObject( val ) &&\n\t\t\t\tlevel\n\t\t\t) {\n\t\t\t\tdeepMerge( curr, val, level, copy, override, extend );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Should we apply a custom merge (override) strategy?\n\t\t\tif ( isFunc ) {\n\t\t\t\ttmp = override( curr, val, key );\n\n\t\t\t\t// WARNING: the following check does NOT prevent shared (leaky) nested references. We only check for top-level reference equality. We will assume that the user knows best, given their having provided a custom override strategy.\n\t\t\t\tif ( copy && tmp !== curr && tmp === val ) {\n\t\t\t\t\ttmp = deepCopy( tmp );\n\t\t\t\t}\n\t\t\t\ttarget[ key ] = tmp;\n\t\t\t}\n\t\t\t// Are we allowed to override an existing target value?\n\t\t\telse if ( override ) {\n\t\t\t\tif ( copy ) {\n\t\t\t\t\ttarget[ key ] = deepCopy( val );\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// New property to be added to target object. Should we deep copy the source value?\n\t\telse if ( copy ) {\n\t\t\ttarget[ key ] = deepCopy( val );\n\t\t}\n\t\t// Perform a simple assignment...\n\t\telse {\n\t\t\ttarget[ key ] = val;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default deepMerge;\n","import __var_0__ from '@stdlib/assert/is-object';\nimport __var_1__ from './deepmerge.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar deepMerge = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a merge function based on provided options.\n*\n* @private\n* @param {Options} opts - function options\n* @param {number} options.level - merge level\n* @param {boolean} options.copy - boolean indicating whether to deep copy merged values\n* @param {(boolean|Function)} options.override - defines the merge strategy\n* @param {boolean} options.extend - boolean indicating whether new properties can be added to the target object\n* @returns {Function} merge function\n*\n* @example\n* var merge = mergefcn({\n*     'level': Number.POSITIVE_INFINITY,\n*     'copy': true,\n*     'override': true,\n*     'extend': true\n* });\n* // returns <Function>\n*/\nfunction mergefcn( opts ) {\n\treturn merge;\n\n\t/**\n\t* Merges objects into a target object. Note that the target object is mutated.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {...Object} source - source objects (i.e., objects to be merged into the target object)\n\t* @throws {Error} must provide a target object and one or more source objects\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} source arguments must be objects\n\t* @returns {Object} merged (target) object\n\t*\n\t* @example\n\t* var target = {\n\t*     'a': 'beep'\n\t* };\n\t* var source = {\n\t*     'a': 'boop',\n\t*     'b': 'bap'\n\t* };\n\t*\n\t* var out = merge( target, source );\n\t* // returns {'a':'boop', 'b':'bap'}\n\t*/\n\tfunction merge( target ) {\n\t\tvar nargs;\n\t\tvar arg;\n\t\tvar src;\n\t\tvar i;\n\n\t\tnargs = arguments.length - 1;\n\t\tif ( nargs < 1 ) {\n\t\t\tthrow new Error( 'insufficient input arguments. Must provide both a target object and one or more source objects.' );\n\t\t}\n\t\tif ( !isObject( target ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + target + '`.' );\n\t\t}\n\t\tsrc = new Array( nargs );\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\targ = arguments[ i+1 ];\n\n\t\t\t// WARNING: this is a porous check. Buffers, Numbers, Booleans, Strings, Dates, RegExp, custom class instances,... will all pass.\n\t\t\tif ( !isObject( arg ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. A merge source must be an object. Value: `' + arg + '`.' );\n\t\t\t}\n\t\t\tsrc[ i ] = arg;\n\t\t}\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tdeepMerge( target, src[ i ], opts.level, opts.copy, opts.override, opts.extend ); // eslint-disable-line max-len\n\t\t}\n\t\treturn target;\n\t}\n}\n\n\n// EXPORTS //\nexport default mergefcn;\n","import __var_0__ from './defaults.js';\nimport __var_1__ from './mergefcn.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar defaults = __var_0__;\nvar mergefcn = __var_1__;\n\n\n// MAIN //\n\n/**\n* Merges objects into a target object. Note that the target object is mutated.\n*\n* @name merge\n* @type {Function}\n* @param {Object} target - target object\n* @param {...Object} source - source objects (i.e., objects to be merged into the target object)\n* @throws {Error} must provide a target object and one or more source objects\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} source arguments must be objects\n* @returns {Object} merged (target) object\n*\n* @example\n* var target = {\n*     'a': 'beep'\n* };\n* var source = {\n*     'a': 'boop',\n*     'b': 'bap'\n* };\n*\n* var out = merge( target, source );\n* // returns {'a':'boop', 'b':'bap'}\n*/\nvar merge = mergefcn( defaults );\n\n\n// EXPORTS //\nexport default merge;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-function';\nimport __var_4__ from '@stdlib/assert/is-positive-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isFunction = __var_3__;\nvar isPositiveInteger = __var_4__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {number} [options.level] - merge level\n* @param {boolean} [options.copy] - boolean indicating whether to deep copy merged values\n* @param {(boolean|Function)} [options.override] - defines the merge strategy\n* @param {boolean} [options.extend] - boolean indicating whether new properties can be added to the target object\n* @returns {(Error|null)} error object or null\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'level' ) ) {\n\t\topts.level = options.level;\n\t\tif ( !isPositiveInteger( opts.level ) ) {\n\t\t\treturn new TypeError( 'invalid option. `level` option must be a positive integer. Option: `' + opts.level + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be a boolean primitive. Option: `' + opts.copy + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'override' ) ) {\n\t\topts.override = options.override;\n\t\tif (\n\t\t\t!isBoolean( opts.override ) &&\n\t\t\t!isFunction( opts.override )\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `override` option must be either a boolean primitive or a function. Option: `' + opts.override + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'extend' ) ) {\n\t\topts.extend = options.extend;\n\t\tif ( !isBoolean( opts.extend ) ) {\n\t\t\treturn new TypeError( 'invalid option. `extend` option must be a boolean primitive. Option: `' + opts.extend + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/copy';\nimport __var_1__ from './validate.js';\nimport __var_2__ from './defaults.js';\nimport __var_3__ from './mergefcn.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\nvar validate = __var_1__;\nvar defaults = __var_2__;\nvar mergefcn = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a function for merging and extending objects.\n*\n* @param {Options} options - merge options\n* @param {number} [options.level=Infinity] - merge level\n* @param {boolean} [options.copy=true] - boolean indicating whether to deep copy merged values\n* @param {(boolean|Function)} [options.override=true] - defines the merge strategy\n* @param {boolean} [options.extend=true] - boolean indicating whether new properties can be added to the target object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which can be used to merge objects\n*\n* @example\n* var opts = {\n*     'level': 100,\n*     'copy': true,\n*     'override': true,\n*     'extend': true\n* };\n*\n* var merge = factory( opts );\n* // returns <Function>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar err;\n\topts = copy( defaults );\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\treturn mergefcn( opts );\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './merge.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Merge and extend objects.\n*\n* @module @stdlib/utils/merge\n*\n* @example\n* var merge = require( '@stdlib/utils/merge' );\n*\n* var target = {\n*     'a': 'beep'\n* };\n* var source = {\n*     'a': 'boop',\n*     'b': 'bap'\n* };\n*\n* var out = merge( target, source );\n* // returns {'a':'boop', 'b':'bap'}\n*\n* @example\n* var factory = require( '@stdlib/utils/merge' ).factory;\n*\n* var opts = {\n*     'level': 100,\n*     'copy': true,\n*     'override': true,\n*     'extend': true\n* };\n*\n* var merge = factory( opts );\n* // returns <Function>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar merge = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( merge, 'factory', factory );\n\n\n// EXPORTS //\nexport default merge;\n"]}