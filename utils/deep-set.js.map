{"version":3,"sources":["@stdlib/utils/deep-set/lib/validate.js","@stdlib/utils/deep-set/lib/dset.js","@stdlib/utils/deep-set/lib/deep_set.js","@stdlib/utils/deep-set/lib/factory.js","@stdlib/utils/deep-set/lib/index.js"],"names":["isBoolean","__var_0__","isPrimitive","isString","__var_1__","isObject","__var_2__","hasOwnProp","__var_3__","validate","opts","options","create","TypeError","sep","isObjectLike","isFunction","deepSet","obj","props","val","bool","len","v","p","i","length","isArray","copy","__var_4__","defaults","__var_5__","dset","__var_6__","path","value","isStr","err","arguments","split","factory","setReadOnly"],"mappings":"iYAyBA,IAAIA,EAAYC,EAAUC,YACtBC,EAAWC,EAAUF,YACrBG,EAAWC,EACXC,EAAaC,EAyBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,GAGXJ,EAAYI,EAAS,YACzBD,EAAKE,OAASD,EAAQC,QAChBZ,EAAWU,EAAKE,SACd,IAAIC,UAAW,yEAA2EH,EAAKE,OAAS,MAG5GL,EAAYI,EAAS,SACzBD,EAAKI,IAAMH,EAAQG,KACbX,EAAUO,EAAKI,MACb,IAAID,UAAW,qEAAuEH,EAAKI,IAAM,MAGnG,KAdC,IAAID,UAAW,iEAAmEF,EAAU,wCC/BjGI,EAAed,EACfM,EAAaH,EACbY,EAAaV,EAejB,SAASW,EAASC,EAAKC,EAAOP,EAAQQ,GACrC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAH,EAAMH,EAAMO,OACZL,GAAO,EACPE,EAAIL,EACEO,EAAI,EAAGA,EAAIH,IAChBE,EAAIL,EAAOM,GACNV,EAAcQ,IAFEE,IAAM,CAG1B,IAAMlB,EAAYgB,EAAGC,GAAM,CAC1B,IAAKZ,EAGJ,MAFAW,EAAGC,GAAM,GAKNC,IAAMH,EAAI,GACTN,EAAYI,GAChBG,EAAGC,GAAMJ,EAAKG,EAAGC,IAEjBD,EAAGC,GAAMJ,EAEVC,GAAO,GAEPE,EAAIA,EAAGC,GAMV,OAAOH,EC/CR,IAAIN,EAAed,EACfE,EAAWC,EAAUF,YACrByB,EAAUrB,EACVsB,EAAOpB,EACPC,EAAWoB,EACXC,EAAWC,EACXC,EAAOC,EA6DX,SAAShB,EAASC,EAAKgB,EAAMC,EAAOxB,GACnC,IAAIyB,EACAjB,EACAT,EACA2B,EACJ,IAAMtB,EAAcG,GACnB,OAAO,EAGR,KADAkB,EAAQjC,EAAU+B,MACFP,EAASO,GACxB,MAAM,IAAIrB,UAAW,iFAAmFqB,EAAO,MAGhH,GADAxB,EAAOkB,EAAME,GACRQ,UAAUZ,OAAS,IACvBW,EAAM5B,EAAUC,EAAMC,IAErB,MAAM0B,EAQR,OAJClB,EADIiB,EACIF,EAAKK,MAAO7B,EAAKI,KAEjBoB,EAEFF,EAAMd,EAAKC,EAAOT,EAAKE,OAAQuB,GC3FvC,IAAIhC,EAAWF,EAAUC,YACrByB,EAAUvB,EACVW,EAAeT,EACfsB,EAAOpB,EACPC,EAAWoB,EACXC,EAAWC,EACXC,EAAOC,EAuBX,SAASO,EAASN,EAAMvB,GACvB,IAAIyB,EACAjB,EACAT,EACA2B,EAGJ,KADAD,EAAQjC,EAAU+B,MACFP,EAASO,GACxB,MAAM,IAAIrB,UAAW,iFAAmFqB,EAAO,MAGhH,GADAxB,EAAOkB,EAAME,GACRQ,UAAUZ,OAAS,IACvBW,EAAM5B,EAAUC,EAAMC,IAErB,MAAM0B,EAQR,OAJClB,EADIiB,EACIF,EAAKK,MAAO7B,EAAKI,KAEjBoB,EAEFjB,EAcP,SAASA,EAASC,EAAKiB,GACtB,QAAKpB,EAAcG,IACXc,EAAMd,EAAKC,EAAOT,EAAKE,OAAQuB,IChDzC,IAAIM,EAAcxC,EACdgB,EAAUb,EACVoC,EAAUlC,EAKdmC,EAAaxB,EAAS,UAAWuB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar hasOwnProp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {boolean} [options.create] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '/'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'create' ) ) {\n\t\topts.create = options.create;\n\t\tif ( !isBoolean( opts.create ) ) {\n\t\t\treturn new TypeError( 'invalid option. `create` option must be a boolean primitive. Option: `' + opts.create + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a string primitive. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isFunction = __var_2__;\n\n\n// MAIN //\n\n/**\n* Sets a nested property.\n*\n* @private\n* @param {ObjectLike} obj - input object\n* @param {Array} props - list of properties defining a key path\n* @param {boolean} create - boolean indicating whether to create a path if the key path does not already exist\n* @param {*} val - value to set\n* @returns {boolean} boolean indicating if the property was successfully set\n*/\nfunction deepSet( obj, props, create, val ) {\n\tvar bool;\n\tvar len;\n\tvar v;\n\tvar p;\n\tvar i;\n\n\tlen = props.length;\n\tbool = false;\n\tv = obj;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tp = props[ i ];\n\t\tif ( isObjectLike( v ) ) {\n\t\t\tif ( !hasOwnProp( v, p ) ) {\n\t\t\t\tif ( create ) {\n\t\t\t\t\tv[ p ] = {};\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i === len-1 ) {\n\t\t\t\tif ( isFunction( val ) ) {\n\t\t\t\t\tv[ p ] = val( v[ p ] );\n\t\t\t\t} else {\n\t\t\t\t\tv[ p ] = val;\n\t\t\t\t}\n\t\t\t\tbool = true;\n\t\t\t} else {\n\t\t\t\tv = v[ p ];\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\nexport default deepSet;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from './validate.js';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './dset.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar isString = __var_1__.isPrimitive;\nvar isArray = __var_2__;\nvar copy = __var_3__;\nvar validate = __var_4__;\nvar defaults = __var_5__;\nvar dset = __var_6__;\n\n\n// MAIN //\n\n/**\n* Sets a nested property value.\n*\n* @param {ObjectLike} obj - input object\n* @param {(string|Array)} path - key path\n* @param {*} value - value to set\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} second argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {boolean} boolean indicating if the property was successfully set\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'woot' );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( null, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* bool = deepSet( 'bap', 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var arr = [\n*     { 'a': [ {'x': 5} ] },\n*     { 'a': [ {'x': 10} ] }\n* ];\n* var bool = deepSet( arr, '1.a.0.x', 25 );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a/b/c', 'beep', {\n*     'sep': '/'\n* });\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.e.c', 'boop', {\n*     'create': true\n* });\n* // returns true\n*/\nfunction deepSet( obj, path, value, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tif ( !isObjectLike( obj ) ) {\n\t\treturn false;\n\t}\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn dset( obj, props, opts.create, value );\n}\n\n\n// EXPORTS //\nexport default deepSet;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/assert/is-object-like';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from './validate.js';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './dset.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isArray = __var_1__;\nvar isObjectLike = __var_2__;\nvar copy = __var_3__;\nvar validate = __var_4__;\nvar defaults = __var_5__;\nvar dset = __var_6__;\n\n\n// MAIN //\n\n/**\n* Creates a reusable deep set function.\n*\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} first argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} deep set function\n*\n* @example\n* var dset = factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*/\nfunction factory( path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn deepSet;\n\n\t/**\n\t* Sets a nested property.\n\t*\n\t* @private\n\t* @param {ObjectLike} obj - input object\n\t* @param {*} value - value to set\n\t* @returns {boolean} boolean indicating if the property was successfully set\n\t*\n\t* @example\n\t* var obj = { 'a': { 'b': { 'c': 'd' } } };\n\t* var bool = dset( obj, 'beep' );\n\t*/\n\tfunction deepSet( obj, value ) {\n\t\tif ( isObjectLike( obj ) ) {\n\t\t\treturn dset( obj, props, opts.create, value );\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './deep_set.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set a nested property value.\n*\n* @module @stdlib/utils/deep-set\n*\n* @example\n* var deepSet = require( '@stdlib/utils/deep-set' );\n*\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'beep' );\n* // returns true\n*\n* var dset = deepSet.factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*\n* obj = { 'a': { 'b': { 'c': 'd' } } };\n*\n* bool = dset( obj, 'beep' );\n* // returns true\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar deepSet = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( deepSet, 'factory', factory );\n\n\n// EXPORTS //\nexport default deepSet;\n"]}