{"version":3,"sources":["@stdlib/utils/define-memoized-property/lib/main.js","@stdlib/utils/define-memoized-property/lib/index.js"],"names":["isObject","__var_0__","isFunction","__var_1__","defineProperty","__var_2__","defineMemoizedProperty","obj","prop","desc","TypeError","value","memoize","configurable","enumerable","writable","get","call","set"],"mappings":"sHAwBA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAiBC,EAoCrB,SAASC,EAAwBC,EAAKC,EAAMC,GAC3C,IAAMT,EAAUO,GACf,MAAM,IAAIG,UAAW,+DAAiEH,EAAM,MAE7F,IAAMP,EAAUS,GACf,MAAM,IAAIC,UAAW,oEAAsED,EAAO,MAEnG,IAAMP,EAAYO,EAAKE,OACtB,MAAM,IAAID,UAAW,iGAAmGD,EAAKE,MAAQ,MAoCtI,SAASC,EAASD,GACjBF,EAAKE,MAAQA,EACbP,EAAgBG,EAAKC,EAAMC,GAnC5BA,EAAO,CACNI,kBAAwC,IAAtBJ,EAAKI,cAAoCJ,EAAKI,aAChEC,gBAAoC,IAApBL,EAAKK,YAAkCL,EAAKK,WAC5DC,cAAgC,IAAlBN,EAAKM,UAAgCN,EAAKM,SACxDJ,MAASF,EAAKE,OAIfP,EAAgBG,EAAKC,EAAM,CAC1BK,cAAgB,EAChBC,WAAcL,EAAKK,WACnBE,IAUD,WACC,IAAIL,EAAQF,EAAKE,MAAMM,KAAMV,GAE7B,OADAK,EAASD,GACFA,GAZPO,IAAST,EAAa,SAAKG,OAAU,ICtCpC,IAACN,EAAyBL","sourcesContent":["import __var_0__ from '@stdlib/assert/is-object';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/utils/define-property';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isFunction = __var_1__;\nvar defineProperty = __var_2__;\n\n\n// MAIN //\n\n/**\n* Defines a memoized object property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} desc - property descriptor\n* @param {boolean} [desc.configurable=false] - boolean indicating if the property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [desc.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [desc.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {Function} desc.value - function whose return value will be memoized\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} property descriptor `value` property must be a function\n*\n* @example\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* defineMemoizedProperty( obj, 'foo', {\n*     'configurable': false,\n*     'enumerable': false,\n*     'writable': false,\n*     'value': foo\n* });\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\nfunction defineMemoizedProperty( obj, prop, desc ) {\n\tif ( !isObject( obj ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( !isObject( desc ) ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + desc + '`.' );\n\t}\n\tif ( !isFunction( desc.value ) ) {\n\t\tthrow new TypeError( 'invalid argument. The `value` property of the property descriptor must be a function. Value: `' + desc.value + '`.' );\n\t}\n\t// Copy descriptor properties to a new data descriptor object:\n\tdesc = {\n\t\t'configurable': ( desc.configurable === void 0 ) ? false : desc.configurable,\n\t\t'enumerable': ( desc.enumerable === void 0 ) ? false : desc.enumerable,\n\t\t'writable': ( desc.writable === void 0 ) ? false : desc.writable,\n\t\t'value': desc.value\n\t};\n\n\t// Define a configurable (at least temporarily) accessor property:\n\tdefineProperty( obj, prop, {\n\t\t'configurable': true,\n\t\t'enumerable': desc.enumerable,\n\t\t'get': getter,\n\t\t'set': ( desc.writable ) ? memoize : void 0\n\t});\n\n\t/**\n\t* Temporary get accessor.\n\t*\n\t* @private\n\t* @returns {*} property value\n\t*/\n\tfunction getter() {\n\t\tvar value = desc.value.call( obj );\n\t\tmemoize( value );\n\t\treturn value;\n\t}\n\n\t/**\n\t* Defines a memoized object property.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t*/\n\tfunction memoize( value ) {\n\t\tdesc.value = value;\n\t\tdefineProperty( obj, prop, desc );\n\t}\n}\n\n\n// EXPORTS //\nexport default defineMemoizedProperty;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a memoized object property.\n*\n* @module @stdlib/utils/define-memoized-property\n*\n* @example\n* var defineMemoizedProperty = require( '@stdlib/utils/define-memoized-property' );\n*\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* defineMemoizedProperty( obj, 'foo', {\n*     'configurable': false,\n*     'enumerable': false,\n*     'writable': false,\n*     'value': foo\n* });\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\n\n// MODULES //\nvar defineMemoizedProperty = __var_0__;\n\n\n// EXPORTS //\nexport default defineMemoizedProperty;\n"]}