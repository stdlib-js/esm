{"version":3,"sources":["@stdlib/utils/count-by/lib/validate.js","@stdlib/utils/count-by/lib/count_by.js","@stdlib/utils/count-by/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","validate","opts","options","thisArg","TypeError","isCollection","isFunction","__var_2__","__var_3__","countBy","collection","indicator","err","out","len","cb","g","i","arguments","length","call"],"mappings":"mLAuBA,IAAIA,EAAWC,EACXC,EAAaC,EAwBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,IAGXJ,EAAYI,EAAS,aACzBD,EAAKE,QAAUD,EAAQC,SAEjB,MALC,IAAIC,UAAW,wDAA0DF,EAAU,MCzB5F,IAAIG,EAAeR,EACfS,EAAaP,EACbD,EAAaS,EACbP,EAAWQ,EA2Bf,SAASC,EAASC,EAAYR,EAASS,GACtC,IAAIR,EACAF,EACAW,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMZ,EAAcK,GACnB,MAAM,IAAIN,UAAW,kEAAkEM,EAAW,MAGnG,GADAT,EAAO,GACmB,IAArBiB,UAAUC,OACdJ,EAAKb,MACC,CAEN,GADAU,EAAMZ,EAAUC,EAAMC,GAErB,MAAMU,EAEPG,EAAKJ,EAEN,IAAML,EAAYS,GACjB,MAAM,IAAIX,UAAW,+DAA+DW,EAAG,MAKxF,IAHAZ,EAAUF,EAAKE,QACfW,EAAMJ,EAAWS,OACjBN,EAAM,GACAI,EAAI,EAAGA,EAAIH,EAAKG,IACrBD,EAAID,EAAGK,KAAMjB,EAASO,EAAYO,GAAKA,GAClCnB,EAAYe,EAAKG,GACrBH,EAAKG,IAAO,EAEZH,EAAKG,GAAM,EAGb,OAAOH,ECpDL,IAACJ,EAAUZ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {}\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar isFunction = __var_1__;\nvar hasOwnProp = __var_2__;\nvar validate = __var_3__;\n\n\n// MAIN //\n\n/**\n* Groups values according to an indicator function and returns group counts.\n*\n* @param {Collection} collection - input collection\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} last argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Object} counts\n*\n* @example\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = countBy( arr, indicator );\n* // returns { 'b': 3, 'f': 1 }\n*/\nfunction countBy( collection, options, indicator ) {\n\tvar thisArg;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar len;\n\tvar cb;\n\tvar g;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'`.' );\n\t}\n\topts = {};\n\tif ( arguments.length === 2 ) {\n\t\tcb = options;\n\t} else {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tcb = indicator;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( 'invalid argument. Last argument must be a function. Value: `'+cb+'`.' );\n\t}\n\tthisArg = opts.thisArg;\n\tlen = collection.length;\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tg = cb.call( thisArg, collection[ i ], i );\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ] += 1;\n\t\t} else {\n\t\t\tout[ g ] = 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default countBy;\n","import __var_0__ from './count_by.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Group values according to an indicator function and return group counts.\n*\n* @module @stdlib/utils/count-by\n*\n* @example\n* var countBy = require( '@stdlib/utils/count-by' );\n*\n* function indicator( v ) {\n*     return v[ 0 ];\n* }\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n*\n* var out = countBy( arr, indicator );\n* // returns { 'b': 3, 'f': 1 }\n*/\n\n// MODULES //\nvar countBy = __var_0__;\n\n\n// EXPORTS //\nexport default countBy;\n"]}