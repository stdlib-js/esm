{"version":3,"sources":["@stdlib/utils/inmap-right/lib/inmap_right.js","@stdlib/utils/inmap-right/lib/index.js"],"names":["isCollection","__var_0__","isFunction","__var_1__","inmapRight","collection","fcn","thisArg","len","v","i","TypeError","length","call"],"mappings":"sFAuBA,IAAIA,EAAeC,EACfC,EAAaC,EAkCjB,SAASC,EAAYC,EAAYC,EAAKC,GACrC,IAAIC,EACAC,EACAC,EACJ,IAAMV,EAAcK,GACnB,MAAM,IAAIM,UAAW,kEAAkEN,EAAW,MAEnG,IAAMH,EAAYI,GACjB,MAAM,IAAIK,UAAW,iEAAiEL,EAAI,MAG3F,IAAMI,GADNF,EAAMH,EAAWO,QACH,EAAGF,GAAK,EAAGA,IACxBD,EAAIH,EAAIO,KAAMN,EAASF,EAAYK,GAAKA,EAAGL,GAGtCG,IAAQH,EAAWO,SACvBF,GAAOL,EAAWO,OAASJ,EAC3BA,EAAMH,EAAWO,QAEbF,GAAK,GAAKA,EAAIF,IAClBH,EAAYK,GAAMD,GAGpB,OAAOJ,ECrCL,IAACD,EAAaH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar isFunction = __var_1__;\n\n\n// MAIN //\n\n/**\n* Invokes a function once for each element in a collection and updates the collection in-place, iterating from right to left.\n*\n* ## Notes\n*\n* -   For dynamic array resizing, the only behavior made intentionally consistent with `inmap` (iterating from left to right) is when elements are pushed onto the beginning (end) of an array. In other words, for `inmap()`, `[].push()` behavior is consistent with `inmapRight()` `[].unshift()` behavior.\n*\n*\n* @param {Collection} collection - input collection\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a function\n* @returns {Collection} input collection\n*\n* @example\n* function scale( value, index, collection ) {\n*     console.log( '%s: %d', index, value );\n*     return value * index;\n* }\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var out = inmapRight( arr, scale );\n* // returns [ 0, 2, 6, 12 ]\n*\n* var bool = ( out === arr );\n* // returns true\n*/\nfunction inmapRight( collection, fcn, thisArg ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tlen = collection.length;\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tv = fcn.call( thisArg, collection[ i ], i, collection );\n\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\ti += ( collection.length - len );\n\t\t\tlen = collection.length;\n\t\t}\n\t\tif ( i >= 0 && i < len ) {\n\t\t\tcollection[ i ] = v;\n\t\t}\n\t}\n\treturn collection;\n}\n\n\n// EXPORTS //\nexport default inmapRight;\n","import __var_0__ from './inmap_right.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Invoke a function once for each element in a collection and update the collection in-place, iterating from right to left.\n*\n* @module @stdlib/utils/inmap-right\n*\n* @example\n* var inmapRight = require( '@stdlib/utils/inmap-right' );\n*\n* function scale( value, index, collection ) {\n*     console.log( '%s: %d', index, value );\n*     return value * index;\n* }\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var out = inmapRight( arr, scale );\n* // returns [ 0, 2, 6, 12 ]\n*\n* var bool = ( out === arr );\n* // returns true\n*/\n\n// MODULES //\nvar inmapRight = __var_0__;\n\n\n// EXPORTS //\nexport default inmapRight;\n"]}