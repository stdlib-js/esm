{"version":3,"sources":["@stdlib/utils/keys/lib/builtin.js","@stdlib/utils/keys/lib/has_arguments_bug.js","@stdlib/utils/keys/lib/has_builtin.js","@stdlib/utils/keys/lib/builtin_wrapper.js","@stdlib/utils/keys/lib/has_enumerable_prototype_bug.js","@stdlib/utils/keys/lib/has_non_enumerable_properties_bug.js","@stdlib/utils/keys/lib/is_constructor_prototype.js","@stdlib/utils/keys/lib/has_automation_equality_bug.js","@stdlib/utils/keys/lib/window.js","@stdlib/utils/keys/lib/has_window.js","@stdlib/utils/keys/lib/is_constructor_prototype_wrapper.js","@stdlib/utils/keys/lib/polyfill.js","@stdlib/utils/keys/lib/main.js","@stdlib/utils/keys/lib/index.js"],"names":["keys","value","Object","__var_0__","test","arguments","length","check","bool","isArguments","builtin","__var_1__","slice","Array","prototype","call","isEnumerableProperty","noop","obj","toString","isConstructorPrototype","constructor","w","window","hasOwnProp","indexOf","typeOf","__var_2__","__var_3__","EXCLUDED_KEYS","__var_4__","win","__var_5__","k","err","hasAutomationEqualityBug","HAS_WINDOW","wrapper","error","isObjectLike","HAS_ENUM_PROTO_BUG","HAS_NON_ENUM_PROPS_BUG","NON_ENUMERABLE","__var_6__","skipConstructor","skipPrototype","isFcn","out","p","i","push","String","hasArgumentsBug","HAS_BUILTIN","polyfill","__var_0__$1"],"mappings":"8QA2CA,SAASA,EAAMC,GACd,OAAOC,OAAOF,KAAME,OAAQD,ICtB7B,IAAID,EAAOG,EAWX,SAASC,IACR,OAA8C,KAArCJ,EAAMK,YAAe,IAAKC,OAgBpC,SAASC,IACR,OAAOH,EAAM,EAAG,GC5BjB,IAAII,OAAgC,IAAhBN,OAAOF,KCAvBS,EAAcN,EACdO,EAAUC,EAKVC,EAAQC,MAAMC,UAAUF,MAqB5B,SAASZ,EAAMC,GACd,OAAKQ,EAAaR,GACVS,EAASE,EAAMG,KAAMd,IAEtBS,EAAST,GC/BjB,IAAIe,EAAuBb,EACvBc,EAAON,EAMPH,EAAOQ,EAAsBC,EAAM,aCRnCD,EAAuBb,EAKvBe,EAAM,CACTC,SAAY,MAOTX,GAAQQ,EAAsBE,EAAK,YCLvC,SAASE,EAAwBnB,GAChC,OAASA,EAAMoB,aAAepB,EAAMoB,YAAYP,YAAcb,MCM3DO,yPCdAc,EAAwB,oBAAXC,YAA2B,EAASA,ODIjDC,EAAarB,EACbsB,EAAUd,EACVe,EAASC,EACTP,EAAyBQ,EACzBC,EAAgBC,EAChBC,EAAMC,EAkBV,SAASzB,IACR,IAAI0B,EACJ,GAAuB,cAAlBP,EAAQK,GACZ,OAAO,EAER,IAAME,KAAKF,EACV,KAEmC,IAAjCN,EAASI,EAAeI,IACxBT,EAAYO,EAAKE,IACJ,OAAbF,EAAKE,IACkB,WAAvBP,EAAQK,EAAKE,KAEbb,EAAwBW,EAAKE,IAE7B,MAAQC,GACT,OAAO,EAGT,OAAO,EAUR,IAAA/B,EAJAK,EAAOD,IEpDHC,EAA2B,oBAAXe,OCChBY,EAA2BhC,EAC3BiB,EAAyBT,EACzByB,EAAaT,EAYjB,SAASU,EAASpC,GACjB,IAAoB,IAAfmC,IAAyBD,EAC7B,OAAOf,EAAwBnB,GAEhC,IACC,OAAOmB,EAAwBnB,GAC9B,MAAQqC,GACT,OAAO,uHCjBLC,EAAepC,EACfqB,EAAab,EACbF,EAAckB,EACda,EAAqBZ,EACrBa,EAAyBX,EACzBV,EAAyBY,EACzBU,EAAiBC,EAqBrB,SAAS3C,EAAMC,GACd,IAAI2C,EACAC,EACAC,EACAC,EACAd,EACAe,EACAC,EAGJ,GADAF,EAAM,GACDtC,EAAaR,GAAU,CAE3B,IAAMgD,EAAI,EAAGA,EAAIhD,EAAMK,OAAQ2C,IAC9BF,EAAIG,KAAMD,EAAE9B,YAGb,OAAO4B,EAER,GAAsB,iBAAV9C,GAEX,GAAKA,EAAMK,OAAS,IAAMkB,EAAYvB,EAAO,KAC5C,IAAMgD,EAAI,EAAGA,EAAIhD,EAAMK,OAAQ2C,IAC9BF,EAAIG,KAAMD,EAAE9B,gBAGR,CAEN,IAAe,KADf2B,EAA2B,mBAAV7C,KACQsC,EAActC,GACtC,OAAO8C,EAERF,EAAkBL,GAAsBM,EAEzC,IAAMb,KAAKhC,EACF4C,GAAuB,cAANZ,IAAuBT,EAAYvB,EAAOgC,IAClEc,EAAIG,KAAMC,OAAQlB,IAGpB,GAAKQ,EAEJ,IADAG,EAAkBxB,EAAwBnB,GACpCgD,EAAI,EAAGA,EAAIP,EAAepC,OAAQ2C,IACvCD,EAAIN,EAAgBO,GACZL,GAAyB,gBAANI,IAAyBxB,EAAYvB,EAAO+C,IACtED,EAAIG,KAAMC,OAAQH,IAIrB,OAAOD,EC3ER,IA0BI/C,EA1BAoD,EAAkBjD,EAClBkD,EAAc1C,EACdD,EAAUiB,EACVU,EAAUT,EACV0B,EAAWxB,EAmCfyB,GAVEvD,EAFGqD,EACCD,IACGf,EAEA3B,EAGD4C,ECrBJtD,GAAOG","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.keys()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\treturn Object.keys( Object( value ) );\n}\n\n\n// EXPORTS //\nexport default keys;\n","import __var_0__ from './builtin.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar keys = __var_0__;\n\n\n// FUNCTIONS //\n\n/**\n* Tests the built-in `Object.keys()` implementation when provided `arguments`.\n*\n* @private\n* @returns {boolean} boolean indicating whether the built-in implementation returns the expected number of keys\n*/\nfunction test() {\n\treturn ( keys( arguments ) || '' ).length !== 2;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether the built-in `Object.keys()` implementation supports providing `arguments` as an input value.\n*\n* ## Notes\n*\n* -   Safari 5.0 does **not** support `arguments` as an input value.\n*\n* @private\n* @returns {boolean} boolean indicating whether a built-in implementation supports `arguments`\n*/\nfunction check() {\n\treturn test( 1, 2 );\n}\n\n\n// EXPORTS //\nexport default check;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof Object.keys !== 'undefined' );\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from '@stdlib/assert/is-arguments';\nimport __var_1__ from './builtin.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArguments = __var_0__;\nvar builtin = __var_1__;\n\n\n// VARIABLES //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tif ( isArguments( value ) ) {\n\t\treturn builtin( slice.call( value ) );\n\t}\n\treturn builtin( value );\n}\n\n\n// EXPORTS //\nexport default keys;\n","import __var_0__ from '@stdlib/assert/is-enumerable-property';\nimport __var_1__ from '@stdlib/utils/noop';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isEnumerableProperty = __var_0__;\nvar noop = __var_1__;\n\n\n// MAIN //\n\n// Note: certain environments treat an object's prototype as enumerable, which, as a matter of convention, it shouldn't be...\nvar bool = isEnumerableProperty( noop, 'prototype' );\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from '@stdlib/assert/is-enumerable-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isEnumerableProperty = __var_0__;\n\n\n// VARIABLES //\n\nvar obj = {\n\t'toString': null\n};\n\n\n// MAIN //\n\n// Note: certain environments don't allow enumeration of overwritten properties which are considered non-enumerable...\nvar bool = !isEnumerableProperty( obj, 'toString' );\n\n\n// EXPORTS //\nexport default bool;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether a value equals the prototype of its constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction isConstructorPrototype( value ) {\n\treturn ( value.constructor && value.constructor.prototype === value );\n}\n\n\n// EXPORTS //\nexport default isConstructorPrototype;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/utils/index-of';\nimport __var_2__ from '@stdlib/utils/type-of';\nimport __var_3__ from './is_constructor_prototype.js';\nimport __var_4__ from './excluded_keys.json';\nimport __var_5__ from './window.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar indexOf = __var_1__;\nvar typeOf = __var_2__;\nvar isConstructorPrototype = __var_3__;\nvar EXCLUDED_KEYS = __var_4__;\nvar win = __var_5__;\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Determines whether an environment throws when comparing to the prototype of a value's constructor (e.g., [IE9][1]).\n*\n* [1]: https://stackoverflow.com/questions/7688070/why-is-comparing-the-constructor-property-of-two-windows-unreliable\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment is buggy\n*/\nfunction check() {\n\tvar k;\n\tif ( typeOf( win ) === 'undefined' ) {\n\t\treturn false;\n\t}\n\tfor ( k in win ) { // eslint-disable-line guard-for-in\n\t\ttry {\n\t\t\tif (\n\t\t\t\tindexOf( EXCLUDED_KEYS, k ) === -1 &&\n\t\t\t\thasOwnProp( win, k ) &&\n\t\t\t\twin[ k ] !== null &&\n\t\t\t\ttypeOf( win[ k ] ) === 'object'\n\t\t\t) {\n\t\t\t\tisConstructorPrototype( win[ k ] );\n\t\t\t}\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\nbool = check();\n\n\n// EXPORTS //\nexport default bool;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar w = ( typeof window === 'undefined' ) ? void 0 : window;\n\n\n// EXPORTS //\nexport default w;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof window !== 'undefined' );\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from './has_automation_equality_bug.js';\nimport __var_1__ from './is_constructor_prototype.js';\nimport __var_2__ from './has_window.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasAutomationEqualityBug = __var_0__;\nvar isConstructorPrototype = __var_1__;\nvar HAS_WINDOW = __var_2__;\n\n\n// MAIN //\n\n/**\n* Wraps the test for constructor prototype equality to accommodate buggy environments (e.g., environments which throw when testing equality).\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction wrapper( value ) {\n\tif ( HAS_WINDOW === false && !hasAutomationEqualityBug ) {\n\t\treturn isConstructorPrototype( value );\n\t}\n\ttry {\n\t\treturn isConstructorPrototype( value );\n\t} catch ( error ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrapper;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-arguments';\nimport __var_3__ from './has_enumerable_prototype_bug.js';\nimport __var_4__ from './has_non_enumerable_properties_bug.js';\nimport __var_5__ from './is_constructor_prototype_wrapper.js';\nimport __var_6__ from './non_enumerable.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isArguments = __var_2__;\nvar HAS_ENUM_PROTO_BUG = __var_3__;\nvar HAS_NON_ENUM_PROPS_BUG = __var_4__;\nvar isConstructorPrototype = __var_5__;\nvar NON_ENUMERABLE = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tvar skipConstructor;\n\tvar skipPrototype;\n\tvar isFcn;\n\tvar out;\n\tvar k;\n\tvar p;\n\tvar i;\n\n\tout = [];\n\tif ( isArguments( value ) ) {\n\t\t// Account for environments which treat `arguments` differently...\n\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\tout.push( i.toString() );\n\t\t}\n\t\t// Note: yes, we are precluding the `arguments` array-like object from having other enumerable properties; however, this should (1) be very rare and (2) not be encouraged (e.g., doing something like `arguments.a = 'b'`; in certain engines directly manipulating the `arguments` value results in automatic de-optimization).\n\t\treturn out;\n\t}\n\tif ( typeof value === 'string' ) {\n\t\t// Account for environments which do not treat string character indices as \"own\" properties...\n\t\tif ( value.length > 0 && !hasOwnProp( value, '0' ) ) {\n\t\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\t\tout.push( i.toString() );\n\t\t\t}\n\t\t}\n\t} else {\n\t\tisFcn = ( typeof value === 'function' );\n\t\tif ( isFcn === false && !isObjectLike( value ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tskipPrototype = ( HAS_ENUM_PROTO_BUG && isFcn );\n\t}\n\tfor ( k in value ) {\n\t\tif ( !( skipPrototype && k === 'prototype' ) && hasOwnProp( value, k ) ) {\n\t\t\tout.push( String( k ) );\n\t\t}\n\t}\n\tif ( HAS_NON_ENUM_PROPS_BUG ) {\n\t\tskipConstructor = isConstructorPrototype( value );\n\t\tfor ( i = 0; i < NON_ENUMERABLE.length; i++ ) {\n\t\t\tp = NON_ENUMERABLE[ i ];\n\t\t\tif ( !( skipConstructor && p === 'constructor' ) && hasOwnProp( value, p ) ) {\n\t\t\t\tout.push( String( p ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default keys;\n","import __var_0__ from './has_arguments_bug.js';\nimport __var_1__ from './has_builtin.js';\nimport __var_2__ from './builtin.js';\nimport __var_3__ from './builtin_wrapper.js';\nimport __var_4__ from './polyfill.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasArgumentsBug = __var_0__;\nvar HAS_BUILTIN = __var_1__;\nvar builtin = __var_2__;\nvar wrapper = __var_3__;\nvar polyfill = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @name keys\n* @type {Function}\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nvar keys;\nif ( HAS_BUILTIN ) {\n\tif ( hasArgumentsBug() ) {\n\t\tkeys = wrapper;\n\t} else {\n\t\tkeys = builtin;\n\t}\n} else {\n\tkeys = polyfill;\n}\n\n\n// EXPORTS //\nexport default keys;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array of an object's own enumerable property names.\n*\n* @module @stdlib/utils/keys\n*\n* @example\n* var keys = require( '@stdlib/utils/keys' );\n*\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\n\n// MODULES //\nvar keys = __var_0__;\n\n\n// EXPORTS //\nexport default keys;\n"]}