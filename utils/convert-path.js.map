{"version":3,"sources":["@stdlib/utils/convert-path/lib/convert_path.js","@stdlib/utils/convert-path/lib/index.js"],"names":["isString","__var_0__","isPrimitive","RE_EXTENDED_LENGTH_PATH","__var_1__","lowercase","__var_2__","replace","__var_3__","RE_WIN_DEVICE_ROOT","RE_POSIX_DEVICE_ROOT","convertPath","from","to","device","parts","out","TypeError","Error","exec","test"],"mappings":"yKAyBA,IAAIA,EAAWC,EAAUC,YACrBC,EAA0BC,EAC1BC,EAAYC,EACZC,EAAUC,EAKVC,EAAqB,sBACrBC,EAAsB,kBAgC1B,SAASC,EAAaC,EAAMC,GAC3B,IAAIC,EACAC,EACAC,EACJ,IAAMhB,EAAUY,GACf,MAAM,IAAIK,UAAW,wEAAwEL,EAAK,MAEnG,IAAMZ,EAAUa,GACf,MAAM,IAAII,UAAW,yEAAyEJ,EAAG,MAElG,GACQ,UAAPA,GACO,UAAPA,GACO,UAAPA,EAEA,MAAM,IAAIK,MAAO,0FAA0FL,EAAG,MAK/G,GAHAG,EAAMJ,EAGM,UAAPC,EAMJ,OALAE,EAAQL,EAAqBS,KAAMH,MAElCF,EAASC,EAAO,GAAI,MACpBC,EAAMT,EAASS,EAAKN,EAAsBI,IAEpCP,EAASS,EAAK,IAAK,MAG3B,GAAKb,EAAwBiB,KAAMR,GAClC,MAAM,IAAIM,MAAO,0FAA0FN,EAAK,MAGjH,MAAY,UAAPC,IACJE,EAAQL,EAAqBS,KAAMH,KAElCF,EAASC,EAAO,GAAI,KACpBC,EAAMT,EAASS,EAAKN,EAAsBI,KAE1CC,EAAQN,EAAmBU,KAAMH,MAEhCF,EAASC,EAAO,GAAI,KACpBC,EAAMT,EAASS,EAAKP,EAAoBK,IAGnCP,EAASS,EAAK,KAAM,QAG5BD,EAAQN,EAAmBU,KAAMH,MAEhCF,EAAS,IAAIT,EAAWU,EAAO,IAAM,IACrCC,EAAMT,EAASS,EAAKP,EAAoBK,IAElCP,EAASS,EAAK,KAAM,MC5EzB,IAACL,EAAcV","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/regexp/extended-length-path';\nimport __var_2__ from '@stdlib/string/lowercase';\nimport __var_3__ from '@stdlib/string/replace';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar RE_EXTENDED_LENGTH_PATH = __var_1__;\nvar lowercase = __var_2__;\nvar replace = __var_3__;\n\n\n// VARIABLES //\n\nvar RE_WIN_DEVICE_ROOT = /^([A-Za-z]):[\\\\\\/]+/; // eslint-disable-line no-useless-escape\nvar RE_POSIX_DEVICE_ROOT =/^\\/([A-Za-z])\\//;\n\n\n// MAIN //\n\n/**\n* Converts between POSIX and Windows paths.\n*\n* @param {string} from - path to convert\n* @param {string} to - output path convention\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {RangeError} second argument must be a recognized output path convention\n* @throws {Error} cannot convert a Windows extended-length path to a non-Windows path convention\n* @returns {string} converted path\n*\n* @example\n* var p = convertPath( '/c/foo/bar/beep.c', 'win32' );\n* // returns 'c:\\\\foo\\\\bar\\\\beep.c'\n*\n* @example\n* var p = convertPath( '/c/foo/bar/beep.c', 'mixed' );\n* // returns 'c:/foo/bar/beep.c'\n*\n* @example\n* var p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'posix' );\n* // returns '/c/foo/bar/beep.c'\n*\n* @example\n* var p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'mixed' );\n* // returns 'C:/foo/bar/beep.c'\n*/\nfunction convertPath( from, to ) {\n\tvar device;\n\tvar parts;\n\tvar out;\n\tif ( !isString( from ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `'+from+'`.' );\n\t}\n\tif ( !isString( to ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a string primitive. Value: `'+to+'`.' );\n\t}\n\tif (\n\t\tto !== 'win32' &&\n\t\tto !== 'mixed' &&\n\t\tto !== 'posix'\n\t) {\n\t\tthrow new Error( 'invalid argument. Second argument must be a recognized output path convention. Value: `'+to+'`.' );\n\t}\n\tout = from;\n\n\t// Convert to a Windows path convention by transforming a POSIX device root (if present) and using a Windows path separator...\n\tif ( to === 'win32' ) {\n\t\tparts = RE_POSIX_DEVICE_ROOT.exec( out );\n\t\tif ( parts ) {\n\t\t\tdevice = parts[ 1 ]+':\\\\';\n\t\t\tout = replace( out, RE_POSIX_DEVICE_ROOT, device );\n\t\t}\n\t\treturn replace( out, '/', '\\\\' );\n\t}\n\t// Check for Windows extended-length paths...\n\tif ( RE_EXTENDED_LENGTH_PATH.test( from ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot convert Windows extended-length paths to POSIX paths. Value: `'+from+'`.' );\n\t}\n\t// Convert to a mixed path convention by combining a Windows drive letter convention with a POSIX path separator...\n\tif ( to === 'mixed' ) {\n\t\tparts = RE_POSIX_DEVICE_ROOT.exec( out );\n\t\tif ( parts ) {\n\t\t\tdevice = parts[ 1 ]+':/';\n\t\t\tout = replace( out, RE_POSIX_DEVICE_ROOT, device );\n\t\t} else {\n\t\t\tparts = RE_WIN_DEVICE_ROOT.exec( out );\n\t\t\tif ( parts ) {\n\t\t\t\tdevice = parts[ 1 ]+':/';\n\t\t\t\tout = replace( out, RE_WIN_DEVICE_ROOT, device );\n\t\t\t}\n\t\t}\n\t\treturn replace( out, '\\\\', '/' );\n\t}\n\t// Convert to a POSIX path convention by transforming a Windows device root (if present) and using a POSIX path separator...\n\tparts = RE_WIN_DEVICE_ROOT.exec( out );\n\tif ( parts ) {\n\t\tdevice = '/'+lowercase( parts[ 1 ] )+'/';\n\t\tout = replace( out, RE_WIN_DEVICE_ROOT, device );\n\t}\n\treturn replace( out, '\\\\', '/' );\n}\n\n\n// EXPORTS //\nexport default convertPath;\n","import __var_0__ from './convert_path.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert between POSIX and Windows paths.\n*\n* @module @stdlib/utils/convert-path\n*\n* @example\n* var convertPath = require( '@stdlib/utils/convert-path' );\n*\n* var p = convertPath( '/c/foo/bar/beep.c', 'win32' );\n* // returns 'c:\\\\foo\\\\bar\\\\beep.c'\n*\n* p = convertPath( '/c/foo/bar/beep.c', 'mixed' );\n* // returns 'c:/foo/bar/beep.c'\n*\n* p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'posix' );\n* // returns '/c/foo/bar/beep.c'\n*\n* p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'mixed' );\n* // returns 'C:/foo/bar/beep.c'\n*/\n\n// MODULES //\nvar convertPath = __var_0__;\n\n\n// EXPORTS //\nexport default convertPath;\n"]}