{"version":3,"sources":["@stdlib/utils/group/lib/validate.js","@stdlib/utils/group/lib/return_values.js","@stdlib/utils/group/lib/return_indices.js","@stdlib/utils/group/lib/return_pairs.js","@stdlib/utils/group/lib/group.js","@stdlib/utils/group/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","indexOf","__var_2__","returns","validate","opts","options","TypeError","join","group","collection","groups","out","len","g","i","length","toString","push","isCollection","returnValues","returnIndices","__var_3__","returnPairs","__var_4__","err","arguments","RangeError"],"mappings":"sKAwBA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAUC,EAKVC,EAAU,CAAE,SAAU,UAAW,KAwBrC,SAASC,EAAUC,EAAMC,GACxB,OAAMT,EAAUS,GAGXP,EAAYO,EAAS,aACzBD,EAAKF,QAAUG,EAAQH,SACoB,IAAtCF,EAASE,EAASE,EAAKF,UACpB,IAAII,UAAW,mEAAqEJ,EAAQK,KAAM,QAAW,eAAiBH,EAAKF,QAAU,MAG/I,KARC,IAAII,UAAW,wDAA0DD,EAAU,MCnC5F,IAAIP,EAAaD,EAyBjB,SAASW,EAAOC,EAAYC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IAFAF,EAAMH,EAAWM,OACjBJ,EAAM,GACAG,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAIH,EAAQI,GAAIE,WACXlB,EAAYa,EAAKE,GACrBF,EAAKE,GAAII,KAAMR,EAAYK,IAE3BH,EAAKE,GAAM,CAAEJ,EAAYK,IAG3B,OAAOH,ECzCR,IAAIb,EAAaD,EAyBjB,SAASW,EAAOC,EAAYC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IAFAF,EAAMH,EAAWM,OACjBJ,EAAM,GACAG,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAIH,EAAQI,GAAIE,WACXlB,EAAYa,EAAKE,GACrBF,EAAKE,GAAII,KAAMH,GAEfH,EAAKE,GAAM,CAAEC,GAGf,OAAOH,ECzCR,IAAIb,EAAaD,EAyBjB,SAASW,EAAOC,EAAYC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EAIJ,IAFAF,EAAMH,EAAWM,OACjBJ,EAAM,GACAG,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAIH,EAAQI,GAAIE,WACXlB,EAAYa,EAAKE,GACrBF,EAAKE,GAAII,KAAM,CAAEH,EAAGL,EAAYK,KAEhCH,EAAKE,GAAM,CAAE,CAAEC,EAAGL,EAAYK,KAGhC,OAAOH,ECrCR,IAAIO,EAAerB,EACfM,EAAWJ,EACXoB,EAAelB,EACfmB,EAAgBC,EAChBC,EAAcC,EAgDlB,SAASf,EAAOC,EAAYJ,EAASK,GACpC,IAAIN,EACAoB,EACAX,EACJ,IAAMK,EAAcT,GACnB,MAAM,IAAIH,UAAW,kEAAkEG,EAAW,MAKnG,GAHAL,EAAO,CACNF,QAAW,UAEc,IAArBuB,UAAUV,OACdF,EAAIR,MACE,CAEN,GADAmB,EAAMrB,EAAUC,EAAMC,GAErB,MAAMmB,EAEPX,EAAIH,EAEL,IAAMQ,EAAcL,GACnB,MAAM,IAAIP,UAAW,iEAAiEO,EAAE,MAEzF,GAAKJ,EAAWM,SAAWF,EAAEE,OAC5B,MAAM,IAAIW,WAAY,wEAEvB,MAAsB,WAAjBtB,EAAKF,QACFiB,EAAcV,EAAYI,GAEZ,YAAjBT,EAAKF,QACFkB,EAAeX,EAAYI,GAE5BS,EAAab,EAAYI,GC9C9B,IAACL,EAAQX","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/utils/index-of';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar indexOf = __var_2__;\n\n\n// VARIABLES //\n\nvar returns = [ 'values', 'indices', '*' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.returns] - output format\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'returns': '*'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'returns' ) ) {\n\t\topts.returns = options.returns;\n\t\tif ( indexOf( returns, opts.returns ) === -1 ) {\n\t\t\treturn new TypeError( 'invalid option. `returns` option must be one of the following: \"' + returns.join( '\", \"' ) + '\". Option: `' + opts.returns + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Groups values as arrays associated with distinct keys and outputs element values.\n*\n* ## Notes\n*\n* -   Checking for an \"own\" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.\n*\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Collection} groups - collection defining which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var out = group( arr, groups );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*/\nfunction group( collection, groups ) {\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar i;\n\n\tlen = collection.length;\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tg = groups[ i ].toString();\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( collection[ i ] );\n\t\t} else {\n\t\t\tout[ g ] = [ collection[ i ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default group;\n","import __var_0__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Groups values as arrays associated with distinct keys and outputs element indices.\n*\n* ## Notes\n*\n* -   Checking for an \"own\" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.\n*\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Collection} groups - collection defining which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var out = group( arr, groups );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*/\nfunction group( collection, groups ) {\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar i;\n\n\tlen = collection.length;\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tg = groups[ i ].toString();\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( i );\n\t\t} else {\n\t\t\tout[ g ] = [ i ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default group;\n","import __var_0__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Groups values as arrays associated with distinct keys and outputs index-element pairs.\n*\n* ## Notes\n*\n* -   Checking for an \"own\" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.\n*\n*\n* @private\n* @param {Collection} collection - collection to group\n* @param {Collection} groups - collection defining which group an element in the input collection belongs to\n* @returns {Object} group results\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var out = group( arr, groups );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\nfunction group( collection, groups ) {\n\tvar out;\n\tvar len;\n\tvar g;\n\tvar i;\n\n\tlen = collection.length;\n\tout = {};\n\tfor ( i = 0; i < len; i++ ) {\n\t\tg = groups[ i ].toString();\n\t\tif ( hasOwnProp( out, g ) ) {\n\t\t\tout[ g ].push( [ i, collection[ i ] ] );\n\t\t} else {\n\t\t\tout[ g ] = [ [ i, collection[ i ] ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default group;\n","import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from './validate.js';\nimport __var_2__ from './return_values.js';\nimport __var_3__ from './return_indices.js';\nimport __var_4__ from './return_pairs.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar validate = __var_1__;\nvar returnValues = __var_2__;\nvar returnIndices = __var_3__;\nvar returnPairs = __var_4__;\n\n\n// MAIN //\n\n/**\n* Groups values as arrays associated with distinct keys.\n*\n* @param {Collection} collection - collection to group\n* @param {Options} [options] - function options\n* @param {string} [options.returns=\"values\"] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned\n* @param {Collection} groups - collection defining which group an element in the input collection belongs to\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} last argument must be a collection\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} first and last arguments must be the same length\n* @returns {Object} group results\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var out = group( arr, groups );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var opts = {\n*     'returns': 'indices'\n* };\n*\n* var out = group( arr, opts, groups );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var opts = {\n*     'returns': '*'\n* };\n*\n* var out = group( arr, opts, groups );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\nfunction group( collection, options, groups ) {\n\tvar opts;\n\tvar err;\n\tvar g;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'`.' );\n\t}\n\topts = {\n\t\t'returns': 'values'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tg = options;\n\t} else {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tg = groups;\n\t}\n\tif ( !isCollection( g ) ) {\n\t\tthrow new TypeError( 'invalid argument. Last argument must be a collection. Value: `'+g+'`.' );\n\t}\n\tif ( collection.length !== g.length ) {\n\t\tthrow new RangeError( 'invalid arguments. First and last arguments must be the same length.' );\n\t}\n\tif ( opts.returns === 'values' ) {\n\t\treturn returnValues( collection, g );\n\t}\n\tif ( opts.returns === 'indices' ) {\n\t\treturn returnIndices( collection, g );\n\t}\n\treturn returnPairs( collection, g );\n}\n\n\n// EXPORTS //\nexport default group;\n","import __var_0__ from './group.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Group values as arrays associated with distinct keys.\n*\n* @module @stdlib/utils/group\n*\n* @example\n* var group = require( '@stdlib/utils/group' );\n*\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var out = group( arr, groups );\n* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n*\n* @example\n* var group = require( '@stdlib/utils/group' );\n*\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var opts = {\n*     'returns': 'indices'\n* };\n*\n* var out = group( arr, opts, groups );\n* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n*\n* @example\n* var group = require( '@stdlib/utils/group' );\n*\n* var arr = [ 'beep', 'boop', 'foo', 'bar' ];\n* var groups = [ 'b', 'b', 'f', 'b' ];\n*\n* var opts = {\n*     'returns': '*'\n* };\n*\n* var out = group( arr, opts, groups );\n* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }\n*/\n\n// MODULES //\nvar group = __var_0__;\n\n\n// EXPORTS //\nexport default group;\n"]}