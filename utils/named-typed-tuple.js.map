{"version":3,"sources":["@stdlib/utils/named-typed-tuple/lib/contains.js","@stdlib/utils/named-typed-tuple/lib/has_distinct_elements.js","@stdlib/utils/named-typed-tuple/lib/validate.js","@stdlib/utils/named-typed-tuple/lib/ascending.js","@stdlib/utils/named-typed-tuple/lib/from_iterator.js","@stdlib/utils/named-typed-tuple/lib/from_iterator_map.js","@stdlib/utils/named-typed-tuple/lib/main.js","@stdlib/utils/named-typed-tuple/lib/index.js"],"names":["contains","arr","v","i","length","hasOwnProp","__var_0__","hasDistinctElements","obj","isObject","__var_1__","isString","__var_2__","isPrimitive","dtypes","__var_3__","__var_4__","DTYPES","validate","opts","options","TypeError","dtype","Error","name","ascending","a","b","fromIterator","it","out","next","value","push","done","fromIteratorMap","fields","clbk","thisArg","call","isStringArray","primitives","isArrayBuffer","isFunction","isInteger","__var_5__","isCollection","__var_6__","__var_7__","hasIteratorSymbolSupport","__var_8__","propertiesIn","__var_9__","typedarray","__var_10__","Int8Array","__var_11__","getDtype","__var_12__","defineProperty","__var_13__","setNonEnumerableProperty","__var_14__","setNonEnumerableReadOnlyAccessor","__var_15__","setNonEnumerableReadWriteAccessor","__var_16__","floor","__var_17__","ITERATOR_SYMBOL","__var_18__","__var_19__","__var_20__","__var_21__","__var_22__","__var_23__","__var_24__","RESERVED_PROPS","HAS_ITERATOR_SYMBOL","factory","names","nfields","err","slice","arguments","namedtypedtuple","indices","nargs","tuple","RangeError","getter","setter","getFields","orderedFields","entries","every","fieldOf","filter","find","findIndex","findField","forEach","ind2key","key2ind","keys","lastFieldOf","map","reduce","reduceRight","reverse","some","sort","subtuple","toJSON","toString","self","iter","FLG","this","configurable","enumerable","writable","predicate","searchElement","tmp","f","fcn","ind","key","acc","j","begin","end","compareFunction","k","wrapper","ia","ib","buffer","byteOffset","BYTES_PER_ELEMENT","src","args","main"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array contains a provided value.\n*\n* @private\n* @param {Array} arr - array\n* @param {*} v - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*/\nfunction contains( arr, v ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\nexport default contains;\n","import __var_0__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Tests if an array contains distinct elements.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {boolean} boolean indicating if an array contains distinct elements\n*/\nfunction hasDistinctElements( arr ) {\n\tvar obj;\n\tvar i;\n\n\tobj = {};\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( hasOwnProp( obj, arr[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tobj[ arr[i] ] = true;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\nexport default hasDistinctElements;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/array/typed-dtypes';\nimport __var_4__ from './contains.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar dtypes = __var_3__;\nvar contains = __var_4__;\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - default data type\n* @param {string} [options.name] - tuple name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64',\n*     'name': 'Complex128'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( 'invalid option. `dtype` option must be a string. Option: `' + opts.dtype + '`.' );\n\t\t}\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new Error( 'invalid option. `dtype` option must be a recognized data type. Option: `' + opts.dtype + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( 'invalid option. `name` option must be a string. Option: `' + opts.name + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Specifies a sort order for ordering numeric values in ascending order.\n*\n* ## Notes\n*\n* -   If `a < b`, then function returns a number less than `0`, which specifies to sort `a` to an index lower than `b`.\n* -   If `a > b`, then function returns a number greater than `0`, which specifies to sort `a` to an index higher than `b`.\n* -   If `a == b`, then function returns `0`, which specifies that the order of `a` and `b` should remain unchanged (not guaranteed).\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\nexport default ascending;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.value !== void 0 ) {\n\t\t\tout.push( v.value );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default fromIterator;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {StringArray} fields - tuple fields\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( fields, it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = it.next();\n\t\tif ( v.value !== void 0 ) {\n\t\t\tout.push( clbk.call( thisArg, v.value, i, fields[ i ] ) );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default fromIteratorMap;\n","import __var_0__ from '@stdlib/assert/is-string-array';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-arraybuffer';\nimport __var_3__ from '@stdlib/assert/is-function';\nimport __var_4__ from '@stdlib/assert/is-integer';\nimport __var_5__ from '@stdlib/assert/is-object';\nimport __var_6__ from '@stdlib/assert/is-collection';\nimport __var_7__ from '@stdlib/assert/has-own-property';\nimport __var_8__ from '@stdlib/assert/has-iterator-symbol-support';\nimport __var_9__ from '@stdlib/utils/properties-in';\nimport __var_10__ from '@stdlib/array/typed';\nimport __var_11__ from '@stdlib/array/int8';\nimport __var_12__ from '@stdlib/array/dtype';\nimport __var_13__ from '@stdlib/utils/define-property';\nimport __var_14__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_15__ from '@stdlib/utils/define-nonenumerable-read-only-accessor'; // eslint-disable-line id-length\nimport __var_16__ from '@stdlib/utils/define-nonenumerable-read-write-accessor'; // eslint-disable-line id-length\nimport __var_17__ from '@stdlib/math/base/special/floor';\nimport __var_18__ from '@stdlib/symbol/iterator';\nimport __var_19__ from './contains.js';\nimport __var_20__ from './has_distinct_elements.js';\nimport __var_21__ from './validate.js';\nimport __var_22__ from './ascending.js';\nimport __var_23__ from './from_iterator.js';\nimport __var_24__ from './from_iterator_map.js';\n/* eslint-disable max-len, max-lines */\n\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isStringArray = __var_0__.primitives;\nvar isString = __var_1__.isPrimitive;\nvar isArrayBuffer = __var_2__;\nvar isFunction = __var_3__;\nvar isInteger = __var_4__.isPrimitive;\nvar isObject = __var_5__;\nvar isCollection = __var_6__;\nvar hasOwnProp = __var_7__;\nvar hasIteratorSymbolSupport = __var_8__;\nvar propertiesIn = __var_9__;\nvar typedarray = __var_10__;\nvar Int8Array = __var_11__;\nvar getDtype = __var_12__;\nvar defineProperty = __var_13__;\nvar setNonEnumerableProperty = __var_14__;\nvar setNonEnumerableReadOnlyAccessor = __var_15__;\nvar setNonEnumerableReadWriteAccessor = __var_16__;\nvar floor = __var_17__;\nvar ITERATOR_SYMBOL = __var_18__;\nvar contains = __var_19__;\nvar hasDistinctElements = __var_20__;\nvar validate = __var_21__;\nvar ascending = __var_22__;\nvar fromIterator = __var_23__;\nvar fromIteratorMap = __var_24__;\n\n\n// VARIABLES //\n\nvar RESERVED_PROPS = propertiesIn( new Int8Array( 0 ) );\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// MAIN //\n\n/**\n* Returns a named typed tuple factory.\n*\n* @param {StringArray} names - field (property) names\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @param {string} [options.name=\"tuple\"] - tuple name\n* @throws {TypeError} must provide an array of strings\n* @throws {TypeError} must provide distinct field names\n* @throws {Error} cannot provide a reserved field (property) name\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a recognized data type\n* @returns {Function} factory function\n*\n* @example\n* var point = factory( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\nfunction factory( names, options ) { // eslint-disable-line max-lines-per-function, stdlib/jsdoc-require-throws-tags\n\tvar nfields;\n\tvar fields;\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !isStringArray( names ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an array of strings. Value: `' + names + '`.' );\n\t}\n\tif ( !hasDistinctElements( names ) ) {\n\t\tthrow new TypeError( 'invalid argument. Field names must be distinct. Value: `' + names + '`.' );\n\t}\n\tfields = names.slice();\n\tnfields = fields.length;\n\tfor ( i = 0; i < nfields; i++ ) {\n\t\tif ( contains( RESERVED_PROPS, fields[ i ] ) ) {\n\t\t\tthrow new Error( 'invalid argument. Provided field name is reserved. Name: `' + fields[ i ] + '`.' );\n\t\t}\n\t}\n\topts = {\n\t\t'dtype': 'float64',\n\t\t'name': 'tuple'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t* Returns a named typed tuple.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a typed array, array-like object, buffer, or an iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {string} [dtype] - data type\n\t* @throws {TypeError} must provide a recognized data type\n\t* @throws {RangeError} arguments must be compatible with tuple length\n\t* @returns {TypedArray} named typed tuple\n\t*/\n\tfunction namedtypedtuple() { // eslint-disable-line max-lines-per-function\n\t\tvar indices;\n\t\tvar dtype;\n\t\tvar nargs;\n\t\tvar tuple;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs <= 0 ) {\n\t\t\ttuple = typedarray( nfields, opts.dtype );\n\t\t} else if ( nargs === 1 ) {\n\t\t\tif ( isString( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ dtype ]\n\t\t\t\ttuple = typedarray( nfields, arguments[ 0 ] );\n\t\t\t} else if ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ ArrayBuffer ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, opts.dtype );\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], opts.dtype );\n\t\t\t}\n\t\t} else if ( nargs === 2 ) {\n\t\t\tif ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\tif ( isString( arguments[ 1 ] ) ) {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, dtype ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, arguments[ 1 ] );\n\t\t\t\t} else {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, byteOffset ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, opts.dtype );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable, dtype ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ] );\n\t\t\t}\n\t\t} else {\n\t\t\t// Arguments: [ ArrayBuffer, byteOffset, dtype ]\n\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, arguments[ 2 ] );\n\t\t}\n\t\tif ( tuple.length !== nfields ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Arguments are incompatible with number of tuple fields. Number of fields: `' + nfields + '`. Number of data elements: `' + tuple.length + '`.' );\n\t\t}\n\t\tdtype = getDtype( tuple );\n\n\t\tindices = []; // indirect index look-up table\n\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\tindices.push( i );\n\t\t\tsetNonEnumerableReadWriteAccessor( tuple, fields[ i ], getter( i ), setter( i ) );\n\t\t}\n\t\tsetNonEnumerableProperty( tuple, 'name', opts.name );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'fields', getFields );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'orderedFields', orderedFields );\n\n\t\t// Note: keep in alphabetical order\n\t\tsetNonEnumerableProperty( tuple, 'entries', entries );\n\t\tsetNonEnumerableProperty( tuple, 'every', every );\n\t\tsetNonEnumerableProperty( tuple, 'fieldOf', fieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'filter', filter );\n\t\tsetNonEnumerableProperty( tuple, 'find', find );\n\t\tsetNonEnumerableProperty( tuple, 'findIndex', findIndex );\n\t\tsetNonEnumerableProperty( tuple, 'findField', findField );\n\t\tsetNonEnumerableProperty( tuple, 'forEach', forEach );\n\t\tsetNonEnumerableProperty( tuple, 'ind2key', ind2key );\n\t\tsetNonEnumerableProperty( tuple, 'key2ind', key2ind );\n\t\tsetNonEnumerableProperty( tuple, 'keys', keys );\n\t\tsetNonEnumerableProperty( tuple, 'lastFieldOf', lastFieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'map', map );\n\t\tsetNonEnumerableProperty( tuple, 'reduce', reduce );\n\t\tsetNonEnumerableProperty( tuple, 'reduceRight', reduceRight );\n\t\tsetNonEnumerableProperty( tuple, 'reverse', reverse );\n\t\tsetNonEnumerableProperty( tuple, 'slice', slice );\n\t\tsetNonEnumerableProperty( tuple, 'some', some );\n\t\tsetNonEnumerableProperty( tuple, 'sort', sort );\n\t\tsetNonEnumerableProperty( tuple, 'subtuple', subtuple );\n\t\tsetNonEnumerableProperty( tuple, 'toJSON', toJSON );\n\t\tsetNonEnumerableProperty( tuple, 'toString', toString );\n\n\t\treturn tuple;\n\n\t\t/**\n\t\t* Returns an accessor to retrieve a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction getter( i ) {\n\t\t\treturn get;\n\n\t\t\t/**\n\t\t\t* Returns a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {number} tuple value\n\t\t\t*/\n\t\t\tfunction get() {\n\t\t\t\treturn tuple[ indices[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns an accessor to set a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction setter( i ) {\n\t\t\treturn set;\n\n\t\t\t/**\n\t\t\t* Sets a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {number} v - value to set\n\t\t\t*/\n\t\t\tfunction set( v ) {\n\t\t\t\ttuple[ indices[ i ] ] = v;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction getFields() {\n\t\t\treturn fields.slice();\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields in index order.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction orderedFields() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tout = fields.slice();\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fields[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// Note: keep functions which follow in alphabetical order\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple key-value pairs.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction entries() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ], tuple[ i ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.entries();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Tests whether all tuple elements pass a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if all elements pass\n\t\t*/\n\t\tfunction every( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( !bool ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element strictly equal to a search element.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=0] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction fieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 0 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be an integer. Value: `' + i + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple which includes those elements for which a predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t* -   If a predicate function does not return a truthy value for any tuple element, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - filter (predicate) function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction filter( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tf = [];\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( f.length === nfields ) {\n\t\t\t\treturn namedtypedtuple( tmp, dtype );\n\t\t\t}\n\t\t\tif ( f.length ) {\n\t\t\t\treturn factory( f, opts )( tmp );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t* Returns the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(number|void)} tuple element\n\t\t*/\n\t\tfunction find( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn tuple[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction findField( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tf = fields[ indices[ i ] ];\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, f, tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the index of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {integer} tuple index or `-1`\n\t\t*/\n\t\tfunction findIndex( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Invokes a callback for each tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - function to invoke\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t*/\n\t\tfunction forEach( fcn, thisArg ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + fcn + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tfcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Converts a tuple index to a field name.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an out-of-bounds index, the function returns `undefined`.\n\t\t* -   If provided a negative tuple index, the function resolves the index relative to the last tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} ind - tuple index\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} must provide an integer\n\t\t* @returns {(string|void)} field name or undefined\n\t\t*/\n\t\tfunction ind2key( ind ) {\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isInteger( ind ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Must provide an integer. Value: `' + ind + '`.' );\n\t\t\t}\n\t\t\tif ( ind < 0 ) {\n\t\t\t\tind = nfields - ind;\n\t\t\t}\n\t\t\tif ( ind < 0 || ind >= nfields ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn fields[ indices[ ind ] ];\n\t\t}\n\n\t\t/**\n\t\t* Converts a field name to a tuple index.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an unknown field name, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {string} key - field name\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a string\n\t\t* @returns {integer} tuple index\n\t\t*/\n\t\tfunction key2ind( key ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isString( key ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + key + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tif ( fields[ indices[i] ] === key ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple keys.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction keys() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.keys();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the last tuple element strictly equal to a search element, iterating from right to left.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=-1] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction lastFieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 0 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be an integer. Value: `' + i + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\ti = nfields - 1;\n\t\t\t\t} else if ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = nfields - 1;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Maps each tuple element to an element in a new tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - map function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} new tuple\n\t\t*/\n\t\tfunction map( fcn, thisArg ) {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + fcn + '`.' );\n\t\t\t}\n\t\t\tout = namedtypedtuple( dtype );\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduce( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + fcn + '`.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = 0;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ 0 ];\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result, iterating from right to left.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduceRight( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + fcn + '`.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = nfields - 1;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ nfields-1 ];\n\t\t\t\ti = nfields - 2;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Reverses a tuple **in-place**.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {TypedArray} reversed tuple\n\t\t*/\n\t\tfunction reverse() {\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < floor( nfields/2 ); i++ ) {\n\t\t\t\tj = nfields - i - 1;\n\t\t\t\ttmp = tuple[ i ];\n\t\t\t\ttuple[ i ] = tuple[ j ];\n\t\t\t\ttuple[ j ] = tmp;\n\t\t\t}\n\t\t\t// Because the indices are bounded [0,nfields), we can use simple arithmetic to \"reverse\" index values in-place...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tindices[ i ] = nfields - indices[ i ] - 1;\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\n\t\t/**\n\t\t* Copies elements to a new tuple with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction slice( begin, end ) {\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an integer. Value: `' + begin + '`.' );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be an integer. Value: `' + end + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\ttmp = [];\n\t\t\tfor ( ; i < j; i++ ) {\n\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tmp, dtype );\n\t\t}\n\n\t\t/**\n\t\t* Tests whether at least one tuple element passes a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if at least one element passes\n\t\t*/\n\t\tfunction some( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + predicate + '`.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t* Sorts a tuple in-place.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The comparison function is provided two tuple elements, `a` and `b`, per invocation, and its return value determines the sort order as follows:\n\t\t*\n\t\t*     -   If the comparison function returns a value **less** than zero, then the function sorts `a` to an index lower than `b` (i.e., `a` should come **before** `b`).\n\t\t*     -   If the comparison function returns a value **greater** than zero, then the function sorts `a` to an index higher than `b` (i.e., `b` should come **before** `a`).\n\t\t*     -   If the comparison function returns **zero**, then the relative order of `a` and `b` _should_ remain unchanged.\n\t\t*\n\t\t* -   Invoking this method does **not** affect tuple field assignments.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} [compareFunction] - function which specifies the sort order\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} sorted tuple\n\t\t*/\n\t\tfunction sort( compareFunction ) {\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\t\t\tvar v;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length ) {\n\t\t\t\tif ( !isFunction( compareFunction ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + compareFunction + '`.' );\n\t\t\t\t}\n\t\t\t\tclbk = compareFunction;\n\t\t\t} else {\n\t\t\t\tclbk = ascending;\n\t\t\t}\n\t\t\tindices.sort( wrapper );\n\n\t\t\t// Create a temporary indices array which we'll reorder as we rearrange the tuple elements:\n\t\t\ttmp = indices.slice();\n\n\t\t\t// Rearrange tuple elements according to the rearranged indices (note: every \"move\" moves a tuple element to its desired position with runtime complexity O(N))...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t// Check if we need to move a tuple element:\n\t\t\t\tif ( tmp[ i ] !== i ) {\n\t\t\t\t\tv = tuple[ i ];\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = tmp[ j ];\n\n\t\t\t\t\t// Follow \"cycles\", stopping once we are back at index `i`...\n\t\t\t\t\twhile ( k !== i ) {\n\t\t\t\t\t\ttuple[ j ] = tuple[ k ];\n\t\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t\t\tj = k;\n\t\t\t\t\t\tk = tmp[ j ];\n\t\t\t\t\t}\n\t\t\t\t\ttuple[ j ] = v;\n\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\n\t\t\t/**\n\t\t\t* Wraps a comparison function to allow sorting the internal indices array rather than the tuple directly.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {NonNegativeInteger} ia - first index\n\t\t\t* @param {NonNegativeInteger} ib - second index\n\t\t\t* @returns {*} value specifying the sort order\n\t\t\t*/\n\t\t\tfunction wrapper( ia, ib ) {\n\t\t\t\tvar a = tuple[ indices[ ia ] ];\n\t\t\t\tvar b = tuple[ indices[ ib ] ];\n\t\t\t\treturn clbk( a, b );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple over the same underlying `ArrayBuffer` and with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction subtuple( begin, end ) {\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple.buffer, tuple.byteOffset, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an integer. Value: `' + begin + '`.' );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be an integer. Value: `' + end + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\tfor ( k = i; k < j; k++ ) {\n\t\t\t\tf.push( fields[ indices[k] ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tuple.buffer, tuple.byteOffset+(i*tuple.BYTES_PER_ELEMENT), dtype );\n\t\t}\n\n\t\t/**\n\t\t* Serializes a tuple as JSON.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {JSON} tuple JSON representation\n\t\t*/\n\t\tfunction toJSON() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tout = {};\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ fields[i] ] = tuple[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// TODO: consider adding `toLocaleString()` in a manner similar to `toString()` below\n\n\t\t/**\n\t\t* Serializes a tuple as a string.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {string} tuple string representation\n\t\t*/\n\t\tfunction toString() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tout = opts.name + '(';\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout += fields[ i ];\n\t\t\t\tout += '=';\n\t\t\t\tout += tuple[ indices[ i ] ];\n\t\t\t\tif ( i < nfields-1 ) {\n\t\t\t\t\tout += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tout += ')';\n\t\t\treturn out;\n\t\t}\n\t}\n\n\t// Note: keep the following methods in alphabetical order...\n\n\t/**\n\t* Creates a new tuple from an array-like object or an iterable.\n\t*\n\t* @private\n\t* @name from\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {(ArrayLikeObject|Iterable)} src - array-like object or iterable\n\t* @param {Function} [clbk] - callback to invoke for each source element\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an array-like object or an iterable\n\t* @throws {RangeError} source must be compatible with tuple length\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'from', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function from( src ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar it;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+clbk+'`.' );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( isCollection( src ) ) {\n\t\t\t\tif ( src.length !== nfields ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Source is incompatible with number of tuple fields. Number of fields: `' + nfields + '`. Source length: `' + src.length + '`.' );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, src[ i ], i, fields[ i ] );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = src[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tit = src[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( it.next ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object or an iterable.' );\n\t\t\t\t}\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\ttmp = fromIteratorMap( fields, it, clbk, thisArg );\n\t\t\t\t} else {\n\t\t\t\t\ttmp = fromIterator( it );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( tmp, opts.dtype );\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object or an iterable. Value: `' + src + '`.' );\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from an object containing tuple fields.\n\t*\n\t* @private\n\t* @name fromObject\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {Object} obj - source object\n\t* @param {Function} [clbk] - callback to invoke for each source object tuple field\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'fromObject', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function fromObject( obj ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tif ( obj === null || typeof obj !== 'object' ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+clbk+'`.' );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\tif ( clbk ) {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, obj[ f ], f );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = obj[ f ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from a variable number of arguments.\n\t*\n\t* @private\n\t* @name of\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {...number} element - tuple elements\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {RangeError} incompatible number of arguments\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'of', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function of() { // eslint-disable-line no-restricted-syntax\n\t\t\tvar args;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tif ( arguments.length !== nfields ) {\n\t\t\t\tthrow new RangeError( 'invalid invocation. Number of arguments incompatible with number of tuple fields. Number of fields: `' + nfields + '`. Number of arguments: `' + arguments.length + '`.' );\n\t\t\t}\n\t\t\targs = [];\n\t\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t\treturn namedtypedtuple( args );\n\t\t}\n\t});\n\n\treturn namedtypedtuple;\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Named typed tuple.\n*\n* @module @stdlib/utils/named-typed-tuple\n*\n* @example\n* var namedtypedtuple = require( '@stdlib/utils/named-typed-tuple' );\n*\n* var point = namedtypedtuple( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\n\n// MAIN //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}