{"version":3,"sources":["@stdlib/utils/flatten-object/lib/defaults.js","@stdlib/utils/flatten-object/lib/validate.js","@stdlib/utils/flatten-object/lib/recurse.js","@stdlib/utils/flatten-object/lib/flatten.js","@stdlib/utils/flatten-object/lib/flatten_object.js","@stdlib/utils/flatten-object/lib/factory.js","@stdlib/utils/flatten-object/lib/index.js"],"names":["FLOAT64_MAX","__var_0__","defaults","delimiter","depth","copy","isObject","hasOwnProp","__var_1__","isString","__var_2__","isPrimitive","isBoolean","__var_3__","isNonNegativeInteger","__var_4__","validate","opts","options","TypeError","flattenArrays","objectKeys","isPlainObject","isArray","recurse","out","obj","prefix","keys","val","key","i","length","flatten","isObjectLike","flattenObject","err","arguments","factory","setReadOnly"],"mappings":"udAsBA,IAAIA,EAAcC,EAKdC,EAAW,CACdC,UAAa,IACbC,MAASJ,EACTK,MAAQ,GCJLC,EAAWL,EACXM,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAYC,EAAUF,YACtBG,EAAuBC,EAAUJ,YA8BrC,SAASK,EAAUC,EAAMC,GACxB,OAAMZ,EAAUY,GAGXX,EAAYW,EAAS,WACzBD,EAAKb,MAAQc,EAAQd,OACfU,EAAsBG,EAAKb,QACzB,IAAIe,UAAW,0EAA4EF,EAAKb,MAAQ,MAG5GG,EAAYW,EAAS,UACzBD,EAAKZ,KAAOa,EAAQb,MACdO,EAAWK,EAAKZ,OACd,IAAIc,UAAW,uEAAyEF,EAAKZ,KAAO,MAGxGE,EAAYW,EAAS,mBACzBD,EAAKG,cAAgBF,EAAQE,eACvBR,EAAWK,EAAKG,gBACd,IAAID,UAAW,gFAAkFF,EAAKG,cAAgB,MAG1Hb,EAAYW,EAAS,eACzBD,EAAKd,UAAYe,EAAQf,WACnBM,EAAUQ,EAAKd,YACb,IAAIgB,UAAW,2EAA6EF,EAAKd,UAAY,MAG/G,KA1BC,IAAIgB,UAAW,iEAAmED,EAAU,MCtCrG,IAAIG,EAAapB,EACbqB,EAAgBd,EAChBe,EAAUb,EAkBd,SAASc,EAASC,EAAKC,EAAKC,EAAQvB,EAAOa,GAC1C,IAAIW,EACAC,EACAC,EACAC,EAKJ,IAJKJ,IACJA,GAAUV,EAAKd,WAEhByB,EAAOP,EAAYK,GACbK,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC7BF,EAAMH,EAAKE,EAAKG,IAChBD,EAAMH,EAASC,EAAMG,GAChB3B,IAEFkB,EAAeO,IAASR,EAAYQ,GAAMG,QAC1Cf,EAAKG,eAAiBG,EAASM,IAEhCL,EAASC,EAAKI,EAAKC,EAAK1B,EAAM,EAAGa,GAInCQ,EAAKK,GAAQD,EAEd,OAAOJ,EC5CR,IAAIpB,EAAOJ,EACPuB,EAAUhB,EAiBd,SAASyB,EAASP,EAAKT,GACtB,IAAIQ,EAMJ,OAJCA,EADmB,IAAfR,EAAKb,MACHsB,EAEAF,EAAS,GAAIE,EAAK,GAAIT,EAAKb,MAAOa,GAEpCA,EAAKZ,KACFA,EAAMoB,GAEPA,ECzBR,IAAIS,EAAejC,EACfI,EAAOG,EACPN,EAAWQ,EACXM,EAAWH,EACXoB,EAAUlB,EAyBd,SAASoB,EAAeT,EAAKR,GAC5B,IAAID,EACAmB,EACJ,IAAMF,EAAcR,GACnB,MAAM,IAAIP,UAAW,iEAAmEO,EAAM,MAG/F,GADAT,EAAOZ,EAAMH,GACRmC,UAAUL,OAAS,IACvBI,EAAMpB,EAAUC,EAAMC,IAErB,MAAMkB,EAGR,OAAOH,EAASP,EAAKT,GC1CtB,IAAIiB,EAAejC,EACfI,EAAOG,EACPN,EAAWQ,EACXM,EAAWH,EACXoB,EAAUlB,EA2Bd,SAASuB,EAASpB,GACjB,IAAID,EACAmB,EAIJ,GAFAnB,EAAOZ,EAAMH,GACbkC,EAAMpB,EAAUC,EAAMC,GAErB,MAAMkB,EAEP,OAUA,SAAwBV,GACvB,IAAMQ,EAAcR,GACnB,MAAM,IAAIP,UAAW,gEAAkEO,EAAM,MAE9F,OAAOO,EAASP,EAAKT,IC5BvB,IAAIsB,EAActC,EACdkC,EAAgB3B,EAChB8B,EAAU5B,EAKd6B,EAAaJ,EAAe,UAAWG","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar FLOAT64_MAX = __var_0__;\n\n\n// MAIN //\n\nvar defaults = {\n\t'delimiter': '.',\n\t'depth': FLOAT64_MAX,\n\t'copy': false\n};\n\n\n// EXPORTS //\nexport default defaults;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isBoolean = __var_3__.isPrimitive;\nvar isNonNegativeInteger = __var_4__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.depth] - depth to flatten\n* @param {boolean} [options.copy] - boolean indicating whether to deep copy\n* @param {boolean} [options.flattenArrays] - boolean indicating whether to flatten arrays\n* @param {string} [options.delimiter] - key path delimiter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'depth': 10,\n*     'copy': false,\n*     'delimiter': '|',\n*     'flattenArrays': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\topts.depth = options.depth;\n\t\tif ( !isNonNegativeInteger( opts.depth ) ) {\n\t\t\treturn new TypeError( 'invalid option. `depth` option must be a nonnegative integer. Option: `' + opts.depth + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be a boolean primitive. Option: `' + opts.copy + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'flattenArrays' ) ) {\n\t\topts.flattenArrays = options.flattenArrays;\n\t\tif ( !isBoolean( opts.flattenArrays ) ) {\n\t\t\treturn new TypeError( 'invalid option. `flattenArrays` option must be a boolean primitive. Option: `' + opts.flattenArrays + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'delimiter' ) ) {\n\t\topts.delimiter = options.delimiter;\n\t\tif ( !isString( opts.delimiter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `delimiter` option must be a string primitive. Option: `' + opts.delimiter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar isPlainObject = __var_1__;\nvar isArray = __var_2__;\n\n\n// MAIN //\n\n/**\n* Recursively flattens an object.\n*\n* @private\n* @param {Object} out - output object\n* @param {ObjectLike} obj - input object\n* @param {string} prefix - key prefix\n* @param {NonNegativeInteger} depth - recursion depth\n* @param {Options} opts - options\n* @param {boolean} opts.flattenArrays - boolean indicating whether to flatten arrays\n* @param {string} opts.delimiter - key path delimiter\n* @returns {Object} output object\n*/\nfunction recurse( out, obj, prefix, depth, opts ) {\n\tvar keys;\n\tvar val;\n\tvar key;\n\tvar i;\n\tif ( prefix ) {\n\t\tprefix += opts.delimiter;\n\t}\n\tkeys = objectKeys( obj );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tval = obj[ keys[i] ];\n\t\tkey = prefix + keys[ i ];\n\t\tif ( depth ) {\n\t\t\tif (\n\t\t\t\t(isPlainObject( val ) && objectKeys( val ).length) ||\n\t\t\t\t(opts.flattenArrays && isArray( val ))\n\t\t\t) {\n\t\t\t\trecurse( out, val, key, depth-1, opts );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tout[ key ] = val;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default recurse;\n","import __var_0__ from '@stdlib/utils/copy';\nimport __var_1__ from './recurse.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\nvar recurse = __var_1__;\n\n\n// MAIN //\n\n/**\n* Flattens an object.\n*\n* @private\n* @param {ObjectLike} obj - object to flatten\n* @param {Object} opts - options\n* @param {NonNegativeInteger} opts.depth - maximum depth to flatten\n* @param {boolean} opts.copy - boolean indicating whether to deep copy\n* @param {boolean} opts.flattenArrays - boolean indicating whether to flatten arrays\n* @param {string} opts.delimiter - key path delimiter\n* @returns {Object} flattened object\n*/\nfunction flatten( obj, opts ) {\n\tvar out;\n\tif ( opts.depth === 0 ) {\n\t\tout = obj;\n\t} else {\n\t\tout = recurse( {}, obj, '', opts.depth, opts );\n\t}\n\tif ( opts.copy ) {\n\t\treturn copy( out );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default flatten;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './defaults.js';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './flatten.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar copy = __var_1__;\nvar defaults = __var_2__;\nvar validate = __var_3__;\nvar flatten = __var_4__;\n\n\n// MAIN //\n\n/**\n* Flattens an object.\n*\n* @param {ObjectLike} obj - object to flatten\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten\n* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy\n* @param {boolean} [options.flattenArrays=false] - boolean indicating whether to flatten arrays\n* @param {string} [options.delimiter='.'] - key path delimiter\n* @throws {TypeError} first argument must be object-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ObjectLike} flattened object\n*\n* @example\n* var obj = {'a':{'b':{'c':'d'}}};\n*\n* var out = flattenObject( obj );\n* // returns {'a.b.c':'d'}\n*/\nfunction flattenObject( obj, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !isObjectLike( obj ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be object-like. Value: `' + obj + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn flatten( obj, opts );\n}\n\n\n// EXPORTS //\nexport default flattenObject;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './defaults.js';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './flatten.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar copy = __var_1__;\nvar defaults = __var_2__;\nvar validate = __var_3__;\nvar flatten = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function to flatten an object.\n*\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten\n* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy\n* @param {boolean} [options.flattenArrays=false] - boolean indicating whether to flatten arrays\n* @param {string} [options.delimiter='.'] - key path delimiter\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} flatten function\n*\n* @example\n* var flatten = factory({\n*     'copy': true,\n*     'delimiter': '|'\n* });\n*\n* var obj = {'a':{'b':{'c':'d'}}};\n* var out = flatten( obj );\n* // returns {'a|b|c':'d'}\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar err;\n\n\topts = copy( defaults );\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\treturn flattenObject;\n\n\t/**\n\t* Flattens an object.\n\t*\n\t* @private\n\t* @param {ObjectLike} obj - object to flatten\n\t* @throws {TypeError} first argument must be object-like\n\t* @returns {Object} flattened object\n\t*/\n\tfunction flattenObject( obj ) {\n\t\tif ( !isObjectLike( obj ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object-like value. Value: `' + obj + '`.' );\n\t\t}\n\t\treturn flatten( obj, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './flatten_object.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Flatten an object.\n*\n* @module @stdlib/utils/flatten-object\n*\n* @example\n* var flattenObject = require( '@stdlib/utils/flatten-object' );\n*\n* var obj = {'a':{'b':{'c':'d'}}};\n*\n* var out = flattenObject( obj );\n* // returns {'a.b.c':'d'}\n*\n* @example\n* var flattenObject = require( '@stdlib/utils/flatten-object' );\n*\n* var flatten = flattenObject.factory({\n*     'depth': 2,\n*     'copy': true,\n*     'delimiter': '|'\n* });\n*\n* var obj = {'a':{'b':{'c':'d'}}};\n*\n* var out = flatten( obj );\n* // returns {'a|b':{'c':'d'}}\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar flattenObject = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( flattenObject, 'factory', factory );\n\n\n// EXPORTS //\nexport default flattenObject;\n"]}