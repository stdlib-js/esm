{"version":3,"sources":["@stdlib/utils/deep-pluck/lib/validate.js","@stdlib/utils/deep-pluck/lib/deep_pluck.js","@stdlib/utils/deep-pluck/lib/index.js"],"names":["isBoolean","__var_0__","isPrimitive","isString","__var_1__","isObject","__var_2__","hasOwnProp","__var_3__","validate","opts","options","copy","TypeError","sep","deepGet","factory","isArray","defaults","__var_4__","deepPluck","arr","path","dget","out","err","i","arguments","length","Array"],"mappings":"2SAyBIA,EAAYC,EAAUC,YACtBC,EAAWC,EAAUF,YACrBG,EAAWC,EACXC,EAAaC,EA0BjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,GAGXJ,EAAYI,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdZ,EAAWU,EAAKE,OACd,IAAIC,UAAW,uEAAyEH,EAAKE,KAAO,MAGxGL,EAAYI,EAAS,SACzBD,EAAKI,IAAMH,EAAQG,KACbX,EAAUO,EAAKI,MACb,IAAID,UAAW,qEAAuEH,EAAKI,IAAM,MAGnG,KAdC,IAAID,UAAW,iEAAmEF,EAAU,MC9BrG,IAAII,EAAUd,EAAUe,QACpBC,EAAUb,EACVQ,EAAON,EACPY,EAAWV,EACXC,EAAWU,EAyDf,SAASC,EAAWC,EAAKC,EAAMX,GAC9B,IAAIY,EACAb,EACAc,EACAC,EACAC,EAEJ,IAAMT,EAASI,GACd,MAAM,IAAIR,UAAW,8DAAgEQ,EAAM,MAG5F,GADAX,EAAOE,EAAMM,GACRS,UAAUC,OAAS,IACvBH,EAAMhB,EAAUC,EAAMC,IAErB,MAAMc,EAWR,IAPCD,EADId,EAAKE,KACH,IAAIiB,MAAOR,EAAIO,QAEfP,EAEPE,EAAOR,EAASO,EAAM,CACrBR,IAAOJ,EAAKI,MAEPY,EAAI,EAAGA,EAAIL,EAAIO,OAAQF,IAC5BF,EAAKE,GAAMH,EAAMF,EAAKK,IAEvB,OAAOF,ECpEL,IAACJ,EAAYnB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar hasOwnProp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {boolean} [options.copy] - boolean indicating whether to return a new data structure\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'copy': true,\n*     'sep': '-',\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be a boolean primitive. Option: `' + opts.copy + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a string primitive. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/deep-get';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/utils/copy';\nimport __var_3__ from './defaults.json';\nimport __var_4__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar deepGet = __var_0__.factory;\nvar isArray = __var_1__;\nvar copy = __var_2__;\nvar defaults = __var_3__;\nvar validate = __var_4__;\n\n\n// MAIN //\n\n/**\n* Extracts a nested property value from each element of an object array.\n*\n* @param {Array} arr - source array\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {boolean} [options.copy=true] - boolean indicating whether to return a new data structure\n* @param {string} [options.sep=\".\"] - key path separator\n* @throws {TypeError} first argument must be an array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} destination array\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a.b.c' );\n* // returns [ 1, 2 ]\n*\n* @example\n* var arr = [\n*     {'a':[0,1,2]},\n*     {'a':[3,4,5]}\n* ];\n*\n* var out = deepPluck( arr, ['a',1] );\n* // returns [ 1, 4 ]\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a.b.c', {'copy':false} );\n* // returns [ 1, 2 ]\n*\n* var bool = ( arr[ 0 ] === out[ 0 ] );\n* // returns true\n*\n* @example\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a|b|c', {'sep':'|'} );\n* // returns [ 1, 2 ]\n*/\nfunction deepPluck( arr, path, options ) {\n\tvar dget;\n\tvar opts;\n\tvar out;\n\tvar err;\n\tvar i;\n\n\tif ( !isArray( arr ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + arr + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.copy ) {\n\t\tout = new Array( arr.length );\n\t} else {\n\t\tout = arr;\n\t}\n\tdget = deepGet( path, {\n\t\t'sep': opts.sep\n\t});\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tout[ i ] = dget( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default deepPluck;\n","import __var_0__ from './deep_pluck.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Extract a nested property value from each element of an object array.\n*\n* @module @stdlib/utils/deep-pluck\n*\n* @example\n* var pluck = require( '@stdlib/utils/deep-pluck' );\n*\n* var arr = [\n*     {'a':{'b':{'c':1}}},\n*     {'a':{'b':{'c':2}}}\n* ];\n*\n* var out = deepPluck( arr, 'a.b.c' );\n* // returns [ 1, 2 ]\n*\n* arr = [\n*     {'a':[0,1,2]},\n*     {'a':[3,4,5]}\n* ];\n*\n* out = deepPluck( arr, ['a',1] );\n* // returns [ 1, 4 ]\n*/\n\n// MODULES //\nvar deepPluck = __var_0__;\n\n\n// EXPORTS //\nexport default deepPluck;\n"]}