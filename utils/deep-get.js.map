{"version":3,"sources":["@stdlib/utils/deep-get/lib/validate.js","@stdlib/utils/deep-get/lib/dget.js","@stdlib/utils/deep-get/lib/deep_get.js","@stdlib/utils/deep-get/lib/factory.js","@stdlib/utils/deep-get/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isObject","__var_1__","hasOwnProp","__var_2__","validate","opts","options","sep","TypeError","isObjectLike","deepGet","obj","props","i","len","length","v","isArray","copy","__var_3__","__var_4__","defaults","__var_5__","dget","__var_6__","path","isStr","err","arguments","split","factory","setReadOnly"],"mappings":"8SAwBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAWC,EACXC,EAAaC,EAwBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,GAGXJ,EAAYI,EAAS,SACzBD,EAAKE,IAAMD,EAAQC,KACbV,EAAUQ,EAAKE,MACb,IAAIC,UAAW,qEAAuEH,EAAKE,IAAM,MAGnG,KARC,IAAIC,UAAW,iEAAmEF,EAAU,0BC7BjGG,EAAeX,EACfI,EAAaD,EAajB,SAASS,EAASC,EAAKC,GACtB,IAEIC,EAFAC,EAAMF,EAAMG,OACZC,EAAIL,EAER,IAAME,EAAI,EAAGA,EAAIC,EAAKD,IAAM,CAC3B,IACCJ,EAAcO,KACdd,EAAYc,EAAGJ,EAAOC,IAItB,OAFAG,EAAIA,EAAGJ,EAAOC,IAKhB,OAAOG,ECvBR,IAAIP,EAAeX,EACfD,EAAWI,EAAUF,YACrBkB,EAAUd,EACVe,EAAOC,EACPf,EAAWgB,EACXC,EAAWC,EACXC,EAAOC,EA0CX,SAASd,EAASC,EAAKc,EAAMnB,GAC5B,IAAIoB,EACAd,EACAP,EACAsB,EACJ,GAAMlB,EAAcE,GAApB,CAIA,KADAe,EAAQ7B,EAAU4B,MACFR,EAASQ,GACxB,MAAM,IAAIjB,UAAW,iFAAmFiB,EAAO,MAGhH,GADApB,EAAOa,EAAMG,GACRO,UAAUb,OAAS,IACvBY,EAAMvB,EAAUC,EAAMC,IAErB,MAAMqB,EAQR,OAJCf,EADIc,EACID,EAAKI,MAAOxB,EAAKE,KAEjBkB,EAEFF,EAAMZ,EAAKC,ICxEnB,IAAIf,EAAWC,EAAUC,YACrBkB,EAAUhB,EACVQ,EAAeN,EACfe,EAAOC,EACPf,EAAWgB,EACXC,EAAWC,EACXC,EAAOC,EAqBX,SAASM,EAASL,EAAMnB,GACvB,IAAIoB,EACAd,EACAP,EACAsB,EAEJ,KADAD,EAAQ7B,EAAU4B,MACFR,EAASQ,GACxB,MAAM,IAAIjB,UAAW,iFAAmFiB,EAAO,MAGhH,GADApB,EAAOa,EAAMG,GACRO,UAAUb,OAAS,IACvBY,EAAMvB,EAAUC,EAAMC,IAErB,MAAMqB,EAQR,OAJCf,EADIc,EACID,EAAKI,MAAOxB,EAAKE,KAEjBkB,EAEFf,EAaP,SAASA,EAASC,GACjB,GAAKF,EAAcE,GAClB,OAAOY,EAAMZ,EAAKC,IC5CrB,IAAImB,EAAcjC,EACdY,EAAUT,EACV6B,EAAU3B,EAKd4B,EAAarB,EAAS,UAAWoB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '/'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a string primitive. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar hasOwnProp = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a nested property value.\n*\n* @private\n* @param {ObjectLike} obj - input object\n* @param {Array} props - list of properties defining a key path\n* @returns {*} nested property value\n*/\nfunction deepGet( obj, props ) {\n\tvar len = props.length;\n\tvar v = obj;\n\tvar i;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif (\n\t\t\tisObjectLike( v ) &&\n\t\t\thasOwnProp( v, props[ i ] )\n\t\t) {\n\t\t\tv = v[ props[ i ] ];\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\nexport default deepGet;\n","import __var_0__ from '@stdlib/assert/is-object-like';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from './validate.js';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './dget.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObjectLike = __var_0__;\nvar isString = __var_1__.isPrimitive;\nvar isArray = __var_2__;\nvar copy = __var_3__;\nvar validate = __var_4__;\nvar defaults = __var_5__;\nvar dget = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a nested property value.\n*\n* @param {ObjectLike} obj - input object\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} second argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {*} nested property value\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var val = deepGet( obj, 'a.b.c' );\n* // returns 'd'\n*\n* @example\n* var arr = [\n*     { 'a': [ {'x': 5} ] },\n*     { 'a': [ {'x': 10} ] }\n* ];\n* var val = deepGet( arr, '1.a.0.x' );\n* // returns 10\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var val = deepGet( obj, ['a','b','c'] );\n* // returns 'd'\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var val = deepGet( obj, 'a/b/c', {\n*     'sep': '/'\n* });\n* // returns 'd'\n*/\nfunction deepGet( obj, path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tif ( !isObjectLike( obj ) ) {\n\t\treturn;\n\t}\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn dget( obj, props );\n}\n\n\n// EXPORTS //\nexport default deepGet;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/assert/is-object-like';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from './validate.js';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './dget.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isArray = __var_1__;\nvar isObjectLike = __var_2__;\nvar copy = __var_3__;\nvar validate = __var_4__;\nvar defaults = __var_5__;\nvar dget = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for retrieving a nested property value.\n*\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} first argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} deep get function\n*\n* @example\n* var dget = factory( 'a/b/c', {\n*     'sep': '/'\n* });\n*/\nfunction factory( path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn deepGet;\n\n\t/**\n\t* Returns a nested property value.\n\t*\n\t* @private\n\t* @param {ObjectLike} obj - input object\n\t* @returns {*} nested property value\n\t*\n\t* @example\n\t* var obj = { 'a': { 'b': { 'c': 'd' } } };\n\t* var val = deepGet( obj );\n\t*/\n\tfunction deepGet( obj ) {\n\t\tif ( isObjectLike( obj ) ) {\n\t\t\treturn dget( obj, props );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './deep_get.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Get a nested property value.\n*\n* @module @stdlib/utils/deep-get\n*\n* @example\n* var deepGet = require( '@stdlib/utils/deep-get' );\n*\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n*\n* var val = deepGet( obj, 'a.b.c' );\n* // returns 'd'\n*\n* var dget = factory( 'a/b/c', {\n*     'sep': '/'\n* });\n*\n* obj = { 'a': { 'b': { 'c': 'd' } } };\n*\n* val = dget( obj );\n* // returns 'd'\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar deepGet = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( deepGet, 'factory', factory );\n\n\n// EXPORTS //\nexport default deepGet;\n"]}