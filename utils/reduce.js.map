{"version":3,"sources":["@stdlib/utils/reduce/lib/reduce.js","@stdlib/utils/reduce/lib/index.js"],"names":["isCollection","__var_0__","isFunction","__var_1__","reduce","collection","initial","reducer","thisArg","len","acc","i","TypeError","length","call"],"mappings":"sFAuBA,IAAIA,EAAeC,EACfC,EAAaC,EA0BjB,SAASC,EAAQC,EAAYC,EAASC,EAASC,GAC9C,IAAIC,EACAC,EACAC,EACJ,IAAMX,EAAcK,GACnB,MAAM,IAAIO,UAAW,kEAAkEP,EAAW,MAEnG,IAAMH,EAAYK,GACjB,MAAM,IAAIK,UAAW,+DAA+DL,EAAQ,MAI7F,IAFAE,EAAMJ,EAAWQ,OACjBH,EAAMJ,EACAK,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAMH,EAAQO,KAAMN,EAASE,EAAKL,EAAYM,GAAKA,EAAGN,GAGjDI,IAAQJ,EAAWQ,SACvBJ,EAAMJ,EAAWQ,QAGnB,OAAOH,EC9BL,IAACN,EAASH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar isFunction = __var_1__;\n\n\n// MAIN //\n\n/**\n* Applies a function against an accumulator and each element in a collection and returns the accumulated result.\n*\n* @param {Collection} collection - input collection\n* @param {*} initial - initial value\n* @param {Function} reducer - reduction function\n* @param {*} [thisArg] - reduction function execution context\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} third argument must be a function\n* @returns {*} accumulated result\n*\n* @example\n* function sum( acc, value ) {\n*     return acc + value;\n* }\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var s = reduce( arr, 0, sum );\n* // returns 10\n*/\nfunction reduce( collection, initial, reducer, thisArg ) {\n\tvar len;\n\tvar acc;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'`.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a function. Value:`'+reducer+'`.' );\n\t}\n\tlen = collection.length;\n\tacc = initial;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tacc = reducer.call( thisArg, acc, collection[ i ], i, collection );\n\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\tlen = collection.length;\n\t\t}\n\t}\n\treturn acc;\n}\n\n\n// EXPORTS //\nexport default reduce;\n","import __var_0__ from './reduce.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a function against an accumulator and each element in a collection and return the accumulated result.\n*\n* @module @stdlib/utils/reduce\n*\n* @example\n* var reduce = require( '@stdlib/utils/reduce' );\n*\n* function sum( acc, value ) {\n*     return acc + value;\n* }\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var s = reduce( arr, 0, sum );\n* // returns 10\n*/\n\n// MODULES //\nvar reduce = __var_0__;\n\n\n// EXPORTS //\nexport default reduce;\n"]}