{"version":3,"sources":["@stdlib/utils/until/lib/until.js","@stdlib/utils/until/lib/index.js"],"names":["isFunction","__var_0__","until","predicate","fcn","thisArg","i","TypeError","call"],"mappings":"0CAsBA,IAAIA,EAAaC,EAyBjB,SAASC,EAAOC,EAAWC,EAAKC,GAC/B,IAAIC,EACJ,IAAMN,EAAYG,GACjB,MAAM,IAAII,UAAW,gEAAgEJ,EAAU,MAEhG,IAAMH,EAAYI,GACjB,MAAM,IAAIG,UAAW,iEAAiEH,EAAI,MAG3F,IADAE,EAAI,GACKH,EAAWG,IACnBF,EAAII,KAAMH,EAASC,GACnBA,GAAK,ECjBJ,IAACJ,EAAQD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* Invokes a function until a test condition is true.\n*\n* @param {Function} predicate - function which indicates whether to stop invoking a function\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context for the invoked function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n*\n* @example\n* function predicate( i ) {\n*     return ( i >= 5 );\n* }\n*\n* function beep( i ) {\n*     console.log( 'beep: %d', i );\n* }\n*\n* until( predicate, beep );\n*/\nfunction until( predicate, fcn, thisArg ) {\n\tvar i;\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+predicate+'`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\ti = 0;\n\twhile ( !predicate( i ) ) {\n\t\tfcn.call( thisArg, i );\n\t\ti += 1;\n\t}\n}\n\n\n// EXPORTS //\nexport default until;\n","import __var_0__ from './until.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Invoke a function until a test condition is true.\n*\n* @module @stdlib/utils/until\n*\n* @example\n* var until = require( '@stdlib/utils/until' );\n*\n* function predicate( i ) {\n*     return ( i >= 5 );\n* }\n*\n* function beep( i ) {\n*     console.log( 'boop: %d', i );\n* }\n*\n* until( predicate, beep );\n*/\n\n// MODULES //\nvar until = __var_0__;\n\n\n// EXPORTS //\nexport default until;\n"]}