{"version":3,"sources":["@stdlib/utils/curry/lib/curry.js","@stdlib/utils/curry/lib/index.js"],"names":["isFunction","__var_0__","isPositiveInteger","__var_1__","isPrimitive","curry","fcn","arity","thisArg","context","len","TypeError","arguments","length","createCurried","args","v","cargs","slice","push","apply"],"mappings":"4FAuBA,IAAIA,EAAaC,EACbC,EAAoBC,EAAUC,YAyBlC,SAASC,EAAOC,EAAKC,EAAOC,GAC3B,IAAIC,EACAC,EACJ,IAAMV,EAAYM,GACjB,MAAM,IAAIK,UAAW,gEAAkEL,EAAM,MAE9F,GAAKM,UAAUC,OAAS,EACvBH,EAAMJ,EAAIO,YAEN,GAAKD,UAAUC,OAAS,GAG5B,GADAJ,EAAUD,GACJN,EAFNQ,EAAMH,GAGL,MAAM,IAAII,UAAW,sEAAwED,EAAM,WAG3FR,EAAmBK,GAC5BG,EAAMH,GAGNG,EAAMJ,EAAIO,OACVJ,EAAUF,GAEX,OAAOO,EAAe,IAStB,SAASA,EAAeC,GACvB,OASA,SAAkBC,GACjB,IAAIC,EAAQF,EAAKG,QAEjB,GADAD,EAAME,KAAMH,GACPC,EAAMJ,OAASH,EACnB,OAAOI,EAAeG,GAEvB,OAAOX,EAAIc,MAAOX,EAASQ,KCzD3B,IAACZ,EAAQJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-positive-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isPositiveInteger = __var_1__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Transforms a function into a sequence of functions each accepting a single argument.\n*\n* @param {Function} fcn - function to curry\n* @param {PositiveInteger} [arity=fcn.length] - number of parameters\n* @param {*} [thisArg] - evaluation context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} `arity` argument must be a positive integer\n* @returns {Function} curry function\n*\n* @example\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var f = curry( add );\n*\n* var sum = f( 2 )( 3 );\n* // returns 5\n*/\nfunction curry( fcn, arity, thisArg ) {\n\tvar context;\n\tvar len;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + fcn + '`.' );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\tlen = fcn.length;\n\t}\n\telse if ( arguments.length > 2 ) {\n\t\tlen = arity;\n\t\tcontext = thisArg;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Arity argument must be positive integer. Value: `' + len + '`.' );\n\t\t}\n\t}\n\telse if ( isPositiveInteger( arity ) ) {\n\t\tlen = arity;\n\t}\n\telse {\n\t\tlen = fcn.length;\n\t\tcontext = arity;\n\t}\n\treturn createCurried( [] );\n\n\t/**\n\t* Returns a curry function.\n\t*\n\t* @private\n\t* @param {Array} args - arguments\n\t* @returns {Function} curry function\n\t*/\n\tfunction createCurried( args ) {\n\t\treturn curried;\n\n\t\t/**\n\t\t* Curry function.\n\t\t*\n\t\t* @private\n\t\t* @param {*} v - curried function parameter\n\t\t* @returns {(Function|*)} partially applied curry function or curried function result\n\t\t*/\n\t\tfunction curried( v ) {\n\t\t\tvar cargs = args.slice();\n\t\t\tcargs.push( v );\n\t\t\tif ( cargs.length < len ) {\n\t\t\t\treturn createCurried( cargs );\n\t\t\t}\n\t\t\treturn fcn.apply( context, cargs );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default curry;\n","import __var_0__ from './curry.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform a function into a sequence of functions each accepting a single argument.\n*\n* @module @stdlib/utils/curry\n*\n* @example\n* var curry = require( '@stdlib/utils/curry' );\n*\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var f = curry( add );\n*\n* var sum = f( 2 )( 3 );\n* // returns 5\n*/\n\n// MODULES //\nvar curry = __var_0__;\n\n\n// EXPORTS //\nexport default curry;\n"]}