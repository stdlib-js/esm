{"version":3,"sources":["@stdlib/utils/property-names-in/lib/main.js","@stdlib/utils/property-names-in/lib/index.js"],"names":["getOwnPropertyNames","__var_0__","getPrototypeOf","__var_1__","contains","arr","v","i","length","propertyNamesIn","value","names","obj","tmp","Object","push","main"],"mappings":"wEAuBA,IAAIA,EAAsBC,EACtBC,EAAiBC,EAarB,SAASC,EAAUC,EAAKC,GACvB,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC5B,GAAKF,EAAKE,KAAQD,EACjB,OAAO,EAGT,OAAO,EAyBR,SAASG,EAAiBC,GACzB,IAAIC,EACAC,EACAC,EACAN,EAEJ,GAAKG,MAAAA,EACJ,MAAO,GAGRE,EAAME,OAAQJ,GAGdC,EAAQ,GACR,EAAG,CAEF,IADAE,EAAMb,EAAqBY,GACrBL,EAAI,EAAGA,EAAIM,EAAIL,OAAQD,KACS,IAAhCH,EAAUO,EAAOE,EAAKN,KAC1BI,EAAMI,KAAMF,EAAKN,IAGnBK,EAAMV,EAAgBU,SACbA,GAEV,OAAOD,ECxDL,IAACK,EAAOf","sourcesContent":["import __var_0__ from '@stdlib/utils/property-names';\nimport __var_1__ from '@stdlib/utils/get-prototype-of';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar getOwnPropertyNames = __var_0__;\nvar getPrototypeOf = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an array contains a provided value.\n*\n* @private\n* @param {Array} arr - array\n* @param {*} v - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*/\nfunction contains( arr, v ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own and inherited enumerable and non-enumerable property names.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @param {*} value - input object\n* @returns {Array} a list of own and inherited property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var keys = propertyNamesIn( obj );\n* // e.g., returns [ 'beep', 'foo', ... ]\n*/\nfunction propertyNamesIn( value ) {\n\tvar names;\n\tvar obj;\n\tvar tmp;\n\tvar i;\n\n\tif ( value === null || value === void 0 ) {\n\t\treturn [];\n\t}\n\t// Cast the value to an object:\n\tobj = Object( value );\n\n\t// Walk the prototype chain collecting all enumerable and non-enumerable property names...\n\tnames = [];\n\tdo {\n\t\ttmp = getOwnPropertyNames( obj );\n\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\tif ( contains( names, tmp[ i ] ) === false ) {\n\t\t\t\tnames.push( tmp[ i ] );\n\t\t\t}\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t} while ( obj );\n\n\treturn names;\n}\n\n\n// EXPORTS //\nexport default propertyNamesIn;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array of an object's own and inherited enumerable and non-enumerable property names.\n*\n* @module @stdlib/utils/property-names-in\n*\n* @example\n* var propertyNamesIn = require( '@stdlib/utils/property-names-in' );\n*\n* var keys = propertyNamesIn({\n*   'foo': 'bar',\n*   'beep': 'boop'\n* });\n* // e.g., returns [ 'foo', 'beep', ... ]\n*/\n\n// MODULES //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}