{"version":3,"sources":["@stdlib/utils/async/reduce-right/lib/validate.js","@stdlib/utils/async/reduce-right/lib/limit.js","@stdlib/utils/async/reduce-right/lib/factory.js","@stdlib/utils/async/reduce-right/lib/reduce_right.js","@stdlib/utils/async/reduce-right/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isPositiveInteger","__var_3__","validate","opts","options","thisArg","series","TypeError","limit","logger","debug","collection","acc","fcn","done","count","flg","lim","len","idx","i","length","next","cb","error","result","clbk","JSON","stringify","call","message","isFunction","isCollection","PINF","__var_4__","factory","err","f","arguments","reduceRightAsync","initial","setReadOnly"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-positive-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isPositiveInteger = __var_3__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {},\n*     'series': false,\n*     'limit': 10\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'series' ) ) {\n\t\topts.series = options.series;\n\t\tif ( !isBoolean( opts.series ) ) {\n\t\t\treturn new TypeError( 'invalid option. `series` option must be a boolean primitive. Option: `' + opts.series + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'limit' ) ) {\n\t\topts.limit = options.limit;\n\t\tif ( !isPositiveInteger( opts.limit ) ) {\n\t\t\treturn new TypeError( 'invalid option. `limit` option must be a positive integer. Option: `' + opts.limit + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'reduce-right-async:limit' );\n\n\n// MAIN //\n\n/**\n* Invokes a function once for each element in a collection, limiting the number of concurrently pending functions and iterating from right to left.\n*\n* @private\n* @param {Collection} collection - input collection\n* @param {*} acc - initial value\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {PositiveInteger} [opts.limit] - maximum number of pending function invocations\n* @param {Function} fcn - function to invoke\n* @param {Callback} done - function to invoke upon completion or upon encountering an error\n* @returns {void}\n*/\nfunction limit( collection, acc, opts, fcn, done ) {\n\tvar count;\n\tvar flg;\n\tvar lim;\n\tvar len;\n\tvar idx;\n\tvar i;\n\n\tlen = collection.length;\n\tdebug( 'Collection length: %d', len );\n\n\tif ( len === 0 ) {\n\t\tdebug( 'Finished processing a collection.' );\n\t\treturn done( null, acc );\n\t}\n\tif ( len < opts.limit ) {\n\t\tlim = len;\n\t} else {\n\t\tlim = opts.limit;\n\t}\n\tdebug( 'Concurrency limit: %d', lim );\n\tdebug( 'Number of arguments: %d', fcn.length );\n\n\tcount = 0;\n\tidx = len;\n\tfor ( i = 0; i < lim; i++ ) {\n\t\t// This guard is necessary to protect against synchronous functions which exhaust all collection elements...\n\t\tif ( idx > 0 ) {\n\t\t\tnext(); // eslint-disable-line callback-return\n\t\t}\n\t}\n\t/**\n\t* Callback to invoke a provided function for the next element in a collection.\n\t*\n\t* @private\n\t*/\n\tfunction next() {\n\t\tidx -= 1;\n\t\tdebug( 'Collection element %d: %s.', idx, JSON.stringify( collection[ idx ] ) );\n\t\tif ( fcn.length === 3 ) {\n\t\t\tfcn.call( opts.thisArg, acc, collection[ idx ], cb );\n\t\t} else if ( fcn.length === 4 ) {\n\t\t\tfcn.call( opts.thisArg, acc, collection[ idx ], idx, cb );\n\t\t} else {\n\t\t\tfcn.call( opts.thisArg, acc, collection[ idx ], idx, collection, cb ); // eslint-disable-line max-len\n\t\t}\n\t\t/**\n\t\t* Callback invoked once a provided function finishes processing a collection element.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {*} [result] - accumulation result\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction cb( error, result ) {\n\t\t\tif ( flg ) {\n\t\t\t\t// Prevent further processing of collection elements:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tflg = true;\n\t\t\t\treturn clbk( error );\n\t\t\t}\n\t\t\tdebug( 'Accumulator: %s', JSON.stringify( result ) );\n\t\t\tacc = result;\n\t\t\tclbk();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once ready to process the next collection element.\n\t*\n\t* @private\n\t* @param {*} [error] - error\n\t* @returns {void}\n\t*/\n\tfunction clbk( error ) {\n\t\tif ( error ) {\n\t\t\tdebug( 'Encountered an error: %s', error.message );\n\t\t\treturn done( error );\n\t\t}\n\t\tcount += 1;\n\t\tdebug( 'Processed %d of %d collection elements.', count, len );\n\t\tif ( idx > 0 ) {\n\t\t\treturn next();\n\t\t}\n\t\tif ( count === len ) {\n\t\t\tdebug( 'Finished processing a collection.' );\n\t\t\treturn done( null, acc );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default limit;\n","import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-collection';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './limit.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isCollection = __var_1__;\nvar PINF = __var_2__;\nvar validate = __var_3__;\nvar limit = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function to apply a function against an accumulator and each element in a collection and return the accumulated result, iterating from right to left.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=true] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @param {Function} fcn - function to invoke for each element in a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {Function} function which invokes the provided function once for each element in a collection\n*\n* @example\n* var readFile = require( '@stdlib/fs/read-file' );\n*\n* function read( acc, file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error, data ) {\n*         if ( error ) {\n*             return next( null, acc );\n*         }\n*         acc.count += 1;\n*         next( null, acc );\n*     }\n* }\n*\n* var opts = {\n*     'series': false\n* };\n*\n* // Create a `reduceRightAsync` function which invokes `read` for each collection element concurrently:\n* var reduceRightAsync = factory( opts, read );\n*\n* // Create a collection over which to iterate:\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n*\n* // Define a callback which handles errors:\n* function done( error, acc ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( acc.count );\n* }\n*\n* // Run `read` for each element in `files`:\n* var acc = {\n*     'count': 0\n* };\n* reduceRightAsync( files, acc, done );\n*/\nfunction factory( options, fcn ) {\n\tvar opts;\n\tvar err;\n\tvar f;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tf = fcn;\n\t} else {\n\t\tf = options;\n\t}\n\tif ( !isFunction( f ) ) {\n\t\tthrow new TypeError( 'invalid argument. Last argument must be a function. Value: `'+f+'`.' );\n\t}\n\tif ( opts.series === void 0 && opts.limit === void 0 ) {\n\t\topts.series = true;\n\t}\n\tif ( opts.series ) {\n\t\topts.limit = 1;\n\t} else if ( !opts.limit ) {\n\t\topts.limit = PINF;\n\t}\n\treturn reduceRightAsync;\n\n\t/**\n\t* Applies a function against an accumulator and each element in a collection and return the accumulated result, iterating from right to left.\n\t*\n\t* @private\n\t* @param {Collection} collection - input collection\n\t* @param {*} initial - initial value\n\t* @param {Callback} done - function to invoke upon completion\n\t* @throws {TypeError} first argument must be a collection\n\t* @throws {TypeError} last argument must be a function\n\t* @returns {void}\n\t*/\n\tfunction reduceRightAsync( collection, initial, done ) {\n\t\tif ( !isCollection( collection ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a collection. Value: `'+collection+'.`' );\n\t\t}\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Last argument must be a function. Value: `'+done+'`.' );\n\t\t}\n\t\treturn limit( collection, initial, opts, f, clbk );\n\n\t\t/**\n\t\t* Callback invoked upon completion.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {*} [acc] - accumulated value\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction clbk( error, acc ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdone( null, acc );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Applies a function against an accumulator and each element in a collection and return the accumulated result, iterating from right to left.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Collection} collection - input collection\n* @param {*} initial - initial value\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=true] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @param {Function} fcn - function to invoke for each element in a collection\n* @param {Callback} done - function to invoke upon completion\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} second-to-last argument must be a function\n* @throws {TypeError} last argument must be a function\n* @returns {void}\n*\n* @example\n* var readFile = require( '@stdlib/fs/read-file' );\n*\n* function done( error, acc ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( acc.count );\n* }\n*\n* function read( acc, file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, acc );\n*         }\n*         acc.count += 1;\n*         next( null, acc );\n*     }\n* }\n*\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n* var acc = {\n*     'count': 0\n* };\n* reduceRightAsync( files, acc, read, done );\n*/\nfunction reduceRightAsync( collection, initial, options, fcn, done ) {\n\tif ( arguments.length < 5 ) {\n\t\treturn factory( options )( collection, initial, fcn );\n\t}\n\tfactory( options, fcn )( collection, initial, done );\n}\n\n\n// EXPORTS //\nexport default reduceRightAsync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './reduce_right.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a function against an accumulator and each element in a collection and return the accumulated result, iterating from right to left.\n*\n* @module @stdlib/utils/async/reduce-right\n*\n* @example\n* var readFile = require( '@stdlib/fs/read-file' );\n* var reduceRightAsync = require( '@stdlib/utils/async/reduce-right' );\n*\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n*\n* function done( error, acc ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( acc.count );\n* }\n*\n* function read( acc, file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, acc );\n*         }\n*         acc.count += 1;\n*         next( null, acc );\n*     }\n* }\n*\n* var acc = {\n*     'count': 0\n* };\n* reduceRightAsync( files, acc, read, done );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar reduceRightAsync = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( reduceRightAsync, 'factory', factory );\n\n\n// EXPORTS //\nexport default reduceRightAsync;\n"]}