{"version":3,"sources":["@stdlib/utils/async/do-while/lib/do_while_async.js","@stdlib/utils/async/do-while/lib/index.js"],"names":["isFunction","__var_0__","doWhileAsync","fcn","predicate","done","thisArg","args","idx","TypeError","next","error","i","arguments","length","Array","onPredicate","result","call","unshift","apply"],"mappings":"6CAsBA,IAAIA,EAAaC,EAqCjB,SAASC,EAAcC,EAAKC,EAAWC,EAAMC,GAC5C,IAAIC,EACAC,EACJ,IAAMR,EAAYG,GACjB,MAAM,IAAIM,UAAW,gEAAgEN,EAAI,MAE1F,IAAMH,EAAYI,GACjB,MAAM,IAAIK,UAAW,iEAAiEL,EAAU,MAEjG,IAAMJ,EAAYK,GACjB,MAAM,IAAII,UAAW,gEAAgEJ,EAAK,MAc3F,SAASK,EAAMC,GACd,IAAIC,EACJ,GAAKD,EACJ,OAAON,EAAMM,GAKd,GAHAH,GAAO,EAGFK,UAAUC,OAAS,EAEvB,IADAP,EAAO,IAAIQ,MAAOF,UAAUC,OAAO,GAC7BF,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAClCL,EAAMK,EAAE,GAAMC,UAAWD,GAI3BR,EAAWI,EAAKQ,GAWjB,SAASA,EAAaL,EAAOM,GAC5B,OAAKN,EACGN,EAAMM,GAETM,EACGd,EAAIe,KAAMZ,EAASE,EAAKE,IAE3BH,EAAKO,QACTP,EAAKY,QAAS,WAEfd,EAAKe,MAAO,KAAMb,IAhDnBA,EAAO,GACPC,EAAM,EACNL,EAAIe,KAAMZ,EAASE,EAAKE,GCtBtB,IAACR,EAAeD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* Invokes a function while a test condition is true.\n*\n* @param {Function} fcn - function to invoke\n* @param {Function} predicate - function which indicates whether to continue invoking a function\n* @param {Callback} done - callback to invoke upon completion\n* @param {*} [thisArg] - execution context for the invoked function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} third argument must be a function\n*\n* @example\n* function fcn( i, next ) {\n*     setTimeout( onTimeout, i );\n*     function onTimeout() {\n*         console.log( 'beep: %d', i );\n*         next();\n*     }\n* }\n*\n* function predicate( i, clbk ) {\n*     clbk( null, i < 5 );\n* }\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* doWhileAsync( fcn, predicate, done );\n*/\nfunction doWhileAsync( fcn, predicate, done, thisArg ) {\n\tvar args;\n\tvar idx;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+predicate+'`.' );\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a function. Value: `'+done+'`.' );\n\t}\n\targs = [];\n\tidx = 0;\n\tfcn.call( thisArg, idx, next );\n\n\t/**\n\t* Callback invoked upon completion of a provided function.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {...*} results - function results\n\t* @returns {void}\n\t*/\n\tfunction next( error ) {\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tidx += 1;\n\n\t\t// Cache the most recent results...\n\t\tif ( arguments.length > 1 ) {\n\t\t\targs = new Array( arguments.length-1 );\n\t\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\t\targs[ i-1 ] = arguments[ i ];\n\t\t\t}\n\t\t}\n\t\t// Run the test condition:\n\t\tpredicate( idx, onPredicate );\n\t}\n\n\t/**\n\t* Callback invoked upon a predicate result.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} result - predicate result\n\t* @returns {void}\n\t*/\n\tfunction onPredicate( error, result ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( result ) {\n\t\t\treturn fcn.call( thisArg, idx, next );\n\t\t}\n\t\tif ( args.length ) {\n\t\t\targs.unshift( null ); // error argument\n\t\t}\n\t\tdone.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default doWhileAsync;\n","import __var_0__ from './do_while_async.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Invoke a function while a test condition is true.\n*\n* @module @stdlib/utils/async/do-while\n*\n* @example\n* var doWhileAsync = require( '@stdlib/utils/async/do-while' );\n*\n* function fcn( i, next ) {\n*     setTimeout( onTimeout, i );\n*     function onTimeout() {\n*         console.log( 'beep: %d', i );\n*         next();\n*     }\n* }\n*\n* function predicate( i, clbk ) {\n*     clbk( null, i < 5 );\n* }\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* doWhileAsync( fcn, predicate, done );\n*/\n\n// MODULES //\nvar doWhileAsync = __var_0__;\n\n\n// EXPORTS //\nexport default doWhileAsync;\n"]}