{"version":3,"sources":["@stdlib/utils/define-memoized-configurable-read-only-property/lib/main.js","@stdlib/utils/define-memoized-configurable-read-only-property/lib/index.js"],"names":["isObject","__var_0__","isFunction","__var_1__","defineMemoizedProperty","__var_2__","setMemoizedConfigurableReadOnly","obj","prop","fcn","TypeError","configurable","enumerable","writable","value"],"mappings":"+HAwBA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAyBC,EA8B7B,SAASC,EAAiCC,EAAKC,EAAMC,GACpD,IAAMT,EAAUO,GACf,MAAM,IAAIG,UAAW,+DAAiEH,EAAM,MAE7F,IAAML,EAAYO,GACjB,MAAM,IAAIC,UAAW,gEAAkED,EAAM,MAE9FL,EAAwBG,EAAKC,EAAM,CAClCG,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAASL,ICzBR,IAACH,EAAkCL","sourcesContent":["import __var_0__ from '@stdlib/assert/is-object';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/utils/define-memoized-property';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isFunction = __var_1__;\nvar defineMemoizedProperty = __var_2__;\n\n\n// MAIN //\n\n/**\n* Defines a configurable memoized read-only object property.\n*\n* ## Notes\n*\n* -   Configurable read-only properties are **enumerable**.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} fcn - function whose return value will be memoized and set as the property value\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be a function\n*\n* @example\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* setMemoizedConfigurableReadOnly( obj, 'foo', foo );\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\nfunction setMemoizedConfigurableReadOnly( obj, prop, fcn ) { // eslint-disable-line id-length\n\tif ( !isObject( obj ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a function. Value: `' + fcn + '`.' );\n\t}\n\tdefineMemoizedProperty( obj, prop, {\n\t\t'configurable': true,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': fcn\n\t});\n}\n\n\n// EXPORTS //\nexport default setMemoizedConfigurableReadOnly;\n","import __var_0__ from './main.js'; // eslint-disable-line id-length\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a configurable memoized read-only object property.\n*\n* @module @stdlib/utils/define-memoized-configurable-read-only-property\n*\n* @example\n* var setMemoizedConfigurableReadOnly = require( '@stdlib/utils/define-memoized-configurable-read-only-property' );\n*\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* setMemoizedConfigurableReadOnly( obj, 'foo', foo );\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\n\n// MODULES //\nvar setMemoizedConfigurableReadOnly = __var_0__;\n\n\n// EXPORTS //\nexport default setMemoizedConfigurableReadOnly;\n"]}