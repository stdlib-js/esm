{"version":3,"sources":["@stdlib/utils/try-then/lib/try_then.js","@stdlib/utils/try-then/lib/index.js"],"names":["isFunction","__var_0__","trythen","x","y","TypeError","error"],"mappings":"0CAsBA,IAAIA,EAAaC,EA8BjB,SAASC,EAASC,EAAGC,GACpB,IAAMJ,EAAYG,GACjB,MAAM,IAAIE,UAAW,gEAAgEF,EAAE,MAExF,IAAMH,EAAYI,GACjB,MAAM,IAAIC,UAAW,iEAAiED,EAAE,MAEzF,IACC,OAAOD,IACN,MAAQG,GACT,OAAOF,EAAGE,IChBT,IAACJ,EAAUD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* If a function does not throw, returns the function return value; otherwise, returns the return value of a second function `y`.\n*\n* @param {Function} x - function to try invoking\n* @param {Function} y - function to invoke if a function throws\n* @throws {TypeError} first argument must be a function\n* @returns {*} the return value of either `x` or `y`\n*\n* @example\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function x() {\n*     if ( randu() < 0.5 ) {\n*         throw new Error( 'beep' );\n*     }\n*     return 1.0;\n* }\n*\n* function y() {\n*     return randu();\n* }\n*\n* var z = trythen( x, y );\n* // returns <number>\n*/\nfunction trythen( x, y ) {\n\tif ( !isFunction( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+x+'`.' );\n\t}\n\tif ( !isFunction( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+y+'`.' );\n\t}\n\ttry {\n\t\treturn x();\n\t} catch ( error ) {\n\t\treturn y( error );\n\t}\n}\n\n\n// EXPORTS //\nexport default trythen;\n","import __var_0__ from './try_then.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* If a function does not throw, return the function return value; otherwise, return the return value of a second function `y`.\n*\n* @module @stdlib/utils/try-then\n*\n* @example\n* var randu = require( '@stdlib/random/base/randu' );\n* var trythen = require( '@stdlib/utils/try-then' );\n*\n* function x() {\n*     if ( randu() < 0.5 ) {\n*         throw new Error( 'beep' );\n*     }\n*     return 1.0;\n* }\n*\n* function y() {\n*     return randu();\n* }\n*\n* var z = trythen( x, y );\n* // returns <number>\n*/\n\n// MODULES //\nvar trythen = __var_0__;\n\n\n// EXPORTS //\nexport default trythen;\n"]}