{"version":3,"sources":["@stdlib/net/http-server/lib/validate.js","@stdlib/net/http-server/lib/server.js","@stdlib/net/http-server/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isPrimitive","isString","__var_1__","isObject","__var_2__","hasOwnProp","__var_3__","validate","opts","options","port","TypeError","maxport","hostname","address","http","logger","isFunction","DEFAULTS","__var_4__","debug","httpServer","requestListener","nargs","max","err","arguments","length","createServer","done","server","on","error","code","listen","once","addr"],"mappings":"2SAyBA,IAAIA,EAAuBC,EAAUC,YACjCC,EAAWC,EAAUF,YACrBG,EAAWC,EACXC,EAAaC,EA4BjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,GAGXJ,EAAYI,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdZ,EAAsBU,EAAKE,OACzB,IAAIC,UAAW,kEAAoEH,EAAKE,KAAO,MAGnGL,EAAYI,EAAS,aACzBD,EAAKI,QAAUH,EAAQG,SACjBd,EAAsBU,EAAKI,UACzB,IAAID,UAAW,4EAA8EH,EAAKI,QAAU,MAGhHP,EAAYI,EAAS,cACzBD,EAAKK,SAAWJ,EAAQI,UAClBZ,EAAUO,EAAKK,WACb,IAAIF,UAAW,0EAA4EH,EAAKK,SAAW,MAG/GR,EAAYI,EAAS,aACzBD,EAAKM,QAAUL,EAAQK,SACjBb,EAAUO,EAAKM,UACb,IAAIH,UAAW,yEAA2EH,EAAKM,QAAU,MAG3G,KA1BC,IAAIH,UAAW,iEAAmEF,EAAU,iDChCjGM,EAAOhB,EACPiB,EAASd,EACTe,EAAab,EACbG,EAAWD,EACXY,EAAWC,EAKXC,EAAQJ,EAAQ,2BAuCpB,SAASK,IACR,IAAIC,EACAT,EACAJ,EACAc,EACAf,EACAE,EACAc,EACAC,EAIJ,GADAjB,EAAO,GACQ,KAFfe,EAAQG,UAAUC,QAGZV,EAAYS,UAAU,IAC1BJ,EAAkBI,UAAW,GAG7BD,EAAMlB,EAAUC,EADhBC,EAAUiB,UAAW,SAIlB,GAAKH,EAAQ,EAAI,CAGrB,GAFAd,EAAUiB,UAAW,IAEfT,EADNK,EAAkBI,UAAW,IAE5B,MAAM,IAAIf,UAAW,kEAAoEW,EAAkB,MAE5GG,EAAMlB,EAAUC,EAAMC,GAEvB,GAAKgB,EACJ,MAAMA,EA2BP,OAxBCf,OADkB,IAAdF,EAAKE,KACFQ,EAASR,KAETF,EAAKE,KAEbU,EAAO,kBAAmBV,GAGzBc,OADqB,IAAjBhB,EAAKI,QACHF,EAEAF,EAAKI,QAEZQ,EAAO,sBAAuBI,GAG7BX,EADIL,EAAKK,SACEL,EAAKK,SAEPL,EAAKM,QACHN,EAAKM,QAGLI,EAASJ,QAErBM,EAAO,sBAAuBP,GAEvBe,EAmBP,SAASA,EAAcC,GACtB,IAAIC,EACJ,IAAMb,EAAYY,GACjB,MAAM,IAAIlB,UAAW,0DAA4DkB,EAAO,OAGxFC,EADIR,EACKP,EAAKa,aAAcN,GAEnBP,EAAKa,gBAERG,GAAI,SAaX,SAAwBC,GACvB,GAAoB,eAAfA,EAAMC,OACVb,EAAO,wCAAyCP,EAAUH,IAC1DA,GAAQ,IACKc,GAGZ,OAFAJ,EAAO,iCAAkCP,EAAUH,QACnDoB,EAAOI,OAAQxB,EAAMG,GAIvB,MAAMmB,KAtBPF,EAAOK,KAAM,aA8Bb,WACC,IAAIC,EAAON,EAAOhB,UAClBM,EAAO,sEAAuEgB,EAAKtB,QAASsB,EAAK1B,MACjGmB,EAAM,KAAMC,MA/BbV,EAAO,iCAAkCP,EAAUH,GACnDoB,EAAOI,OAAQxB,EAAMG,ICtHpB,IAACQ,EAAatB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isString = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar hasOwnProp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\topts.port = options.port;\n\t\tif ( !isNonNegativeInteger( opts.port ) ) {\n\t\t\treturn new TypeError( 'invalid option. `port` must be a nonnegative integer. Option: `' + opts.port + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\topts.maxport = options.maxport;\n\t\tif ( !isNonNegativeInteger( opts.maxport ) ) {\n\t\t\treturn new TypeError( 'invalid option. `maxport` option must be a nonnegative integer. Option: `' + opts.maxport + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\topts.hostname = options.hostname;\n\t\tif ( !isString( opts.hostname ) ) {\n\t\t\treturn new TypeError( 'invalid option. `hostname` option must be a primitive string. Option: `' + opts.hostname + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\topts.address = options.address;\n\t\tif ( !isString( opts.address ) ) {\n\t\t\treturn new TypeError( 'invalid option. `address` option must be a primitive string. Option: `' + opts.address + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/http.js';\nimport __var_1__ from '@stdlib/vendor/debug.js';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar http = __var_0__;\nvar logger = __var_1__;\nvar isFunction = __var_2__;\nvar validate = __var_3__;\nvar DEFAULTS = __var_4__;\n\n\n// VARIABLES //\n\nvar debug = logger( '@stdlib/net/http-server');\n\n\n// MAIN //\n\n/**\n* Returns a function which creates an HTTP server.\n*\n* @param {Options} [options] - server options\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"127.0.0.1\"] - server address\n* @param {Callback} [requestListener] - callback invoked upon receiving an HTTP request\n* @throws {TypeError} `requestListener` must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which creates an HTTP server\n*\n* @example\n* var createServer = httpServer();\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* var createServer = httpServer( opts );\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* function onRequest( request, response ) {\n*     console.log( request.url );\n*     response.end( 'OK' );\n* }\n* var createServer = httpServer( opts, onRequest );\n*/\nfunction httpServer() {\n\tvar requestListener;\n\tvar hostname;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar port;\n\tvar max;\n\tvar err;\n\n\tnargs = arguments.length;\n\topts = {};\n\tif ( nargs === 1 ) {\n\t\tif ( isFunction( arguments[0] )) {\n\t\t\trequestListener = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\telse if ( nargs > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\trequestListener = arguments[ 1 ];\n\t\tif ( !isFunction( requestListener ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Request listener must be a function. Value: `' + requestListener + '`.' );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.port === void 0 ) {\n\t\tport = DEFAULTS.port;\n\t} else {\n\t\tport = opts.port;\n\t}\n\tdebug( 'Server port: %d', port );\n\n\tif ( opts.maxport === void 0 ) {\n\t\tmax = port;\n\t} else {\n\t\tmax = opts.maxport;\n\t}\n\tdebug( 'Max server port: %d', max );\n\n\tif ( opts.hostname ) {\n\t\thostname = opts.hostname;\n\t}\n\telse if ( opts.address ) {\n\t\thostname = opts.address;\n\t}\n\telse {\n\t\thostname = DEFAULTS.address;\n\t}\n\tdebug( 'Server hostname: %s', hostname );\n\n\treturn createServer;\n\n\t/**\n\t* Creates an HTTP server.\n\t*\n\t* @private\n\t* @param {Callback} done - function to invoke after creating a server\n\t* @throws {TypeError} must provide a function\n\t*\n\t* @example\n\t* function done( error, server ) {\n\t*     if ( error ) {\n\t*         throw error;\n\t*     }\n\t*     console.log( 'Success!' );\n\t*     server.close();\n\t* }\n\t* createServer( done );\n\t*/\n\tfunction createServer( done ) {\n\t\tvar server;\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Callback must be a function. Value: `' + done + '`.' );\n\t\t}\n\t\tif ( requestListener ) {\n\t\t\tserver = http.createServer( requestListener );\n\t\t} else {\n\t\t\tserver = http.createServer();\n\t\t}\n\t\tserver.on( 'error', errorListener );\n\t\tserver.once( 'listening', onListen );\n\n\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\tserver.listen( port, hostname );\n\n\t\t/**\n\t\t* Server error event handler.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - server error\n\t\t* @throws {Error} server error\n\t\t*/\n\t\tfunction errorListener( error ) {\n\t\t\tif ( error.code === 'EADDRINUSE' ) {\n\t\t\t\tdebug( 'Server address already in use: %s:%d.', hostname, port );\n\t\t\t\tport += 1;\n\t\t\t\tif ( port <= max ) {\n\t\t\t\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\t\t\t\tserver.listen( port, hostname );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked once a server is listening and ready to handle requests.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onListen() {\n\t\t\tvar addr = server.address();\n\t\t\tdebug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );\n\t\t\tdone( null, server );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default httpServer;\n","import __var_0__ from './server.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an HTTP server.\n*\n* @module @stdlib/net/http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net/http-server' );\n*\n* var opts = {\n*     'port': 7331,\n*    'address': '0.0.0.0'\n* };\n* function done( error, server ) {\n*    if ( error ) {\n*        throw error;\n*    }\n*    console.log( 'Success!' );\n*    server.close();\n* }\n* var createServer = httpServer( opts );\n* createServer( done );\n*/\n\n// MODULES //\nvar httpServer = __var_0__;\n\n\n// EXPORTS //\nexport default httpServer;\n"]}