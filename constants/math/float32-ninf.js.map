{"version":3,"sources":["@stdlib/constants/math/float32-ninf/lib/index.js"],"names":["v","Float32Array","__var_0__","Uint32Array","__var_1__","FLOAT32_VIEW","UINT32_VIEW","buffer","FLOAT32_NINF","v$1"],"mappings":"+EAkCA,IAQIA,EARAC,EAAeC,EACfC,EAAcC,EAKdC,EAAe,IAAIJ,EAAc,GACjCK,EAAc,IAAIH,EAAaE,EAAaE,QAwB5CC,EAAe,WAGnBF,EAAa,GAAME,EAMnB,IAAAC,EAJAT,EAAIK,EAAc","sourcesContent":["import __var_0__ from '@stdlib/array/float32';\nimport __var_1__ from '@stdlib/array/uint32';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/math/float32-ninf\n* @type {number}\n*\n* @example\n* var FLOAT32_NINF = require( '@stdlib/constants/math/float32-ninf' );\n* // returns -infinity\n*/\n\n// MODULES //\nvar Float32Array = __var_0__;\nvar Uint32Array = __var_1__;\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\nexport default v;\n"]}