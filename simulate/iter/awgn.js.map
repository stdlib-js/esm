{"version":3,"sources":["@stdlib/simulate/iter/awgn/lib/main.js","@stdlib/simulate/iter/awgn/lib/index.js"],"names":["setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","isIteratorLike","__var_3__","isPositiveNumber","__var_4__","isPrimitive","isPlainObject","__var_5__","isFunction","__var_6__","isBoolean","__var_7__","isUint32Array","__var_8__","hasOwnProp","__var_9__","copy","__var_10__","noop","__var_11__","constantFunction","__var_12__","iteratorSymbol","__var_13__","randn","__var_14__","factory","DEFAULTS","__var_15__","iterawgn","iterator","sigma","options","rnorm","opts","iter","FLG","TypeError","arguments","length","prng","state","seed","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","s","out","v","done","value","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\nimport __var_4__ from '@stdlib/assert/is-positive-number';\nimport __var_5__ from '@stdlib/assert/is-plain-object';\nimport __var_6__ from '@stdlib/assert/is-function';\nimport __var_7__ from '@stdlib/assert/is-boolean';\nimport __var_8__ from '@stdlib/assert/is-uint32array';\nimport __var_9__ from '@stdlib/assert/has-own-property';\nimport __var_10__ from '@stdlib/utils/copy';\nimport __var_11__ from '@stdlib/utils/noop';\nimport __var_12__ from '@stdlib/utils/constant-function';\nimport __var_13__ from '@stdlib/symbol/iterator';\nimport __var_14__ from '@stdlib/random/base/improved-ziggurat';\nimport __var_15__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isIteratorLike = __var_3__;\nvar isPositiveNumber = __var_4__.isPrimitive;\nvar isPlainObject = __var_5__;\nvar isFunction = __var_6__;\nvar isBoolean = __var_7__.isPrimitive;\nvar isUint32Array = __var_8__;\nvar hasOwnProp = __var_9__;\nvar copy = __var_10__;\nvar noop = __var_11__;\nvar constantFunction = __var_12__;\nvar iteratorSymbol = __var_13__;\nvar randn = __var_14__.factory;\nvar DEFAULTS = __var_15__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawgn( iterator, sigma, options ) {\n\tvar rnorm;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + sigma + '`.' );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );\n\t\t\t}\n\t\t\trnorm = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tif ( rnorm === void 0 ) {\n\t\trnorm = randn( opts );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rnorm.PRNG );\n\t}\n\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rnorm.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rnorm.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rnorm.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rnorm.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rnorm.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trnorm.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = v.value + ( sigma*rnorm() );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = NaN;\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawgn( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterawgn;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white Gaussian noise (AWGN).\n*\n* @module @stdlib/simulate/iter/awgn\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n* var iterawgn = require( '@stdlib/simulate/iter/awgn' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}