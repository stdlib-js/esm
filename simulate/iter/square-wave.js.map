{"version":3,"sources":["@stdlib/simulate/iter/square-wave/lib/validate.js","@stdlib/simulate/iter/square-wave/lib/main.js","@stdlib/simulate/iter/square-wave/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isNumber","__var_2__","isPrimitive","isInteger","__var_3__","isPositiveInteger","__var_4__","isNonNegativeInteger","__var_5__","isEven","__var_6__","isnan","__var_7__","validate","opts","options","period","min","TypeError","max","offset","iter","setReadOnly","iteratorSymbol","iterSquareWave","FLG","err","t","h","i","arguments","length","next","end","factory","done","value","iterator"],"mappings":"8fA6BA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAYC,EAAUF,YACtBG,EAAoBC,EAAUJ,YAC9BK,EAAuBC,EAAUN,YACjCO,EAASC,EACTC,EAAQC,EA4BZ,SAASC,EAAUC,EAAMC,GACxB,OAAMnB,EAAemB,IAGhBjB,EAAYiB,EAAS,YACzBD,EAAKE,OAASD,EAAQC,OAChBX,EAAmBU,EAAQC,SAAaP,EAAQM,EAAQC,SAI1DlB,EAAYiB,EAAS,SACzBD,EAAKG,IAAMF,EAAQE,KACbjB,EAAUe,EAAQE,MAASN,EAAOI,EAAQE,MACxC,IAAIC,UAAW,2DAA6DH,EAAQE,IAAM,MAG9FnB,EAAYiB,EAAS,SACzBD,EAAKK,IAAMJ,EAAQI,KACbnB,EAAUe,EAAQI,MAASR,EAAOI,EAAQI,MACxC,IAAID,UAAW,2DAA6DH,EAAQI,IAAM,MAG9FrB,EAAYiB,EAAS,YACzBD,EAAKM,OAASL,EAAQK,QAChBjB,EAAWY,EAAQK,SACjB,IAAIF,UAAW,gEAAkEH,EAAQK,OAAS,MAGtGtB,EAAYiB,EAAS,UACzBD,EAAKO,KAAON,EAAQM,MACdd,EAAsBQ,EAAQM,OAC5B,IAAIH,UAAW,yEAA2EH,EAAQM,KAAO,MAG3G,KA3BE,IAAIH,UAAW,8EAAgFH,EAAQC,OAAS,MALjH,IAAIE,UAAW,iEAAmEH,EAAU,MC1CrG,IAAIO,EAAczB,EACd0B,EAAiBxB,EACjBc,EAAWZ,EAoCf,SAASuB,EAAgBT,GACxB,IAAID,EACAO,EACAI,EACAC,EACAC,EACAC,EACAC,EASJ,GAPAf,EAAO,CACNE,OAAU,GACVC,KAAQ,EACRE,IAAO,EACPC,OAAU,EACVC,KAAQ,OAEJS,UAAUC,SACdL,EAAMb,EAAUC,EAAMC,IAErB,MAAMW,EAoBR,OAjBAC,GAAMb,EAAKE,OAAOF,EAAKM,QAAWN,EAAKE,QAC9B,IACRW,GAAKb,EAAKE,QAEXW,GAAK,EACLC,EAAId,EAAKE,OAAS,EAClBa,EAAI,EAIJP,EADAD,EAAO,GACY,OAAQW,GAC3BV,EAAaD,EAAM,SAAUY,GAGxBV,GACJD,EAAaD,EAAME,EAAgBW,GAE7Bb,EAQP,SAASW,IAER,OADAH,GAAK,EACAJ,GAAOI,EAAIf,EAAKO,KACb,CACNc,MAAQ,GAIH,CACNC,OAFDT,GAAK,GAEUb,EAAKE,OAAUY,EAAMd,EAAKK,IAAML,EAAKG,IACnDkB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAX,GAAM,EACDK,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOV,EAAgBV,ICtGtB,IAACuB,EAAWxC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/assert/is-positive-integer';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_6__ from '@stdlib/math/base/assert/is-even';\nimport __var_7__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isNumber = __var_2__.isPrimitive;\nvar isInteger = __var_3__.isPrimitive;\nvar isPositiveInteger = __var_4__.isPrimitive;\nvar isNonNegativeInteger = __var_5__.isPrimitive;\nvar isEven = __var_6__;\nvar isnan = __var_7__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a square wave repeats\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) || !isEven( options.period ) ) { // eslint-disable-line max-len\n\t\t\treturn new TypeError( 'invalid option. `period` option must be an positive even integer. Option: `' + options.period + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( 'invalid option. `min` option must be a number. Option: `' + options.min + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( 'invalid option. `max` option must be a number. Option: `' + options.max + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/symbol/iterator';\nimport __var_2__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar iteratorSymbol = __var_1__;\nvar validate = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a square wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a square wave repeats (this must be a positive even integer)\n* @param {number} [options.min=-1.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterSquareWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar h;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'min': -1.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\th = opts.period / 2;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\treturn {\n\t\t\t'value': ( (t%opts.period) < h ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSquareWave( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterSquareWave;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a square wave.\n*\n* @module @stdlib/simulate/iter/square-wave\n*\n* @example\n* var iterSquareWave = require( '@stdlib/simulate/iter/square-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}