{"version":3,"sources":["@stdlib/simulate/iter/pulse/lib/validate.js","@stdlib/simulate/iter/pulse/lib/main.js","@stdlib/simulate/iter/pulse/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isNumber","__var_2__","isPrimitive","isInteger","__var_3__","isPositiveInteger","__var_4__","isNonNegativeInteger","__var_5__","isnan","__var_6__","validate","opts","options","duration","TypeError","period","min","max","offset","iter","setReadOnly","iteratorSymbol","floor","iterPulse","FLG","err","t","i","arguments","length","RangeError","next","end","factory","done","value","iterator"],"mappings":"6fA4BA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAYC,EAAUF,YACtBG,EAAoBC,EAAUJ,YAC9BK,EAAuBC,EAAUN,YACjCO,EAAQC,EA6BZ,SAASC,EAAUC,EAAMC,GACxB,OAAMjB,EAAeiB,GAGhBf,EAAYe,EAAS,cACzBD,EAAKE,SAAWD,EAAQC,UAClBT,EAAmBQ,EAAQC,WACzB,IAAIC,UAAW,0EAA4EF,EAAQC,SAAW,MAGlHhB,EAAYe,EAAS,YACzBD,EAAKI,OAASH,EAAQG,QAChBX,EAAmBQ,EAAQG,SACzB,IAAID,UAAW,wEAA0EF,EAAQG,OAAS,MAG9GlB,EAAYe,EAAS,SACzBD,EAAKK,IAAMJ,EAAQI,KACbjB,EAAUa,EAAQI,MAASR,EAAOI,EAAQI,MACxC,IAAIF,UAAW,2DAA6DF,EAAQI,IAAM,MAG9FnB,EAAYe,EAAS,SACzBD,EAAKM,IAAML,EAAQK,KACblB,EAAUa,EAAQK,MAAST,EAAOI,EAAQK,MACxC,IAAIH,UAAW,2DAA6DF,EAAQK,IAAM,MAG9FpB,EAAYe,EAAS,YACzBD,EAAKO,OAASN,EAAQM,QAChBhB,EAAWU,EAAQM,SACjB,IAAIJ,UAAW,gEAAkEF,EAAQM,OAAS,MAGtGrB,EAAYe,EAAS,UACzBD,EAAKQ,KAAOP,EAAQO,MACdb,EAAsBM,EAAQO,OAC5B,IAAIL,UAAW,yEAA2EF,EAAQO,KAAO,MAG3G,KAtCC,IAAIL,UAAW,iEAAmEF,EAAU,MCxCrG,IAAIQ,EAAcxB,EACdyB,EAAiBvB,EACjBwB,EAAQtB,EACRU,EAAWP,EAsCf,SAASoB,EAAWX,GACnB,IAAID,EACAQ,EACAK,EACAC,EACAC,EACAC,EAUJ,GARAhB,EAAO,CACNE,UAAa,EACbE,OAAU,GACVC,IAAO,EACPC,IAAO,EACPC,OAAU,EACVC,KAAQ,OAEJS,UAAUC,SACdJ,EAAMf,EAAUC,EAAMC,IAErB,MAAMa,EAMR,IAHwB,IAAnBd,EAAKE,WACTF,EAAKE,SAAWS,EAAOX,EAAKI,OAAO,IAE/BJ,EAAKE,UAAYF,EAAKI,OAC1B,MAAM,IAAIe,WAAY,4EAA8EnB,EAAKE,SAAW,MAkBrH,OAhBAa,GAAMf,EAAKI,OAAOJ,EAAKO,QAAWP,EAAKI,QAC9B,IACRW,GAAKf,EAAKI,QAEXW,GAAK,EACLC,EAAI,EAIJP,EADAD,EAAO,GACY,OAAQY,GAC3BX,EAAaD,EAAM,SAAUa,GAGxBX,GACJD,EAAaD,EAAME,EAAgBY,GAE7Bd,EAQP,SAASY,IAER,OADAJ,GAAK,EACAH,GAAOG,EAAIhB,EAAKQ,KACb,CACNe,MAAQ,GAIH,CACNC,OAFDT,GAAKA,EAAE,GAAKf,EAAKI,QAEDJ,EAAKE,SAAaF,EAAKM,IAAMN,EAAKK,IACjDkB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAX,GAAM,EACDI,UAAUC,OACP,CACNM,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOV,EAAWZ,IC/GjB,IAACyB,EAAWxC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/assert/is-positive-integer';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_6__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isNumber = __var_2__.isPrimitive;\nvar isInteger = __var_3__.isPrimitive;\nvar isPositiveInteger = __var_4__.isPrimitive;\nvar isNonNegativeInteger = __var_5__.isPrimitive;\nvar isnan = __var_6__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( 'invalid option. `min` option must be a number. Option: `' + options.min + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( 'invalid option. `max` option must be a number. Option: `' + options.max + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/symbol/iterator';\nimport __var_2__ from '@stdlib/math/base/special/floor';\nimport __var_3__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar iteratorSymbol = __var_1__;\nvar floor = __var_2__;\nvar validate = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=floor(options.period/2)] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min=0.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 10,\n\t\t'min': 0.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = floor( opts.period/2 );\n\t}\n\tif ( opts.duration >= opts.period ) {\n\t\tthrow new RangeError( 'invalid option. `duration` option must be less than the period. Option: `' + opts.duration + '`.' );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterPulse;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a pulse waveform.\n*\n* @module @stdlib/simulate/iter/pulse\n*\n* @example\n* var iterPulse = require( '@stdlib/simulate/iter/pulse' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}