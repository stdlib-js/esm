{"version":3,"sources":["@stdlib/simulate/iter/sawtooth-wave/lib/validate.js","@stdlib/simulate/iter/sawtooth-wave/lib/main.js","@stdlib/simulate/iter/sawtooth-wave/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isInteger","__var_2__","isPrimitive","isPositiveInteger","__var_3__","isNonNegativeInteger","__var_4__","isNonNegativeNumber","__var_5__","validate","opts","options","period","TypeError","amplitude","offset","iter","setReadOnly","iteratorSymbol","tan","atan","HALF_PI","PI","__var_6__","iterSawtoothWave","FLG","err","t","s","a","i","arguments","length","next","end","factory","done","value","iterator"],"mappings":"mnBA2BA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAYC,EAAUC,YACtBC,EAAoBC,EAAUF,YAC9BG,EAAuBC,EAAUJ,YACjCK,EAAsBC,EAAUN,YA2BpC,SAASO,EAAUC,EAAMC,GACxB,OAAMf,EAAee,GAGhBb,EAAYa,EAAS,YACzBD,EAAKE,OAASD,EAAQC,QAChBT,EAAmBQ,EAAQC,SACzB,IAAIC,UAAW,yEAA2EF,EAAQC,OAAS,MAG/Gd,EAAYa,EAAS,eACzBD,EAAKI,UAAYH,EAAQG,WACnBP,EAAqBI,EAAQG,YAC3B,IAAID,UAAW,6EAA+EF,EAAQG,UAAY,MAGtHhB,EAAYa,EAAS,YACzBD,EAAKK,OAASJ,EAAQI,QAChBf,EAAWW,EAAQI,SACjB,IAAIF,UAAW,gEAAkEF,EAAQI,OAAS,MAGtGjB,EAAYa,EAAS,UACzBD,EAAKM,KAAOL,EAAQK,MACdX,EAAsBM,EAAQK,OAC5B,IAAIH,UAAW,yEAA2EF,EAAQK,KAAO,MAG3G,KA1BC,IAAIH,UAAW,iEAAmEF,EAAU,MCjCrG,IAAIM,EAAcpB,EACdqB,EAAiBnB,EACjBoB,EAAMlB,EACNmB,EAAOhB,EACPiB,EAAUf,EACVgB,EAAKd,EACLC,EAAWc,EAmCf,SAASC,EAAkBb,GAC1B,IAAID,EACAM,EACAS,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GANApB,EAAO,CACNE,OAAU,GACVE,UAAa,EACbC,OAAU,EACVC,KAAQ,OAEJe,UAAUC,SACdN,EAAMjB,EAAUC,EAAMC,IAErB,MAAMe,EAqBR,OAlBAC,GAAMjB,EAAKE,OAAOF,EAAKK,QAAWL,EAAKE,QAC9B,IACRe,GAAKjB,EAAKE,QAEXe,GAAK,EACLC,EAAIN,EAAKZ,EAAKE,OACdiB,EAAInB,EAAKI,UAAYO,EACrBS,EAAI,EAIJb,EADAD,EAAO,GACY,OAAQiB,GAC3BhB,EAAaD,EAAM,SAAUkB,GAGxBhB,GACJD,EAAaD,EAAME,EAAgBiB,GAE7BnB,EAQP,SAASiB,IAER,OADAH,GAAK,EACAL,GAAOK,EAAIpB,EAAKM,KACb,CACNoB,MAAQ,IAGVT,GAAK,EACLA,GAAKjB,EAAKE,OACH,CACNyB,MAASR,EAAIT,EAAMD,EAAKS,EAAED,IAC1BS,MAAQ,IAWV,SAASF,EAAKG,GAEb,OADAZ,GAAM,EACDM,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOX,EAAkBd,IC/GxB,IAAC4B,EAAWzC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-integer';\nimport __var_3__ from '@stdlib/assert/is-positive-integer';\nimport __var_4__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-number';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isInteger = __var_2__.isPrimitive;\nvar isPositiveInteger = __var_3__.isPrimitive;\nvar isNonNegativeInteger = __var_4__.isPrimitive;\nvar isNonNegativeNumber = __var_5__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/symbol/iterator';\nimport __var_2__ from '@stdlib/math/base/special/tan';\nimport __var_3__ from '@stdlib/math/base/special/atan';\nimport __var_4__ from '@stdlib/constants/math/float64-half-pi';\nimport __var_5__ from '@stdlib/constants/math/float64-pi';\nimport __var_6__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar iteratorSymbol = __var_1__;\nvar tan = __var_2__;\nvar atan = __var_3__;\nvar HALF_PI = __var_4__;\nvar PI = __var_5__;\nvar validate = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sawtooth wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\nfunction iterSawtoothWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = PI / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * atan( tan( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSawtoothWave( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterSawtoothWave;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a sawtooth wave.\n*\n* @module @stdlib/simulate/iter/sawtooth-wave\n*\n* @example\n* var iterSawtoothWave = require( '@stdlib/simulate/iter/sawtooth-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}