{"version":3,"sources":["@stdlib/math/utils/linspace/lib/linspace.js","@stdlib/math/utils/linspace/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isNonNegativeInteger","__var_1__","isnan","__var_2__","linspace","x1","x2","len","arr","end","tmp","d","i","TypeError","arguments","length","Array"],"mappings":"6IAwBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAuBC,EAAUF,YACjCG,EAAQC,EAoBZ,SAASC,EAAUC,EAAIC,EAAIC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMf,EAAUQ,IAAQH,EAAOG,GAC9B,MAAM,IAAIQ,UAAW,oDAAsDR,EAAK,MAEjF,IAAMR,EAAUS,IAAQJ,EAAOI,GAC9B,MAAM,IAAIO,UAAW,mDAAqDP,EAAK,MAEhF,GAAKQ,UAAUC,OAAS,EACvBR,EAAM,QACA,CACN,IAAMP,EAAsBO,GAC3B,MAAM,IAAIM,UAAW,mEAAqEN,EAAM,MAEjG,GAAa,IAARA,EACJ,MAAO,GAWT,IANAI,GAAML,EAAGD,IADTI,EAAMF,EAAM,GAKZG,EAAML,GADNG,EAAM,IAAIQ,MAAOT,IAEZ,GAAMG,EACLE,EAAI,EAAGA,EAAIH,EAAKG,IACrBF,GAAOC,EACPH,EAAKI,GAAMF,EAGZ,OADAF,EAAKC,GAAQH,EACNE,EC/CL,IAACJ,EAAWN","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced numeric array.\n*\n* @param {number} x1 - first array value\n* @param {number} x2 - last array value\n* @param {NonNegativeInteger} [len=100] - length of output array\n* @throws {TypeError} first argument must be numeric\n* @throws {TypeError} second argument must be numeric\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Array} linearly spaced numeric array\n*\n* @example\n* var arr = linspace( 0, 100, 6 );\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*/\nfunction linspace( x1, x2, len ) {\n\tvar arr;\n\tvar end;\n\tvar tmp;\n\tvar d;\n\tvar i;\n\tif ( !isNumber( x1 ) || isnan( x1 ) ) {\n\t\tthrow new TypeError( 'invalid argument. Start must be numeric. Value: `' + x1 + '`.' );\n\t}\n\tif ( !isNumber( x2 ) || isnan( x2 ) ) {\n\t\tthrow new TypeError( 'invalid argument. Stop must be numeric. Value: `' + x2 + '`.' );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\tlen = 100;\n\t} else {\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Length must be a nonnegative integer. Value: `' + len + '`.' );\n\t\t}\n\t\tif ( len === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// Calculate the increment:\n\tend = len - 1;\n\td = ( x2-x1 ) / end;\n\n\t// Build the output array...\n\tarr = new Array( len );\n\ttmp = x1;\n\tarr[ 0 ] = tmp;\n\tfor ( i = 1; i < end; i++ ) {\n\t\ttmp += d;\n\t\tarr[ i ] = tmp;\n\t}\n\tarr[ end ] = x2;\n\treturn arr;\n}\n\n\n// EXPORTS //\nexport default linspace;\n","import __var_0__ from './linspace.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced numeric array.\n*\n* @module @stdlib/math/utils/linspace\n*\n* @example\n* var linspace = require( '@stdlib/math/utils/linspace' );\n*\n* var arr = linspace( 0, 100, 6 );\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*/\n\n// MODULES //\nvar linspace = __var_0__;\n\n\n// EXPORTS //\nexport default linspace;\n"]}