{"version":3,"sources":["@stdlib/math/utils/incrspace/lib/incrspace.js","@stdlib/math/utils/incrspace/lib/index.js"],"names":["ceil","__var_0__","isNumber","__var_1__","isPrimitive","isnan","__var_2__","MAX_LENGTH","__var_3__","incrspace","x1","x2","increment","arr","len","inc","i","TypeError","arguments","length","RangeError","push"],"mappings":"kLAyBA,IAAIA,EAAOC,EACPC,EAAWC,EAAUC,YACrBC,EAAQC,EACRC,EAAaC,EAqBjB,SAASC,EAAWC,EAAIC,EAAIC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMd,EAAUQ,IAAQL,EAAOK,GAC9B,MAAM,IAAIO,UAAW,oDAAsDP,EAAK,MAEjF,IAAMR,EAAUS,IAAQN,EAAOM,GAC9B,MAAM,IAAIM,UAAW,mDAAqDN,EAAK,MAEhF,GAAKO,UAAUC,OAAS,EACvBJ,EAAM,OAGN,IAAMb,EADNa,EAAMH,IACmBP,EAAOU,GAC/B,MAAM,IAAIE,UAAW,wDAA0DF,EAAM,MAKvF,IAFAD,EAAMd,GAAQW,EAAGD,GAAOK,IAEbR,EACV,MAAM,IAAIa,WAAY,oEAEvB,GAAKN,GAAO,EACX,MAAO,CAAEJ,GAIV,KAFAG,EAAM,IACFQ,KAAMX,GACJM,EAAI,EAAGA,EAAIF,EAAKE,IACrBH,EAAIQ,KAAMX,EAAMK,EAAIC,GAErB,OAAOH,EC/CL,IAACJ,EAAYR","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/ceil';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/constants/math/uint32-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ceil = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\nvar MAX_LENGTH = __var_3__;\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced numeric array using a provided increment.\n*\n* @param {number} x1 - first array value\n* @param {number} x2 - array element bound\n* @param {number} [increment=1] - increment\n* @throws {TypeError} first argument must be numeric\n* @throws {TypeError} second argument must be numeric\n* @throws {TypeError} third argument must be numeric\n* @throws {RangeError} length of created array must be less than `4294967295` (`2**32 - 1`)\n* @returns {Array} linearly spaced numeric array\n*\n* @example\n* var arr = incrspace( 0, 11, 2 );\n* // returns [ 0, 2, 4, 6, 8, 10 ]\n*/\nfunction incrspace( x1, x2, increment ) {\n\tvar arr;\n\tvar len;\n\tvar inc;\n\tvar i;\n\tif ( !isNumber( x1 ) || isnan( x1 ) ) {\n\t\tthrow new TypeError( 'invalid argument. Start must be numeric. Value: `' + x1 + '`.' );\n\t}\n\tif ( !isNumber( x2 ) || isnan( x2 ) ) {\n\t\tthrow new TypeError( 'invalid argument. Stop must be numeric. Value: `' + x2 + '`.' );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\tinc = 1;\n\t} else {\n\t\tinc = increment;\n\t\tif ( !isNumber( inc ) || isnan( inc ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Increment must be numeric. Value: `' + inc + '`.' );\n\t\t}\n\t}\n\tlen = ceil( ( x2-x1 ) / inc );\n\n\tif ( len > MAX_LENGTH ) {\n\t\tthrow new RangeError( 'invalid arguments. Generated array exceeds maximum array length.' );\n\t}\n\tif ( len <= 1 ) {\n\t\treturn [ x1 ];\n\t}\n\tarr = [];\n\tarr.push( x1 );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tarr.push( x1 + (inc*i) );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\nexport default incrspace;\n","import __var_0__ from './incrspace.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced numeric array using a provided increment.\n*\n* @module @stdlib/math/utils/incrspace\n*\n* @example\n* var incrspace = require( '@stdlib/math/utils/incrspace' );\n*\n* var arr = incrspace( 0, 11, 2 );\n* // returns [ 0, 2, 4, 6, 8, 10 ]\n*/\n\n// MODULES //\nvar incrspace = __var_0__;\n\n\n// EXPORTS //\nexport default incrspace;\n"]}