{"version":3,"sources":["@stdlib/math/utils/logspace/lib/logspace.js","@stdlib/math/utils/logspace/lib/index.js"],"names":["pow","__var_0__","isNumber","__var_1__","isPrimitive","isNonNegativeInteger","__var_2__","isnan","__var_3__","logspace","a","b","len","arr","end","tmp","d","i","TypeError","arguments","length","Array"],"mappings":"qLAyBA,IAAIA,EAAMC,EACNC,EAAWC,EAAUC,YACrBC,EAAuBC,EAAUF,YACjCG,EAAQC,EAoBZ,SAASC,EAAUC,EAAGC,EAAGC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMf,EAAUQ,IAAOH,EAAOG,GAC7B,MAAM,IAAIQ,UAAW,sEAAwER,EAAI,MAElG,IAAMR,EAAUS,IAAOJ,EAAOI,GAC7B,MAAM,IAAIO,UAAW,qEAAuEP,EAAI,MAEjG,GAAKQ,UAAUC,OAAS,EACvBR,EAAM,OACA,CACN,IAAMP,EAAsBO,GAC3B,MAAM,IAAIM,UAAW,mEAAqEN,EAAM,MAEjG,GAAa,IAARA,EACJ,MAAO,GAWT,IANAI,GAAML,EAAED,IADRI,EAAMF,EAAM,GAKZG,EAAML,GADNG,EAAM,IAAIQ,MAAOT,IAEZ,GAAMZ,EAAK,GAAIe,GACdE,EAAI,EAAGA,EAAIH,EAAKG,IACrBF,GAAOC,EACPH,EAAKI,GAAMjB,EAAK,GAAIe,GAGrB,OADAF,EAAKC,GAAQd,EAAK,GAAIW,GACfE,ECjDL,IAACJ,EAAWR","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/pow';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isNonNegativeInteger = __var_2__.isPrimitive;\nvar isnan = __var_3__;\n\n\n// MAIN //\n\n/**\n* Generates a logarithmically spaced numeric array.\n*\n* @param {number} a - exponent of start value\n* @param {number} b - exponent of end value\n* @param {NonNegativeInteger} [len=10] - length of output array\n* @throws {TypeError} first argument must be numeric\n* @throws {TypeError} second argument must be numeric\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Array} logarithmically spaced numeric array\n*\n* @example\n* var arr = logspace( 0, 2, 6 );\n* // returns [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]\n*/\nfunction logspace( a, b, len ) {\n\tvar arr;\n\tvar end;\n\tvar tmp;\n\tvar d;\n\tvar i;\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( 'invalid argument. Exponent of start value must be numeric. Value: `' + a + '`.' );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( 'invalid argument. Exponent of stop value must be numeric. Value: `' + b + '`.' );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\tlen = 10;\n\t} else {\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Length must be a nonnegative integer. Value: `' + len + '`.' );\n\t\t}\n\t\tif ( len === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// Calculate the increment:\n\tend = len - 1;\n\td = ( b-a ) / end;\n\n\t// Build the output array...\n\tarr = new Array( len );\n\ttmp = a;\n\tarr[ 0 ] = pow( 10, tmp );\n\tfor ( i = 1; i < end; i++ ) {\n\t\ttmp += d;\n\t\tarr[ i ] = pow( 10, tmp );\n\t}\n\tarr[ end ] = pow( 10, b );\n\treturn arr;\n}\n\n\n// EXPORTS //\nexport default logspace;\n","import __var_0__ from './logspace.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a logarithmically spaced numeric array.\n*\n* @module @stdlib/math/utils/logspace\n*\n* @example\n* var logspace = require( '@stdlib/math/utils/logspace' );\n*\n* var arr = logspace( 0, 2, 6 );\n* // returns [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]\n*/\n\n// MODULES //\nvar logspace = __var_0__;\n\n\n// EXPORTS //\nexport default logspace;\n"]}