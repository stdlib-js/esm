{"version":3,"sources":["@stdlib/math/special/abs/lib/main.js","@stdlib/math/special/abs/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isndarrayLike","__var_1__","isArrayLikeObject","__var_2__","isSingleSegmentCompatible","__var_3__","isFloat64Array","__var_4__","isFloat32Array","__var_5__","ndarray","__var_6__","buffer","__var_7__","shape2strides","__var_8__","iterationOrder","__var_9__","singletonDimensions","__var_10__","dtype","__var_11__","maxViewBufferIndex","__var_12__","minViewBufferIndex","__var_13__","base","__var_14__","dabs","__var_15__","sabs","__var_16__","gabs","__var_17__","abs","x","strides","offset","order","ndims","shape","data","buf","dt","N","s","y","f","i","length","ctor","iget","TypeError","main"],"mappings":"85BAuCA,IAAIA,EAAWC,EAAUC,YACrBC,EAAgBC,EAChBC,EAAoBC,EACpBC,EAA4BC,EAC5BC,EAAiBC,EACjBC,EAAiBC,EACjBC,EAAUC,EACVC,EAASC,EACTC,EAAgBC,EAChBC,EAAiBC,EACjBC,EAAsBC,EACtBC,EAAQC,EACRC,EAAqBC,EACrBC,EAAqBC,EACrBC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EAoCX,SAASC,EAAKC,GACb,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKnD,EAAUsC,GACd,OAAOT,EAAMS,GAId,GAAKnC,EAAemC,GAAM,CAyBzB,GAvBAS,EAAIT,EAAEc,OACNV,EAAQJ,EAAEI,MACVC,EAAQL,EAAEK,MACVJ,EAAUD,EAAEC,QACZC,EAASF,EAAEE,OACXC,EAAQH,EAAEG,MACVG,EAAON,EAAEM,KAKRM,EADW,aAHZJ,EAAKR,EAAEf,OAIFQ,EACc,YAAPe,EACPb,EAEAE,EAKLc,EAFOpC,EAASiC,EAAIJ,EAEhBW,CADJR,EAAM9B,EAAQ+B,EAAIC,GACHJ,EAAO1B,EAAe0B,EAAOF,GAAS,EAAGA,GAGzC,IAAVC,EAEJ,OADAQ,EAAErC,QAASkC,EAAGH,EAAML,EAAS,GAAKC,EAAQK,EAAK,EAAG,GAC3CI,EAGR,GAAK5B,EAAqBsB,KAAYD,EAAM,EAAI,CAE/C,IAAMS,EAAI,EAAGA,EAAIT,EAAOS,IACvB,GAAoB,IAAfR,EAAOQ,GAAY,CACvBH,EAAIT,EAASY,GACb,MAIF,OADAD,EAAErC,QAASkC,EAAGH,EAAMI,EAAGR,EAAQK,EAAK,EAAG,GAChCI,EAIR,GAAW,KADXD,EAAI7B,EAAgBoB,KACJhC,EAA2BoC,EAAOJ,EAASC,GAO1D,OALCA,EADU,IAANQ,EACKrB,EAAoBgB,EAAOJ,EAASC,GAEpCf,EAAoBkB,EAAOJ,EAASC,GAE9CU,EAAErC,QAASkC,EAAGH,EAAMI,EAAGR,EAAQK,EAAK,EAAG,GAChCI,EAMR,IADAL,EAAO7B,EAAQ+B,EAAIC,GACbI,EAAI,EAAGA,EAAIJ,EAAGI,IACnBP,EAAMO,GAAMb,EAAEgB,KAAMH,GAIrB,OADAD,EAAGH,EAAGH,EAAM,EAAGC,EAAK,GACbI,EAER,IAAM5C,EAAmBiC,GACxB,MAAM,IAAIiB,UAAW,2FAA6FjB,EAAI,MAiBvH,OAfAS,EAAIT,EAAEc,OACNN,EAAKvB,EAAOe,IAAO,UAGnBW,EAAIlC,EAAQ+B,EAAIC,IAIfG,EADIzC,EAAgB6B,GAChBP,EACOpB,EAAgB2B,GACvBL,EAEAE,GAEFY,EAAGT,EAAG,EAAGW,EAAG,GACRA,EC1IL,IAACO,EAAOvD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-ndarray-like';\nimport __var_2__ from '@stdlib/assert/is-array-like-object';\nimport __var_3__ from '@stdlib/ndarray/base/assert/is-single-segment-compatible';\nimport __var_4__ from '@stdlib/assert/is-float64array';\nimport __var_5__ from '@stdlib/assert/is-float32array';\nimport __var_6__ from '@stdlib/ndarray/memoized-ctor';\nimport __var_7__ from '@stdlib/ndarray/base/buffer';\nimport __var_8__ from '@stdlib/ndarray/base/shape2strides';\nimport __var_9__ from '@stdlib/ndarray/base/iteration-order';\nimport __var_10__ from '@stdlib/ndarray/base/singleton-dimensions';\nimport __var_11__ from '@stdlib/ndarray/base/buffer-dtype';\nimport __var_12__ from '@stdlib/ndarray/base/max-view-buffer-index';\nimport __var_13__ from '@stdlib/ndarray/base/min-view-buffer-index';\nimport __var_14__ from '@stdlib/math/base/special/abs';\nimport __var_15__ from '@stdlib/math/strided/special/dabs';\nimport __var_16__ from '@stdlib/math/strided/special/sabs';\nimport __var_17__ from '@stdlib/math/strided/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isndarrayLike = __var_1__;\nvar isArrayLikeObject = __var_2__;\nvar isSingleSegmentCompatible = __var_3__;\nvar isFloat64Array = __var_4__;\nvar isFloat32Array = __var_5__;\nvar ndarray = __var_6__;\nvar buffer = __var_7__;\nvar shape2strides = __var_8__;\nvar iterationOrder = __var_9__;\nvar singletonDimensions = __var_10__;\nvar dtype = __var_11__;\nvar maxViewBufferIndex = __var_12__;\nvar minViewBufferIndex = __var_13__;\nvar base = __var_14__;\nvar dabs = __var_15__;\nvar sabs = __var_16__;\nvar gabs = __var_17__;\n\n\n// MAIN //\n\n/**\n* Computes the absolute value.\n*\n* @param {(ndarray|ArrayLikeObject|number)} x - input value\n* @throws {TypeError} must provide either an ndarray, array-like object, or number\n* @returns {(ndarray|ArrayLikeObject|number)} results\n*\n* @example\n* var y = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n*\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = abs( x );\n* // returns <ndarray>\n*\n* var v = y.get( 0, 1 );\n* // 2.0\n*/\nfunction abs( x ) {\n\tvar strides;\n\tvar offset;\n\tvar order;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar ctor;\n\tvar buf;\n\tvar dt;\n\tvar N;\n\tvar s;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\tif ( isNumber( x ) ) {\n\t\treturn base( x );\n\t}\n\t// TODO: add complex number support; should probably coincide with complex number array support\n\n\tif ( isndarrayLike( x ) ) {\n\t\t// Cache ndarray properties to avoid repeatedly calling ndarray accessors...\n\t\tN = x.length;\n\t\tndims = x.ndims;\n\t\tshape = x.shape;\n\t\tstrides = x.strides;\n\t\toffset = x.offset;\n\t\torder = x.order;\n\t\tdata = x.data;\n\t\tdt = x.dtype;\n\n\t\t// Determine whether we can use a type-optimized implementation...\n\t\tif ( dt === 'float64' ) {\n\t\t\tf = dabs;\n\t\t} else if ( dt === 'float32' ) {\n\t\t\tf = sabs;\n\t\t} else {\n\t\t\tf = gabs;\n\t\t}\n\t\t// Create an output ndarray...\n\t\tctor = ndarray( dt, ndims );\n\t\tbuf = buffer( dt, N );\n\t\ty = ctor( buf, shape, shape2strides( shape, order ), 0, order );\n\n\t\t// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...\n\t\tif ( ndims === 1 ) {\n\t\t\tf.ndarray( N, data, strides[ 0 ], offset, buf, 1, 0 );\n\t\t\treturn y;\n\t\t}\n\t\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarray as being equivalent to a one-dimensional strided array...\n\t\tif ( singletonDimensions( shape ) === ndims-1 ) {\n\t\t\t// Get the stride for the non-singleton dimension...\n\t\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\t\tif ( shape[ i ] !== 1 ) {\n\t\t\t\t\ts = strides[ i ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tf.ndarray( N, data, s, offset, buf, 1, 0 );\n\t\t\treturn y;\n\t\t}\n\t\t// Determine whether we can ignore shape (and strides) and treat `x` as a linear strided array...\n\t\ts = iterationOrder( strides ); // +/-1\n\t\tif ( s !== 0 && isSingleSegmentCompatible( shape, strides, offset ) ) { // Note: equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain iteration order\n\t\t\tif ( s === 1 ) {\n\t\t\t\toffset = minViewBufferIndex( shape, strides, offset );\n\t\t\t} else {\n\t\t\t\toffset = maxViewBufferIndex( shape, strides, offset );\n\t\t\t}\n\t\t\tf.ndarray( N, data, s, offset, buf, 1, 0 );\n\t\t\treturn y;\n\t\t}\n\t\t// At this point, `x` is a non-contiguous n-dimensional array, so we cannot directly use lower-level strided array functionality...\n\n\t\t// TODO: consider cache oblivious iteration, rather than data copy...\n\t\tdata = buffer( dt, N );\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tdata[ i ] = x.iget( i );\n\t\t}\n\t\t// The buffer copy is contiguous so we can now use lower-level strided array functionality...\n\t\tf( N, data, 1, buf, 1 );\n\t\treturn y;\n\t}\n\tif ( !isArrayLikeObject( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide either an ndarray, array-like object, or number. Value: `' + x + '`.' );\n\t}\n\tN = x.length;\n\tdt = dtype( x ) || 'generic';\n\n\t// Create an output array...\n\ty = buffer( dt, N );\n\n\t// Determine whether we can use type-optimized implementations...\n\tif ( isFloat64Array( x ) ) {\n\t\tf = dabs;\n\t} else if ( isFloat32Array( x ) ) {\n\t\tf = sabs;\n\t} else {\n\t\tf = gabs;\n\t}\n\tf( N, x, 1, y, 1 );\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default abs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the absolute value.\n*\n* @module @stdlib/math/special/abs\n*\n* @example\n* var abs = require( '@stdlib/math/special/abs' );\n*\n* var y = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var abs = require( '@stdlib/math/special/abs' );\n*\n* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n*\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray/array' );\n* var abs = require( '@stdlib/math/special/abs' );\n*\n* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = abs( x );\n* // returns <ndarray>\n*\n* var v = y.get( 0, 1 );\n* // 2.0\n*/\n\n// MAIN //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}