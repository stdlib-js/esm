{"version":3,"sources":["@stdlib/math/special/iabs/lib/main.js","@stdlib/math/special/iabs/lib/index.js"],"names":["isndarrayLike","__var_0__","isArrayLikeObject","__var_1__","isSingleSegmentCompatible","__var_2__","isFloat64Array","__var_3__","isFloat32Array","__var_4__","iterationOrder","__var_5__","singletonDimensions","__var_6__","dtype","__var_7__","maxViewBufferIndex","__var_8__","minViewBufferIndex","__var_9__","base","__var_10__","dabs","__var_11__","sabs","__var_12__","gabs","__var_13__","iabs","x","strides","offset","ndims","shape","data","dt","N","s","f","i","length","ndarray","iset","iget","TypeError","main"],"mappings":"guBAmCA,IAAIA,EAAgBC,EAChBC,EAAoBC,EACpBC,EAA4BC,EAC5BC,EAAiBC,EACjBC,EAAiBC,EACjBC,EAAiBC,EACjBC,EAAsBC,EACtBC,EAAQC,EACRC,EAAqBC,EACrBC,EAAqBC,EACrBC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EAsCX,SAASC,EAAMC,GACd,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIJ,GAAKvC,EAAe6B,GAAM,CAmBzB,GAjBAO,EAAIP,EAAEW,OACNR,EAAQH,EAAEG,MACVC,EAAQJ,EAAEI,MACVH,EAAUD,EAAEC,QACZC,EAASF,EAAEE,OACXG,EAAOL,EAAEK,KAKRI,EADW,aAHZH,EAAKN,EAAEf,OAIFQ,EACc,YAAPa,EACPX,EAEAE,EAGU,IAAVM,EAGJ,OAFAK,EAAIP,EAAS,GACbQ,EAAEG,QAASL,EAAGF,EAAMG,EAAGN,EAAQG,EAAMG,EAAGN,GACjCF,EAGR,GAAKjB,EAAqBqB,KAAYD,EAAM,EAAI,CAE/C,IAAMO,EAAI,EAAGA,EAAIP,EAAOO,IACvB,GAAoB,IAAfN,EAAOM,GAAY,CACvBF,EAAIP,EAASS,GACb,MAIF,OADAD,EAAEG,QAASL,EAAGF,EAAMG,EAAGN,EAAQG,EAAMG,EAAGN,GACjCF,EAIR,GAAW,KADXQ,EAAI3B,EAAgBoB,KACJ1B,EAA2B6B,EAAOH,EAASC,GAO1D,OALCA,EADU,IAANM,EACKnB,EAAoBe,EAAOH,EAASC,GAEpCf,EAAoBiB,EAAOH,EAASC,GAE9CO,EAAEG,QAASL,EAAGF,EAAMG,EAAGN,EAAQG,EAAMG,EAAGN,GACjCF,EAKR,IAAMU,EAAI,EAAGA,EAAIH,EAAGG,IACnBV,EAAEa,KAAMH,EAAGnB,EAAMS,EAAEc,KAAMJ,KAE1B,OAAOV,EAER,IAAM3B,EAAmB2B,GACxB,MAAM,IAAIe,UAAW,kFAAoFf,EAAI,MAc9G,OAZAO,EAAIP,EAAEW,OACNL,EAAKrB,EAAOe,IAAO,WAIlBS,EADIhC,EAAgBuB,GAChBP,EACOd,EAAgBqB,GACvBL,EAEAE,GAEFU,EAAGP,EAAG,EAAGA,EAAG,GACRA,EClHL,IAACgB,EAAO5C","sourcesContent":["import __var_0__ from '@stdlib/assert/is-ndarray-like';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/ndarray/base/assert/is-single-segment-compatible';\nimport __var_3__ from '@stdlib/assert/is-float64array';\nimport __var_4__ from '@stdlib/assert/is-float32array';\nimport __var_5__ from '@stdlib/ndarray/base/iteration-order';\nimport __var_6__ from '@stdlib/ndarray/base/singleton-dimensions';\nimport __var_7__ from '@stdlib/ndarray/base/buffer-dtype';\nimport __var_8__ from '@stdlib/ndarray/base/max-view-buffer-index';\nimport __var_9__ from '@stdlib/ndarray/base/min-view-buffer-index';\nimport __var_10__ from '@stdlib/math/base/special/abs';\nimport __var_11__ from '@stdlib/math/strided/special/dabs';\nimport __var_12__ from '@stdlib/math/strided/special/sabs';\nimport __var_13__ from '@stdlib/math/strided/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isndarrayLike = __var_0__;\nvar isArrayLikeObject = __var_1__;\nvar isSingleSegmentCompatible = __var_2__;\nvar isFloat64Array = __var_3__;\nvar isFloat32Array = __var_4__;\nvar iterationOrder = __var_5__;\nvar singletonDimensions = __var_6__;\nvar dtype = __var_7__;\nvar maxViewBufferIndex = __var_8__;\nvar minViewBufferIndex = __var_9__;\nvar base = __var_10__;\nvar dabs = __var_11__;\nvar sabs = __var_12__;\nvar gabs = __var_13__;\n\n\n// MAIN //\n\n/**\n* Computes the absolute value in-place.\n*\n* @param {(ndarray|ArrayLikeObject)} x - input value\n* @throws {TypeError} must provide either an ndarray or array-like object\n* @returns {(ndarray|ArrayLikeObject)} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n*\n* var y = iabs( x );\n* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]\n*\n* var bool = ( y === x );\n* // returns true\n*\n* @example\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = iabs( x );\n* // returns <ndarray>\n*\n* var v = y.get( 0, 1 );\n* // 2.0\n*\n* var bool = ( y === x );\n* // returns true\n*/\nfunction iabs( x ) {\n\tvar strides;\n\tvar offset;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar dt;\n\tvar N;\n\tvar s;\n\tvar f;\n\tvar i;\n\n\t// TODO: add complex number array support\n\n\tif ( isndarrayLike( x ) ) {\n\t\t// Cache ndarray properties to avoid repeatedly calling ndarray accessors...\n\t\tN = x.length;\n\t\tndims = x.ndims;\n\t\tshape = x.shape;\n\t\tstrides = x.strides;\n\t\toffset = x.offset;\n\t\tdata = x.data;\n\t\tdt = x.dtype;\n\n\t\t// Determine whether we can use a type-optimized implementation...\n\t\tif ( dt === 'float64' ) {\n\t\t\tf = dabs;\n\t\t} else if ( dt === 'float32' ) {\n\t\t\tf = sabs;\n\t\t} else {\n\t\t\tf = gabs;\n\t\t}\n\t\t// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...\n\t\tif ( ndims === 1 ) {\n\t\t\ts = strides[ 0 ];\n\t\t\tf.ndarray( N, data, s, offset, data, s, offset );\n\t\t\treturn x;\n\t\t}\n\t\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarray as being equivalent to a one-dimensional strided array...\n\t\tif ( singletonDimensions( shape ) === ndims-1 ) {\n\t\t\t// Get the stride for the non-singleton dimension...\n\t\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\t\tif ( shape[ i ] !== 1 ) {\n\t\t\t\t\ts = strides[ i ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tf.ndarray( N, data, s, offset, data, s, offset );\n\t\t\treturn x;\n\t\t}\n\t\t// Determine whether we can ignore shape (and strides) and treat `x` as a linear strided array...\n\t\ts = iterationOrder( strides ); // +/-1\n\t\tif ( s !== 0 && isSingleSegmentCompatible( shape, strides, offset ) ) { // Note: equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain iteration order\n\t\t\tif ( s === 1 ) {\n\t\t\t\toffset = minViewBufferIndex( shape, strides, offset );\n\t\t\t} else {\n\t\t\t\toffset = maxViewBufferIndex( shape, strides, offset );\n\t\t\t}\n\t\t\tf.ndarray( N, data, s, offset, data, s, offset );\n\t\t\treturn x;\n\t\t}\n\t\t// At this point, `x` is a non-contiguous n-dimensional array, so we cannot directly use lower-level strided array functionality...\n\n\t\t// TODO: consider cache oblivious iteration, rather than manual iteration in order to avoid method call overhead...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tx.iset( i, base( x.iget( i ) ) );\n\t\t}\n\t\treturn x;\n\t}\n\tif ( !isArrayLikeObject( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide either an ndarray or array-like object. Value: `' + x + '`.' );\n\t}\n\tN = x.length;\n\tdt = dtype( x ) || 'generic';\n\n\t// Determine whether we can use type-optimized implementations...\n\tif ( isFloat64Array( x ) ) {\n\t\tf = dabs;\n\t} else if ( isFloat32Array( x ) ) {\n\t\tf = sabs;\n\t} else {\n\t\tf = gabs;\n\t}\n\tf( N, x, 1, x, 1 );\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default iabs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the absolute value in-place.\n*\n* @module @stdlib/math/special/iabs\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var iabs = require( '@stdlib/math/special/iabs' );\n*\n* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n*\n* var y = iabs( x );\n* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]\n*\n* var bool = ( y === x );\n* // returns true\n*\n* @example\n* var array = require( '@stdlib/ndarray/array' );\n* var iabs = require( '@stdlib/math/special/iabs' );\n*\n* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = iabs( x );\n* // returns <ndarray>\n*\n* var v = y.get( 0, 1 );\n* // 2.0\n*\n* var bool = ( y === x );\n* // returns true\n*/\n\n// MAIN //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}