{"version":3,"sources":["@stdlib/math/iter/tools/map/lib/validate.js","@stdlib/math/iter/tools/map/lib/main.js","@stdlib/math/iter/tools/map/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","validate","opts","options","invalid","TypeError","setReadOnly","isFunction","isIteratorLike","__var_2__","isNumber","__var_3__","isPrimitive","__var_4__","iteratorSymbol","__var_5__","__var_6__","iterMap","iterator","fcn","iter","err","FLG","NaN","arguments","length","next","end","factory","out","v","done","value"],"mappings":"oXAuBA,IAAIA,EAAgBC,EAChBC,EAAaC,EAwBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAeM,IAGhBJ,EAAYI,EAAS,aACzBD,EAAKE,QAAUD,EAAQC,SAEjB,MALC,IAAIC,UAAW,iEAAmEF,EAAU,MCtBrG,IAAIG,EAAcR,EACdS,EAAaP,EACbQ,EAAiBC,EACjBC,EAAWC,EAAUC,YACrBb,EAAac,EACbC,EAAiBC,EACjBd,EAAWe,EA2Cf,SAASC,EAASC,EAAUC,EAAKhB,GAChC,IAAID,EACAkB,EACAC,EACAC,EACJ,IAAMd,EAAgBU,GACrB,MAAM,IAAIb,UAAW,2FAA6Fa,EAAW,MAE9H,IAAMX,EAAYY,GACjB,MAAM,IAAId,UAAW,iEAAmEc,EAAM,MAK/F,GAHAjB,EAAO,CACNE,QAAWmB,KAEPC,UAAUC,OAAS,IACvBJ,EAAMpB,EAAUC,EAAMC,IAErB,MAAMkB,EAYR,OAPAf,EADAc,EAAO,GACY,OAAQM,GAC3BpB,EAAac,EAAM,SAAUO,GAGxBb,GAAkBP,EAAYW,EAAUJ,KAC5CR,EAAac,EAAMN,EAAgBc,GAE7BR,EAQP,SAASM,IACR,IAAIG,EACAC,EACJ,OAAKR,EACG,CACNS,MAAQ,IAGVD,EAAIZ,EAASQ,QACNK,MACNT,GAAM,EACNO,EAAM,GACD9B,EAAY+B,EAAG,WACnBD,EAAIG,MAAUtB,EAAUoB,EAAEE,OAAYb,EAAKW,EAAEE,OAAU9B,EAAKE,SAE7DyB,EAAIE,MAAO,EACJF,GAED,CACNG,MAAWtB,EAAUoB,EAAEE,OAAYb,EAAKW,EAAEE,OAAU9B,EAAKE,QACzD2B,MAAQ,GAWV,SAASJ,EAAKK,GAEb,OADAV,GAAM,EACDE,UAAUC,OACP,CACNO,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,OAAOX,EAASC,EAAUJ,KAAoBK,EAAKjB,ICvHlD,IAACgB,EAAWpB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'invalid': NaN\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'invalid' ) ) {\n\t\topts.invalid = options.invalid;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\nimport __var_6__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar isNumber = __var_3__.isPrimitive;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\nvar validate = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which invokes a unary function accepting a single numeric argument for each iterated value.\n*\n* ## Notes\n*\n* -   When invoked, the input function is provided one argument:\n*\n*     -   `value`: iterated value\n*\n* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - function to invoke\n* @param {Options} [options] - options\n* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var sin = require( '@stdlib/math/base/special/sin' );\n*\n* var iter = iterMap( randu(), sin );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterMap( iterator, fcn, options ) {\n\tvar opts;\n\tvar iter;\n\tvar err;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );\n\t}\n\topts = {\n\t\t'invalid': NaN\n\t};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout.value = ( isNumber( v.value ) ) ? fcn( v.value ) : opts.invalid; // eslint-disable-line max-len\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\treturn {\n\t\t\t'value': ( isNumber( v.value ) ) ? fcn( v.value ) : opts.invalid,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterMap( iterator[ iteratorSymbol ](), fcn, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterMap;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which invokes a unary function accepting a single numeric argument for each iterated value.\n*\n* @module @stdlib/math/iter/tools/map\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var sin = require( '@stdlib/math/base/special/sin' );\n* var iterMap = require( '@stdlib/math/iter/tools/map' );\n*\n* var iter = iterMap( randu(), sin );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}