{"version":3,"sources":["@stdlib/math/iter/sequences/integers/lib/validate.js","@stdlib/math/iter/sequences/integers/lib/main.js","@stdlib/math/iter/sequences/integers/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isNonNegativeInteger","__var_2__","isPrimitive","validate","opts","options","iter","TypeError","setReadOnly","iteratorSymbol","FLOAT64_MAX_SAFE_INTEGER","__var_3__","MAX_ITER","iterIntegersSeq","FLG","err","sgn","i","j","arguments","length","next","end","factory","done","value","iterator"],"mappings":"iWAwBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAuBC,EAAUC,YAwBrC,SAASC,EAAUC,EAAMC,GACxB,OAAMT,EAAeS,GAGhBP,EAAYO,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdN,EAAsBK,EAAQC,OAC5B,IAAIC,UAAW,yEAA2EF,EAAQC,KAAO,MAG3G,KARC,IAAIC,UAAW,iEAAmEF,EAAU,MC3BrG,IAAIG,EAAcX,EACdY,EAAiBV,EACjBW,EAA2BT,EAC3BE,EAAWQ,EAKXC,EAAsC,EAA3BF,EAgCf,SAASG,EAAiBR,GACzB,IAAID,EACAE,EACAQ,EACAC,EACAC,EACAC,EACAC,EAKJ,GAHAd,EAAO,CACNE,KAAQM,GAEJO,UAAUC,SACdL,EAAMZ,EAAUC,EAAMC,IAErB,MAAMU,EAgBR,OAbAC,GAAO,EACPC,EAAI,EACJC,EAAI,EAIJV,EADAF,EAAO,GACY,OAAQe,GAC3Bb,EAAaF,EAAM,SAAUgB,GAGxBb,GACJD,EAAaF,EAAMG,EAAgBc,GAE7BjB,EAQP,SAASe,IAER,OADAJ,GAAK,EACAH,GAAOG,EAAIb,EAAKE,KACb,CACNkB,MAAQ,GAGC,IAANP,EACG,CACNQ,MAAS,EACTD,MAAQ,IAILR,EAAM,IACVE,GAAK,GAGC,CACNO,OAFDT,IAAQ,GAEQE,EACfM,MAAQ,IAWV,SAASF,EAAKG,GAEb,OADAX,GAAM,EACDK,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOV,EAAiBT,IC/GvB,IAACsB,EAAW7B","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isNonNegativeInteger = __var_2__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 50\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/symbol/iterator';\nimport __var_2__ from '@stdlib/constants/math/float64-max-safe-integer';\nimport __var_3__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar iteratorSymbol = __var_1__;\nvar FLOAT64_MAX_SAFE_INTEGER = __var_2__;\nvar validate = __var_3__;\n\n\n// VARIABLES //\n\nvar MAX_ITER = FLOAT64_MAX_SAFE_INTEGER * 2;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates an interleaved integer sequence.\n*\n* ## Notes\n*\n* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.\n*\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.iter=18014398509481984] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterIntegersSeq();\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns -1\n*\n* // ...\n*/\nfunction iterIntegersSeq( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar sgn;\n\tvar i;\n\tvar j;\n\n\topts = {\n\t\t'iter': MAX_ITER\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsgn = -1;\n\ti = 0;\n\tj = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 1 ) {\n\t\t\treturn {\n\t\t\t\t'value': 0,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\t// Increment every other iteration...\n\t\tif ( sgn < 0 ) {\n\t\t\tj += 1;\n\t\t}\n\t\tsgn *= -1;\n\t\treturn {\n\t\t\t'value': sgn * j,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterIntegersSeq( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterIntegersSeq;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates an interleaved integer sequence.\n*\n* @module @stdlib/math/iter/sequences/integers\n*\n* @example\n* var iterIntegersSeq = require( '@stdlib/math/iter/sequences/integers' );\n*\n* var iter = iterIntegersSeq();\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns -1\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}