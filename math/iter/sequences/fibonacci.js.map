{"version":3,"sources":["@stdlib/math/iter/sequences/fibonacci/lib/validate.js","@stdlib/math/iter/sequences/fibonacci/lib/main.js","@stdlib/math/iter/sequences/fibonacci/lib/index.js"],"names":["isPlainObject","__var_0__","hasOwnProp","__var_1__","isNonNegativeInteger","__var_2__","isPrimitive","validate","opts","options","TypeError","iter","RangeError","setReadOnly","iteratorSymbol","F0","F1","iterFibonacciSeq","FLG","err","f1","f2","f","i","arguments","length","next","end","factory","done","value","iterator"],"mappings":"4RAwBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAuBC,EAAUC,YAwBrC,SAASC,EAAUC,EAAMC,GACxB,IAAMT,EAAeS,GACpB,OAAO,IAAIC,UAAW,iEAAmED,EAAU,MAEpG,GAAKP,EAAYO,EAAS,QAAW,CAEpC,GADAD,EAAKG,KAAOF,EAAQE,MACdP,EAAsBK,EAAQE,MACnC,OAAO,IAAID,UAAW,yEAA2ED,EAAQE,KAAO,MAEjH,GAAKF,EAAQE,KAAO,GACnB,OAAO,IAAIC,WAAY,8EAAgFH,EAAQE,KAAO,MAGxH,OAAO,KCvCR,IAAIE,EAAcZ,EACda,EAAiBX,EACjBI,EAAWF,EAKXU,EAAK,EACLC,EAAK,EAkCT,SAASC,EAAkBR,GAC1B,IAAID,EACAG,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,GAHAf,EAAO,CACNG,KAAQ,IAEJa,UAAUC,SACdN,EAAMZ,EAAUC,EAAMC,IAErB,MAAMU,EAiBR,OAdAC,EAAKL,EACLM,EAAKL,EACLM,EAAI,EACJC,EAAI,EAIJV,EADAF,EAAO,GACY,OAAQe,GAC3Bb,EAAaF,EAAM,SAAUgB,GAGxBb,GACJD,EAAaF,EAAMG,EAAgBc,GAE7BjB,EAQP,SAASe,IAER,OADAH,GAAK,EACAL,GAAOK,EAAIf,EAAKG,KACb,CACNkB,MAAQ,IAGC,IAANN,EACJD,EAAIP,EACa,IAANQ,EACXD,EAAIN,GAEJM,EAAIF,EAAKC,EACTD,EAAKC,EACLA,EAAKC,GAEC,CACNQ,MAASR,EACTO,MAAQ,IAWV,SAASF,EAAKG,GAEb,OADAZ,GAAM,EACDM,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOX,EAAkBT,IChHxB,IAACuB,EAAW9B","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPlainObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isNonNegativeInteger = __var_2__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 50\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t}\n\t\tif ( options.iter > 79 ) {\n\t\t\treturn new RangeError( 'invalid option. `iter` option must be less than or equal to `79`. Option: `' + options.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/symbol/iterator';\nimport __var_2__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar iteratorSymbol = __var_1__;\nvar validate = __var_2__;\n\n\n// VARIABLES //\n\nvar F0 = 0;\nvar F1 = 1;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Fibonacci sequence.\n*\n* ## Notes\n*\n* -   The returned iterator can only generate the first `79` Fibonacci numbers, as larger Fibonacci numbers cannot be safely represented in double-precision floating-point format.\n* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.\n*\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.iter=79] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `iter` option must be less than or equal to `79`\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterFibonacciSeq();\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 1\n*\n* // ...\n*/\nfunction iterFibonacciSeq( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar f1;\n\tvar f2;\n\tvar f;\n\tvar i;\n\n\topts = {\n\t\t'iter': 79\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tf1 = F0;\n\tf2 = F1;\n\tf = 0;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 1 ) {\n\t\t\tf = F0;\n\t\t} else if ( i === 2 ) {\n\t\t\tf = F1;\n\t\t} else {\n\t\t\tf = f1 + f2;\n\t\t\tf1 = f2;\n\t\t\tf2 = f;\n\t\t}\n\t\treturn {\n\t\t\t'value': f,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFibonacciSeq( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterFibonacciSeq;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Fibonacci sequence.\n*\n* @module @stdlib/math/iter/sequences/fibonacci\n*\n* @example\n* var iterFibonacciSeq = require( '@stdlib/math/iter/sequences/fibonacci' );\n*\n* var iter = iterFibonacciSeq();\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 1\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}