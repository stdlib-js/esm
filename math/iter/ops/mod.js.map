{"version":3,"sources":["@stdlib/math/iter/ops/mod/lib/main.js","@stdlib/math/iter/ops/mod/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isNumber","__var_2__","isPrimitive","isIteratorLike","__var_3__","hasOwnProp","__var_4__","iteratorSymbol","__var_5__","iterMod","iterators","types","niter","iter","FLG","i","arguments","length","Error","push","TypeError","next","end","factory","r","v","done","value","NaN","args","apply"],"mappings":"gUA2BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAsCrB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAH,EAAQI,UAAUC,QACL,EACZ,MAAM,IAAIC,MAAO,qEAIlB,IAFAR,EAAY,GACZC,EAAQ,GACFI,EAAI,EAAGA,EAAIH,EAAOG,IAEvB,GADAL,EAAUS,KAAMH,UAAWD,IACtBZ,EAAgBa,UAAWD,IAC/BJ,EAAMQ,KAAM,OACN,CAAA,IAAKnB,EAAUgB,UAAWD,IAGhC,MAAM,IAAIK,UAAW,gGAAkGL,EAAI,cAAgBC,UAAWD,GAAM,MAF5JJ,EAAMQ,KAAM,GAWd,GAJAvB,EADAiB,EAAO,GACY,OAAQQ,GAC3BzB,EAAaiB,EAAM,SAAUS,GAGxBf,EAAiB,CACrB,IAAMQ,EAAI,EAAGA,EAAIH,EAAOG,IACvB,GAAKJ,EAAOI,KAAQjB,EAAYY,EAAWK,GAAKR,IAAqB,CACpEO,GAAM,EACN,MAGIA,GACLlB,EAAaiB,EAAMN,EAAgBgB,GAKrC,OAFAT,EAAM,EACNC,EAAI,EACGF,EAQP,SAASQ,IACR,IAAIG,EACAC,EACAV,EACJ,GAAKD,EACJ,MAAO,CACNY,MAAQ,GAIV,GADAZ,EAAM,EACDH,EAAO,GAEX,IADAc,EAAIf,EAAW,GAAIW,QACZK,KAAO,CAEb,GADAZ,GAAO,GACFT,EAAYoB,EAAG,SAOnB,MAAO,CACNC,MAAQ,GANRF,EADuB,iBAAZC,EAAEE,MACTF,EAAEE,MAEFC,SAQNJ,EAD8B,iBAAZC,EAAEE,MAChBF,EAAEE,MAEFC,SAGLJ,EAAId,EAAW,GAEhB,IAAMK,EAAI,EAAGA,EAAIH,EAAOG,IACvB,GAAKJ,EAAOI,GAAM,CAEjB,IADAU,EAAIf,EAAWK,GAAIM,QACZK,KAAO,CAEb,GADAZ,GAAO,EACFT,EAAYoB,EAAG,SAAY,CACP,iBAAZA,EAAEE,MACbH,GAAKC,EAAEE,MAEPH,EAAII,IAEL,SAED,MAAO,CACNF,MAAQ,GAGc,iBAAZD,EAAEE,MACbH,GAAKC,EAAEE,MAEPH,EAAII,SAGLJ,GAAKd,EAAWK,GAGlB,MAAO,CACNY,MAASH,EACTE,MAAQ,GAWV,SAASJ,EAAKK,GAEb,OADAb,EAAM,EACDE,UAAUC,OACP,CACNU,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,IAAIM,EACAd,EAGJ,IADAc,EAAO,GACDd,EAAI,EAAGA,EAAIH,EAAOG,IAClBJ,EAAOI,GACXc,EAAKV,KAAMT,EAAWK,GAAKR,MAE3BsB,EAAKV,KAAMT,EAAWK,IAGxB,OAAON,EAAQqB,MAAO,KAAMD,IClL3B,IAACpB,EAAUZ","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isNumber = __var_2__.isPrimitive;\nvar isIteratorLike = __var_3__;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which performs an element-wise modulo operation of two or more iterators.\n*\n* ## Notes\n*\n* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.\n* -   If an iterated value is non-numeric (including `NaN`), the returned iterator returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.\n* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.\n* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...(Iterator|number)} iterator - subsequent iterators\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var it1 = array2iterator( [ 3.0, 2.0 ] );\n* var it2 = array2iterator( [ 1.0, 4.0 ] );\n*\n* var iter = iterMod( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 2.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterMod() {\n\tvar iterators;\n\tvar types;\n\tvar niter;\n\tvar iter;\n\tvar FLG;\n\tvar i;\n\n\tniter = arguments.length;\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide two or more iterators.' );\n\t}\n\titerators = [];\n\ttypes = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\titerators.push( arguments[ i ] );\n\t\tif ( isIteratorLike( arguments[ i ] ) ) {\n\t\t\ttypes.push( 1 );\n\t\t} else if ( isNumber( arguments[ i ] ) ) {\n\t\t\ttypes.push( 0 );\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );\n\t\t}\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] && !isFunction( iterators[ i ][ iteratorSymbol ] ) ) { // eslint-disable-line max-len\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tFLG = 0;\n\ti = 0;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar r;\n\t\tvar v;\n\t\tvar i;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tFLG = 0;\n\t\tif ( types[ 0 ] ) {\n\t\t\tv = iterators[ 0 ].next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG += 1;\n\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\tif ( typeof v.value === 'number' ) {\n\t\t\t\t\t\tr = v.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr = NaN;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else if ( typeof v.value === 'number' ) {\n\t\t\t\tr = v.value;\n\t\t\t} else {\n\t\t\t\tr = NaN;\n\t\t\t}\n\t\t} else {\n\t\t\tr = iterators[ 0 ];\n\t\t}\n\t\tfor ( i = 1; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\tv = iterators[ i ].next();\n\t\t\t\tif ( v.done ) {\n\t\t\t\t\tFLG += 1;\n\t\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\t\tif ( typeof v.value === 'number' ) {\n\t\t\t\t\t\t\tr %= v.value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr = NaN;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif ( typeof v.value === 'number' ) {\n\t\t\t\t\tr %= v.value;\n\t\t\t\t} else {\n\t\t\t\t\tr = NaN;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr %= iterators[ i ];\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': r,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = 1;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t\t} else {\n\t\t\t\targs.push( iterators[ i ] );\n\t\t\t}\n\t\t}\n\t\treturn iterMod.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterMod;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which performs an element-wise modulo operation of two or more iterators.\n*\n* @module @stdlib/math/iter/ops/mod\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterMod = require( '@stdlib/math/iter/ops/mod' );\n*\n* var it1 = array2iterator( [ 3.0, 2.0 ] );\n* var it2 = array2iterator( [ 1.0, 4.0 ] );\n*\n* var iter = iterMod( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 2.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterMod = __var_0__;\n\n\n// EXPORTS //\nexport default iterMod;\n"]}