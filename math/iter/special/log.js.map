{"version":3,"sources":["@stdlib/math/iter/special/log/lib/main.js","@stdlib/math/iter/special/log/lib/index.js"],"names":["iterMap2","__var_0__","log","__var_1__","iterLog","x","b","iterator"],"mappings":"6EAuBA,IAAIA,EAAWC,EACXC,EAAMC,EAyCV,SAASC,EAASC,EAAGC,GACpB,OAAON,EAAUK,EAAGC,EAAGJ,GClBrB,IAACK,EAAWN","sourcesContent":["import __var_0__ from '@stdlib/math/iter/tools/map2';\nimport __var_1__ from '@stdlib/math/base/special/log';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar iterMap2 = __var_0__;\nvar log = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes the base `b` logarithm.\n*\n* ## Notes\n*\n* -   For negative `b` or `x` iterated values, the returned iterator returns `NaN`.\n* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.\n* -   If an iterated value is non-numeric (including `NaN`), the returned iterator returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.\n* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.\n* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.\n*\n* @param {(Iterator|number)} x - input iterator\n* @param {(Iterator|number)} b - input iterator\n* @throws {TypeError} first argument must be either an iterator protocol-compliant object or a number\n* @throws {TypeError} second argument must be either an iterator protocol-compliant object or a number\n* @returns {Iterator} iterator\n*\n* @example\n* var uniform = require( '@stdlib/random/iter/uniform' );\n*\n* var x = uniform( 0.0, 100.0 );\n* var y = uniform( 0.0, 10.0 );\n*\n* var iter = iterLog( x, y );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterLog( x, b ) {\n\treturn iterMap2( x, b, log );\n}\n\n\n// EXPORTS //\nexport default iterLog;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes the base `b` logarithm.\n*\n* @module @stdlib/math/iter/special/log\n*\n* @example\n* var uniform = require( '@stdlib/random/iter/uniform' );\n* var iterLog = require( '@stdlib/math/iter/special/log' );\n*\n* var x = uniform( 0.0, 100.0 );\n* var y = uniform( 0.0, 10.0 );\n*\n* var iter = iterLog( x, y );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}