{"version":3,"sources":["@stdlib/math/iter/special/acoversin/lib/main.js","@stdlib/math/iter/special/acoversin/lib/index.js"],"names":["iterMap","__var_0__","acoversin","__var_1__","iterAcoversin","iterator"],"mappings":"kFAuBA,IAAIA,EAAUC,EACVC,EAAYC,EAiChB,SAASC,EAAeC,GACvB,OAAOL,EAASK,EAAUH,GCbxB,IAACG,EAAWJ","sourcesContent":["import __var_0__ from '@stdlib/math/iter/tools/map';\nimport __var_1__ from '@stdlib/math/base/special/acoversin';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar iterMap = __var_0__;\nvar acoversin = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes the inverse coversed sine.\n*\n* ## Notes\n*\n* -   The domain of inverse coversed sine is restricted to `[0,2]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.\n* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator protocol-compliant object\n* @returns {Iterator} iterator\n*\n* @example\n* var uniform = require( '@stdlib/random/iter/uniform' );\n*\n* var iter = iterAcoversin( uniform( 0.0, 2.0 ) );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterAcoversin( iterator ) {\n\treturn iterMap( iterator, acoversin );\n}\n\n\n// EXPORTS //\nexport default iterAcoversin;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes the inverse coversed sine.\n*\n* @module @stdlib/math/iter/special/acoversin\n*\n* @example\n* var uniform = require( '@stdlib/random/iter/uniform' );\n* var iterAcoversin = require( '@stdlib/math/iter/special/acoversin' );\n*\n* var iter = iterAcoversin( uniform( 0.0, 2.0 ) );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}