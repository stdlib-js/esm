{"version":3,"sources":["@stdlib/math/base/special/gamma-delta-ratio/lib/gamma_delta_ratio_lanczos.js","@stdlib/math/base/special/gamma-delta-ratio/lib/gamma_delta_ratio.js","@stdlib/math/base/special/gamma-delta-ratio/lib/index.js"],"names":["lanczosSum","__var_0__","gamma","__var_1__","log1p","__var_2__","abs","__var_3__","exp","__var_4__","pow","__var_5__","EPSILON","__var_6__","E","__var_7__","G","__var_8__","MAX_FACTORIAL","FACTORIAL_169","gammaDeltaRatioLanczos","z","delta","result","ratio","zgh","floor","factorial","gammaDeltaRatio","idelta","iz"],"mappings":"4YA8CA,IAAIA,EAAaC,EACbC,EAAQC,EACRC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAUC,EACVC,EAAIC,EACJC,EAAIC,EAKJC,EAAgB,IAChBC,EAAgB,qBAwBpB,SAASC,EAAwBC,EAAGC,GACnC,IAAIC,EACAC,EACAC,EAEJ,OAAKJ,EAAIT,EACHU,EAAQJ,GACZM,EAAQJ,EAAwBE,EAAOJ,EAAcI,GACrDE,GAASH,EAEF,GADPG,GAASL,IAGH,GAAQE,EAAInB,EAAOmB,EAAEC,KAE7BG,EAAMJ,EAAIL,EAAI,GACTK,EAAIC,IAAUD,EAEjBE,EADIjB,EAAIgB,GAAS,GACRd,GAAO,GAAIa,GAAMjB,EAAOkB,EAAMG,IAE9B,GAITF,EADIjB,EAAIgB,GAAS,GACRd,GAAO,GAAIa,GAAMjB,EAAOkB,EAAMG,IAE9Bf,EAAKe,GAAOA,EAAIH,GAAQD,EAAE,IAGpCE,GAAUvB,EAAYqB,GAAMrB,EAAYqB,EAAIC,IAE7CC,GAAUb,EAAKI,GAAMW,EAAIH,GAASA,ICxEnC,IAAIhB,EAAML,EACNyB,EAAQvB,EACRD,EAAQG,EACRsB,EAAYpB,EACZa,EAAyBX,EAKzBS,EAAgB,IAgCpB,SAASU,EAAiBP,EAAGC,GAC5B,IAAIC,EACAM,EACAC,EAEJ,GAAKT,GAAK,GAAOA,EAAIC,GAAS,EAE7B,OAAOpB,EAAOmB,GAAMnB,EAAOmB,EAAIC,GAGhC,IADAO,EAASH,EAAOJ,MACAA,EAAQ,CAEvB,IADAQ,EAAKJ,EAAOL,MACAA,GAENA,GAAKH,GAAmBG,EAAIC,GAASJ,EACzC,OAAOS,EAAWG,EAAK,GAAQH,EAAWE,EAASC,EAAK,GAG1D,GAAKxB,EAAIgB,GAAS,GAAO,CAExB,GAAe,IAAVA,EACJ,OAAO,EAER,GAAKA,EAAQ,EAAM,CAIlB,IAFAC,EADAF,GAAK,EAELC,GAAS,EACS,IAAVA,GAEPC,GADAF,GAAK,EAELC,GAAS,EAEV,OAAOC,EAIR,IAFAA,EAAS,EAAMF,EACfC,GAAS,EACS,IAAVA,GAEPC,GADAF,GAAK,EAELC,GAAS,EAEV,OAAOC,GAGT,OAAOH,EAAwBC,EAAGC,GCvFhC,IAACM,EAAkB3B","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/gamma-lanczos-sum';\nimport __var_1__ from '@stdlib/math/base/special/gamma';\nimport __var_2__ from '@stdlib/math/base/special/log1p';\nimport __var_3__ from '@stdlib/math/base/special/abs';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/pow';\nimport __var_6__ from '@stdlib/constants/math/float64-eps';\nimport __var_7__ from '@stdlib/constants/math/float64-e';\nimport __var_8__ from '@stdlib/constants/math/float64-gamma-lanczos-g';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar lanczosSum = __var_0__;\nvar gamma = __var_1__;\nvar log1p = __var_2__;\nvar abs = __var_3__;\nvar exp = __var_4__;\nvar pow = __var_5__;\nvar EPSILON = __var_6__;\nvar E = __var_7__;\nvar G = __var_8__;\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\nvar FACTORIAL_169 = 4.269068009004705e+304;\n\n\n// MAIN //\n\n/**\n* Calculates the ratio of two gamma functions via Lanczos approximation.\n*\n* ## Notes\n*\n* -   When \\\\( z < \\epsilon \\\\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:\n*\n*     ```tex\n*     \\begin{align*}\n*     G(z) / G(L) &= 1 / (z \\cdot G(L)) ; z < \\eps, L = z + \\delta = \\delta \\\\\n*     z * G(L) &= z * G(lim) \\cdot (G(L)/G(lim)) ; lim = \\text{largest factorial}\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*/\nfunction gammaDeltaRatioLanczos( z, delta ) {\n\tvar result;\n\tvar ratio;\n\tvar zgh;\n\n\tif ( z < EPSILON ) {\n\t\tif ( delta > MAX_FACTORIAL ) {\n\t\t\tratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );\n\t\t\tratio *= z;\n\t\t\tratio *= FACTORIAL_169;\n\t\t\treturn 1.0 / ratio;\n\t\t}\n\t\treturn 1.0 / ( z * gamma( z+delta ) );\n\t}\n\tzgh = z + G - 0.5;\n\tif ( z + delta === z ) {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ) );\n\t\t} else {\n\t\t\tresult = 1.0;\n\t\t}\n\t} else {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ));\n\t\t} else {\n\t\t\tresult = pow( zgh / (zgh+delta), z-0.5 );\n\t\t}\n\t\t// Split up the calculation to avoid spurious overflow:\n\t\tresult *= lanczosSum( z ) / lanczosSum( z + delta );\n\t}\n\tresult *= pow( E / ( zgh+delta ), delta );\n\treturn result;\n}\n\n\n// EXPORTS //\nexport default gammaDeltaRatioLanczos;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/floor';\nimport __var_2__ from '@stdlib/math/base/special/gamma';\nimport __var_3__ from '@stdlib/math/base/special/factorial';\nimport __var_4__ from './gamma_delta_ratio_lanczos.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar floor = __var_1__;\nvar gamma = __var_2__;\nvar factorial = __var_3__;\nvar gammaDeltaRatioLanczos = __var_4__;\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Computes the ratio of two gamma functions.\n*\n* ## Notes\n*\n* -   Specifically, the function evaluates\n*\n*     ```tex\n*     \\frac{ \\Gamma( z ) }{ \\Gamma( z + \\delta ) }\n*     ```\n*\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*\n* @example\n* var y = gammaDeltaRatio( 2.0, 3.0 );\n* // returns ~0.042\n*\n* @example\n* var y = gammaDeltaRatio( 4.0, 0.5 );\n* // returns ~0.516\n*\n* @example\n* var y = gammaDeltaRatio( 100.0, 0.0 );\n* // returns 1.0\n*/\nfunction gammaDeltaRatio( z, delta ) {\n\tvar result;\n\tvar idelta;\n\tvar iz;\n\n\tif ( z <= 0.0 || z + delta <= 0.0 ) {\n\t\t// This isn't very sophisticated, or accurate, but it does work:\n\t\treturn gamma( z ) / gamma( z + delta );\n\t}\n\tidelta = floor( delta );\n\tif ( idelta === delta ) {\n\t\tiz = floor( z );\n\t\tif ( iz === z ) {\n\t\t\t// As both `z` and `delta` are integers, see if we can use a table lookup:\n\t\t\tif ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {\n\t\t\t\treturn factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 );\n\t\t\t}\n\t\t}\n\t\tif ( abs(delta) < 20.0 ) {\n\t\t\t// As `delta` is a small integer, we can use a finite product:\n\t\t\tif ( delta === 0.0 ) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\tif ( delta < 0.0 ) {\n\t\t\t\tz -= 1.0;\n\t\t\t\tresult = z;\n\t\t\t\tdelta += 1.0;\n\t\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\t\tz -= 1.0;\n\t\t\t\t\tresult *= z;\n\t\t\t\t\tdelta += 1.0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = 1.0 / z;\n\t\t\tdelta -= 1.0;\n\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\tz += 1.0;\n\t\t\t\tresult /= z;\n\t\t\t\tdelta -= 1.0;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn gammaDeltaRatioLanczos( z, delta );\n}\n\n\n// EXPORTS //\nexport default gammaDeltaRatio;\n","import __var_0__ from './gamma_delta_ratio.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate the ratio of two gamma functions.\n*\n* @module @stdlib/math/base/special/gamma-delta-ratio\n*\n* @example\n* var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );\n*\n* var y = gammaDeltaRatio( 2.0, 3.0 );\n* // returns ~0.042\n*\n* y = gammaDeltaRatio( 4.0, 0.5 );\n* // returns 2.0\n*\n* y = gammaDeltaRatio( 100.0, 0.0 );\n* // returns 1.0\n*/\n\n// MODULES //\nvar gammaDeltaRatio = __var_0__;\n\n\n// EXPORTS //\nexport default gammaDeltaRatio;\n"]}