{"version":3,"sources":["@stdlib/math/base/special/sinpi/lib/sinpi.js","@stdlib/math/base/special/sinpi/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","cos","__var_2__","sin","__var_3__","abs","__var_4__","copysign","__var_5__","PI","__var_6__","sinpi","x","ar","r","NaN"],"mappings":"2OAqCA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EACXC,EAAKC,EA2BT,SAASC,EAAOC,GACf,IAAIC,EACAC,EACJ,OAAKjB,EAAOe,IAGPb,EAAYa,GAFTG,IAUI,KAHZF,EAAKR,EADLS,EAAIF,EAAI,KAIkB,IAAPC,EACXN,EAAU,EAAKO,GAElBD,EAAK,IACFV,EAAKM,EAAGK,GAGXD,EAAK,IAEFN,EAAUN,EAAKQ,GADtBI,EAAK,GAAMA,IACoBC,GAE3BD,EAAK,MACTC,EAAIP,EAAU,EAAKO,GAAMA,EAClBX,EAAKM,EAAGK,IAEXD,EAAK,MAEDN,EAAUN,EAAKQ,GADvBI,GAAM,MAC0BC,IAEjCA,GAAKP,EAAU,EAAKO,GACbX,EAAKM,EAAGK,IC7Db,IAACH,EAAQb","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/special/cos';\nimport __var_3__ from '@stdlib/math/base/special/sin';\nimport __var_4__ from '@stdlib/math/base/special/abs';\nimport __var_5__ from '@stdlib/math/base/special/copysign';\nimport __var_6__ from '@stdlib/constants/math/float64-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar cos = __var_2__;\nvar sin = __var_3__;\nvar abs = __var_4__;\nvar copysign = __var_5__;\nvar PI = __var_6__;\n\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi( x ) {\n\tvar ar;\n\tvar r;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to [0,2))...\n\tr = x % 2.0; // sign preserving\n\tar = abs( r );\n\n\t// If `x` is an integer, the mod is an integer...\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\treturn copysign( 0.0, r );\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sin( PI*r );\n\t}\n\t// In each of the following, we further reduce to [-π/4,π/4)...\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\treturn copysign( cos( PI*ar ), r );\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\treturn sin( PI*r );\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\treturn -copysign( cos( PI*ar ), r );\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sin( PI*r );\n}\n\n\n// EXPORTS //\nexport default sinpi;\n","import __var_0__ from './sinpi.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the value of `sin(πx)`.\n*\n* @module @stdlib/math/base/special/sinpi\n*\n* @example\n* var sinpi = require( '@stdlib/math/base/special/sinpi' );\n*\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* y = sinpi( 0.5 );\n* // returns 1.0\n*\n* y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* y = sinpi( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar sinpi = __var_0__;\n\n\n// EXPORTS //\nexport default sinpi;\n"]}