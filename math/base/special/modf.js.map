{"version":3,"sources":["@stdlib/math/base/special/modf/lib/modf.js","@stdlib/math/base/special/modf/lib/main.js","@stdlib/math/base/special/modf/lib/index.js"],"names":["isnan","__var_0__","toWords","__var_1__","fromWords","__var_2__","PINF","__var_3__","FLOAT64_EXPONENT_BIAS","__var_4__","FLOAT64_HIGH_WORD_EXPONENT_MASK","__var_5__","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK","__var_6__","ALL_ONES","WORDS","modf","out","x","high","low","exp","i","NaN","fcn","arguments","length"],"mappings":"ibA4BA,IAAIA,EAAQC,EACRC,EAAUC,EACVC,EAAYC,EACZC,EAAOC,EACPC,EAAwBC,EACxBC,EAAkCC,EAClCC,EAAqCC,EAMrCC,EAAW,WAGXC,EAAQ,CAAE,EAAK,GAiBnB,SAASC,EAAMC,EAAKC,GACnB,IAAIC,EACAC,EACAC,EACAC,EAGJ,OAAKJ,EAAI,EACHA,EAAI,GACRF,EAAMC,GAAMC,GACZD,EAAK,KAAQ,EACbA,EAAK,KAAQ,EACNA,GAEG,IAANC,GACJD,EAAK,GAAMC,EACXD,EAAK,GAAMC,EACJD,IAERA,EAAK,GAAM,EACXA,EAAK,GAAMC,EACJD,GAEHjB,EAAOkB,IACXD,EAAK,GAAMM,IACXN,EAAK,GAAMM,IACJN,GAEHC,IAAMZ,GACVW,EAAK,GAAMX,EACXW,EAAK,GAAM,EACJA,IAKRf,EAASa,EAAOG,GAChBC,EAAOJ,EAAO,GACdK,EAAML,EAAO,GAGbM,GAAQF,EAAOT,IAAoC,GAAI,GACvDW,GAA6B,EAAtBb,GAGI,GAIc,IAAjBW,GAHPG,EAAKV,GAAsCS,EAAK,GAGjCD,IACdH,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,IAMRK,EAAIlB,EAHJe,IAAUG,EAGW,GAGrBL,EAAK,GAAMK,EACXL,EAAK,GAAMC,EAAII,EACRL,GAGHI,EAAM,IASM,IAAXD,GAHNE,EAAIR,IAAcO,EAAI,MAJrBJ,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,IAcRK,EAAIlB,EAAWe,EAHfC,IAASE,GAMTL,EAAK,GAAMK,EACXL,EAAK,GAAMC,EAAII,EACRL,IC/HR,IAAIO,EAAMvB,EA2BV,SAASe,EAAMC,EAAKC,GACnB,OAA0B,IAArBO,UAAUC,OACPF,EAAK,CAAE,EAAK,GAAOP,GAEpBO,EAAKP,EAAKC,GCPf,IAACF,EAAOf","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/number/float64/base/to-words';\nimport __var_2__ from '@stdlib/number/float64/base/from-words';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\nimport __var_4__ from '@stdlib/constants/math/float64-exponent-bias';\nimport __var_5__ from '@stdlib/constants/math/float64-high-word-exponent-mask'; // eslint-disable-line id-length\nimport __var_6__ from '@stdlib/constants/math/float64-high-word-significand-mask'; // eslint-disable-line id-length\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar toWords = __var_1__;\nvar fromWords = __var_2__;\nvar PINF = __var_3__;\nvar FLOAT64_EXPONENT_BIAS = __var_4__;\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = __var_5__;\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = __var_6__;\n\n\n// VARIABLES //\n\n// 4294967295 => 0xffffffff => 11111111111111111111111111111111\nvar ALL_ONES = 4294967295>>>0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var parts = modf( new Array( 2 ), 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*/\nfunction modf( out, x ) {\n\tvar high;\n\tvar low;\n\tvar exp;\n\tvar i;\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodf( out, -x );\n\t\t\tout[ 0 ] *= -1.0;\n\t\t\tout[ 1 ] *= -1.0;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] = 0.0;\n\t\tout[ 1 ] = x;\n\t\treturn out;\n\t}\n\tif ( isnan( x ) ) {\n\t\tout[ 0 ] = NaN;\n\t\tout[ 1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ 0 ] = PINF;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the high and low words:\n\ttoWords( WORDS, x );\n\thigh = WORDS[ 0 ];\n\tlow = WORDS[ 1 ];\n\n\t// Extract the unbiased exponent from the high word:\n\texp = ((high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20)|0; // asm type annotation\n\texp -= FLOAT64_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**20 = 1048576)...\n\tif ( exp < 20 ) {\n\t\ti = (FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ((high&i)|low) === 0 ) {\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\thigh &= (~i);\n\n\t\t// Generate the integral part:\n\t\ti = fromWords( high, 0 );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ 0 ] = i;\n\t\tout[ 1 ] = x - i;\n\t\treturn out;\n\t}\n\t// Check if `x` can even have a fractional part...\n\tif ( exp > 51 ) {\n\t\t// `x` is integral:\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\ti = ALL_ONES >>> (exp-20);\n\n\t// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...\n\tif ( (low&i) === 0 ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\t// Turn off all the bits which cannot be exponentiated away:\n\tlow &= (~i);\n\n\t// Generate the integral part:\n\ti = fromWords( high, low );\n\n\t// The fractional part is whatever is leftover:\n\tout[ 0 ] = i;\n\tout[ 1 ] = x - i;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default modf;\n","import __var_0__ from './modf.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar fcn = __var_0__;\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var out = new Float64Array( 2 );\n*\n* var parts = modf( out, 3.14 );\n* // returns <Float64Array>[ 3.0, 0.14000000000000012 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\nfunction modf( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0.0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\nexport default modf;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decompose a double-precision floating-point number into integral and fractional parts.\n*\n* @module @stdlib/math/base/special/modf\n*\n* @example\n* var modf = require( '@stdlib/math/base/special/modf' );\n*\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var modf = require( '@stdlib/math/base/special/modf' );\n*\n* var out = new Float64Array( 2 );\n*\n* var parts = modf( out, 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\n\n// MODULES //\nvar modf = __var_0__;\n\n\n// EXPORTS //\nexport default modf;\n"]}