{"version":3,"sources":["@stdlib/math/base/special/flipsign/lib/flipsign.js","@stdlib/math/base/special/flipsign/lib/index.js"],"names":["toWords","__var_0__","getHighWord","__var_1__","fromWords","__var_2__","SIGN_MASK","WORDS","flipsign","x","y","hx","hy"],"mappings":"qLAwBA,IAAIA,EAAUC,EACVC,EAAcC,EACdC,EAAYC,EAMZC,EAAY,WAGZC,EAAQ,CAAE,EAAG,GAoCjB,SAASC,EAAUC,EAAGC,GACrB,IAAIC,EACAC,EAgBJ,OAbAZ,EAASO,EAAOE,GAChBE,EAAKJ,EAAO,GAGZK,EAAKV,EAAaQ,GASXN,EAHPO,GAHAC,GAAMN,EAMgBC,EAAO,ICxC3B,IAACC,EAAWP","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-words';\nimport __var_1__ from '@stdlib/number/float64/base/get-high-word';\nimport __var_2__ from '@stdlib/number/float64/base/from-words';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar toWords = __var_0__;\nvar getHighWord = __var_1__;\nvar fromWords = __var_2__;\n\n\n// VARIABLES //\n\n// 10000000000000000000000000000000 => 2147483648 => 0x80000000\nvar SIGN_MASK = 0x80000000>>>0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = flipsign( -3.14, 10.0 );\n* // returns -3.14\n*\n* @example\n* var z = flipsign( -3.14, -1.0 );\n* // returns 3.14\n*\n* @example\n* var z = flipsign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = flipsign( -3.14, -0.0 );\n* // returns 3.14\n*\n* @example\n* var z = flipsign( -0.0, 1.0 );\n* // returns -0.0\n*\n* @example\n* var z = flipsign( 0.0, -1.0 );\n* // returns -0.0\n*/\nfunction flipsign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords( WORDS, x );\n\thx = WORDS[ 0 ];\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on (if on):\n\thy &= SIGN_MASK;\n\n\t// Flip the sign bit of `x` only when the sign bit of `y` is on:\n\thx ^= hy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\nexport default flipsign;\n","import __var_0__ from './flipsign.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.\n*\n* @module @stdlib/math/base/special/flipsign\n*\n* @example\n* var flipsign = require( '@stdlib/math/base/special/flipsign' );\n*\n* var z = flipsign( -3.14, 10.0 );\n* // returns -3.14\n*\n* z = flipsign( -3.14, -1.0 );\n* // returns 3.14\n*\n* z = flipsign( 1.0, -0.0 );\n* // returns -1.0\n*\n* z = flipsign( -3.14, -0.0 );\n* // returns 3.14\n*\n* z = flipsign( -0.0, 1.0 );\n* // returns -0.0\n*\n* z = flipsign( 0.0, -1.0 );\n* // returns -0.0\n*/\n\n// MODULES //\nvar flipsign = __var_0__;\n\n\n// EXPORTS //\nexport default flipsign;\n"]}