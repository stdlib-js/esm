{"version":3,"sources":["@stdlib/math/base/special/log10/lib/polyval_p.js","@stdlib/math/base/special/log10/lib/polyval_q.js","@stdlib/math/base/special/log10/lib/klog.js","@stdlib/math/base/special/log10/lib/log10.js","@stdlib/math/base/special/log10/lib/index.js"],"names":["evalpoly","x","getHighWord","__var_0__","polyvalP","__var_1__","polyvalQ","__var_2__","HIGH_SIGNIFICAND_MASK","ONE_THIRD","klog","hfsq","t1","hx","f","s","z","R","w","i","j","setHighWord","setLowWord","isnan","__var_3__","BIAS","__var_4__","NINF","__var_5__","__var_6__","TWO54","IVLN10HI","IVLN10LO","LOG10_2HI","LOG10_2LO","HIGH_MAX_NORMAL_EXP","HIGH_MIN_NORMAL_EXP","HIGH_BIASED_EXP_0","log10","hi","k","y","NaN"],"mappings":"4VAsCA,SAASA,EAAUC,GAClB,OAAW,IAANA,EACG,kBAED,kBAAsBA,GAAK,mBAA2B,mBAAJA,GCJ1D,SAASD,EAAUC,GAClB,OAAW,IAANA,EACG,kBAED,kBAAsBA,GAAK,kBAAsBA,GAAK,kBAA0B,mBAAJA,ICJpF,IAAIC,EAAcC,EACdC,EAAWC,EACXC,EAAWC,EAMXC,EAAwB,QAGxBC,EAAY,kBAYhB,SAASC,EAAMT,GACd,IAAIU,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIJ,OAFAP,EAAKX,EAAaD,GAClBa,EAAIb,EAAI,GACDO,EAAyB,EAAEK,GAAQ,EAE9B,IAANC,EACG,EAEDA,EAAIA,GAAOL,EAAUK,EAAK,KAKlCK,GADAN,GAAML,GACI,OAAS,EAEnBY,EAAK,OAAUP,EAAI,EACnBD,GAFAM,GAHAF,GADAD,EAAID,GAAM,EAAMA,IACRC,GAGAC,GAECZ,EAAUc,GAGnBD,EAFKD,EAAIV,EAAUY,GAEVN,GADTO,GAAKC,GAEI,EAECL,IADTJ,EAAO,GAAMG,EAAIA,GACEG,GAAON,EAEpBI,GAAKE,EAAEH,ICvDf,IAAIZ,EAAcC,EACdkB,EAAchB,EACdiB,EAAaf,EACbgB,EAAQC,EACRC,EAAOC,EACPC,EAAOC,EACPlB,EAAOmB,EAKPC,EAAQ,iBACRC,EAAW,kBACXC,EAAW,sBACXC,EAAY,mBACZC,EAAY,qBAGZ1B,EAAwB,QAGxB2B,EAAsB,WAGtBC,EAAsB,QAGtBC,EAAoB,WAmCxB,SAASC,EAAOrC,GACf,IAAIsC,EACA1B,EAEAC,EACAK,EACAqB,EACAC,EACAzB,EAEJ,OAAKO,EAAOtB,IAAOA,EAAI,EACfyC,IAEG,IAANzC,EACG0B,GAGRa,EAAI,GADJ3B,EAAKX,EAAaD,IAIRmC,IAETI,GAAK,GAEL3B,EAAKX,EADLD,GAAK6B,IAGDjB,GAAMsB,EACHlC,EAAIA,GAEZuC,IAAO3B,GAAI,IAAMY,EAAM,EAKvBxB,EAAIoB,EAAapB,GAJjBY,GAAML,IACNW,EAAON,EAAG,OAAS,QAAW,GAGJwB,GAE1BI,EADAD,GAAMrB,GAAG,GAAI,EAEbL,EAAIJ,EAAMT,GAEVsC,EAAKjB,EADLrB,GAAK,EACe,GAEpBe,EAAKyB,EAAEP,GAAgBjC,EAAEa,GAAGkB,GAC5BhB,IAFKf,EAAIsC,EAEEzB,GAAGiB,EAAeQ,EAAGR,GACnBU,EAAER,IClGb,IAACK,EAAQnC","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","import __var_0__ from '@stdlib/number/float64/base/get-high-word';\nimport __var_1__ from './polyval_p.js';\nimport __var_2__ from './polyval_q.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = __var_0__;\nvar polyvalP = __var_1__;\nvar polyvalQ = __var_2__;\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 1/3\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction klog( x ) {\n\tvar hfsq;\n\tvar t1;\n\tvar t2;\n\tvar hx;\n\tvar f;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\thx = getHighWord( x );\n\tf = x - 1.0;\n\tif ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn f * f * ( (ONE_THIRD*f) - 0.5 );\n\t}\n\ts = f / ( 2.0 + f );\n\tz = s * s;\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = (hx - 0x6147a)|0; // asm type annotation\n\tw = z * z;\n\tj = (0x6b851 - hx)|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\treturn ( s * (hfsq+R) ) - hfsq;\n\t}\n\treturn s * (R-f);\n}\n\n\n// EXPORTS //\nexport default klog;\n","import __var_0__ from '@stdlib/number/float64/base/get-high-word';\nimport __var_1__ from '@stdlib/number/float64/base/set-high-word';\nimport __var_2__ from '@stdlib/number/float64/base/set-low-word';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/constants/math/float64-exponent-bias';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\nimport __var_6__ from './klog.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = __var_0__;\nvar setHighWord = __var_1__;\nvar setLowWord = __var_2__;\nvar isnan = __var_3__;\nvar BIAS = __var_4__;\nvar NINF = __var_5__;\nvar klog = __var_6__;\n\n\n// VARIABLES //\n\nvar TWO54 = 1.80143985094819840000e+16;     // 0x43500000, 0x00000000\nvar IVLN10HI = 4.34294481878168880939e-01;  // 0x3fdbcb7b, 0x15200000\nvar IVLN10LO = 2.50829467116452752298e-11;  // 0x3dbb9438, 0xca9aadd5\nvar LOG10_2HI = 3.01029995663611771306e-01; // 0x3FD34413, 0x509F6000\nvar LOG10_2LO = 3.69423907715893078616e-13; // 0x3D59FEF3, 0x11F12B36\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the common logarithm (base ten).\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log10( 4.0 );\n* // returns ~0.602\n*\n* @example\n* var v = log10( 8.0 );\n* // returns ~0.903\n*\n* @example\n* var v = log10( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log10( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = log10( NaN );\n* // returns NaN\n*\n* @example\n* var v = log10( -4.0 );\n* // returns NaN\n*/\nfunction log10( x ) {\n\tvar hi;\n\tvar hx;\n\tvar lo;\n\tvar f;\n\tvar i;\n\tvar k;\n\tvar y;\n\tvar z;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\n\t// Case: 0 < x < 2**-1022\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Subnormal number, scale up `x`...\n\t\tk -= 54|0; // asm type annotation\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ((hx>>20) - BIAS)|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64)&0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += (i>>20)|0; // asm type annotation\n\ty = k;\n\tf = klog( x );\n\tx -= 1;\n\thi = setLowWord( x, 0.0 );\n\tlo = x - hi;\n\tz = (y*LOG10_2LO) + ( (x+f)*IVLN10LO );\n\tz += ( (lo+f)*IVLN10HI ) + ( hi*IVLN10HI );\n\treturn z + ( y*LOG10_2HI );\n}\n\n\n// EXPORTS //\nexport default log10;\n","import __var_0__ from './log10.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the common logarithm (base ten).\n*\n* @module @stdlib/math/base/special/log10\n*\n* @example\n* var log10 = require( '@stdlib/math/base/special/log10' );\n*\n* var v = log10( 100.0 );\n* // returns ~0.602\n*\n* v = log10( 8.0 );\n* // returns ~0.903\n*\n* v = log10( 0.0 );\n* // returns -Infinity\n*\n* v = log10( Infinity );\n* // returns Infinity\n*\n* v = log10( NaN );\n* // returns NaN\n*\n* v = log10( -4.0 );\n* // returns NaN\n*/\n\n// MODULES //\nvar log10 = __var_0__;\n\n\n// EXPORTS //\nexport default log10;\n"]}