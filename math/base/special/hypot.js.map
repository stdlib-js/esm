{"version":3,"sources":["@stdlib/math/base/special/hypot/lib/main.js","@stdlib/math/base/special/hypot/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","PINF","__var_2__","sqrt","__var_3__","hypot","x","y","tmp","NaN"],"mappings":"iKAyBA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAOC,EACPC,EAAOC,EAwBX,SAASC,EAAOC,EAAGC,GAClB,IAAIC,EACJ,OAAKX,EAAOS,IAAOT,EAAOU,GAClBE,IAEHV,EAAYO,IAAOP,EAAYQ,GAC5BN,GAEHK,EAAI,IACRA,GAAKA,GAEDC,EAAI,IACRA,GAAKA,GAEDD,EAAIC,IACRC,EAAMD,EACNA,EAAID,EACJA,EAAIE,GAEM,IAANF,EACG,EAGDA,EAAIH,EAAM,GADjBI,GAAKD,GACqBC,ICnCxB,IAACF,EAAQP","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar PINF = __var_2__;\nvar sqrt = __var_3__;\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse avoiding overflow and underflow.\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( -5.0, 12.0 );\n* // returns 13.0\n*\n* @example\n* var h = hypot( NaN, 12.0 );\n* // returns NaN\n*\n* @example\n* var h = hypot( -0.0, -0.0 );\n* // returns 0.0\n*/\nfunction hypot( x, y ) {\n\tvar tmp;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || isInfinite( y ) ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t}\n\tif ( y < 0.0 ) {\n\t\ty = -y;\n\t}\n\tif ( x < y ) {\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ty /= x;\n\treturn x * sqrt( 1.0 + (y*y) );\n}\n\n\n// EXPORTS //\nexport default hypot;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the hypotenuse avoiding overflow and underflow.\n*\n* @module @stdlib/math/base/special/hypot\n*\n* @example\n* var hypot = require( '@stdlib/math/base/special/hypot' );\n*\n* var h = hypot( -5.0, 12.0 );\n* // returns 13.0\n*\n* h = hypot( NaN, 12.0 );\n* // returns NaN\n*\n* h = hypot( -0.0, -0.0 );\n* // returns 0.0\n*/\n\n// MODULES //\nvar hypot = __var_0__;\n\n\n// EXPORTS //\nexport default hypot;\n"]}