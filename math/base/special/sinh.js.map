{"version":3,"sources":["@stdlib/math/base/special/sinh/lib/rational_pq.js","@stdlib/math/base/special/sinh/lib/sinh.js","@stdlib/math/base/special/sinh/lib/index.js"],"names":["evalrational","x","s1","s2","PINF","__var_0__","NINF","__var_1__","abs","__var_2__","exp","__var_3__","LN2","__var_4__","rateval","__var_5__","MAXLOG","MINLOG","POS_OVERFLOW","NEG_OVERFLOW","LARGE","sinh","a"],"mappings":"6NAuCA,SAASA,EAAcC,GACtB,IACIC,EACAC,EACJ,OAAW,IAANF,EACG,qBAEHA,EAAI,GACFA,EAEDA,IAEK,GACVC,EAA2BD,GAA4BA,IAAiC,iBAALA,EAAtB,oBAA5B,oBAA3B,kBACNE,EAA4BF,GAAK,mBAAsBA,GAA+B,EAAJA,EAArB,oBAAvD,qBAGNC,GADAD,EAAI,EAAMA,IAC6CA,IAAiC,kBAALA,EAAtB,oBAA5B,oBAA3B,iBACNE,EAAK,EAAOF,GAA2BA,GAAK,oBAA2B,mBAALA,GAAhD,oBAEZC,EAAKC,GClBb,IAAIC,EAAOC,EACPC,EAAOC,EACPC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAUC,EAMVC,EAAS,iBAGTC,GAAU,kBAEVC,EAAeF,EAZTH,EAaNM,EAAeF,EAbTJ,EAeNO,EAAQJ,EAfFH,EAkEV,SAASQ,EAAMpB,GACd,IAAIqB,EACJ,OAAW,IAANrB,EACGA,GAERqB,EAAId,EAAKP,GACJA,EAAIiB,GAAgBjB,EAAIkB,EACnBlB,EAAI,EAAQG,EAAOE,EAExBgB,EAAI,EACHA,GAAKF,GACTE,EAAIZ,EAAK,GAAIY,GACbA,GAAK,GAAMA,EACNrB,EAAI,IACRqB,GAAKA,GAECA,IAGRA,EAAK,IADLA,EAAIZ,EAAKY,IACM,GAAIA,EACdrB,EAAI,IACRqB,GAAKA,GAECA,GAGDrB,EAAMA,GADbqB,GAAKA,GACYR,EAASQ,IC9FxB,IAACD,EAAOhB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len\n\t\ts2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","import __var_0__ from '@stdlib/constants/math/float64-pinf';\nimport __var_1__ from '@stdlib/constants/math/float64-ninf';\nimport __var_2__ from '@stdlib/math/base/special/abs';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/constants/math/float64-ln-two';\nimport __var_5__ from './rational_pq.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar PINF = __var_0__;\nvar NINF = __var_1__;\nvar abs = __var_2__;\nvar exp = __var_3__;\nvar LN2 = __var_4__;\nvar rateval = __var_5__;\n\n\n// VARIABLES //\n\n// ln(2^1024)\nvar MAXLOG = 7.09782712893383996843e2;\n\n// ln(2^-1022)\nvar MINLOG = -7.08396418532264106224e2;\n\nvar POS_OVERFLOW = MAXLOG + LN2;\nvar NEG_OVERFLOW = MINLOG - LN2;\n\nvar LARGE = MAXLOG - LN2;\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic sine of a number.\n*\n* ## Method\n*\n* The range is partitioned into two segments. If \\\\( |x| \\le 1 \\\\), we use a rational function of the form\n*\n* ```tex\n* x + x^3 \\frac{\\mathrm{P}(x)}{\\mathrm{Q}(x)}\n* ```\n*\n* Otherwise, the calculation is\n*\n* ```tex\n* \\operatorname{sinh}(x) = \\frac{ e^x - e^{-x} }{2}.\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain   | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |\n*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |\n*\n*\n* @param {number} x - input value (in radians)\n* @returns {number} hyperbolic sine\n*\n* @example\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = sinh( 2.0 );\n* // returns ~3.627\n*\n* @example\n* var v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* @example\n* var v = sinh( NaN );\n* // returns NaN\n*/\nfunction sinh( x ) {\n\tvar a;\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles `+-0`\n\t}\n\ta = abs( x );\n\tif ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {\n\t\treturn ( x > 0.0 ) ? PINF : NINF;\n\t}\n\tif ( a > 1.0 ) {\n\t\tif ( a >= LARGE ) {\n\t\t\ta = exp( 0.5*a );\n\t\t\ta *= 0.5 * a;\n\t\t\tif ( x < 0.0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\ta = exp( a );\n\t\ta = (0.5*a) - (0.5/a);\n\t\tif ( x < 0.0 ) {\n\t\t\ta = -a;\n\t\t}\n\t\treturn a;\n\t}\n\ta *= a;\n\treturn x + ( x*a*rateval( a ) );\n}\n\n\n// EXPORTS //\nexport default sinh;\n","import __var_0__ from './sinh.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the hyperbolic sine of a number.\n*\n* @module @stdlib/math/base/special/sinh\n*\n* @example\n* var sinh = require( '@stdlib/math/base/special/sinh' );\n*\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* v = sinh( 2.0 );\n* // returns ~3.627\n*\n* v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* v = sinh( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar sinh = __var_0__;\n\n\n// EXPORTS //\nexport default sinh;\n"]}