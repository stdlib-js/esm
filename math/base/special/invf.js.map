{"version":3,"sources":["@stdlib/math/base/special/invf/lib/main.js","@stdlib/math/base/special/invf/lib/index.js"],"names":["float64ToFloat32","__var_0__","invf","x"],"mappings":"4DAsBA,IAAIA,EAAmBC,EA+BvB,SAASC,EAAMC,GACd,OAAOH,EAAkB,EAAMG,GCR7B,IAACD,EAAOD","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the multiplicative inverse of a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} multiplicative inverse\n*\n* @example\n* var v = invf( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = invf( 2.0 );\n* // returns 0.5\n*\n* @example\n* var v = invf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = invf( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = invf( NaN );\n* // returns NaN\n*/\nfunction invf( x ) {\n\treturn float64ToFloat32( 1.0 / x );\n}\n\n\n// EXPORTS //\nexport default invf;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the multiplicative inverse of a single-precision floating-point number.\n*\n* @module @stdlib/math/base/special/invf\n*\n* @example\n* var invf = require( '@stdlib/math/base/special/invf' );\n*\n* var v = invf( -1.0 );\n* // returns -1.0\n*\n* v = invf( 2.0 );\n* // returns 0.5\n*\n* v = invf( 0.0 );\n* // returns Infinity\n*\n* v = invf( -0.0 );\n* // returns -Infinity\n*\n* v = invf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar invf = __var_0__;\n\n\n// EXPORTS //\nexport default invf;\n"]}