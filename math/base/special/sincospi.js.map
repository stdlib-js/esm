{"version":3,"sources":["@stdlib/math/base/special/sincospi/lib/sincospi.js","@stdlib/math/base/special/sincospi/lib/main.js","@stdlib/math/base/special/sincospi/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","abs","__var_2__","sincos","__var_3__","floor","__var_4__","PI","__var_5__","copysign","__var_6__","sincospi","out","x","tmp","ix","ar","r","NaN","compute","arguments","length"],"mappings":"gPA4BA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAASC,EACTC,EAAQC,EACRC,EAAKC,EACLC,EAAWC,EA6Bf,SAASC,EAAUC,EAAKC,GACvB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OAAKpB,EAAOgB,IAAOd,EAAYc,IAC9BD,EAAK,GAAMM,IACXN,EAAK,GAAMM,IACJN,GAII,KADZI,EAAKf,EADLgB,EAAIJ,EAAI,KAEkB,IAAPG,GAClBD,EAAKV,EAAOW,GACZJ,EAAK,GAAMH,EAAU,EAAKQ,GAC1BL,EAAK,GAAQG,EAAG,GAAM,GAAO,EAAM,EAC5BH,GAEHI,EAAK,IACFb,EAAQS,EAAKL,EAAGU,GAEnBD,EAAK,KAETb,EAAQS,EAAKL,GADbS,EAAK,GAAMA,IAEXF,EAAMF,EAAK,GACXA,EAAK,GAAMH,EAAUG,EAAK,GAAKK,GAC/BL,EAAK,GAAME,EACJF,GAEHI,EAAK,MACTC,EAAIR,EAAU,EAAKQ,GAAMA,EACzBd,EAAQS,EAAKL,EAAGU,GAChBL,EAAK,KAAQ,EACNA,GAEHI,EAAK,MAETb,EAAQS,EAAKL,GADbS,GAAM,MAENF,EAAMF,EAAK,GACXA,EAAK,IAAOH,EAAUG,EAAK,GAAKK,GAChCL,EAAK,GAAME,EACJF,IAERK,GAAKR,EAAU,EAAKQ,GACbd,EAAQS,EAAKL,EAAGU,ICtFxB,IAAIE,EAAUrB,EAuCd,SAASa,EAAUC,EAAKC,GACvB,OAA0B,IAArBO,UAAUC,OACPF,EAAS,CAAE,EAAK,GAAOP,GAExBO,EAASP,EAAKC,GCXnB,IAACF,EAAWb","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/special/abs';\nimport __var_3__ from '@stdlib/math/base/special/sincos';\nimport __var_4__ from '@stdlib/math/base/special/floor';\nimport __var_5__ from '@stdlib/constants/math/float64-pi';\nimport __var_6__ from '@stdlib/math/base/special/copysign';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar abs = __var_2__;\nvar sincos = __var_3__;\nvar floor = __var_4__;\nvar PI = __var_5__;\nvar copysign = __var_6__;\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - destination array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( out, x ) {\n\tvar tmp;\n\tvar ix;\n\tvar ar;\n\tvar r;\n\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = NaN;\n\t\tout[ 1 ] = NaN;\n\t\treturn out;\n\t}\n\tr = x % 2.0;\n\tar = abs( r );\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\tix = floor( ar );\n\t\tout[ 0 ] = copysign( 0.0, r );\n\t\tout[ 1 ] = ( ix%2 === 1 ) ? -1.0 : 1.0;\n\t\treturn out;\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sincos( out, PI*r );\n\t}\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\tsincos( out, PI*ar );\n\t\ttmp = out[ 0 ];\n\t\tout[ 0 ] = copysign( out[ 1 ], r );\n\t\tout[ 1 ] = tmp;\n\t\treturn out;\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\tsincos( out, PI*r );\n\t\tout[ 1 ] *= -1;\n\t\treturn out;\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\tsincos( out, PI*ar );\n\t\ttmp = out[ 0 ];\n\t\tout[ 0 ] = -copysign( out[ 1 ], r );\n\t\tout[ 1 ] = tmp;\n\t\treturn out;\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sincos( out, PI*r );\n}\n\n\n// EXPORTS //\nexport default sincospi;\n","import __var_0__ from './sincospi.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar compute = __var_0__;\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @param {(Array|TypedArray|Object)} [out] - destination array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincospi( out, 0.0 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction sincospi( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn compute( [ 0.0, 0.0 ], out );\n\t}\n\treturn compute( out, x );\n}\n\n\n// EXPORTS //\nexport default sincospi;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of a number times π.\n*\n* @module @stdlib/math/base/special/sincospi\n*\n* @example\n* var sincospi = require( '@stdlib/math/base/special/sincospi' );\n*\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var sincospi = require( '@stdlib/math/base/special/sincospi' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincospi( out, 0.0 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar sincospi = __var_0__;\n\n\n// EXPORTS //\nexport default sincospi;\n"]}