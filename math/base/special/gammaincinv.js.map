{"version":3,"sources":["@stdlib/math/base/special/gammaincinv/lib/higher_newton.js","@stdlib/math/base/special/gammaincinv/lib/polyval_ak1.js","@stdlib/math/base/special/gammaincinv/lib/polyval_ak2.js","@stdlib/math/base/special/gammaincinv/lib/lambdaeta.js","@stdlib/math/base/special/gammaincinv/lib/chepolsum.js","@stdlib/math/base/special/gammaincinv/lib/polyval_c.js","@stdlib/math/base/special/gammaincinv/lib/polyval_d.js","@stdlib/math/base/special/gammaincinv/lib/stirling.js","@stdlib/math/base/special/gammaincinv/lib/gamstar.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak0bk0.js","@stdlib/math/base/special/gammaincinv/lib/eps1.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak1bk1.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak2bk2.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak3bk3.js","@stdlib/math/base/special/gammaincinv/lib/eps2.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak4bk4.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak5bk5.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak6bk6.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak7bk7.js","@stdlib/math/base/special/gammaincinv/lib/rational_ak8bk8.js","@stdlib/math/base/special/gammaincinv/lib/eps3.js","@stdlib/math/base/special/gammaincinv/lib/compute.js","@stdlib/math/base/special/gammaincinv/lib/gammaincinv.js","@stdlib/math/base/special/gammaincinv/lib/index.js"],"names":["logger","__var_0__","gammainc","__var_1__","abs","__var_2__","exp","__var_3__","ln","__var_4__","MAX_FLOAT32","__var_5__","debug","higherNewton","x0","a","m","p","q","lgama","invfp","pcase","dlnr","xini","ck2","a2","x2","t","n","r","x","evalpoly","polyvalAK1","polyvalAK2","THRESHOLD","ONEO12","ONEO120","AK","lambdaeta","eta","L2","L3","L4","L5","la","L","s","A","chepolsum","tt","u0","u1","u2","k","gammaln","LN_SQRT_TWO_PI","SMALLEST_FLOAT32","polyvalC","__var_6__","polyvalD","__var_7__","C6","stirling","z","gamma","FLOAT32_MAX","SQRT_TWO_PI","gamstar","evalrational","s1","s2","rateval","eps1","rateval1","rateval2","rateval3","eps2","lnmeta","rational1","rational2","rational3","rational4","rational5","eps3","y","erfcinv","sqrt","min","__var_8__","pow","__var_9__","__var_10__","__var_11__","__var_12__","TWO_PI","__var_13__","__var_14__","__var_15__","__var_16__","__var_17__","__var_18__","__var_19__","HALF","ONEO3","ONEO4","ONEO5","ONEO6","ONEO24","CK","compute","ap1inv","porq","ainv","logr","ap22","ap14","ap13","ap12","vgam","ap1","ap2","ap3","p5","b2","b3","p3","a4","p4","p2","a3","xr","b","i","NaN","isnan","FLOAT32_SMALLEST","PINF","gammaincinv","upper"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/math/base/special/gammainc';\nimport __var_2__ from '@stdlib/math/base/special/abs';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float32-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar gammainc = __var_1__;\nvar abs = __var_2__;\nvar exp = __var_3__;\nvar ln = __var_4__;\nvar MAX_FLOAT32 = __var_5__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:higher_newton' );\n\n\n// MAIN //\n\n/**\n* Implementation of the high order Newton-like method.\n*\n* @private\n* @param {number} x0 - initial value\n* @param {number} a - scale parameter\n* @param {number} m - indicator\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @param {number} lgama - logarithm of scale parameter\n* @param {number} invfp - one over `fp`\n* @param {boolean} pcase - boolean indicating whether p < 0.5\n* @returns {number} function value of the inverse\n*/\nfunction higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {\n\tvar dlnr;\n\tvar xini;\n\tvar ck0;\n\tvar ck1;\n\tvar ck2;\n\tvar a2;\n\tvar x2;\n\tvar px;\n\tvar qx;\n\tvar xr;\n\tvar t;\n\tvar n;\n\tvar r;\n\tvar x;\n\n\tx = x0;\n\tt = 1;\n\tn = 1;\n\ta2 = a * a;\n\txini = x0;\n\tdo {\n\t\tx = x0;\n\t\tx2 = x * x;\n\t\tif ( m === 0 ) {\n\t\t\tdlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;\n\t\t\tif ( dlnr > ln( MAX_FLOAT32 ) ) {\n\t\t\t\tdebug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );\n\t\t\t\treturn xini;\n\t\t\t}\n\t\t\tr = exp( dlnr );\n\t\t} else {\n\t\t\tr = -invfp * x;\n\t\t}\n\t\tif ( pcase ) {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = false ] )\n\t\t\tpx = gammainc( x, a, true, false );\n\t\t\tck0 = -r * ( px - p );\n\t\t} else {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = true ] )\n\t\t\tqx = gammainc( x, a, true, true );\n\t\t\tck0 = r * ( qx - q );\n\t\t}\n\t\tr = ck0;\n\t\tif ( ( p > 1e-120 ) || ( n > 1 ) ) {\n\t\t\tck1 = 0.5 * ( x - a + 1.0 ) / x;\n\t\t\tck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;\n\t\t\tck2 /= 6.0;\n\t\t\tx0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );\n\t\t} else {\n\t\t\tx0 = x + r;\n\t\t}\n\t\tt = abs( ( x/x0 ) - 1.0 );\n\t\tn += 1;\n\t\tx = x0;\n\t\tif ( x < 0 ) {\n\t\t\tx = xini;\n\t\t\tn = 100;\n\t\t}\n\t} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );\n\tif ( ( t > 2e-14 ) || ( n > 99 ) ) {\n\t\tdebug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );\n\t}\n\txr = x || 0;\n\treturn xr;\n}\n\n\n// EXPORTS //\nexport default higherNewton;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/exp';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/math/base/tools/evalpoly';\nimport __var_4__ from './polyval_ak1.js';\nimport __var_5__ from './polyval_ak2.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar exp = __var_1__;\nvar ln = __var_2__;\nvar evalpoly = __var_3__;\nvar polyvalAK1 = __var_4__;\nvar polyvalAK2 = __var_5__;\n\n\n// VARIABLES //\n\nvar THRESHOLD = 1.0e-8;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO120 = 0.00833333333333333333333333333333;\n\n// Polynomial coefficient workspace:\nvar AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns the positive number satisfying \\\\( \\eta^2/2=\\lambda-1-\\ln(\\lambda) \\\\) with \\\\( \\operatorname{sign}(\\lambda-1)=\\operatorname{sign}(\\eta) \\\\).\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} value satisfying equation\n*/\nfunction lambdaeta( eta ) {\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar L5;\n\tvar la;\n\tvar L;\n\tvar q;\n\tvar r;\n\tvar s;\n\n\ts = eta * eta * 0.5;\n\tif ( eta === 0.0 ) {\n\t\tla = 0.0;\n\t}\n\telse if ( eta < -1.0 ) {\n\t\tr = exp( -1.0 - s );\n\t\tla = polyvalAK1( r );\n\t}\n\telse if ( eta < 1.0 ) {\n\t\tr = eta;\n\t\tla = polyvalAK2( r );\n\t}\n\telse {\n\t\tr = 11.0 + s;\n\t\tL = ln( r );\n\t\tla = r + L;\n\t\tr = 1.0 / r;\n\t\tL2 = L * L;\n\t\tL3 = L2 * L;\n\t\tL4 = L3 * L;\n\t\tL5 = L4 * L;\n\t\tAK[ 1 ] = ( 2.0-L ) * 0.5;\n\t\tAK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;\n\t\tAK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;\n\t\tAK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len\n\t\tAK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len\n\t\tla += ( L * r * evalpoly( AK, r ) );\n\t}\n\tr = 1.0;\n\tif (\n\t\t( eta > -3.5 && eta < -0.03 ) ||\n\t\t( eta > 0.03 && eta < 40.0 )\n\t) {\n\t\tr = 1.0;\n\t\tq = la;\n\t\tdo {\n\t\t\tla = q * ( s+ln(q) ) / ( q-1.0 );\n\t\t\tr = abs( ( q/la ) - 1.0 );\n\t\t\tq = la;\n\t\t} while ( r > THRESHOLD );\n\t}\n\treturn la;\n}\n\n\n// EXPORTS //\nexport default lambdaeta;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Chebyshev polynomial coefficients...\nvar A = [\n\t1.996379051590076518221,\n\t-0.17971032528832887213e-2,\n\t0.131292857963846713e-4,\n\t-0.2340875228178749e-6,\n\t0.72291210671127e-8,\n\t-0.3280997607821e-9,\n\t0.198750709010e-10,\n\t-0.15092141830e-11,\n\t0.1375340084e-12,\n\t-0.145728923e-13,\n\t0.17532367e-14,\n\t-0.2351465e-15,\n\t0.346551e-16,\n\t-0.55471e-17,\n\t0.9548e-18,\n\t-0.1748e-18,\n\t0.332e-19,\n\t-0.58e-20\n];\n\n\n// MAIN //\n\n/**\n* Computes the sum of a Chebyshev polynomial.\n*\n* @private\n* @param {PositiveInteger} n - degree of polynomial\n* @param {number} t - input value\n* @returns {number} Chebyshev sum\n*/\nfunction chepolsum( n, t ) {\n\tvar tt;\n\tvar u0;\n\tvar u1;\n\tvar u2;\n\tvar k;\n\n\tu0 = 0.0;\n\tu1 = 0.0;\n\ttt = t + t;\n\tk = n;\n\tdo {\n\t\tu2 = u1;\n\t\tu1 = u0;\n\t\tu0 = ( tt*u1 ) - u2 + A[ k ];\n\t\tk -= 1;\n\t} while ( k >= 0 );\n\treturn ( u0-u2 ) / 2.0;\n}\n\n\n// EXPORTS //\nexport default chepolsum;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.025721014990011306;\n\t}\n\treturn 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","import __var_0__ from '@stdlib/math/base/special/gammaln';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from '@stdlib/constants/math/float64-ln-sqrt-two-pi';\nimport __var_3__ from '@stdlib/constants/math/float32-smallest-normal';\nimport __var_4__ from '@stdlib/constants/math/float32-max';\nimport __var_5__ from './chepolsum.js';\nimport __var_6__ from './polyval_c.js';\nimport __var_7__ from './polyval_d.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar gammaln = __var_0__;\nvar ln = __var_1__;\nvar LN_SQRT_TWO_PI = __var_2__;\nvar SMALLEST_FLOAT32 = __var_3__;\nvar MAX_FLOAT32 = __var_4__;\nvar chepolsum = __var_5__;\nvar polyvalC = __var_6__;\nvar polyvalD = __var_7__;\n\n\n// VARIABLES //\n\nvar C6 = 0.30865217988013567769;\n\n\n// MAIN //\n\n/**\n* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.\n*\n* ```tex\n* \\frac{1}{12x}-\\frac{1}{360x^3}\\ldots; x \\ge 3\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction stirling( x ) {\n\tvar z;\n\tif ( x < SMALLEST_FLOAT32 ) {\n\t\treturn MAX_FLOAT32;\n\t}\n\tif ( x < 1.0 ) {\n\t\treturn gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 2.0 ) {\n\t\treturn gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 3.0 ) {\n\t\treturn gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI + ln( x-1.0 ); // eslint-disable-line max-len\n\t}\n\tif ( x < 12.0 ) {\n\t\tz = ( 18.0/( x*x ) ) - 1.0;\n\t\treturn chepolsum( 17, z ) / ( 12.0*x );\n\t}\n\tz = 1.0 / ( x * x );\n\tif ( x < 1000.0 ) {\n\t\treturn polyvalC( z ) / ( C6+z ) / x;\n\t}\n\treturn polyvalD( z ) / x;\n}\n\n\n// EXPORTS //\nexport default stirling;\n","import __var_0__ from '@stdlib/math/base/special/exp';\nimport __var_1__ from '@stdlib/math/base/special/gamma';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/constants/math/float32-max';\nimport __var_4__ from '@stdlib/constants/math/float64-sqrt-two-pi';\nimport __var_5__ from './stirling.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar exp = __var_0__;\nvar gamma = __var_1__;\nvar ln = __var_2__;\nvar FLOAT32_MAX = __var_3__;\nvar SQRT_TWO_PI = __var_4__;\nvar stirling = __var_5__;\n\n\n// MAIN //\n\n/**\n* Computes the regulated gamma function.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamstar( x ) {\n\tif ( x >= 3.0 ) {\n\t\treturn exp( stirling(x) );\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );\n\t}\n\t// Case: x <= 0.0\n\treturn FLOAT32_MAX;\n}\n\n\n// EXPORTS //\nexport default gamstar;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333438;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from './lambdaeta.js';\nimport __var_3__ from './rational_ak0bk0.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar ln = __var_1__;\nvar lambdaeta = __var_2__;\nvar rateval = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps1` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps1( eta ) {\n\tvar la;\n\tif ( abs( eta ) < 1.0 ) {\n\t\treturn rateval( eta );\n\t}\n\tla = lambdaeta( eta );\n\treturn ln( eta / ( la - 1.0 ) ) / eta;\n}\n\n\n// EXPORTS //\nexport default eps1;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172847633523;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172839517431;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.99994466948;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len\n\t\ts2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","import __var_0__ from '@stdlib/math/base/special/ln';\nimport __var_1__ from './rational_ak1bk1.js';\nimport __var_2__ from './rational_ak2bk2.js';\nimport __var_3__ from './rational_ak3bk3.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ln = __var_0__;\nvar rateval1 = __var_1__;\nvar rateval2 = __var_2__;\nvar rateval3 = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps2` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps2( eta ) {\n\tvar lnmeta;\n\tvar x;\n\tif ( eta < -5.0 ) {\n\t\tx = eta * eta;\n\t\tlnmeta = ln( -eta );\n\t\treturn ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rateval1( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rateval2( eta );\n\t}\n\tif ( eta < 1000.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rateval3( eta ) / ( -12.0*eta );\n\t}\n\treturn -1.0 / ( 12.0 * eta );\n}\n\n\n// EXPORTS //\nexport default eps2;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.0495346498136;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00452313583942;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00439937562904;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0011481191232;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len\n\t\ts2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.000145727889667;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len\n\t\ts2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\nexport default evalrational;\n","import __var_0__ from '@stdlib/math/base/special/ln';\nimport __var_1__ from './rational_ak4bk4.js';\nimport __var_2__ from './rational_ak5bk5.js';\nimport __var_3__ from './rational_ak6bk6.js';\nimport __var_4__ from './rational_ak7bk7.js';\nimport __var_5__ from './rational_ak8bk8.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ln = __var_0__;\nvar rational1 = __var_1__;\nvar rational2 = __var_2__;\nvar rational3 = __var_3__;\nvar rational4 = __var_4__;\nvar rational5 = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps3` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps3( eta ) {\n\tvar x;\n\tvar y;\n\n\tif ( eta < -8.0 ) {\n\t\tx = eta * eta;\n\t\ty = ln( -eta ) / eta;\n\t\treturn ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );\n\t}\n\tif ( eta < -4.0 ) {\n\t\treturn rational1( eta ) / ( eta*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rational2( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rational3( eta );\n\t}\n\tif ( eta < 10.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational4( x ) / ( eta*eta );\n\t}\n\tif ( eta < 100.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational5( x ) / ( eta*eta );\n\t}\n\treturn -ln( eta ) / ( 12.0*eta*eta*eta );\n}\n\n\n// EXPORTS //\nexport default eps3;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/math/base/tools/evalpoly';\nimport __var_2__ from '@stdlib/math/base/special/gammaln';\nimport __var_3__ from '@stdlib/math/base/special/erfcinv';\nimport __var_4__ from '@stdlib/math/base/special/gamma';\nimport __var_5__ from '@stdlib/math/base/special/sqrt';\nimport __var_6__ from '@stdlib/math/base/special/abs';\nimport __var_7__ from '@stdlib/math/base/special/exp';\nimport __var_8__ from '@stdlib/math/base/special/min';\nimport __var_9__ from '@stdlib/math/base/special/pow';\nimport __var_10__ from '@stdlib/math/base/special/ln';\nimport __var_11__ from '@stdlib/constants/math/float64-sqrt-two-pi';\nimport __var_12__ from '@stdlib/constants/math/float32-max';\nimport __var_13__ from '@stdlib/constants/math/float64-two-pi';\nimport __var_14__ from './higher_newton.js';\nimport __var_15__ from './lambdaeta.js';\nimport __var_16__ from './gamstar.js';\nimport __var_17__ from './eps1.js';\nimport __var_18__ from './eps2.js';\nimport __var_19__ from './eps3.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar evalpoly = __var_1__;\nvar gammaln = __var_2__;\nvar erfcinv = __var_3__;\nvar gamma = __var_4__;\nvar sqrt = __var_5__;\nvar abs = __var_6__;\nvar exp = __var_7__;\nvar min = __var_8__;\nvar pow = __var_9__;\nvar ln = __var_10__;\nvar SQRT_TWO_PI = __var_11__;\nvar MAX_FLOAT32 = __var_12__;\nvar TWO_PI = __var_13__;\nvar higherNewton = __var_14__;\nvar lambdaeta = __var_15__;\nvar gamstar = __var_16__;\nvar eps1 = __var_17__;\nvar eps2 = __var_18__;\nvar eps3 = __var_19__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:compute' );\nvar HALF = 0.5;\nvar ONEO3 = 0.333333333333333333333333333333;\nvar ONEO4 = 0.25;\nvar ONEO5 = 0.2;\nvar ONEO6 = 0.166666666666666666666666666667;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO24 = 0.0416666666666666666666666666667;\n\n// Coefficient workspace:\nvar CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.\n*\n* ## Notes\n*\n* -   The equation is inverted with `min(p,q)`.\n*\n* @private\n* @param {number} a - scale value of incomplete gamma function\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter\n*/\nfunction compute( a, p, q ) {\n\tvar ap1inv;\n\tvar invfp;\n\tvar lgama;\n\tvar pcase;\n\tvar porq;\n\tvar ainv;\n\tvar logr;\n\tvar ap22;\n\tvar ap14;\n\tvar ap13;\n\tvar ap12;\n\tvar vgam;\n\tvar vmin;\n\tvar xini;\n\tvar ap1;\n\tvar ap2;\n\tvar ap3;\n\tvar eta;\n\tvar p6;\n\tvar p5;\n\tvar x0;\n\tvar a2;\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar b2;\n\tvar b3;\n\tvar p3;\n\tvar a4;\n\tvar fp;\n\tvar p4;\n\tvar p2;\n\tvar a3;\n\tvar xr;\n\tvar ck;\n\tvar b;\n\tvar L;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar y;\n\n\tif ( p < HALF ) {\n\t\tpcase = true;\n\t\tporq = p;\n\t\ts = -1.0;\n\t} else {\n\t\tpcase = false;\n\t\tporq = q;\n\t\ts = 1.0;\n\t}\n\tk = 0;\n\tif ( abs( a-1.0 ) < 1.0e-4 ) {\n\t\tm = 0;\n\t\tif ( pcase ) {\n\t\t\tif ( p < 1.0e-3 ) {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp3 = p2 * p;\n\t\t\t\tp4 = p3 * p;\n\t\t\t\tp5 = p4 * p;\n\t\t\t\tp6 = p5 * p;\n\t\t\t\tx0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tx0 = -ln( 1.0-p );\n\t\t\t}\n\t\t} else {\n\t\t\tx0 = -ln( q );\n\t\t}\n\t\tif ( a === 1.0 ) {\n\t\t\tk = 2;\n\t\t\txr = x0;\n\t\t} else {\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( q < 1.0e-30 && a < HALF ) {\n\t\tm = 0;\n\t\tx0 = -ln( q*gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q*gamma(a) ) ));\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\tif ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tap1inv = 1.0 / ( a+1.0 );\n\t\tx0 = ( gammaln( a+1.0 ) + ln( p ) ) * ainv;\n\t\tx0 = exp( x0 );\n\t\txini = x0;\n\t\tfor ( i = 0; i < 10; i++ ) {\n\t\t\tx0 = xini * exp( x0*ainv ) * pow( 1.0-( x0*ap1inv ), ainv );\n\t\t}\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\n\tlogr = (1.0/a) * ( ln(p) + gammaln( a+1.0 ) );\n\tif ( ( logr < ln( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {\n\t\tr = exp( logr );\n\t\tm = 0;\n\t\ta2 = a * a;\n\t\ta3 = a2 * a;\n\t\ta4 = a3 * a;\n\t\tap1 = a + 1.0;\n\t\tap12 = ap1 * ap1;\n\t\tap13 = ap1 * ap12;\n\t\tap14 = ap12 * ap12;\n\t\tap2 = a + 2.0;\n\t\tap22 = ap2 * ap2;\n\t\tap3 = a + 3.0;\n\t\tCK[ 0 ] = 1.0;\n\t\tCK[ 1 ] = 1.0 / ap1;\n\t\tCK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );\n\t\tCK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );\n\t\tCK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len\n\t\tx0 = r * evalpoly( CK, r );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 10.0 ) && ( k === 0 ) ) {\n\t\tvgam = sqrt( a ) / ( gamstar(a)*SQRT_TWO_PI );\n\t\tvmin = min( 0.02, vgam );\n\t\tif ( q < vmin ) {\n\t\t\tm = 0;\n\t\t\tb = 1.0 - a;\n\t\t\tb2 = b * b;\n\t\t\tb3 = b2 * b;\n\t\t\teta = sqrt( -2.0/a * ln( q/vgam ) );\n\t\t\tx0 = a * lambdaeta( eta );\n\t\t\tL = ln( x0 );\n\t\t\tif ( x0 > 5.0 ) {\n\t\t\t\tL2 = L * L;\n\t\t\t\tL3 = L2 * L;\n\t\t\t\tL4 = L3 * L;\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tCK[ 0 ] = L - 1.0;\n\t\t\t\tCK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;\n\t\t\t\tCK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len\n\t\t\t\tCK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * ONEO12; // eslint-disable-line max-len\n\t\t\t\tCK[ 4 ] = 0.0;\n\t\t\t\tx0 = x0 - L + ( b*r*evalpoly( CK, r ) );\n\t\t\t} else {\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tL2 = L * L;\n\t\t\t\tck = L - 1.0;\n\t\t\t\tt = L - (b*r*ck);\n\t\t\t\tif ( t < x0 ) {\n\t\t\t\t\tx0 -= t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( ( abs( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tx0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +\n\t\t\t( 0.00721144424848128551832255535959*ainv ) ) * ainv );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 1.0 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tif (pcase) {\n\t\t\tx0 = exp( (1.0/a) * ( ln(porq) + gammaln(a+1.0) ) );\n\t\t} else {\n\t\t\tx0 = exp( (1.0/a) * ( ln(1.0-porq) + gammaln(a+1.0) ) );\n\t\t}\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( k === 0 ) {\n\t\tm = 1;\n\t\tainv = 1.0 / a;\n\t\tr = erfcinv( 2.0 * porq );\n\t\teta = s * r / sqrt( a*HALF );\n\t\tif ( r < MAX_FLOAT32 ) {\n\t\t\teta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;\n\t\t\tx0 = a * lambdaeta(eta);\n\t\t\ty = eta;\n\t\t\tfp = -sqrt( a/TWO_PI ) * exp( -HALF*a*y*y ) / ( gamstar(a) );\n\t\t\tinvfp = 1.0 / fp;\n\t\t} else {\n\t\t\tdebug( 'Warning: Overflow problems in one or more steps of the computation.' );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( k < 2 ) {\n\t\txr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );\n\t}\n\treturn xr;\n}\n\n\n// EXPORTS //\nexport default compute;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/constants/math/float32-smallest-normal';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from './compute.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Translated from the Fortran module by\n* ----------------------------------------------------------------------\n* Authors:\n*  Amparo Gil    (U. Cantabria, Santander, Spain)\n*                 e-mail: amparo.gil@unican.es\n*  Javier Segura (U. Cantabria, Santander, Spain)\n*                 e-mail: javier.segura@unican.es\n*  Nico M. Temme (CWI, Amsterdam, The Netherlands)\n*                 e-mail: nico.temme@cwi.nl\n* ---------------------------------------------------------------------\n*/\n\n// MODULES //\nvar isnan = __var_0__;\nvar FLOAT32_SMALLEST = __var_1__;\nvar PINF = __var_2__;\nvar compute = __var_3__;\n\n\n// MAIN //\n\n/**\n* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.\n*\n* ## Method\n*\n* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.\n*\n* ## Notes\n*\n* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.\n*\n* ## References\n*\n* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun\n* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981\n*\n*\n* @param {Probability} p - probability value\n* @param {number} a - scale parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.\n* @returns {number} function value of the inverse\n*/\nfunction gammaincinv( p, a, upper ) {\n\tif ( isnan( p ) || isnan( a ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < FLOAT32_SMALLEST ) {\n\t\treturn NaN;\n\t}\n\tif ( p > 1.0 || p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Case: invert upper gamma function\n\tif ( upper === true ) {\n\t\tif ( p === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn compute( a, 1.0-p, p );\n\t}\n\t// Default: invert lower gamma function\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn compute( a, p, 1.0-p );\n}\n\n\n// EXPORTS //\nexport default gammaincinv;\n","import __var_0__ from './gammaincinv.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the inverse of the lower incomplete gamma function.\n*\n* @module @stdlib/math/base/special/gammaincinv\n*\n* @example\n* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );\n*\n* var val = gammaincinv( 0.5, 2.0 );\n* // returns ~1.678\n*\n* val = gammaincinv( 0.1, 10.0 );\n* // returns ~6.221\n*\n* val = gammaincinv( 0.75, 3.0 );\n* // returns ~3.92\n*\n* val = gammaincinv( 0.75, 3.0, true );\n* // returns ~1.727\n*\n* val = gammaincinv( 0.75, NaN );\n* // returns NaN\n*\n* val = gammaincinv( NaN, 3.0 );\n* // returns NaN\n*/\n\n// MODULES //\nvar gammaincinv = __var_0__;\n\n\n// EXPORTS //\nexport default gammaincinv;\n"]}