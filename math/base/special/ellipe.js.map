{"version":3,"sources":["@stdlib/math/base/special/ellipe/lib/poly_p1.js","@stdlib/math/base/special/ellipe/lib/poly_p2.js","@stdlib/math/base/special/ellipe/lib/poly_p3.js","@stdlib/math/base/special/ellipe/lib/poly_p4.js","@stdlib/math/base/special/ellipe/lib/poly_p5.js","@stdlib/math/base/special/ellipe/lib/poly_p6.js","@stdlib/math/base/special/ellipe/lib/poly_p7.js","@stdlib/math/base/special/ellipe/lib/poly_p8.js","@stdlib/math/base/special/ellipe/lib/poly_p9.js","@stdlib/math/base/special/ellipe/lib/poly_p10.js","@stdlib/math/base/special/ellipe/lib/poly_p11.js","@stdlib/math/base/special/ellipe/lib/poly_p12.js","@stdlib/math/base/special/ellipe/lib/main.js","@stdlib/math/base/special/ellipe/lib/index.js"],"names":["evalpoly","x","sqrt","__var_0__","HALF_PI","__var_1__","ellipk","__var_2__","poly1","__var_3__","poly2","__var_4__","poly3","__var_5__","poly4","__var_6__","poly5","__var_7__","poly6","__var_8__","poly7","__var_9__","poly8","__var_10__","poly9","__var_11__","poly10","__var_12__","poly11","__var_13__","poly12","__var_14__","ellipe","m","FLG","kdm","edm","td","km","t","NaN"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5509733517804722;\n\t}\n\treturn 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5101218320928198;\n\t}\n\treturn 1.5101218320928198 + (x * (-0.41711633390586755 + (x * (-0.09012382040477457 + (x * (-0.04372994401908431 + (x * (-0.027965493064761784 + (x * (-0.020644781177568104 + (x * (-0.016650786739707237 + (x * (-0.01426196082884252 + (x * (-0.012759847429264804 + (x * (-0.011799303775587354 + (x * -0.011197445703074968))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.4674622093394272;\n\t}\n\treturn 1.4674622093394272 + (x * (-0.43657629094633776 + (x * (-0.10515555766694255 + (x * (-0.05737184359324173 + (x * (-0.04139162772734022 + (x * (-0.03452772850528084 + (x * (-0.031495443512532785 + (x * (-0.030527000890325277 + (x * (-0.0309169840192389 + (x * (-0.03237139531475812 + (x * -0.03478996038640416))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.4226911334908792;\n\t}\n\treturn 1.4226911334908792 + (x * (-0.4595135196210487 + (x * (-0.12525053982206188 + (x * (-0.07813854509440948 + (x * (-0.06471427847205 + (x * (-0.06208433913173031 + (x * (-0.06519703281557247 + (x * (-0.07279389536257878 + (x * (-0.084959075171781 + (x * (-0.102539850131046 + (x * (-0.12705358515769605 + (x * -0.1607911206912746))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3754019718711163;\n\t}\n\treturn 1.3754019718711163 + (x * (-0.4872021832731848 + (x * (-0.15331170134854022 + (x * (-0.11184944491702783 + (x * (-0.10884095252313576 + (x * (-0.12295422312026907 + (x * (-0.15221716396203505 + (x * (-0.20049532364269734 + (x * (-0.27617433306775174 + (x * (-0.39351311430437586 + (x * (-0.5757544060278792 + (x * (-0.8605232357272398 + (x * -1.3088332057585401))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3250244979582302;\n\t}\n\treturn 1.3250244979582302 + (x * (-0.5217276475575667 + (x * (-0.19490643048212622 + (x * (-0.17162372682201127 + (x * (-0.20275465292641914 + (x * (-0.27879895311853475 + (x * (-0.42069845728100574 + (x * (-0.675948400853106 + (x * (-1.1363431218392293 + (x * (-1.9767211439543984 + (x * (-3.5316967730957227 + (x * (-6.446753640156048 + (x * -11.97703130208884))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.2707074796501499;\n\t}\n\treturn 1.2707074796501499 + (x * (-0.5668391682878666 + (x * (-0.2621607934324926 + (x * (-0.2922441735330774 + (x * (-0.4403978408504232 + (x * (-0.7749476413813975 + (x * (-1.498870837987561 + (x * (-3.089708310445187 + (x * (-6.6675959033810015 + (x * (-14.89436036517319 + (x * (-34.18120574251449 + (x * (-80.15895841905397 + (x * (-191.34894807629848 + (x * (-463.5938853480342 + (x * -1137.38082216936))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.2110560275684594;\n\t}\n\treturn 1.2110560275684594 + (x * (-0.6303064132874558 + (x * (-0.38716640952066916 + (x * (-0.5922782353119346 + (x * (-1.23755558451305 + (x * (-3.0320566617452474 + (x * (-8.18168822157359 + (x * (-23.55507217389693 + (x * (-71.04099935893065 + (x * (-221.879685319235 + (x * (-712.1364793277636 + (x * (-2336.1253314403966 + (x * (-7801.945954775964 + (x * (-26448.19586059192 + (x * (-90799.48341621365 + (x * (-315126.04064491636 + (x * -1104011.3443115912))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.1613071521962828;\n\t}\n\treturn 1.1613071521962828 + (x * (-0.7011002845552895 + (x * (-0.5805514744654373 + (x * (-1.2436930610777865 + (x * (-3.679383613496635 + (x * (-12.815909243378957 + (x * (-49.25672530759985 + (x * (-202.18187354340904 + (x * (-869.8602699308701 + (x * (-3877.0058473132895 + (x * (-17761.7071017094 + (x * (-83182.69029154233 + (x * (-396650.4505013548 + (x * -1920033.4136826345))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.1246173251197522;\n\t}\n\treturn 1.1246173251197522 + (x * (-0.7708450563609095 + (x * (-0.8447940536449113 + (x * (-2.4900973094503946 + (x * (-10.239717411543843 + (x * (-49.7490054655148 + (x * (-267.09866751957054 + (x * (-1532.66588382523 + (x * (-9222.313478526092 + (x * (-57502.51612140314 + (x * (-368596.11674161063 + (x * (-2415611.0887010912 + (x * (-16120097.815816568 + (x * (-109209938.52030899 + (x * (-749380758.1942496 + (x * (-5198725846.725541 + (x * -36409256888.1214))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5910034537907922;\n\t}\n\treturn 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5509733517804722;\n\t}\n\treturn 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/constants/math/float64-half-pi';\nimport __var_2__ from '@stdlib/math/base/special/ellipk';\nimport __var_3__ from './poly_p1.js';\nimport __var_4__ from './poly_p2.js';\nimport __var_5__ from './poly_p3.js';\nimport __var_6__ from './poly_p4.js';\nimport __var_7__ from './poly_p5.js';\nimport __var_8__ from './poly_p6.js';\nimport __var_9__ from './poly_p7.js';\nimport __var_10__ from './poly_p8.js';\nimport __var_11__ from './poly_p9.js';\nimport __var_12__ from './poly_p10.js';\nimport __var_13__ from './poly_p11.js';\nimport __var_14__ from './poly_p12.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.\n*\n* ```text\n* The MIT License (MIT)\n*\n* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:\n*\n* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar HALF_PI = __var_1__;\nvar ellipk = __var_2__;\nvar poly1 = __var_3__;\nvar poly2 = __var_4__;\nvar poly3 = __var_5__;\nvar poly4 = __var_6__;\nvar poly5 = __var_7__;\nvar poly6 = __var_8__;\nvar poly7 = __var_9__;\nvar poly8 = __var_10__;\nvar poly9 = __var_11__;\nvar poly10 = __var_12__;\nvar poly11 = __var_13__;\nvar poly12 = __var_14__;\n\n\n// MAIN //\n\n/**\n* Computes the complete elliptic integral of the second kind.\n*\n* ## Method\n*\n* -   The function computes the complete elliptic integral of the second kind in terms of parameter \\\\( m \\\\), instead of the elliptic modulus \\\\( k \\\\).\n*\n*     ```tex\n*     E(m) = \\int_0^{\\pi/2} \\sqrt{1 - m (\\sin\\theta)^2} d\\theta\n*     ```\n*\n* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).\n*\n* -   For \\\\( m < 0 \\\\), the implementation follows Fukushima (2015).\n*\n* ## References\n*\n* -   Fukushima, Toshio. 2009. \"Fast computation of complete elliptic integrals and Jacobian elliptic functions.\" _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).\n* -   Fukushima, Toshio. 2015. \"Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation.\" _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).\n*\n* @param {number} m - input value\n* @returns {number} evaluated elliptic integral\n*\n* @example\n* var v = ellipe( 0.5 );\n* // returns ~1.351\n*\n* v = ellipe( -1.0 );\n* // returns ~1.910\n*\n* v = ellipe( 2.0 );\n* // returns NaN\n*\n* v = ellipe( Infinity );\n* // returns NaN\n*\n* v = ellipe( -Infinity );\n* // returns NaN\n*\n* v = ellipe( NaN );\n* // returns NaN\n*/\nfunction ellipe( m ) {\n\tvar FLG;\n\tvar kdm;\n\tvar edm;\n\tvar td;\n\tvar km;\n\tvar t;\n\tvar x;\n\n\tx = m;\n\tif ( m < 0.0 ) {\n\t\tx = m / ( m - 1.0 );\n\t\tFLG = true;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn HALF_PI;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.1 ) {\n\t\tt = poly1( x - 0.05 );\n\t} else if ( x < 0.2 ) {\n\t\tt = poly2( x - 0.15 );\n\t} else if ( x < 0.3 ) {\n\t\tt = poly3( x - 0.25 );\n\t} else if ( x < 0.4 ) {\n\t\tt = poly4( x - 0.35 );\n\t} else if ( x < 0.5 ) {\n\t\tt = poly5( x - 0.45 );\n\t} else if ( x < 0.6 ) {\n\t\tt = poly6( x - 0.55 );\n\t} else if ( x < 0.7 ) {\n\t\tt = poly7( x - 0.65 );\n\t} else if ( x < 0.8 ) {\n\t\tt = poly8( x - 0.75 );\n\t} else if ( x < 0.85 ) {\n\t\tt = poly9( x - 0.825 );\n\t} else if ( x < 0.9 ) {\n\t\tt = poly10( x - 0.875 );\n\t} else {\n\t\ttd = 0.95 - x;\n\t\tkdm = poly11(td);\n\t\tedm = poly12(td);\n\t\tkm = ellipk( x );\n\n\t\t// To avoid precision loss near 1, we use Eq. 33 from Fukushima (2009):\n\t\tt = ( HALF_PI + ( km * (kdm - edm) ) ) / kdm;\n\t}\n\tif ( FLG ) {\n\t\t// Complete the transformation mentioned above for m < 0:\n\t\treturn t * sqrt( 1.0 - m );\n\t}\n\treturn t;\n}\n\n\n// EXPORTS //\nexport default ellipe;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the complete elliptic integral of the second kind.\n*\n* @module @stdlib/math/base/special/ellipe\n*\n* @example\n* var ellipe = require( '@stdlib/math/base/special/ellipe' );\n*\n* var v = ellipe( 0.5 );\n* // returns ~1.351\n*\n* v = ellipe( -1.0 );\n* // returns ~1.910\n*\n* v = ellipe( 2.0 );\n* // returns NaN\n*\n* v = ellipe( Infinity );\n* // returns NaN\n*\n* v = ellipe( -Infinity );\n* // returns NaN\n*\n* v = ellipe( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar ellipe = __var_0__;\n\n\n// EXPORTS //\nexport default ellipe;\n"]}