{"version":3,"sources":["@stdlib/math/base/special/truncb/lib/truncb.js","@stdlib/math/base/special/truncb/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","pow","__var_2__","trunc","__var_3__","truncn","__var_4__","truncb","x","n","b","y","s","NaN"],"mappings":"4JA0BA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAAQC,EACRC,EAASC,EA4Bb,SAASC,EAAQC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACJ,OACCf,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPA,GAAK,GACLX,EAAYU,IACZV,EAAYW,GAELG,IAEHd,EAAYS,IAAa,IAANA,EAChBA,EAEG,KAANE,EACGL,EAAQG,EAAGC,GAER,IAANA,GAAiB,IAANC,EACRP,EAAOK,IAEfI,EAAIX,EAAKS,GAAID,GAGRV,EAAYa,GACTJ,GAERG,EAAIR,EAAOK,EAAEI,GAAMA,EAGdb,EAAYY,GACTH,EAEDG,ICjDL,IAACJ,EAAST","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/special/pow';\nimport __var_3__ from '@stdlib/math/base/special/trunc';\nimport __var_4__ from '@stdlib/math/base/special/truncn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar pow = __var_2__;\nvar trunc = __var_3__;\nvar truncn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(b^n\\\\) toward zero.\n*\n* @param {number} x - input value\n* @param {integer} n - integer power\n* @param {PositiveInteger} b - base\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = truncb( 3.141592653589793, -4, 10 );\n* // returns 3.1415\n*\n* @example\n* // If n = 0 or b = 1, `truncb` behaves like `trunc`:\n* var v = truncb( 3.141592653589793, 0, 2 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest multiple of two toward zero:\n* var v = truncb( 5.0, 1, 2 );\n* // returns 4.0\n*/\nfunction truncb( x, n, b ) {\n\tvar y;\n\tvar s;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0 ||\n\t\tisInfinite( n ) ||\n\t\tisInfinite( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( b === 10 ) {\n\t\treturn truncn( x, n );\n\t}\n\tif ( n === 0 || b === 1 ) {\n\t\treturn trunc( x );\n\t}\n\ts = pow( b, -n );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\ty = trunc( x*s ) / s;\n\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default truncb;\n","import __var_0__ from './truncb.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a numeric value to the nearest multiple of `b^n` toward zero.\n*\n* @module @stdlib/math/base/special/truncb\n*\n* @example\n* var truncb = require( '@stdlib/math/base/special/truncb' );\n*\n* // Round a value to 4 decimal places:\n* var v = truncb( 3.141592653589793, -4, 10 );\n* // returns 3.1415\n*\n* // If n = 0 or b = 1, behavior is same as `trunc`:\n* v = truncb( 3.141592653589793, 0, 2 );\n* // returns 3.0\n*\n* // Round a value to the nearest multiple of two toward zero:\n* v = truncb( 5.0, 1, 2 );\n* // returns 4.0\n*/\n\n// MODULES //\nvar truncb = __var_0__;\n\n\n// EXPORTS //\nexport default truncb;\n"]}