{"version":3,"sources":["@stdlib/math/base/special/floor10/lib/floor10.js","@stdlib/math/base/special/floor10/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","pow","__var_2__","floor","__var_3__","ceil","__var_4__","log10","__var_5__","MAX_EXP","__var_6__","MIN_EXP_SUBNORMAL","__var_7__","NINF","__var_8__","floor10","x","sign","p"],"mappings":"uYA8BA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAAQC,EACRC,EAAOC,EACPC,EAAQC,EACRC,EAAUC,EACVC,EAAoBC,EACpBC,EAAOC,EAuBX,SAASC,EAASC,GACjB,IAAIC,EACAC,EACJ,OACCrB,EAAOmB,IACPjB,EAAYiB,IACN,IAANA,EAEOA,GAEHA,EAAI,GACRA,GAAKA,EACLC,GAAQ,GAERA,EAAO,EAGRC,EAAIX,EAAOS,IAIVE,EADa,IAATD,EACAd,EAAOe,GAEPb,EAAMa,KAGDP,EACK,EAAPM,EAGHC,EAAIT,EACDI,EAEDI,EAAOhB,EAAK,GAAMiB,ICtDvB,IAACH,EAAUjB","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/special/pow';\nimport __var_3__ from '@stdlib/math/base/special/floor';\nimport __var_4__ from '@stdlib/math/base/special/ceil';\nimport __var_5__ from '@stdlib/math/base/special/log10';\nimport __var_6__ from '@stdlib/constants/math/float64-max-base10-exponent';\nimport __var_7__ from '@stdlib/constants/math/float64-min-base10-exponent-subnormal';\nimport __var_8__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar pow = __var_2__;\nvar floor = __var_3__;\nvar ceil = __var_4__;\nvar log10 = __var_5__;\nvar MAX_EXP = __var_6__;\nvar MIN_EXP_SUBNORMAL = __var_7__;\nvar NINF = __var_8__;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of `10` toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor10( 3.141592653589793 );\n* // returns 1.0\n*\n* @example\n* var v = floor10( 9.0 );\n* // returns 1.0\n*\n* @example\n* var v = floor10( -0.314 );\n* // returns -1.0\n*/\nfunction floor10( x ) {\n\tvar sign;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `10^p = x` for `p`:\n\tp = log10( x );\n\n\t// Determine a power of 10 which rounds the input value toward negative infinity:\n\tif ( sign === 1.0 ) {\n\t\tp = floor( p );\n\t} else {\n\t\tp = ceil( p );\n\t}\n\t// Handle underflow:\n\tif ( p <= MIN_EXP_SUBNORMAL ) {\n\t\treturn sign * 0.0; // sign-preserving\n\t}\n\t// Handle overflow:\n\tif ( p > MAX_EXP ) {\n\t\treturn NINF;\n\t}\n\treturn sign * pow( 10.0, p );\n}\n\n\n// EXPORTS //\nexport default floor10;\n","import __var_0__ from './floor10.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a numeric value to the nearest power of `10` toward negative infinity.\n*\n* @module @stdlib/math/base/special/floor10\n*\n* @example\n* var floor10 = require( '@stdlib/math/base/special/floor10' );\n*\n* var v = floor10( 3.141592653589793 );\n* // returns 1.0\n*\n* v = floor10( 9.0 );\n* // returns 1.0\n*\n* v = floor10( -0.314 );\n* // returns -1.0\n*/\n\n// MODULES //\nvar floor10 = __var_0__;\n\n\n// EXPORTS //\nexport default floor10;\n"]}