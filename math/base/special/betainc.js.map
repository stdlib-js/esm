{"version":3,"sources":["@stdlib/math/base/special/betainc/lib/betainc.js","@stdlib/math/base/special/betainc/lib/index.js"],"names":["kernelBetainc","__var_0__","out","betainc","x","a","b","regularized","upper"],"mappings":"mCAsBA,IAAIA,EAAgBC,EAKhBC,EAAM,CAAE,EAAK,GA2BjB,SAASC,EAASC,EAAGC,EAAGC,EAAGC,EAAaC,GAKvC,OADAN,EAAMF,EAAeE,EAAKE,EAAGC,EAAGC,EAFhCC,GAAgC,IAAhBA,EAChBC,GAAoB,IAAVA,IAEE,GChBV,IAACL,EAAUF","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/kernel-betainc';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar kernelBetainc = __var_0__;\n\n\n// VARIABLES //\n\nvar out = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function.\n*\n* @param {Probability} x - function parameter\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0, false );\n* // returns ~0.083\n*\n* @example\n* var y = betainc( 0.2, 1.0, 2.0 );\n* // returns 0.36\n*/\nfunction betainc( x, a, b, regularized, upper ) {\n\t/* eslint-disable no-unneeded-ternary */\n\tregularized = ( regularized === false ) ? false : true;\n\tupper = ( upper === true ) ? true : false;\n\tout = kernelBetainc( out, x, a, b, regularized, upper );\n\treturn out[ 0 ];\n}\n\n\n// EXPORTS //\nexport default betainc;\n","import __var_0__ from './betainc.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete beta function.\n*\n* @module @stdlib/math/base/special/betainc\n*\n* @example\n* var betainc = require( '@stdlib/math/base/special/betainc' );\n*\n* var y = betainc( 0.5, 2.0, 2.0 );\n* // returns 0.5\n*\n* y = betainc( 0.5, 2.0, 2.0, false );\n* // returns ~0.083\n*\n* y = betainc( 0.2, 1.0, 2.0 );\n* // returns 0.36\n*\n* y = betainc( 0.2, 1.0, 2.0, true, true );\n* // returns 0.64\n*/\n\n// MODULES //\nvar betainc = __var_0__;\n\n\n// EXPORTS //\nexport default betainc;\n"]}