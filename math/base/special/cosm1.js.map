{"version":3,"sources":["@stdlib/math/base/special/cosm1/lib/polyval_p.js","@stdlib/math/base/special/cosm1/lib/cosm1.js","@stdlib/math/base/special/cosm1/lib/index.js"],"names":["evalpoly","x","cos","__var_0__","polyval","__var_1__","PIO4","cosm1","x2"],"mappings":"wBAsCA,SAASA,EAAUC,GAClB,OAAW,IAANA,EACG,oBAED,oBAAwBA,GAA+BA,GAAK,qBAA0BA,GAA8BA,GAAK,qBAAwBA,GAAmC,qBAAJA,EAAzB,uBAA3D,uBAA9D,sBCLtC,IAAIC,EAAMC,EACNC,EAAUC,EAKVC,EAAO,kBA+BX,SAASC,EAAON,GACf,IAAIO,EACJ,OAAKP,GAAKK,GAAQL,EAAIK,EACdJ,EAAKD,GAAM,GAGT,IADVO,EAAKP,EAAIA,GACcO,EAAGA,EAAGJ,EAASI,GCvCpC,IAACD,EAAQJ","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.041666666666666664;\n\t}\n\treturn 0.041666666666666664 + (x * (-0.0013888888888888872 + (x * (0.00002480158730157055 + (x * (-2.755731921499979e-7 + (x * (2.087675428708152e-9 + (x * (-1.147028484342536e-11 + (x * 4.737750796424621e-14))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default evalpoly;\n","import __var_0__ from '@stdlib/math/base/special/cos';\nimport __var_1__ from './polyval_p.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar cos = __var_0__;\nvar polyval = __var_1__;\n\n\n// VARIABLES //\n\nvar PIO4 = 7.85398163397448309616e-1; // 4/Ï€\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number minus one.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine minus one\n*\n* @example\n* var v = cosm1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var PI = require( '@stdlib/constants/math/float64-pi' );\n*\n* var v = cosm1( PI/4.0 );\n* // returns ~-0.293\n*\n* @example\n* var PI = require( '@stdlib/constants/math/float64-pi' );\n*\n* var v = cosm1( -PI/6.0 );\n* // returns ~-0.134\n*\n* @example\n* var v = cosm1( NaN );\n* // returns NaN\n*/\nfunction cosm1( x ) {\n\tvar x2;\n\tif ( x < -PIO4 || x > PIO4 ) {\n\t\treturn cos( x ) - 1.0;\n\t}\n\tx2 = x * x;\n\treturn ( -0.5*x2 ) + ( x2*x2*polyval( x2 ) );\n}\n\n\n// EXPORTS //\nexport default cosm1;\n","import __var_0__ from './cosm1.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cosine of a number minus one.\n*\n* @module @stdlib/math/base/special/cosm1\n*\n* @example\n* var PI = require( '@stdlib/constants/math/float64-pi' );\n* var cosm1 = require( '@stdlib/math/base/special/cosm1' );\n*\n* var v = cosm1( 0.0 );\n* // returns 0.0\n*\n* v = cosm1( PI/4.0 );\n* // returns ~-0.291\n*\n* v = cosm1( -PI/6.0 );\n* // returns ~-0.134\n*/\n\n// MODULES //\nvar cosm1 = __var_0__;\n\n\n// EXPORTS //\nexport default cosm1;\n"]}