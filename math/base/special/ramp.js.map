{"version":3,"sources":["@stdlib/math/base/special/ramp/lib/main.js","@stdlib/math/base/special/ramp/lib/index.js"],"names":["isnan","__var_0__","ramp","x","NaN"],"mappings":"qCAsBA,IAAIA,EAAQC,EAuBZ,SAASC,EAAMC,GACd,OAAKH,EAAOG,GACJC,IAEHD,EAAI,EACDA,EAED,ECZL,IAACD,EAAOD","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Evaluates the ramp function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ramp( 3.14 );\n* // returns 3.14\n*\n* @example\n* var v = ramp( -3.14 );\n* // returns 0.0\n*\n* @example\n* var v = ramp( NaN );\n* // returns NaN\n*/\nfunction ramp( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn x;\n\t}\n\treturn 0.0; // handles `-0`\n}\n\n\n// EXPORTS //\nexport default ramp;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the ramp function.\n*\n* @module @stdlib/math/base/special/ramp\n*\n* @example\n* var ramp = require( '@stdlib/math/base/special/ramp' );\n*\n* var v = ramp( 3.14 );\n* // returns 3.14\n*\n* v = ramp( -3.14 );\n* // returns 0.0\n*\n* v = ramp( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar ramp = __var_0__;\n\n\n// EXPORTS //\nexport default ramp;\n"]}