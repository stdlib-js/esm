{"version":3,"sources":["@stdlib/math/base/special/cos/lib/cos.js","@stdlib/math/base/special/cos/lib/index.js"],"names":["getHighWord","__var_0__","kernelCos","__var_1__","kernelSin","__var_2__","rempio2","__var_3__","buffer","HIGH_WORD_ABS_MASK","HIGH_WORD_PIO4","HIGH_WORD_TWO_NEG_27","HIGH_WORD_EXPONENT_MASK","cos","x","ix","NaN"],"mappings":"yJAuCA,IAAIA,EAAcC,EACdC,EAAYC,EACZC,EAAYC,EACZC,EAAUC,EAMVC,EAAS,CAAE,EAAK,GAGhBC,EAAqB,WAGrBC,EAAiB,WAGjBC,EAAuB,WAGvBC,EAA0B,WA2B9B,SAASC,EAAKC,GACb,IAAIC,EAOJ,GAJAA,EAAKf,EAAac,IAClBC,GAAMN,IAGKC,EAEV,OAAKK,EAAKJ,EACF,EAEDT,EAAWY,EAAG,GAGtB,GAAKC,GAAMH,EACV,OAAOI,IAIR,OAAa,EADTV,EAASQ,EAAGN,IAEhB,KAAK,EACJ,OAAON,EAAWM,EAAQ,GAAKA,EAAQ,IACxC,KAAK,EACJ,OAAQJ,EAAWI,EAAQ,GAAKA,EAAQ,IACzC,KAAK,EACJ,OAAQN,EAAWM,EAAQ,GAAKA,EAAQ,IACzC,QACC,OAAOJ,EAAWI,EAAQ,GAAKA,EAAQ,KC5EtC,IAACK,EAAMZ","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/get-high-word';\nimport __var_1__ from '@stdlib/math/base/special/kernel-cos';\nimport __var_2__ from '@stdlib/math/base/special/kernel-sin';\nimport __var_3__ from '@stdlib/math/base/special/rempio2';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar getHighWord = __var_0__;\nvar kernelCos = __var_1__;\nvar kernelSin = __var_2__;\nvar rempio2 = __var_3__;\n\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word of Ï€/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< pi/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: x < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn kernelCos( x, 0.0 );\n\t}\n\t// Case: cos(Inf or NaN) is NaN */\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Case: Argument reduction needed...\n\tn = rempio2( x, buffer );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tcase 1:\n\t\treturn -kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\tcase 2:\n\t\treturn -kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tdefault:\n\t\treturn kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\nexport default cos;\n","import __var_0__ from './cos.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cosine of a number.\n*\n* @module @stdlib/math/base/special/cos\n*\n* @example\n* var cos = require( '@stdlib/math/base/special/cos' );\n*\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*/\n\n// MODULES //\nvar cos = __var_0__;\n\n\n// EXPORTS //\nexport default cos;\n"]}