{"version":3,"sources":["@stdlib/math/base/special/falling-factorial/lib/falling_factorial.js","@stdlib/math/base/special/falling-factorial/lib/index.js"],"names":["risingFactorial","isNonNegativeInteger","__var_0__","isnan","__var_1__","gammaDeltaRatio","__var_2__","floor","__var_3__","abs","__var_4__","FLOAT64_MAX","__var_5__","PINF","__var_6__","MAX_FACTORIAL","fallingFactorial","x","n","result","xp1","n2","t1","t2","__var_7__","NaN"],"mappings":"wUA0CA,IAYIA,EAZAC,EAAuBC,EACvBC,EAAQC,EACRC,EAAkBC,EAClBC,EAAQC,EACRC,EAAMC,EACNC,EAAcC,EACdC,EAAOC,EAKPC,EAAgB,IAqCpB,SAASC,EAAkBC,EAAGC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAMJ,OAHMvB,IACLA,EAAkBwB,GAEdrB,EAAOc,KAAQhB,EAAsBiB,GAClCO,IAEG,IAANR,EACG,EAEHA,EAAI,GAEK,EAAFC,GAAS,EAAM,GAAQlB,GAAkBiB,EAAGC,GAE7C,IAANA,EACG,EAEHD,EAAI,GAEHC,EAAIH,EAAc,GAEtBO,EAAKL,EAAID,EAAkBC,EAAE,EAAKF,EAAc,GAChDQ,EAAKP,EAAkBC,EAAEF,EAAc,EAAKG,EAAEH,EAAc,GACvDJ,EAAYF,EAAIa,GAAMb,EAAIc,GACvBV,EAEDS,EAAKC,GAENN,EAAID,EAAkBC,EAAE,EAAKC,EAAE,GAElCD,GAAKC,EAAE,GAGXG,EAAKZ,EAAKF,EADVa,EAAMH,EAAI,OAEEG,EACJ,GAERD,EAASd,EAAiBe,GAAMC,GAEhCF,GADAF,GAAKI,GAELA,GAAM,GACIH,IACTC,GAAUH,EAAkBC,EAAE,EAAKC,EAAEG,IAE/BF,GAGDd,EAAiBY,EAAE,GAAMC,GCrG9B,IAACF,EAAmBd","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/gamma-delta-ratio';\nimport __var_3__ from '@stdlib/math/base/special/floor';\nimport __var_4__ from '@stdlib/math/base/special/abs';\nimport __var_5__ from '@stdlib/constants/math/float64-max';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\nimport __var_7__ from '@stdlib/math/base/special/rising-factorial';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006, 2010.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar gammaDeltaRatio = __var_2__;\nvar floor = __var_3__;\nvar abs = __var_4__;\nvar FLOAT64_MAX = __var_5__;\nvar PINF = __var_6__;\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider packaging as constant\nvar risingFactorial;\n\n\n// MAIN //\n\n/**\n* Computes the falling factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The falling factorial is defined as\n*\n*     ```tex\n*     \\operatorname{fallingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {NonNegativeInteger} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = fallingFactorial( 0.9, 5 );\n* // returns ~0.644\n*\n* @example\n* var v = fallingFactorial( -9.0, 3 );\n* // returns -990.0\n*\n* @example\n* var v = fallingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = fallingFactorial( 3.0, -2 );\n* // returns NaN\n*/\nfunction fallingFactorial( x, n ) {\n\tvar result;\n\tvar xp1;\n\tvar n2;\n\tvar t1;\n\tvar t2;\n\n\t// Lazy-load to avoid undefined reference due to circular dependency...\n\tif ( !risingFactorial ) {\n\t\trisingFactorial = __var_7__;\n\t}\n\tif ( isnan( x ) || !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a rising factorial modulo a possible change of sign:\n\t\treturn ( ( n&1 ) ? -1.0 : 1.0 ) * risingFactorial( -x, n );\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.5 ) {\n\t\t// Computing `1 + x` will throw away digits, so split up calculation...\n\t\tif ( n > MAX_FACTORIAL-2 ) {\n\t\t\t// Given a ratio of two very large numbers, we need to split the calculation up into two blocks:\n\t\t\tt1 = x * fallingFactorial( x-1.0, MAX_FACTORIAL-2 );\n\t\t\tt2 = fallingFactorial( x-MAX_FACTORIAL+1.0, n-MAX_FACTORIAL+1 );\n\t\t\tif ( FLOAT64_MAX/abs(t1) < abs(t2) ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\treturn t1 * t2;\n\t\t}\n\t\treturn x * fallingFactorial( x-1.0, n-1.0 );\n\t}\n\tif ( x <= n-1.0 ) {\n\t\t// `x+1-n` will be negative and computing the ratio of two gammas will not work, so split the product up into three parts:\n\t\txp1 = x + 1.0;\n\t\tn2 = abs( floor( xp1 ) );\n\t\tif ( n2 === xp1 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = gammaDeltaRatio( xp1, -n2 );\n\t\tx -= n2;\n\t\tresult *= x;\n\t\tn2 += 1.0;\n\t\tif ( n2 < n ) {\n\t\t\tresult *= fallingFactorial( x-1.0, n-n2 );\n\t\t}\n\t\treturn result;\n\t}\n\t// Simple case: just the ratio of two (positive argument) gamma functions. Note that we don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn gammaDeltaRatio( x+1.0, -n );\n}\n\n\n// EXPORTS //\nexport default fallingFactorial;\n","import __var_0__ from './falling_factorial.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the falling factorial.\n*\n* @module @stdlib/math/base/special/falling-factorial\n*\n* @example\n* var fallingFactorial = require( '@stdlib/math/base/special/falling-factorial' );\n*\n* var v = fallingFactorial( 0.9, 5 );\n* // returns ~0.644\n*\n* v = fallingFactorial( -9.0, 3 );\n* // returns -990.0\n*\n* v = fallingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* v = fallingFactorial( 3.0, -2 );\n* // returns NaN\n*/\n\n// MODULES //\nvar fallingFactorial = __var_0__;\n\n\n// EXPORTS //\nexport default fallingFactorial;\n"]}