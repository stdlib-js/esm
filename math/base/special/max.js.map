{"version":3,"sources":["@stdlib/math/base/special/max/lib/max.js","@stdlib/math/base/special/max/lib/index.js"],"names":["isPositiveZero","__var_0__","isnan","__var_1__","NINF","__var_2__","PINF","__var_3__","max","x","y","len","m","v","i","arguments","length","NaN"],"mappings":"sMAyBA,IAAIA,EAAiBC,EACjBC,EAAQC,EACRC,EAAOC,EACPC,EAAOC,EA6BX,SAASC,EAAKC,EAAGC,GAChB,IAAIC,EACAC,EACAC,EACAC,EAGJ,GAAa,KADbH,EAAMI,UAAUC,QAEf,OAAKd,EAAOO,IAAOP,EAAOQ,GAClBO,IAEHR,IAAMH,GAAQI,IAAMJ,EACjBA,EAEHG,IAAMC,GAAW,IAAND,EACVT,EAAgBS,GACbA,EAEDC,EAEHD,EAAIC,EACDD,EAEDC,EAGR,IADAE,EAAIR,EACEU,EAAI,EAAGA,EAAIH,EAAKG,IAAM,CAE3B,GAAKZ,EADLW,EAAIE,UAAWD,KACID,IAAMP,EACxB,OAAOO,GAEHA,EAAID,GAGRC,IAAMD,GACA,IAANC,GACAb,EAAgBa,MAJhBD,EAAIC,GASN,OAAOD,ECvDL,IAACJ,EAAMP","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-positive-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/constants/math/float64-ninf';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveZero = __var_0__;\nvar isnan = __var_1__;\nvar NINF = __var_2__;\nvar PINF = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max( x, y ) {\n\tvar len;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === PINF || y === PINF ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( x > y ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tm = NINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) || v === PINF ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > m ) {\n\t\t\tm = v;\n\t\t} else if (\n\t\t\tv === m &&\n\t\t\tv === 0.0 &&\n\t\t\tisPositiveZero( v )\n\t\t) {\n\t\t\tm = v;\n\t\t}\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\nexport default max;\n","import __var_0__ from './max.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the maximum value.\n*\n* @module @stdlib/math/base/special/max\n*\n* @example\n* var max = require( '@stdlib/math/base/special/max' );\n*\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* v = max( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* v = max( 3.14, NaN );\n* // returns NaN\n*\n* v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\n\n// MODULES //\nvar max = __var_0__;\n\n\n// EXPORTS //\nexport default max;\n"]}