{"version":3,"sources":["@stdlib/math/base/special/boxcox1p/lib/main.js","@stdlib/math/base/special/boxcox1p/lib/index.js"],"names":["log1p","__var_0__","abs","__var_1__","expm1","__var_2__","isnan","__var_3__","NINF","__var_4__","boxcox1p","x","lambda","lgx","NaN"],"mappings":"0KA0BA,IAAIA,EAAQC,EACRC,EAAMC,EACNC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EAkDX,SAASC,EAAUC,EAAGC,GACrB,IAAIC,EACJ,OAAKP,EAAOK,IAAOL,EAAOM,IAAYD,GAAK,EACnCG,KAEI,IAAPH,GAAcC,EAAS,EACpBJ,GAERK,EAAMb,EAAOW,GAEZT,EAAKU,GAAW,OAIfV,EAAKW,GAAQ,QACbX,EAAKU,GAAW,MAGVC,EAEDT,EAAOQ,EAAOC,GAAQD,GChD3B,IAACF,EAAWT","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/log1p';\nimport __var_1__ from '@stdlib/math/base/special/abs';\nimport __var_2__ from '@stdlib/math/base/special/expm1';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar log1p = __var_0__;\nvar abs = __var_1__;\nvar expm1 = __var_2__;\nvar isnan = __var_3__;\nvar NINF = __var_4__;\n\n\n// MAIN //\n\n/**\n* Computes a one-parameter Box-Cox transformation of `1+x`.\n*\n* ## Method\n*\n* When computing a one-parameter Box-Cox transformation\n*\n* -   If \\\\( \\lambda << 1 \\\\) and \\\\( \\ln( x ) < 1.0 \\\\), then the product \\\\( \\lambda \\cdot \\ln(x) \\\\) can lose precision, and, furthermore, \\\\( \\operatorname{expm1}(x) = x \\\\) for \\\\( x < \\epsilon \\\\).\n* -   For double-precision floating-point numbers, the range of the natural log is \\\\( \\[-744.44, 709.78\\] and \\\\( \\epsilon \\\\) is the smallest value produced.\n* -   The value range means that we will have \\\\( |\\lambda \\cdot \\ln(x)| < \\epsilon \\\\) whenever \\\\( |\\lambda| \\leq \\frac{\\epsilon}{-\\ln(d) \\\\), where \\\\( d \\\\) is the minimum double-precision floating-point number, thus corresponding to the value \\\\( \\approx 2.98 \\times 10^{-19} \\\\).\n*\n* For small `x` values, the same method described above applies with the modification that the smallest value returned by \\\\( \\operatorname{log1p}(x) \\\\) is the minimum representable value, not \\\\( \\epsilon \\\\). Furthermore, we need to guard against underflow when \\\\( \\operatorname{log1p}(x) < \\epsilon \\\\).\n*\n* @param {number} x - input value\n* @param {number} lambda - power parameter\n* @returns {number} Box-Cox transformation of `1+x`\n*\n* @example\n* var v = boxcox1p( 1.0, 2.5 );\n* // returns ~1.8627\n*\n* @example\n* var v = boxcox1p( 4.0, 2.5 );\n* // returns ~21.9607\n*\n* @example\n* var v = boxcox1p( 10.0, 2.5 );\n* // returns ~160.1246\n*\n* @example\n* var v = boxcox1p( 2.0, 0.0 );\n* // returns ~1.0986\n*\n* @example\n* var v = boxcox1p( -1.0, 2.5 );\n* // returns -0.4\n*\n* @example\n* var v = boxcox1p( 0.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var v = boxcox1p( -1.0, -1.0 );\n* // returns -Infinity\n*/\nfunction boxcox1p( x, lambda ) {\n\tvar lgx;\n\tif ( isnan( x ) || isnan( lambda ) || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 && lambda < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tlgx = log1p( x );\n\tif (\n\t\tabs( lambda ) < 1.0e-19 ||\n\n\t\t// Guard against underflow...\n\t\t(\n\t\t\tabs( lgx ) < 1.0e-289 &&\n\t\t\tabs( lambda ) < 1.0e273\n\t\t)\n\t) {\n\t\treturn lgx;\n\t}\n\treturn expm1( lambda*lgx ) / lambda;\n}\n\n\n// EXPORTS //\nexport default boxcox1p;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-parameter Box-Cox transformation of `1+x`.\n*\n* @module @stdlib/math/base/special/boxcox1p\n*\n* @example\n* var boxcox1p = require( '@stdlib/math/base/special/boxcox1p' );\n*\n* var v = boxcox1p( 1.0, 2.5 );\n* // returns ~1.8627\n*\n* v = boxcox1p( 4.0, 2.5 );\n* // returns ~21.9607\n*\n* v = boxcox1p( 10.0, 2.5 );\n* // returns ~160.1246\n*\n* v = boxcox1p( 2.0, 0.0 );\n* // returns ~1.0986\n*\n* v = boxcox1p( -1.0, 2.5 );\n* // returns -0.4\n*\n* v = boxcox1p( 0.0, -1.0 );\n* // returns 0.0\n*\n* v = boxcox1p( -1.0, -1.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\nvar boxcox1p = __var_0__;\n\n\n// EXPORTS //\nexport default boxcox1p;\n"]}