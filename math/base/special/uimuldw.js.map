{"version":3,"sources":["@stdlib/math/base/special/uimuldw/lib/main.js","@stdlib/math/base/special/uimuldw/lib/index.js"],"names":["isnan","__var_0__","LOW_WORD_MASK","uimuldw","out","w1","w3","ha","hb","la","lb","a","b","t","k","arguments","length","NaN"],"mappings":"qCAsBA,IAAIA,EAAQC,EAMRC,EAAgB,MAiBpB,SAASC,IACR,IAAIC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAWJ,OAT0B,IAArBC,UAAUC,QACdZ,EAAMW,UAAW,GACjBJ,EAAII,UAAW,GACfH,EAAIG,UAAW,KAEfX,EAAM,CAAE,EAAG,GACXO,EAAII,UAAW,GACfH,EAAIG,UAAW,IAEXf,EAAOW,IAAOX,EAAOY,GAClBK,KAYRX,IADAO,GALAJ,IAJAE,KAAO,GAIIT,KAAoB,IAG/BQ,IANAE,KAAO,GAMIV,KAAoB,KAEb,GACPA,KAAoB,EAK/BG,GAFAQ,GAVAN,EAAOI,IAAM,KAAS,GAUXD,GAFXI,EAAMD,IAAM,KAAS,KAEK,KAEb,KAAS,EAGtBC,GADAD,EAAQJ,GAXRD,EAAOI,IAAM,KAAS,KAQfC,EAAIX,KAAoB,KAGJ,KACf,KAAS,EAErBE,EAAK,GAAUG,EAAGC,EAAOH,EAAKS,IAAQ,EACtCV,EAAK,IAAUS,GAAK,IAAOP,IAAQ,EAE5BF,GC5DL,IAACD,EAAUF","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {ArrayLikeObject} [out] - output array\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {ArrayLikeObject} output array\n*\n* @example\n* var v = uimuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction uimuldw() {\n\tvar out;\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar a;\n\tvar b;\n\tvar t;\n\tvar k;\n\n\tif ( arguments.length === 3 ) {\n\t\tout = arguments[ 0 ];\n\t\ta = arguments[ 1 ];\n\t\tb = arguments[ 2 ];\n\t} else {\n\t\tout = [ 0, 0 ];\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t}\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\tha = ( a >>> 16 ) >>> 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >>> 16 ) >>> 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tout[ 0 ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer\n\tout[ 1 ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default uimuldw;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @module @stdlib/math/base/special/uimuldw\n*\n* @example\n* var uimuldw = require( '@stdlib/math/base/special/uimuldw' );\n*\n* var v = uimuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\n\n// MODULES //\nvar uimuldw = __var_0__;\n\n\n// EXPORTS //\nexport default uimuldw;\n"]}