{"version":3,"sources":["@stdlib/math/base/special/signumf/lib/main.js","@stdlib/math/base/special/signumf/lib/index.js"],"names":["isnanf","__var_0__","signumf","x"],"mappings":"sCAsBA,IAAIA,EAASC,EA+Bb,SAASC,EAASC,GACjB,OAAW,IAANA,GAAaH,EAAQG,GAClBA,EAECA,EAAI,GAAS,EAAM,ECX1B,IAACD,EAAUD","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nanf';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function for a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var sign = signumf( -5.0 );\n* // returns -1.0\n*\n* @example\n* var sign = signumf( 5.0 );\n* // returns 1.0\n*\n* @example\n* var sign = signumf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var sign = signumf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var sign = signumf( NaN );\n* // returns NaN\n*/\nfunction signumf( x ) {\n\tif ( x === 0.0 || isnanf( x ) ) {\n\t\treturn x; // addresses both +-0\n\t}\n\treturn ( x < 0.0 ) ? -1.0 : 1.0;\n}\n\n\n// EXPORTS //\nexport default signumf;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the signum function for a single-precision floating-point number.\n*\n* @module @stdlib/math/base/special/signumf\n*\n* @example\n* var signumf = require( '@stdlib/math/base/special/signumf' );\n*\n* var sign = signumf( -5.0 );\n* // returns -1.0\n*\n* sign = signumf( 5.0 );\n* // returns 1.0\n*\n* sign = signumf( -0.0 );\n* // returns -0.0\n*\n* sign = signumf( 0.0 );\n* // returns 0.0\n*\n* sign = signumf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar signumf = __var_0__;\n\n\n// EXPORTS //\nexport default signumf;\n"]}