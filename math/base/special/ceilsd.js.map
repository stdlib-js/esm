{"version":3,"sources":["@stdlib/math/base/special/ceilsd/lib/ceilsd.js","@stdlib/math/base/special/ceilsd/lib/index.js"],"names":["isnan","__var_0__","isInfinite","__var_1__","pow","__var_2__","log10","__var_3__","ln","__var_4__","abs","__var_5__","floor","__var_6__","exponent","__var_7__","ceil","__var_8__","ceilsd","x","n","b","base","exp","s","y","NaN","arguments","length"],"mappings":"6RA8BA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAMC,EACNC,EAAQC,EACRC,EAAKC,EACLC,EAAMC,EACNC,EAAQC,EACRC,EAAWC,EACXC,EAAOC,EA6BX,SAASC,EAAQC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACJ,GACCzB,EAAOmB,IACPnB,EAAOoB,IACPA,EAAI,GACJlB,EAAYkB,GAEZ,OAAOM,IAER,GAAKC,UAAUC,OAAS,EAAI,CAC3B,GACC5B,EAAOqB,IACPA,GAAK,GACLnB,EAAYmB,GAEZ,OAAOK,IAERJ,EAAOD,OAEPC,EAAO,GAER,OAAKpB,EAAYiB,IAAa,IAANA,EAChBA,GAGPI,EADa,KAATD,EACEhB,EAAOI,EAAKS,IAEA,IAATG,EACHR,EAAUJ,EAAKS,IAGfX,EAAIE,EAAIS,IAAOX,EAAIc,GAE1BC,EAAMX,EAAOW,EAAMH,EAAI,GACvBI,EAAIpB,EAAKkB,EAAMZ,EAAKa,IAGfrB,EAAYsB,GACTL,GAIPM,EADIF,EAAM,EACNP,EAAMG,EAAIK,GAAMA,EAEhBR,EAAMG,EAAIK,GAAMA,EAGhBtB,EAAYuB,GACTN,EAEDM,IC9EL,IAACP,EAASjB","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_2__ from '@stdlib/math/base/special/pow';\nimport __var_3__ from '@stdlib/math/base/special/log10';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/math/base/special/abs';\nimport __var_6__ from '@stdlib/math/base/special/floor';\nimport __var_7__ from '@stdlib/number/float64/base/exponent';\nimport __var_8__ from '@stdlib/math/base/special/ceil';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isInfinite = __var_1__;\nvar pow = __var_2__;\nvar log10 = __var_3__;\nvar ln = __var_4__;\nvar abs = __var_5__;\nvar floor = __var_6__;\nvar exponent = __var_7__;\nvar ceil = __var_8__;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward positive infinity with \\\\(n\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = ceilsd( 3.141592653589793, 5 );\n* // returns 3.1416\n*\n* @example\n* var v = ceilsd( 3.141592653589793, 1 );\n* // returns 4.0\n*\n* @example\n* var v = ceilsd( 12368.0, 2 );\n* // returns 13000.0\n*\n* @example\n* var v = ceilsd( 0.0313, 2, 2 );\n* // returns 0.046875\n*/\nfunction ceilsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = ceil( x * s ) / s;\n\t} else {\n\t\ty = ceil( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default ceilsd;\n","import __var_0__ from './ceilsd.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a numeric value to the nearest number toward positive infinity with `n` significant figures.\n*\n* @module @stdlib/math/base/special/ceilsd\n*\n* @example\n* var ceilsd = require( '@stdlib/math/base/special/ceilsd' );\n*\n* var v = ceilsd( 3.141592653589793, 5 );\n* // returns 3.1416\n*\n* v = ceilsd( 3.141592653589793, 1 );\n* // returns 4.0\n*\n* v = ceilsd( 12368.0, 2 );\n* // returns 13000.0\n*\n* v = ceilsd( 0.0313, 2, 2 );\n* // returns 0.046875\n*/\n\n// MODULES //\nvar ceilsd = __var_0__;\n\n\n// EXPORTS //\nexport default ceilsd;\n"]}