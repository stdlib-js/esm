{"version":3,"sources":["@stdlib/math/base/special/binomcoefln/lib/binomcoefln.js","@stdlib/math/base/special/binomcoefln/lib/index.js"],"names":["isInteger","__var_0__","isnan","__var_1__","betaln","__var_2__","abs","__var_3__","ln","__var_4__","NINF","__var_5__","binomcoefln","n","k","NaN"],"mappings":"iNA2BA,IAAIA,EAAYC,EACZC,EAAQC,EACRC,EAASC,EACTC,EAAMC,EACNC,EAAKC,EACLC,EAAOC,EAwCX,SAASC,EAAaC,EAAGC,GACxB,OAAKZ,EAAOW,IAAOX,EAAOY,GAClBC,IAEFf,EAAWa,IAAQb,EAAWc,GAG/BD,EAAI,EACDD,GAAcC,EAAIC,EAAI,EAAKA,GAE9BA,EAAI,EACDJ,EAEG,IAANI,EACG,EAEG,IAANA,EACGN,EAAIF,EAAKO,IAEZA,EAAIC,EACDJ,EAEHG,EAAIC,EAAI,EACLF,EAAaC,EAAGA,EAAIC,IAGpBN,EAAIK,EAAI,GAAMT,EAAQS,EAAIC,EAAI,EAAGA,EAAI,GArBrCC,ICzBN,IAACH,EAAcX","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/betaln';\nimport __var_3__ from '@stdlib/math/base/special/abs';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__;\nvar isnan = __var_1__;\nvar betaln = __var_2__;\nvar abs = __var_3__;\nvar ln = __var_4__;\nvar NINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of the binomial coefficient of two integers.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {number} function value\n*\n* @example\n* var v = binomcoefln( 8, 2 );\n* // returns ~3.332\n*\n* @example\n* var v = binomcoefln( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = binomcoefln( -4, 2 );\n* // returns ~2.303\n*\n* @example\n* var v = binomcoefln( 88, 3 );\n* // returns ~11.606\n*\n* @example\n* var v = binomcoefln( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoefln( n, k ) {\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n < 0.0 ) {\n\t\treturn binomcoefln( -n + k - 1.0, k );\n\t}\n\tif ( k < 0 ) {\n\t\treturn NINF;\n\t}\n\tif ( k === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1 ) {\n\t\treturn ln( abs( n ) );\n\t}\n\tif ( n < k ) {\n\t\treturn NINF;\n\t}\n\tif ( n - k < 2 ) {\n\t\treturn binomcoefln( n, n - k );\n\t}\n\t// Case: n - k >= 2\n\treturn -ln( n + 1 ) - betaln( n - k + 1, k + 1 );\n}\n\n\n// EXPORTS //\nexport default binomcoefln;\n","import __var_0__ from './binomcoefln.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the natural logarithm of the binomial coefficient.\n*\n* @module @stdlib/math/base/special/binomcoefln\n*\n* @example\n* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );\n*\n* var v = binomcoefln( 8, 2 );\n* // returns ~3.332\n*\n* v = binomcoefln( 0, 0 );\n* // returns 0.0\n*\n* v = binomcoefln( -4, 2 );\n* // returns ~2.302\n*\n* v = binomcoefln( 88, 3 );\n* // returns ~11.606\n*\n* v = binomcoefln( NaN, 3 );\n* // returns NaN\n*\n* v = binomcoefln( 5, NaN );\n* // returns NaN\n*\n* v = binomcoefln( NaN, NaN );\n* // returns NaN\n*/\n\n// MODULES //\nvar binomcoefln = __var_0__;\n\n\n// EXPORTS //\nexport default binomcoefln;\n"]}