{"version":3,"sources":["@stdlib/math/base/assert/lib/index.js"],"names":["setReadOnly","__var_0__","ns","__var_1__","__var_2__","__var_3__","__var_4__","__var_5__","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","__var_13__","__var_14__","__var_15__","__var_16__","__var_17__","__var_18__","__var_19__","__var_20__","__var_21__","__var_22__","__var_23__","__var_24__","__var_25__"],"mappings":"w5FAmDA,IAAIA,EAAcC,EAUdC,EAAK,GASTF,EAAaE,EAAI,cAAeC,GAShCH,EAAaE,EAAI,aAAcE,GAS/BJ,EAAaE,EAAI,cAAeG,GAShCL,EAAaE,EAAI,YAAaI,GAS9BN,EAAaE,EAAI,SAAUK,GAS3BP,EAAaE,EAAI,WAAYM,GAS7BR,EAAaE,EAAI,YAAaO,GAS9BT,EAAaE,EAAI,aAAcQ,GAS/BV,EAAaE,EAAI,cAAeS,GAShCX,EAAaE,EAAI,YAAaU,GAS9BZ,EAAaE,EAAI,QAASW,GAS1Bb,EAAaE,EAAI,SAAUY,GAS3Bd,EAAaE,EAAI,oBAAqBa,GAStCf,EAAaE,EAAI,iBAAkBc,GASnChB,EAAaE,EAAI,kBAAmBe,GASpCjB,EAAaE,EAAI,uBAAwBgB,GASzClB,EAAaE,EAAI,uBAAwBiB,GASzCnB,EAAaE,EAAI,QAASkB,GAS1BpB,EAAaE,EAAI,oBAAqBmB,GAStCrB,EAAaE,EAAI,iBAAkBoB,GASnCtB,EAAaE,EAAI,kBAAmBqB,GASpCvB,EAAaE,EAAI,UAAWsB,GAS5BxB,EAAaE,EAAI,gBAAiBuB,GASlCzB,EAAaE,EAAI,gBAAiBwB,GASlC1B,EAAaE,EAAI,eAAgByB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-read-only-property';\nimport __var_1__ from '@stdlib/math/base/assert/int32-is-even';\nimport __var_2__ from '@stdlib/math/base/assert/int32-is-odd';\nimport __var_3__ from '@stdlib/math/base/assert/is-composite';\nimport __var_4__ from '@stdlib/math/base/assert/is-coprime';\nimport __var_5__ from '@stdlib/math/base/assert/is-even';\nimport __var_6__ from '@stdlib/math/base/assert/is-finite';\nimport __var_7__ from '@stdlib/math/base/assert/is-finitef';\nimport __var_8__ from '@stdlib/math/base/assert/is-infinite';\nimport __var_9__ from '@stdlib/math/base/assert/is-infinitef';\nimport __var_10__ from '@stdlib/math/base/assert/is-integer';\nimport __var_11__ from '@stdlib/math/base/assert/is-nan';\nimport __var_12__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_13__ from '@stdlib/math/base/assert/is-negative-integer';\nimport __var_14__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_15__ from '@stdlib/math/base/assert/is-negative-zerof';\nimport __var_16__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_17__ from '@stdlib/math/base/assert/is-nonpositive-integer';\nimport __var_18__ from '@stdlib/math/base/assert/is-odd';\nimport __var_19__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_20__ from '@stdlib/math/base/assert/is-positive-zero';\nimport __var_21__ from '@stdlib/math/base/assert/is-positive-zerof';\nimport __var_22__ from '@stdlib/math/base/assert/is-prime';\nimport __var_23__ from '@stdlib/math/base/assert/is-probability';\nimport __var_24__ from '@stdlib/math/base/assert/is-safe-integer';\nimport __var_25__ from '@stdlib/math/base/assert/uint32-is-pow2';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEvenInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-even}\n*/\nsetReadOnly( ns, 'isEvenInt32', __var_1__);\n\n/**\n* @name isOddInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-odd}\n*/\nsetReadOnly( ns, 'isOddInt32', __var_2__);\n\n/**\n* @name isComposite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-composite}\n*/\nsetReadOnly( ns, 'isComposite', __var_3__);\n\n/**\n* @name isCoprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-coprime}\n*/\nsetReadOnly( ns, 'isCoprime', __var_4__);\n\n/**\n* @name isEven\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-even}\n*/\nsetReadOnly( ns, 'isEven', __var_5__);\n\n/**\n* @name isFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finite}\n*/\nsetReadOnly( ns, 'isFinite', __var_6__);\n\n/**\n* @name isFinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finitef}\n*/\nsetReadOnly( ns, 'isFinitef', __var_7__);\n\n/**\n* @name isInfinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinite}\n*/\nsetReadOnly( ns, 'isInfinite', __var_8__);\n\n/**\n* @name isInfinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinitef}\n*/\nsetReadOnly( ns, 'isInfinitef', __var_9__);\n\n/**\n* @name isInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-integer}\n*/\nsetReadOnly( ns, 'isInteger', __var_10__);\n\n/**\n* @name isnan\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nan}\n*/\nsetReadOnly( ns, 'isnan', __var_11__);\n\n/**\n* @name isnanf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nanf}\n*/\nsetReadOnly( ns, 'isnanf', __var_12__);\n\n/**\n* @name isNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-integer}\n*/\nsetReadOnly( ns, 'isNegativeInteger', __var_13__);\n\n/**\n* @name isNegativeZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zero}\n*/\nsetReadOnly( ns, 'isNegativeZero', __var_14__);\n\n/**\n* @name isNegativeZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zerof}\n*/\nsetReadOnly( ns, 'isNegativeZerof', __var_15__);\n\n/**\n* @name isNonNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-integer}\n*/\nsetReadOnly( ns, 'isNonNegativeInteger', __var_16__);\n\n/**\n* @name isNonPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-integer}\n*/\nsetReadOnly( ns, 'isNonPositiveInteger', __var_17__);\n\n/**\n* @name isOdd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-odd}\n*/\nsetReadOnly( ns, 'isOdd', __var_18__);\n\n/**\n* @name isPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-integer}\n*/\nsetReadOnly( ns, 'isPositiveInteger', __var_19__);\n\n/**\n* @name isPositiveZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zero}\n*/\nsetReadOnly( ns, 'isPositiveZero', __var_20__);\n\n/**\n* @name isPositiveZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zerof}\n*/\nsetReadOnly( ns, 'isPositiveZerof', __var_21__);\n\n/**\n* @name isPrime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-prime}\n*/\nsetReadOnly( ns, 'isPrime', __var_22__);\n\n/**\n* @name isProbability\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-probability}\n*/\nsetReadOnly( ns, 'isProbability', __var_23__);\n\n/**\n* @name isSafeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-safe-integer}\n*/\nsetReadOnly( ns, 'isSafeInteger', __var_24__);\n\n/**\n* @name isPow2Uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/uint32-is-pow2}\n*/\nsetReadOnly( ns, 'isPow2Uint32', __var_25__);\n\n\n// EXPORTS //\nexport default ns;\n\nexport { __var_1__ as isEvenInt32, __var_2__ as isOddInt32, __var_3__ as isComposite, __var_4__ as isCoprime, __var_5__ as isEven, __var_6__ as isFinite, __var_7__ as isFinitef, __var_8__ as isInfinite, __var_9__ as isInfinitef, __var_10__ as isInteger, __var_11__ as isnan, __var_12__ as isnanf, __var_13__ as isNegativeInteger, __var_14__ as isNegativeZero, __var_15__ as isNegativeZerof, __var_16__ as isNonNegativeInteger, __var_17__ as isNonPositiveInteger, __var_18__ as isOdd, __var_19__ as isPositiveInteger, __var_20__ as isPositiveZero, __var_21__ as isPositiveZerof, __var_22__ as isPrime, __var_23__ as isProbability, __var_24__ as isSafeInteger, __var_25__ as isPow2Uint32};"]}