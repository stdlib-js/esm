{"version":3,"sources":["@stdlib/math/base/tools/hermitepoly/lib/main.js","@stdlib/math/base/tools/hermitepoly/lib/factory.js","@stdlib/math/base/tools/hermitepoly/lib/index.js"],"names":["SQRT2","__var_0__","pow","__var_1__","normhermitepoly","__var_2__","hermitepoly","n","x","constantFunction","isnan","isint","__var_3__","__var_4__","__var_5__","factory","c","NaN","setReadOnly"],"mappings":"kVAwBA,IAAIA,EAAQC,EACRC,EAAMC,EACNC,EAAkBC,EAgCtB,SAASC,EAAaC,EAAGC,GACxB,OAAON,EAAK,EAAK,GAAIK,GAAMH,EAAiBG,EAAGP,EAAMQ,GChCtD,IAAIC,EAAmBR,EACnBS,EAAQP,EACRQ,EAAQN,EACRL,EAAQY,EACRV,EAAMW,EACNT,EAAkBU,EAiBtB,SAASC,EAASR,GACjB,IAAIS,EACJ,OAAKT,EAAI,GAAKG,EAAOH,KAAQI,EAAOJ,GAC5BE,EAAkBQ,KAEf,IAANV,EACGE,EAAkB,IAE1BO,EAAId,EAAK,EAAK,GAAIK,GAUlB,SAAkBC,GACjB,OAAOQ,EAAIZ,EAAiBG,EAAGP,EAAMQ,KCZvC,IAAIU,EAAcjB,EACdK,EAAcH,EACdY,EAAUV,EAKda,EAAaZ,EAAa,UAAWS","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_1__ from '@stdlib/math/base/special/pow';\nimport __var_2__ from '@stdlib/math/base/tools/normhermitepoly';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar SQRT2 = __var_0__;\nvar pow = __var_1__;\nvar normhermitepoly = __var_2__;\n\n\n// MAIN //\n\n/**\n* Evaluates a physicist's Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - nonnegative polynomial degree\n* @param {number} x - evaluation point\n* @returns {number} function value\n*\n* @example\n* var v = hermitepoly( 1, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = hermitepoly( 1, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = hermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = hermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = hermitepoly( 2, 0.5 );\n* // returns -1.0\n*/\nfunction hermitepoly( n, x ) {\n\treturn pow( 2.0, 0.5*n ) * normhermitepoly( n, SQRT2*x );\n}\n\n\n// EXPORTS //\nexport default hermitepoly;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/assert/is-integer';\nimport __var_3__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_4__ from '@stdlib/math/base/special/pow';\nimport __var_5__ from '@stdlib/math/base/tools/normhermitepoly';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar isint = __var_2__;\nvar SQRT2 = __var_3__;\nvar pow = __var_4__;\nvar normhermitepoly = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a physicist's Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - polynomial degree\n* @returns {Function} function for evaluating a physicist's Hermite polynomial\n*\n* @example\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -1.0\n*/\nfunction factory( n ) {\n\tvar c;\n\tif ( n < 0 || isnan( n ) || !isint( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( n === 0 ) {\n\t\treturn constantFunction( 1.0 );\n\t}\n\tc = pow( 2.0, 0.5*n );\n\treturn polyval;\n\n\t/**\n\t* Evaluates a physicist's Hermite polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a physicist's Hermite polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\treturn c * normhermitepoly( n, SQRT2*x );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a physicist's Hermite polynomial.\n*\n* @module @stdlib/math/base/tools/hermitepoly\n*\n* @example\n* var hermitepoly = require( '@stdlib/math/base/tools/hermitepoly' );\n*\n* var v = hermitepoly( 1, 1.0 );\n* // returns 2.0\n*\n* v = hermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* v = hermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* v = hermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* v = hermitepoly( 2, 0.5 );\n* // returns -1.0\n*\n* @example\n* var factory = require( '@stdlib/math/base/tools/hermitepoly' ).factory;\n*\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -1.0\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar hermitepoly = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( hermitepoly, 'factory', factory );\n\n\n// EXPORTS //\nexport default hermitepoly;\n"]}