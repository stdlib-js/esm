{"version":3,"sources":["@stdlib/math/base/tools/sum-series/lib/generators.js","@stdlib/math/base/tools/sum-series/lib/basic.js","@stdlib/math/base/tools/sum-series/lib/index.js"],"names":["abs","__var_0__","EPS","__var_1__","MAX_TERMS","sumSeries","generator","options","tolerance","nextTerm","counter","result","opts","arguments","length","maxTerms","initialValue","next","hasGeneratorSupport","basic","__var_2__","sumSeries$3"],"mappings":"qJAuBA,IAAIA,EAAMC,EACNC,EAAMC,EAKNC,EAAY,IA4BhB,SAASC,EAAWC,EAAWC,GAC9B,IACIC,EACAC,EACAC,EACAC,EACAC,EAWJ,GATAA,EAAO,GACFC,UAAUC,OAAS,IACvBF,EAAOL,GAERC,EAAYI,EAAKJ,WAAaN,EAC9BQ,EAAUE,EAAKG,UAAYX,EAC3BO,EAASC,EAAKI,cAAgB,GAGT,KADmB,mBAAnBV,EAAUW,OAG9B,IAAMR,KAAYH,EAEjB,GACCN,EAAIQ,GAFLG,GAAUF,KAEkBT,EAAIS,IACjB,KAAZC,EAEF,WAKF,GAECC,GADAF,EAAWH,UAGFN,EAAIQ,EAAYG,GAAUX,EAAIS,MAAiBC,GAE1D,OAAOC,ECtER,IAAIX,EAAMC,EACNC,EAAMC,EAKNC,EAAY,IA4BhB,SAASC,EAAWC,EAAWC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJA,EAAO,GAEFC,UAAUC,OAAS,IACvBF,EAAOL,GAERC,EAAYI,EAAKJ,WAAaN,EAC9BQ,EAAUE,EAAKG,UAAYX,EAC3BO,EAASC,EAAKI,cAAgB,EAG9B,GAECL,GADAF,EAAWH,UAGFN,EAAIQ,EAAYG,GAAUX,EAAIS,MAAiBC,GAEzD,OAAOC,ECnCR,IAOIN,EAPAa,EAAsBjB,EACtBK,EAAYH,EACZgB,EAAQC,EAcZC,EAPChB,EADIa,IACQZ,EAEAa","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/constants/math/float64-eps';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar EPS = __var_1__;\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesGenerator( 0.9 );\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function* geometricSeriesGenerator( x ) {\n*     var exponent = 0;\n*     while ( true ) {\n*         yield Math.pow( x, exponent );\n*         exponent += 1;\n*     }\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar isgenerator;\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\tisgenerator = typeof generator.next === 'function';\n\tif ( isgenerator === true ) {\n\t\t// Case A: Iterate over generator object created by a generator function...\n\t\tfor ( nextTerm of generator ) {\n\t\t\tresult += nextTerm;\n\t\t\tif (\n\t\t\t\tabs(tolerance * result) >= abs(nextTerm) ||\n\t\t\t\t--counter === 0 // eslint-disable-line no-plusplus\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Case B: Repeatedly call function...\n\t\tdo {\n\t\t\tnextTerm = generator();\n\t\t\tresult += nextTerm;\n\t\t}\n\t\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\nexport default sumSeries;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/constants/math/float64-eps';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar EPS = __var_1__;\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\t// Repeatedly call function...\n\tdo {\n\t\tnextTerm = generator();\n\t\tresult += nextTerm;\n\t}\n\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\n\treturn result;\n}\n\n\n// EXPORTS //\nexport default sumSeries;\n","import __var_0__ from '@stdlib/assert/has-generator-support';\nimport __var_1__ from './generators.js';\nimport __var_2__ from './basic.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @module @stdlib/math/base/tools/sum-series\n*\n* @example\n* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );\n*\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\n\n// MODULES //\nvar hasGeneratorSupport = __var_0__;\nvar generator = __var_1__;\nvar basic = __var_2__;\n\n\n// MAIN //\n\nvar sumSeries;\nif ( hasGeneratorSupport() ) {\n\tsumSeries = generator;\n} else {\n\tsumSeries = basic;\n}\n\n\n// EXPORTS //\nexport default sumSeries;\n"]}