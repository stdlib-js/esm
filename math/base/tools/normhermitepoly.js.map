{"version":3,"sources":["@stdlib/math/base/tools/normhermitepoly/lib/main.js","@stdlib/math/base/tools/normhermitepoly/lib/factory.js","@stdlib/math/base/tools/normhermitepoly/lib/index.js"],"names":["isnan","__var_0__","isint","__var_1__","normhermitepoly","n","x","y1","y2","y3","i","NaN","constantFunction","__var_2__","factory","setReadOnly"],"mappings":"8MAuBA,IAAIA,EAAQC,EACRC,EAAQC,EA4BZ,SAASC,EAAiBC,EAAGC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKV,EAAOK,IAAOL,EAAOM,IAAOD,EAAI,IAAMH,EAAOG,GACjD,OAAOM,IAER,GAAW,IAANN,EAEJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOC,EAIR,IAFAE,EAAK,EACLC,EAAK,EACCC,EAAIL,EAAGK,EAAI,EAAGA,IACnBH,EAAMD,EAAEE,EAAOE,EAAED,EACjBA,EAAKD,EACLA,EAAKD,EAEN,OAAQD,EAAEE,EAAMC,ECnDjB,IAAIG,EAAmBX,EACnBD,EAAQG,EACRD,EAAQW,EAiBZ,SAASC,EAAST,GACjB,OAAKA,EAAI,GAAKL,EAAOK,KAAQH,EAAOG,GAC5BO,EAAkBD,KAEf,IAANN,EACGO,EAAkB,GAW1B,SAAkBN,GACjB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKV,EAAOM,GACX,OAAOK,IAIR,IAFAH,EAAK,EACLC,EAAK,EACCC,EAAIL,EAAGK,EAAI,EAAGA,IACnBH,EAAMD,EAAEE,EAAOE,EAAED,EACjBA,EAAKD,EACLA,EAAKD,EAEN,OAAQD,EAAEE,EAAMC,GCtBlB,IAAIM,EAAcd,EACdG,EAAkBD,EAClBW,EAAUD,EAKdE,EAAaX,EAAiB,UAAWU","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isint = __var_1__;\n\n\n// MAIN //\n\n/**\n* Evaluates a normalized Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - nonnegative polynomial degree\n* @param {number} x - evaluation point\n* @returns {number} function value\n*\n* @example\n* var v = normhermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = normhermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = normhermitepoly( 2, 0.5 );\n* // returns -0.75\n*\n* @example\n* var v = normhermitepoly( -1, 0.5 );\n* // returns NaN\n*/\nfunction normhermitepoly( n, x ) {\n\tvar y1;\n\tvar y2;\n\tvar y3;\n\tvar i;\n\n\tif ( isnan( n ) || isnan( x ) || n < 0 || !isint( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 0 ) {\n\t\t// `x` is completely canceled from the expression:\n\t\treturn 1.0;\n\t}\n\tif ( n === 1 ) {\n\t\treturn x;\n\t}\n\ty2 = 1.0;\n\ty3 = 0.0;\n\tfor ( i = n; i > 1; i-- ) {\n\t\ty1 = (x*y2) - (i*y3);\n\t\ty3 = y2;\n\t\ty2 = y1;\n\t}\n\treturn (x*y2) - y3;\n}\n\n\n// EXPORTS //\nexport default normhermitepoly;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/assert/is-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar isint = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a normalized Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - polynomial degree\n* @returns {Function} function for evaluating a normalized Hermite polynomial\n*\n* @example\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\nfunction factory( n ) {\n\tif ( n < 0 || isnan( n ) || !isint( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( n === 0 ) {\n\t\treturn constantFunction( 1.0 );\n\t}\n\treturn polyval;\n\n\t/**\n\t* Evaluates a normalized Hermite polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a normalized Hermite polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\tvar y1;\n\t\tvar y2;\n\t\tvar y3;\n\t\tvar i;\n\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\ty2 = 1.0;\n\t\ty3 = 0.0;\n\t\tfor ( i = n; i > 1; i-- ) {\n\t\t\ty1 = (x*y2) - (i*y3);\n\t\t\ty3 = y2;\n\t\t\ty2 = y1;\n\t\t}\n\t\treturn (x*y2) - y3;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a normalized Hermite polynomial.\n*\n* @module @stdlib/math/base/tools/normhermitepoly\n*\n* @example\n* var normhermitepoly = require( '@stdlib/math/base/tools/normhermitepoly' );\n*\n* var v = normhermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* v = normhermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* v = normhermitepoly( 2, 0.5 );\n* // returns -0.75\n*\n* v = normhermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* @example\n* var factory = require( '@stdlib/math/base/tools/normhermitepoly' ).factory;\n*\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar normhermitepoly = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( normhermitepoly, 'factory', factory );\n\n\n// EXPORTS //\nexport default normhermitepoly;\n"]}