{"version":3,"sources":["@stdlib/math/base/complex/flipsign/lib/cflipsign.js","@stdlib/math/base/complex/flipsign/lib/main.js","@stdlib/math/base/complex/flipsign/lib/index.js"],"names":["isNegativeZero","__var_0__","cflipsign","out","re","im","y","flipsign","arguments","length"],"mappings":"+CAsBA,IAAIA,EAAiBC,EAkCrB,SAASC,EAAWC,EAAKC,EAAIC,EAAIC,GAOhC,OANKA,EAAI,GAAKN,EAAgBM,MAC7BF,GAAMA,EACNC,GAAMA,GAEPF,EAAK,GAAMC,EACXD,EAAK,GAAME,EACJF,ECzCR,IAAII,EAAWN,EAmCf,SAASC,EAAWC,EAAKC,EAAIC,EAAIC,GAChC,OAA0B,IAArBE,UAAUC,OACPF,EAAU,CAAE,EAAK,GAAOJ,EAAKC,EAAIC,GAElCE,EAAUJ,EAAKC,EAAIC,EAAIC,GCV5B,IAACJ,EAAYD","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNegativeZero = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a complex number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @param {number} y - number from which to derive the sign\n* @returns {(Array|TypedArray|Object)} function result\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cflipsign( out, -4.2, 5.5, 55 );\n* // returns [ -4.2, 5.5 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = new Array( 2 );\n* var v = cflipsign( out, 0.0, 0.0, -8 );\n* // returns [ -0.0, -0.0 ]\n*\n* @example\n* var out = new Array( 2 );\n* var v = cflipsign( out, NaN, NaN, 9 );\n* // returns [ NaN, NaN ]\n*/\nfunction cflipsign( out, re, im, y ) {\n\tif ( y < 0 || isNegativeZero( y ) ) {\n\t\tre = -re;\n\t\tim = -im;\n\t}\n\tout[ 0 ] = re;\n\tout[ 1 ] = im;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default cflipsign;\n","import __var_0__ from './cflipsign.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar flipsign = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a complex number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @param {number} y - number from which to derive the sign\n* @returns {(Array|TypedArray|Object)} function result\n*\n* @example\n* var v = cflipsign( -4.2, 5.5, 66 );\n* // returns [ -4.2, 5.5 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cflipsign( out, -4.2, 5.5, 55 );\n* // returns [ -4.2, 5.5 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = cflipsign( 0.0, 0.0, -8 );\n* // returns [ -0.0, -0.0 ]\n*\n* @example\n* var v = cflipsign( NaN, NaN, -9 );\n* // returns [ NaN, NaN ]\n*/\nfunction cflipsign( out, re, im, y ) {\n\tif ( arguments.length === 3 ) {\n\t\treturn flipsign( [ 0.0, 0.0 ], out, re, im );\n\t}\n\treturn flipsign( out, re, im, y );\n}\n\n\n// EXPORTS //\nexport default cflipsign;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a complex number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @module @stdlib/math/base/complex/flipsign\n*\n* @example\n* var cflipsign = require( '@stdlib/math/base/complex/flipsign' );\n*\n* var v = cflipsign( -4.2, 5.5, 5 );\n* // returns [ -4.2, 5.5 ]\n*\n* v = cflipsign( 0.0, 0.0, -99 );\n* // returns [ -0.0, -0.0 ]\n*\n* v = cflipsign( NaN, NaN, 6 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var cflipsign = require( '@stdlib/math/base/complex/flipsign' );\n*\n* var out = new Array( 2 );\n*\n* var v = cflipsign( out, -4.2, 5.5, -7 );\n* // returns [ 4.2, -5.5 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar cflipsign = __var_0__;\n\n\n// EXPORTS //\nexport default cflipsign;\n"]}