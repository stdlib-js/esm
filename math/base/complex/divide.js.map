{"version":3,"sources":["@stdlib/math/base/complex/divide/lib/internal_compreal.js","@stdlib/math/base/complex/divide/lib/robust_internal.js","@stdlib/math/base/complex/divide/lib/cdiv.js","@stdlib/math/base/complex/divide/lib/main.js","@stdlib/math/base/complex/divide/lib/index.js"],"names":["internalCompreal","re1","im1","re2","im2","r","t","br","__var_0__","robustInternal","out","abs","max","__var_1__","FLOAT64_BIGGEST","__var_2__","FLOAT64_SMALLEST","__var_3__","EPS","__var_4__","__var_5__","LARGE_THRESHOLD","SMALL_THRESHOLD","RECIP_EPS_SQR","cdiv","ab","cd","s","divide","arguments","length"],"mappings":"0PAyCA,SAASA,EAAkBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAGC,GACjD,IAAIC,EACJ,OAAW,IAANF,GACKJ,EAAOG,GAAOF,EAAIC,IAAUG,EAG1B,KADZC,EAAKL,EAAMG,GAEDJ,EAAIK,EAASJ,EAAII,EAAKD,GAEvBJ,EAAIM,GAAOD,EC5BrB,IAAIN,EAAmBQ,EAqBvB,SAASC,EAAgBC,EAAKT,EAAKC,EAAKC,EAAKC,GAC5C,IAAIC,EACAC,EAGJA,EAAI,GAAQH,EAAOC,GADnBC,EAAID,EAAMD,IAGVO,EAAK,GAAMV,EAAkBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAGC,GACpDI,EAAK,GAAMV,EAAkBE,GAAMD,EAAKE,EAAKC,EAAKC,EAAGC,GCxBtD,IAAIK,EAAMH,EACNI,EAAMC,EACNC,EAAkBC,EAClBC,EAAmBC,EACnBC,EAAMC,EACNV,EAAiBW,EAKjBC,EAAoC,GAAlBP,EAClBQ,EAAkBN,GAAqB,EAPjCG,GAQNI,EAAgB,GARVJ,EAAAA,GAiCV,SAASK,EAAMd,EAAKT,EAAKC,EAAKC,EAAKC,GAClC,IAAIqB,EACAC,EACAC,EAgCJ,OA9BAF,EAAKb,EAAKD,EAAIV,GAAMU,EAAIT,IACxBwB,EAAKd,EAAKD,EAAIR,GAAMQ,EAAIP,IACxBuB,EAAI,EAECF,GAAMJ,GACVpB,GAAO,GACPC,GAAO,GACPyB,GAAK,GACMF,GAAMH,IACjBrB,GAAOsB,EACPrB,GAAOqB,EACPI,GAAKJ,GAEDG,GAAML,GACVlB,GAAO,GACPC,GAAO,GACPuB,GAAK,IACMD,GAAMJ,IACjBnB,GAAOoB,EACPnB,GAAOmB,EACPI,GAAKJ,GAEDZ,EAAKP,IAASO,EAAKR,GACvBM,EAAgBC,EAAKT,EAAKC,EAAKC,EAAKC,IAEpCK,EAAgBC,EAAKR,EAAKD,EAAKG,EAAKD,GACpCO,EAAK,KAAQ,GAEdA,EAAK,IAAOiB,EACZjB,EAAK,IAAOiB,EACLjB,EC7ER,IAAIkB,EAASpB,EAiCb,SAASgB,EAAMd,EAAKT,EAAKC,EAAKC,EAAKC,GAClC,OAA0B,IAArByB,UAAUC,OACPF,EAAQ,CAAE,EAAK,GAAOlB,EAAKT,EAAKC,EAAKC,GAEtCyB,EAAQlB,EAAKT,EAAKC,EAAKC,EAAKC,GCdjC,IAACoB,EAAOhB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the real part of the quotient.\n*\n* ## Notes\n*\n* -   See figure 10 of [reference][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @param {number} r - partial result\n* @param {number} t - partial result\n* @returns {number} real part of the quotient\n*/\nfunction internalCompreal( re1, im1, re2, im2, r, t ) {\n\tvar br;\n\tif ( r === 0.0 ) {\n\t\treturn ( re1 + (im2 * (im1/re2)) ) * t;\n\t}\n\tbr = im1 * r;\n\tif ( br === 0.0 ) {\n\t\treturn ( re1*t ) + ( (im1*t) * r );\n\t}\n\treturn ( re1+br ) * t;\n}\n\n\n// EXPORTS //\nexport default internalCompreal;\n","import __var_0__ from './internal_compreal.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar internalCompreal = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the complex division.\n*\n* ## Notes\n*\n* -   See figure 10 of [reference][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n*/\nfunction robustInternal( out, re1, im1, re2, im2 ) {\n\tvar r;\n\tvar t;\n\n\tr = im2 / re2;\n\tt = 1.0 / ( re2 + (im2*r) );\n\n\tout[ 0 ] = internalCompreal( re1, im1, re2, im2, r, t );\n\tout[ 1 ] = internalCompreal( im1, -re1, re2, im2, r, t );\n}\n\n\n// EXPORTS //\nexport default robustInternal;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/max';\nimport __var_2__ from '@stdlib/constants/math/float64-max';\nimport __var_3__ from '@stdlib/constants/math/float64-smallest-normal';\nimport __var_4__ from '@stdlib/constants/math/float64-eps';\nimport __var_5__ from './robust_internal.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar max = __var_1__;\nvar FLOAT64_BIGGEST = __var_2__;\nvar FLOAT64_SMALLEST = __var_3__;\nvar EPS = __var_4__;\nvar robustInternal = __var_5__;\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Divides two complex numbers.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );\n* // returns [ 5.0, 3.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction cdiv( out, re1, im1, re2, im2 ) {\n\tvar ab;\n\tvar cd;\n\tvar s;\n\n\tab = max( abs(re1), abs(im1) );\n\tcd = max( abs(re2), abs(im2) );\n\ts = 1.0;\n\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre1 *= 0.5;\n\t\tim1 *= 0.5;\n\t\ts *= 2.0;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre1 *= RECIP_EPS_SQR;\n\t\tim1 *= RECIP_EPS_SQR;\n\t\ts /= RECIP_EPS_SQR;\n\t}\n\tif ( cd >= LARGE_THRESHOLD ) {\n\t\tre2 *= 0.5;\n\t\tim2 *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( cd <= SMALL_THRESHOLD ) {\n\t\tre2 *= RECIP_EPS_SQR;\n\t\tim2 *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im2 ) <= abs( re2 ) ) {\n\t\trobustInternal( out, re1, im1, re2, im2 );\n\t} else {\n\t\trobustInternal( out, im1, re1, im2, re2 );\n\t\tout[ 1 ] *= -1;\n\t}\n\tout[ 0 ] *= s;\n\tout[ 1 ] *= s;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default cdiv;\n","import __var_0__ from './cdiv.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar divide = __var_0__;\n\n\n// MAIN //\n\n/**\n* Divides two complex numbers.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1â€“25. <https://arxiv.org/abs/1210.4539>.\n*\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var v = cdiv( -13.0, -1.0, -2.0, 1.0 );\n* // returns [ 5.0, 3.0 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );\n* // returns [ 5.0, 3.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction cdiv( out, re1, im1, re2, im2 ) {\n\tif ( arguments.length === 4 ) {\n\t\treturn divide( [ 0.0, 0.0 ], out, re1, im1, re2 );\n\t}\n\treturn divide( out, re1, im1, re2, im2 );\n}\n\n\n// EXPORTS //\nexport default cdiv;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Divide two complex numbers.\n*\n* @module @stdlib/math/base/complex/divide\n*\n* @example\n* var cdiv = require( '@stdlib/math/base/complex/divide' );\n*\n* var v = cdiv( -13.0, -1.0, -2.0, 1.0 );\n* // returns [ 5.0, 3.0 ]\n*\n* @example\n* var cdiv = require( '@stdlib/math/base/complex/divide' );\n*\n* var out = new Array( 2 );\n*\n* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );\n* // returns [ 5.0, 3.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar cdiv = __var_0__;\n\n\n// EXPORTS //\nexport default cdiv;\n"]}