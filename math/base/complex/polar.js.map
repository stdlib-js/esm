{"version":3,"sources":["@stdlib/math/base/complex/polar/lib/cpolar.js","@stdlib/math/base/complex/polar/lib/main.js","@stdlib/math/base/complex/polar/lib/index.js"],"names":["cabs","__var_0__","cphase","__var_1__","cpolar","out","re","im","polar","arguments","length"],"mappings":"kDAuBA,IAAIA,EAAOC,EACPC,EAASC,EAuBb,SAASC,EAAQC,EAAKC,EAAIC,GAGzB,OAFAF,EAAK,GAAML,EAAMM,EAAIC,GACrBF,EAAK,GAAMH,EAAQI,EAAIC,GAChBF,EC5BR,IAAIG,EAAQP,EA0BZ,SAASG,EAAQC,EAAKC,EAAIC,GACzB,OAA0B,IAArBE,UAAUC,OACPF,EAAO,CAAE,EAAK,GAAOH,EAAKC,GAE3BE,EAAOH,EAAKC,EAAIC,GCPrB,IAACH,EAASH","sourcesContent":["import __var_0__ from '@stdlib/math/base/complex/abs';\nimport __var_1__ from '@stdlib/math/base/complex/phase';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cabs = __var_0__;\nvar cphase = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a complex number.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)\n*\n* @example\n* var out = new Array( 2 );\n*\n* var o = cpolar( out, 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* var bool = ( o === out );\n* // returns true\n*/\nfunction cpolar( out, re, im ) {\n\tout[ 0 ] = cabs( re, im );\n\tout[ 1 ] = cphase( re, im );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default cpolar;\n","import __var_0__ from './cpolar.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar polar = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a complex number.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)\n*\n* @example\n* var o = cpolar( 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var o = cpolar( out, 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* var bool = ( o === out );\n* // returns true\n*/\nfunction cpolar( out, re, im ) {\n\tif ( arguments.length === 2 ) {\n\t\treturn polar( [ 0.0, 0.0 ], out, re );\n\t}\n\treturn polar( out, re, im );\n}\n\n\n// EXPORTS //\nexport default cpolar;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the absolute value and the phase of a complex number.\n*\n* @module @stdlib/math/base/complex/polar\n*\n* @example\n* var cpolar = require( '@stdlib/math/base/complex/polar' );\n*\n* var o = cpolar( 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* @example\n* var cpolar = require( '@stdlib/math/base/complex/polar' );\n*\n* var out = new Array( 2 );\n*\n* var o = cpolar( out, 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* var bool = ( o === out );\n* // returns true\n*/\n\n// MODULES //\nvar cpolar = __var_0__;\n\n\n// EXPORTS //\nexport default cpolar;\n"]}