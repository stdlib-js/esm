{"version":3,"sources":["@stdlib/math/base/complex/floor/lib/cfloor.js","@stdlib/math/base/complex/floor/lib/main.js","@stdlib/math/base/complex/floor/lib/index.js"],"names":["floor","__var_0__","cfloor","out","re","im","arguments","length"],"mappings":"qCAsBA,IAAIA,EAAQC,EAkCZ,SAASC,EAAQC,EAAKC,EAAIC,GAGzB,OAFAF,EAAK,GAAMH,EAAOI,GAClBD,EAAK,GAAMH,EAAOK,GACXF,ECrCR,IAAIH,EAAQC,EAkCZ,SAASC,EAAQC,EAAKC,EAAIC,GACzB,OAA0B,IAArBC,UAAUC,OACPP,EAAO,CAAE,EAAK,GAAOG,EAAKC,GAE3BJ,EAAOG,EAAKC,EAAIC,GCNrB,IAACH,EAASD","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// MAIN //\n\n/**\n* Rounds a complex number toward negative infinity.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} rounded components\n*\n* @example\n* var out = new Array( 2 );\n* var v = cfloor( out, -4.2, 5.5 );\n* // returns [ -5.0, 5.0 ]\n*\n* @example\n* var out = new Array( 2 );\n* var v = cfloor( out, 9.99999, 0.1 );\n* // returns [ 9.0, 0.0 ]\n*\n* @example\n* var out = new Array( 2 );\n* var v = cfloor( out, 0.0, 0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* @example\n* var out = new Array( 2 );\n* var v = cfloor( out, NaN, NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction cfloor( out, re, im ) {\n\tout[ 0 ] = floor( re );\n\tout[ 1 ] = floor( im );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default cfloor;\n","import __var_0__ from './cfloor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// MAIN //\n\n/**\n* Rounds a complex number toward negative infinity.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} rounded components\n*\n* @example\n* var v = cfloor( -4.2, 5.5 );\n* // returns [ -5.0, 5.0 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cfloor( out, 9.99999, 0.1 );\n* // returns [ 9.0, 0.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = cfloor( 0.0, 0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* @example\n* var v = cfloor( NaN, NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction cfloor( out, re, im ) {\n\tif ( arguments.length === 2 ) {\n\t\treturn floor( [ 0.0, 0.0 ], out, re );\n\t}\n\treturn floor( out, re, im );\n}\n\n\n// EXPORTS //\nexport default cfloor;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a complex number toward negative infinity.\n*\n* @module @stdlib/math/base/complex/floor\n*\n* @example\n* var cfloor = require( '@stdlib/math/base/complex/floor' );\n*\n* var v = cfloor( -4.2, 5.5 );\n* // returns [ -5.0, 5.0 ]\n*\n* v = cfloor( 9.99999, 0.1 );\n* // returns [ 9.0, 0.0 ]\n*\n* v = cfloor( 0.0, 0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* v = cfloor( NaN, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var cfloor = require( '@stdlib/math/base/complex/floor' );\n*\n* var out = new Array( 2 );\n*\n* var v = cfloor( out, -4.2, 5.5 );\n* // returns [ -5.0, 5.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\nvar cfloor = __var_0__;\n\n\n// EXPORTS //\nexport default cfloor;\n"]}