{"version":3,"sources":["@stdlib/math/strided/special/dcbrt/lib/dcbrt.js","@stdlib/math/strided/special/dcbrt/lib/ndarray.js","@stdlib/math/strided/special/dcbrt/lib/index.js"],"names":["dmap","__var_0__","cbrt","__var_1__","dcbrt","N","x","strideX","y","strideY","ndarray","offsetX","offsetY","setReadOnly","__var_2__"],"mappings":"sKAuBA,IAAIA,EAAOC,EACPC,EAAOC,EAwBX,SAASC,EAAOC,EAAGC,EAAGC,EAASC,EAAGC,GACjC,OAAOT,EAAMK,EAAGC,EAAGC,EAASC,EAAGC,EAASP,GC1BzC,IAAIF,EAAOC,EAAUS,QACjBR,EAAOC,EA0BX,SAASC,EAAOC,EAAGC,EAAGC,EAASI,EAASH,EAAGC,EAASG,GACnD,OAAOZ,EAAMK,EAAGC,EAAGC,EAASI,EAASH,EAAGC,EAASG,EAASV,GC3B3D,IAAIW,EAAcZ,EACdG,EAAQD,EACRO,EAAUI,EAKdD,EAAaT,EAAO,UAAWM","sourcesContent":["import __var_0__ from '@stdlib/strided/base/dmap';\nimport __var_1__ from '@stdlib/math/base/special/cbrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmap = __var_0__;\nvar cbrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the cube root of each element in a double-precision floating-point strided array `x` and assigns the results to elements in a double-precision floating-point strided array `y`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0, 64.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrt( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction dcbrt( N, x, strideX, y, strideY ) {\n\treturn dmap( N, x, strideX, y, strideY, cbrt );\n}\n\n\n// EXPORTS //\nexport default dcbrt;\n","import __var_0__ from '@stdlib/strided/base/dmap';\nimport __var_1__ from '@stdlib/math/base/special/cbrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmap = __var_0__.ndarray;\nvar cbrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the cube root of each element in a double-precision floating-point strided array `x` and assigns the results to elements in a double-precision floating-point strided array `y`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0, 64.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrt( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction dcbrt( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dmap( N, x, strideX, offsetX, y, strideY, offsetY, cbrt );\n}\n\n\n// EXPORTS //\nexport default dcbrt;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dcbrt.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dcbrt = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dcbrt, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dcbrt;\n"]}