{"version":3,"sources":["@stdlib/math/strided/special/abs/lib/data.js","@stdlib/math/strided/special/abs/lib/abs.js","@stdlib/math/strided/special/abs/lib/ndarray.js","@stdlib/math/strided/special/abs/lib/props.js","@stdlib/math/strided/special/abs/lib/index.js"],"names":["abs","__var_0__","absf","__var_1__","labs","__var_2__","identity","__var_3__","data","dispatch","unary","types","meta","__var_4__","fcn","nargs","nin","nout","N","x","strideX","y","strideY","ndarray","offsetX","offsetY","setReadOnly","setReadOnlyAccessor","dtypes2signatures","dtypes","setProps","bool"],"mappings":"o8CA2BIA,EAAMC,EACNC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EAKXC,EAAO,CARDP,EAAAA,EACCE,EAAAA,EAAAA,EADDF,EAECI,EAAAA,EAAAA,EAAAA,EAFDJ,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAGKM,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GCJXE,EAAWR,EACXS,EAAQP,EACRQ,EAAQN,EACRO,EAAOL,EACPC,EAAOK,EAKPC,EAAML,EAAUC,EAAOC,EAAOH,EAAMI,EAAKG,MAAOH,EAAKI,IAAKJ,EAAKK,MAkCnE,SAASjB,EAAKkB,EAAGC,EAAGC,EAASC,EAAGC,GAC/B,OAAOR,EAAKI,EAAGC,EAAGC,EAASC,EAAGC,GC5C/B,IAAIb,EAAWR,EACXS,EAAQP,EAAUoB,QAClBZ,EAAQN,EACRO,EAAOL,EACPC,EAAOK,EAKPC,EAAML,EAAUC,EAAOC,EAAOH,EAAMI,EAAKG,MAAMH,EAAKI,IAAIJ,EAAKK,KAAML,EAAKI,IAAKJ,EAAKK,MAsCtF,SAASjB,EAAKkB,EAAGC,EAAGC,EAASI,EAASH,EAAGC,EAASG,GACjD,OAAOX,EAAKI,EAAGC,EAAGC,EAASI,EAASH,EAAGC,EAASG,GChDjD,IAAIC,EAAczB,EACd0B,EAAsBxB,EACtByB,EAAoBvB,EACpBwB,EAAStB,EACTK,EAAOC,EAWX,SAASF,IACR,OAAOiB,EAAmBC,EAAQjB,EAAKI,IAAKJ,EAAKK,MAalD,SAASa,EAAUhB,EAAKiB,GAGtBL,EAAaZ,EAAK,QADdiB,EACuBnB,EAAKG,MAAMH,EAAKI,IAAIJ,EAAKK,KAEzBL,EAAKG,OAGjCW,EAAaZ,EAAK,MAAOF,EAAKI,KAG9BU,EAAaZ,EAAK,OAAQF,EAAKK,MAG/BU,EAAqBb,EAAK,QAASH,GC5CpC,IAAIe,EAAczB,EACdD,EAAMG,EACNoB,EAAUlB,EACVyB,EAAWvB,EAKfmB,EAAa1B,EAAK,UAAWuB,GAC7BO,EAAU9B,GAAK,GACf8B,EAAU9B,EAAIuB,SAAS","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/absf';\nimport __var_2__ from '@stdlib/math/base/special/labs';\nimport __var_3__ from '@stdlib/math/base/special/identity';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/capitalized-comments */\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar absf = __var_1__;\nvar labs = __var_2__;\nvar identity = __var_3__;\n\n\n// MAIN //\n\nvar data = [\n\t// NOTE: the following **must** match the order in `./types.json`. The order should be according to likelihood of use (e.g., if `float64` arrays are more likely, then `float64` types/data should come before `uint8`).\n\n\t// float64\n\tabs,\n\tabs,\n\n\t// float32\n\tabsf,\n\tabsf,\n\tabsf,\n\n\t// generic\n\tabs,\n\n\t// int32\n\tlabs,\n\tlabs,\n\tlabs,\n\tlabs,\n\n\t// int16\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\n\t// int8\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\tabs,\n\n\t// uint32\n\tidentity,\n\tidentity,\n\tidentity,\n\n\t// uint16\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\n\t// uint8\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\n\t// uint8c\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity,\n\tidentity\n];\n\n\n// EXPORTS //\nexport default data;\n","import __var_0__ from '@stdlib/strided/dispatch';\nimport __var_1__ from '@stdlib/strided/base/unary';\nimport __var_2__ from './types.json';\nimport __var_3__ from './meta.json';\nimport __var_4__ from './data.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dispatch = __var_0__;\nvar unary = __var_1__;\nvar types = __var_2__;\nvar meta = __var_3__;\nvar data = __var_4__;\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs, meta.nin, meta.nout );\n\n\n// MAIN //\n\n/**\n* Computes the absolute value for each element in `x` and assigns the results to elements in `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {ArrayLikeObject} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {ArrayLikeObject} y - destination array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be an array-like object\n* @throws {TypeError} fifth argument must be an integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} second argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} fourth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {ArrayLikeObject} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* abs( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction abs( N, x, strideX, y, strideY ) {\n\treturn fcn( N, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\nexport default abs;\n","import __var_0__ from '@stdlib/strided/dispatch';\nimport __var_1__ from '@stdlib/strided/base/unary';\nimport __var_2__ from './types.json';\nimport __var_3__ from './meta.json';\nimport __var_4__ from './data.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dispatch = __var_0__;\nvar unary = __var_1__.ndarray;\nvar types = __var_2__;\nvar meta = __var_3__;\nvar data = __var_4__;\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs+meta.nin+meta.nout, meta.nin, meta.nout ); // eslint-disable-line max-len\n\n\n// MAIN //\n\n/**\n* Computes the absolute value for each element in `x` and assigns the results to elements in `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {ArrayLikeObject} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {ArrayLikeObject} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {TypeError} fifth argument must be an array-like object\n* @throws {TypeError} sixth argument must be an integer\n* @throws {TypeError} seventh argument must be a nonnegative integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} second argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} fifth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {ArrayLikeObject} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* abs( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction abs( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn fcn( N, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\nexport default abs;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/ndarray/base/dtypes2signatures';\nimport __var_3__ from './types.json';\nimport __var_4__ from './meta.json';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar dtypes2signatures = __var_2__;\nvar dtypes = __var_3__;\nvar meta = __var_4__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of strided array interface array type signatures.\n*\n* @private\n* @returns {StringArray} list of signatures\n*/\nfunction types() {\n\treturn dtypes2signatures( dtypes, meta.nin, meta.nout );\n}\n\n\n// MAIN //\n\n/**\n* Defines properties which expose strided array function meta data.\n*\n* @private\n* @param {Function} fcn - function on which to define properties\n* @param {boolean} bool - boolean indicating whether the provided function is an \"ndarray\" interface\n*/\nfunction setProps( fcn, bool ) {\n\t// Define the number of input arguments:\n\tif ( bool ) {\n\t\tsetReadOnly( fcn, 'nargs', meta.nargs+meta.nin+meta.nout ); // Note: accounts for one offset argument per input/output strided array\n\t} else {\n\t\tsetReadOnly( fcn, 'nargs', meta.nargs );\n\t}\n\t// Define the number of input strided arrays:\n\tsetReadOnly( fcn, 'nin', meta.nin );\n\n\t// Define the number of output strided arrays:\n\tsetReadOnly( fcn, 'nout', meta.nout );\n\n\t// Define a read-only accessor for listing a function's supported array data types:\n\tsetReadOnlyAccessor( fcn, 'types', types );\n}\n\n\n// EXPORTS //\nexport default setProps;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './abs.js';\nimport __var_2__ from './ndarray.js';\nimport __var_3__ from './props.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar abs = __var_1__;\nvar ndarray = __var_2__;\nvar setProps = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( abs, 'ndarray', ndarray );\nsetProps( abs, false );\nsetProps( abs.ndarray, true );\n\n\n// EXPORTS //\nexport default abs;\n"]}