{"version":3,"sources":["@stdlib/fs/read-wasm/lib/async.js","@stdlib/fs/read-wasm/lib/sync.js","@stdlib/fs/read-wasm/lib/index.js"],"names":["isObject","__var_0__","isFunction","__var_1__","isUint8Array","__var_2__","readFile","__var_3__","Uint8Array","__var_4__","readWASM","file","options","clbk","opts","done","arguments","length","TypeError","onRead","error","out","i","encoding","instanceOf","readFileSync","sync","readWASMSync","f","Error","setReadOnly"],"mappings":"oTA0BA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAeC,EACfC,EAAWC,EACXC,EAAaC,EA6BjB,SAASC,EAAUC,EAAMC,EAASC,GACjC,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EACvBH,EAAO,GACPC,EAAOH,MACD,CACN,IAAMZ,EAAUY,GACf,MAAM,IAAIM,UAAW,iEAAmEN,EAAU,MAEnGE,EAAOF,EACPG,EAAOF,EAER,IAAMX,EAAYa,GACjB,MAAM,IAAIG,UAAW,mEAAqEH,EAAO,MAclG,SAASI,EAAQC,EAAOT,GACvB,IAAIU,EACAC,EACJ,GAAKF,EACJ,OAAOL,EAAMK,GAEd,GAAKhB,EAAcO,GAClB,OAAOI,EAAM,KAAMJ,GAIpB,IADAU,EAAM,IAAIb,EAAYG,EAAKM,QACrBK,EAAI,EAAGA,EAAIX,EAAKM,OAAQK,IAC7BD,EAAKC,GAAMX,EAAMW,GAElBP,EAAM,KAAMM,GAzBbP,EAAKS,SAAW,KAChBjB,EAAUK,EAAMG,EAAMK,GCnDvB,IAAInB,EAAWC,EACXG,EAAeD,EACfqB,EAAanB,EACboB,EAAelB,EAAUmB,KACzBlB,EAAaC,EAyBjB,SAASkB,EAAchB,EAAMC,GAC5B,IAAIE,EACAO,EACAO,EACAN,EACJ,GAAKN,UAAUC,OAAS,EAAI,CAC3B,IAAMjB,EAAUY,GACf,MAAM,IAAIM,UAAW,iEAAmEN,EAAU,MAEnGE,EAAOF,OAEPE,EAAO,GAKR,GAFAA,EAAKS,SAAW,KAChBK,EAAIH,EAAcd,EAAMG,GACnBU,EAAYI,EAAGC,OACnB,OAAOD,EAER,GAAKxB,EAAcwB,GAClB,OAAOA,EAIR,IADAP,EAAM,IAAIb,EAAYoB,EAAEX,QAClBK,EAAI,EAAGA,EAAIM,EAAEX,OAAQK,IAC1BD,EAAKC,GAAMM,EAAGN,GAEf,OAAOD,EC1BR,IAAIS,EAAc7B,EACdS,EAAWP,EACXuB,EAAOrB,EAKXyB,EAAapB,EAAU,OAAQgB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-uint8array';\nimport __var_3__ from '@stdlib/fs/read-file';\nimport __var_4__ from '@stdlib/array/uint8';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isFunction = __var_1__;\nvar isUint8Array = __var_2__;\nvar readFile = __var_3__;\nvar Uint8Array = __var_4__;\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var join = require( '@stdlib/vendor/path.js' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + done + '`.' );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\nexport default readWASM;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/is-uint8array';\nimport __var_2__ from '@stdlib/assert/instance-of';\nimport __var_3__ from '@stdlib/fs/read-file';\nimport __var_4__ from '@stdlib/array/uint8';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isUint8Array = __var_1__;\nvar instanceOf = __var_2__;\nvar readFileSync = __var_3__.sync;\nvar Uint8Array = __var_4__;\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* var join = require( '@stdlib/vendor/path.js' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default readWASMSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './async.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs/read-wasm\n*\n* @example\n* var join = require( '@stdlib/vendor/path.js' ).join;\n* var readWASM = require( '@stdlib/fs/read-wasm' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* var join = require( '@stdlib/vendor/path.js' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readWASMSync = require( '@stdlib/fs/read-wasm' ).sync;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar readWASM = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\nexport default readWASM;\n"]}