{"version":3,"sources":["@stdlib/fs/read-json/lib/async.js","@stdlib/fs/read-json/lib/sync.js","@stdlib/fs/read-json/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isObject","__var_1__","isFunction","__var_2__","readFile","__var_3__","removeBOM","__var_4__","parseJSON","__var_5__","instanceOf","__var_6__","readJSON","file","options","clbk","opts","done","arguments","length","encoding","TypeError","onRead","error","toString","reviver","Error","sync","readJSONSync","f","setReadOnly"],"mappings":"mWA4BA,IAAIA,EAAWC,EAAUC,YACrBC,EAAWC,EACXC,EAAaC,EACbC,EAAWC,EACXC,EAAYC,EACZC,EAAYC,EACZC,EAAaC,EA6BjB,SAASC,EAAUC,EAAMC,EAASC,GACjC,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EACvBH,EAAO,GACPC,EAAOH,MACD,CACN,GAAKjB,EAAUiB,GACdE,EAAO,CACNI,SAAYN,OAEP,CACN,IAAMd,EAAUc,GACf,MAAM,IAAIO,UAAW,oFAAsFP,EAAU,MAEtHE,EAAOF,EAERG,EAAOF,EAER,IAAMb,EAAYe,GACjB,MAAM,IAAII,UAAW,mEAAqEJ,EAAO,MAYlG,SAASK,EAAQC,EAAOV,GACvB,OAAKU,EACGN,EAAMM,IAEdV,EAAOA,EAAKW,WACW,SAAlBR,EAAKI,WACTP,EAAOP,EAAWO,IAGlBA,EADIG,EAAKS,QACFjB,EAAWK,EAAMG,EAAKS,SAEtBjB,EAAWK,GAEdH,EAAYG,EAAMa,OACfT,EAAMJ,QAEdI,EAAM,KAAMJ,IA1BbT,EAAUS,EAAMG,EAAMM,GC1DvB,IAAIzB,EAAWC,EAAUC,YACrBC,EAAWC,EACXG,EAAWD,EAAUwB,KACrBrB,EAAYD,EACZG,EAAYD,EACZG,EAAaD,EA0BjB,SAASmB,EAAcf,EAAMC,GAC5B,IAAIE,EACAa,EACJ,GAAKX,UAAUC,OAAS,EACvB,GAAKtB,EAAUiB,GACdE,EAAO,CACNI,SAAYN,OAEP,CACN,IAAMd,EAAUc,GACf,MAAM,IAAIO,UAAW,oFAAsFP,EAAU,MAEtHE,EAAOF,OAGRE,EAAO,GAGR,OADAa,EAAIzB,EAAUS,EAAMG,GACfN,EAAYmB,EAAGH,OACZG,GAERA,EAAIA,EAAEL,WACiB,SAAlBR,EAAKI,WACTS,EAAIvB,EAAWuB,IAEXb,EAAKS,QACFjB,EAAWqB,EAAGb,EAAKS,SAEpBjB,EAAWqB,IChCnB,IAAIC,EAAchC,EACdc,EAAWX,EACX0B,EAAOxB,EAKX2B,EAAalB,EAAU,OAAQe","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from '@stdlib/fs/read-file';\nimport __var_4__ from '@stdlib/string/remove-utf8-bom';\nimport __var_5__ from '@stdlib/utils/parse-json';\nimport __var_6__ from '@stdlib/assert/instance-of';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isFunction = __var_2__;\nvar readFile = __var_3__;\nvar removeBOM = __var_4__;\nvar parseJSON = __var_5__;\nvar instanceOf = __var_6__;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( '@stdlib/vendor/path.js' ).resolve;\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be either a string or an object. Value: `' + options + '`.' );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + done + '`.' );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\nexport default readJSON;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/fs/read-file';\nimport __var_3__ from '@stdlib/string/remove-utf8-bom';\nimport __var_4__ from '@stdlib/utils/parse-json';\nimport __var_5__ from '@stdlib/assert/instance-of';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar readFile = __var_2__.sync;\nvar removeBOM = __var_3__;\nvar parseJSON = __var_4__;\nvar instanceOf = __var_5__;\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(JSON|Error)} JSON or an error\n*\n* @example\n* var resolve = require( '@stdlib/vendor/path.js' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var out = readJSONSync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be either a string or an object. Value: `' + options + '`.' );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseJSON( f, opts.reviver );\n\t}\n\treturn parseJSON( f );\n}\n\n\n// EXPORTS //\nexport default readJSONSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './async.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as JSON.\n*\n* @module @stdlib/fs/read-json\n*\n* @example\n* var resolve = require( '@stdlib/vendor/path.js' ).resolve;\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* @example\n* var resolve = require( '@stdlib/vendor/path.js' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* var out = readJSON.sync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar readJSON = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( readJSON, 'sync', sync );\n\n\n// EXPORTS //\nexport default readJSON;\n"]}