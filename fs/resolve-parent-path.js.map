{"version":3,"sources":["@stdlib/fs/resolve-parent-path/lib/validate.js","@stdlib/fs/resolve-parent-path/lib/async.js","@stdlib/fs/resolve-parent-path/lib/sync.js","@stdlib/fs/resolve-parent-path/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isString","__var_2__","isPrimitive","validate","opts","options","dir","TypeError","resolve","isFunction","cwd","__var_3__","exists","__var_4__","__var_5__","resolveParentPath","path","clbk","spath","child","done","err","arguments","length","onExists","error","bool","sync","setReadOnly"],"mappings":"qVAwBA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAWC,EAAUC,YAyBzB,SAASC,EAAUC,EAAMC,GACxB,OAAMT,EAAUS,GAGXP,EAAYO,EAAS,SACzBD,EAAKE,IAAMD,EAAQC,KACbN,EAAUI,EAAKE,MACb,IAAIC,UAAW,qEAAuEH,EAAKE,IAAM,MAGnG,KARC,IAAIC,UAAW,iEAAmEF,EAAU,MC1BrG,IAAIG,EAAUX,EAAUW,QACpBR,EAAWD,EAAUG,YACrBO,EAAaR,EACbS,EAAMC,EACNC,EAASC,EACTV,EAAWW,EA2Bf,SAASC,EAAmBC,EAAMX,EAASY,GAC1C,IAAIC,EACAC,EACAf,EACAgB,EACAd,EACAe,EACJ,IAAMrB,EAAUgB,GACf,MAAM,IAAIT,UAAW,wEAA0ES,EAAO,MAGvG,GADAZ,EAAO,GACFkB,UAAUC,OAAS,GAGvB,GAFAH,EAAOH,EACPI,EAAMlB,EAAUC,EAAMC,GAErB,MAAMgB,OAGPD,EAAOf,EAER,IAAMI,EAAYW,GACjB,MAAM,IAAIb,UAAW,mEAAqEa,EAAO,MAkBlG,SAASI,EAAUC,EAAOC,GACzB,OAAKA,EACGN,EAAM,KAAMF,IAGpBC,EAAQb,EACRA,EAAME,EAASF,EAAK,MAGfa,IAAUb,EACPc,EAAM,KAAM,OAGpBF,EAAQV,EAASF,EAAKU,QACtBJ,EAAQM,EAAOM,KA7BflB,EADIF,EAAKE,IACHE,EAASE,IAAON,EAAKE,KAErBI,IAEPQ,EAAQV,EAASF,EAAKU,GACtBJ,EAAQM,EAAOM,GC9DhB,IAAIhB,EAAUX,EAAUW,QACpBR,EAAWD,EAAUG,YACrBQ,EAAMT,EACNW,EAASD,EAAUgB,KACnBxB,EAAWU,EAmBf,SAASE,EAAmBC,EAAMX,GACjC,IAAIa,EACAC,EACAf,EACAE,EACAe,EACJ,IAAMrB,EAAUgB,GACf,MAAM,IAAIT,UAAW,wEAA0ES,EAAO,MAGvG,GADAZ,EAAO,GACFkB,UAAUC,OAAS,IACvBF,EAAMlB,EAAUC,EAAMC,IAErB,MAAMgB,EASR,IALCf,EADIF,EAAKE,IACHE,EAASE,IAAON,EAAKE,KAErBI,IAGCS,IAAUb,GAAM,CAEvB,GADAY,EAAQV,EAASF,EAAKU,GACjBJ,EAAQM,GACZ,OAAOA,EAERC,EAAQb,EACRA,EAAME,EAASF,EAAK,MAErB,OAAO,KChCR,IAAIsB,EAAc/B,EACdkB,EAAoBhB,EACpB4B,EAAO1B,EAKX2B,EAAab,EAAmB,OAAQY","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isString = __var_2__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( 'invalid option. `dir` option must be a primitive string. Option: `' + opts.dir + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/path.js';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from '@stdlib/process/cwd';\nimport __var_4__ from '@stdlib/fs/exists';\nimport __var_5__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar resolve = __var_0__.resolve;\nvar isString = __var_1__.isPrimitive;\nvar isFunction = __var_2__;\nvar cwd = __var_3__;\nvar exists = __var_4__;\nvar validate = __var_5__;\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Callback} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPath( path, options, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `' + path + '`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + done + '`.' );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n}\n\n\n// EXPORTS //\nexport default resolveParentPath;\n","import __var_0__ from '@stdlib/vendor/path.js';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/process/cwd';\nimport __var_3__ from '@stdlib/fs/exists';\nimport __var_4__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar resolve = __var_0__.resolve;\nvar isString = __var_1__.isPrimitive;\nvar cwd = __var_2__;\nvar exists = __var_3__.sync;\nvar validate = __var_4__;\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* var path = resolveParentPath( 'package.json' );\n*/\nfunction resolveParentPath( path, options ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `' + path + '`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default resolveParentPath;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './async.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* var path = resolveParentPath.sync( 'package.json' );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar resolveParentPath = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPath, 'sync', sync );\n\n\n// EXPORTS //\nexport default resolveParentPath;\n"]}