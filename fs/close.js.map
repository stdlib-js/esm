{"version":3,"sources":["@stdlib/fs/close/lib/main.js","@stdlib/fs/close/lib/sync.js","@stdlib/fs/close/lib/index.js"],"names":["native","__var_0__","close","isNonNegativeInteger","__var_1__","isPrimitive","isFunction","__var_2__","fd","clbk","TypeError","closeSync","err","setReadOnly","main","sync"],"mappings":"qMAwBA,IAAIA,EAASC,EAAUC,MACnBC,EAAuBC,EAAUC,YACjCC,EAAaC,EA6BjB,SAASL,EAAOM,EAAIC,GACnB,IAAMN,EAAsBK,GAC3B,MAAM,IAAIE,UAAW,mGAAqGF,EAAK,MAEhI,IAAMF,EAAYG,GACjB,MAAM,IAAIC,UAAW,+DAAiED,EAAO,MAE9FT,EAAQQ,EAAIC,GCvCb,IAAIP,EAAQD,EAAUU,UAClBR,EAAuBC,EAAUC,YA0BrC,SAASM,EAAWH,GACnB,IAAML,EAAsBK,GAC3B,MAAM,IAAIE,UAAW,yFAA2FF,EAAK,MAEtH,IACCN,EAAOM,GACN,MAAQI,GACT,OAAOA,GCKT,IAAIC,EAAcZ,EACda,EAAOV,EACPW,EAAOR,EAKXM,EAAaC,EAAM,OAAQC","sourcesContent":["import __var_0__ from '@stdlib/vendor/fs.js';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar native = __var_0__.close;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isFunction = __var_2__;\n\n\n// MAIN //\n\n/**\n* Asynchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @param {Function} clbk - callback to invoke after closing a file descriptor\n* @throws {TypeError} first argument must be a valid file descriptor (nonnegative integer)\n* @throws {TypeError} last argument must be a function\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*/\nfunction close( fd, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid file descriptor (nonnegative integer). Value: `' + fd + '`.' );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( 'invalid argument. Last argument must be a function. VAlue: `' + clbk + '`.' );\n\t}\n\tnative( fd, clbk );\n}\n\n\n// EXPORTS //\nexport default close;\n","import __var_0__ from '@stdlib/vendor/fs.js'; // eslint-disable-line no-sync, stdlib/no-redeclare\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar close = __var_0__.closeSync;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Synchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @throws {TypeError} must provide a valid file descriptor (nonnegative integer)\n* @returns {(Error|void)} an error object or `undefined`\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction closeSync( fd ) {\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a valid file descriptor (nonnegative integer). Value: `' + fd + '`.' );\n\t}\n\ttry {\n\t\tclose( fd );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\nexport default closeSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Close a file descriptor.\n*\n* @module @stdlib/fs/close\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var close = require( '@stdlib/fs/close' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar main = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\nexport default main;\n"]}