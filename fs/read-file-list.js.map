{"version":3,"sources":["@stdlib/fs/read-file-list/lib/delay.js","@stdlib/fs/read-file-list/lib/clear_timeout.js","@stdlib/fs/read-file-list/lib/clear_pending.js","@stdlib/fs/read-file-list/lib/async.js","@stdlib/fs/read-file-list/lib/sync.js","@stdlib/fs/read-file-list/lib/index.js"],"names":["pow","__var_0__","delay","retries","max","d","__var_1__","clearTimeout","objectKeys","cancelTimeout","clearPending","pending","keys","i","length","logger","isStringArray","primitives","isFunction","__var_2__","copy","__var_3__","readFile","__var_4__","config","__var_5__","__var_6__","__var_7__","debug","MAX_RETRIES","max_retries","MAX_DELAY","max_delay","readFileList","list","options","clbk","results","errFLG","count","opts","len","cb","TypeError","arguments","Array","getCallback","idx","file","k","retry","onRead","error","data","message","code","done","Error","setTimeout","sync","readFileListSync","setReadOnly"],"mappings":"+XAsBIA,EAAMC,EAaV,SAASC,EAAOC,EAASC,GACxB,IAAIC,EAAIL,EAAK,EAAGG,GAAY,EAI5B,OAHKE,EAAID,IACRC,EAAID,GAEEC,EClBR,IAAAC,EAAeC,aCCXC,EAAaP,EACbQ,EAAgBH,EAWpB,SAASI,EAAcC,GACtB,IAAIC,EACAC,EAEJ,IADAD,EAAOJ,EAAYG,GACbE,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC7BJ,EAAeE,EAASC,EAAKC,KCX/B,IAAIE,EAASd,EACTe,EAAgBV,EAAUW,WAC1BC,EAAaC,EACbC,EAAOC,EACPC,EAAWC,EACXC,EAASC,EACTvB,EAAQwB,EACRhB,EAAeiB,EAKfC,EAAQb,EAAQ,wBAChBc,EAAcL,EAAOM,YACrBC,EAAYP,EAAOQ,UA4BvB,SAASC,EAAcC,EAAMC,EAASC,GACrC,IAAIzB,EACA0B,EACAC,EACAC,EACAC,EACAC,EACAC,EACA7B,EAEJ,IAAMG,EAAekB,GACpB,MAAM,IAAIS,UAAW,oEAAsET,EAAO,MASnG,GAPKU,UAAU9B,OAAS,GACvB0B,EAAO,GACPE,EAAKP,IAELK,EAAOpB,EAAMe,GACbO,EAAKN,IAEAlB,EAAYwB,GACjB,MAAM,IAAIC,UAAW,mEAAqED,EAAK,MAShG,IAPAD,EAAMP,EAAKpB,OAEXuB,EAAU,IAAIQ,MAAOJ,GACrB9B,EAAU,GACV4B,EAAQ,EAERX,EAAO,sBAAuBa,GACxB5B,EAAI,EAAGA,EAAI4B,EAAK5B,IACrBe,EAAO,+BAAgCM,EAAMrB,GAAKA,EAAE,EAAG4B,GACvDnB,EAAUY,EAAMrB,GAAK2B,EAAMM,EAAajC,IAUzC,SAASiC,EAAaC,GACrB,IAAI5C,EACA6C,EACAC,EAWJ,SAASC,WACDvC,EAASoC,GAChBnB,EAAO,gDAAiDoB,EAAMC,EAAGR,EAAKtC,EAAS0B,GAC/EP,EAAU0B,EAAMR,EAAMW,GAWvB,SAASA,EAAQC,EAAOC,GACvB,IAAIhD,EACJ,IAAKiC,EAIL,OAAKc,GACJxB,EAAO,6DAA8DoB,EAAMC,EAAGR,EAAKW,EAAME,SAEzE,WAAfF,EAAMG,MACS,WAAfH,EAAMG,MAENpD,GAAW,GACI0B,GACdD,EAAO,4DAEA4B,EADPJ,EAAQ,IAAIK,MAAO,iDAGpBpD,EAAIH,EAAOC,EAAS4B,GACpBH,EAAO,uEAAwEqB,EAAGR,EAAKpC,EAAE,UACzFM,EAASoC,GAAQW,WAAYR,EAAO7C,KAG9BmD,EAAMJ,KAEdxB,EAAO,yCAA0CoB,EAAMC,EAAGR,GAC1DJ,EAASU,GAAQ,CAChBC,KAAQA,EACRK,KAAQA,GAGTzB,EAAO,uBADPW,GAAS,EAC6BE,GACjCF,IAAUE,EACPe,SADR,GA7BC5B,EAAO,+EAAgFoB,EAAMC,EAAGR,GAkClG,OA5DAO,EAAOd,EAAMa,GACbE,EAAIF,EAAM,EACV5C,EAAU,EA0DHgD,EAUR,SAASK,EAAMJ,GAEd,GADA1C,EAAcC,GACTyC,EAEJ,OADAd,GAAS,EACFI,EAAIU,GAEZxB,EAAO,gCACPc,EAAI,KAAML,IC3KZ,IAAItB,EAASd,EACTqB,EAAWhB,EAAUqD,KACrB3C,EAAgBG,EAAUF,WAK1BW,EAAQb,EAAQ,uBAwBpB,SAAS6C,EAAkB1B,EAAMC,GAChC,IAAIE,EACAG,EACAQ,EACAP,EACA5B,EAEJ,IAAMG,EAAekB,GACpB,MAAM,IAAIS,UAAW,oEAAsET,EAAO,MAWnG,IARCM,EADII,UAAU9B,OAAS,EAChBqB,EAEA,GAERM,EAAMP,EAAKpB,OACXuB,EAAU,IAAIQ,MAAOJ,GAErBb,EAAO,sBAAuBa,GACxB5B,EAAI,EAAGA,EAAI4B,EAAK5B,IAAM,CAG3B,GAFAe,EAAO,+BAAgCM,EAAMrB,GAAKA,EAAE,EAAG4B,IACvDO,EAAO1B,EAAUY,EAAMrB,GAAK2B,cACPiB,MAEpB,OADA7B,EAAO,mEAAoEM,EAAMrB,GAAKA,EAAG4B,EAAKO,EAAKM,SAC5FN,EAERpB,EAAO,yCAA0CM,EAAMrB,GAAKA,EAAG4B,GAC/DJ,EAASxB,GAAM,CACdmC,KAAQd,EAAMrB,GACdwC,KAAQL,GAIV,OADApB,EAAO,2BACAS,ECjCR,IAAIwB,EAAc5D,EACdgC,EAAe3B,EACfqD,EAAOxC,EAKX0C,EAAa5B,EAAc,OAAQ0B","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\nexport default delay;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\nexport default clearTimeout;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from './clear_timeout.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar cancelTimeout = __var_1__;\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\nexport default clearPending;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/assert/is-string-array';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from '@stdlib/fs/read-file';\nimport __var_5__ from './config.json';\nimport __var_6__ from './delay.js';\nimport __var_7__ from './clear_pending.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar isStringArray = __var_1__.primitives;\nvar isFunction = __var_2__;\nvar copy = __var_3__;\nvar readFile = __var_4__;\nvar config = __var_5__;\nvar delay = __var_6__;\nvar clearPending = __var_7__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be a string array\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string array. Value: `' + list + '`.' );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + cb + '`.' );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\nexport default readFileList;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/fs/read-file';\nimport __var_2__ from '@stdlib/assert/is-string-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar readFile = __var_1__.sync;\nvar isStringArray = __var_2__.primitives;\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide a string array\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string array. Value: `' + list + '`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\nexport default readFileListSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './async.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs/read-file-list\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' );\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' ).sync;\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar readFileList = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\nexport default readFileList;\n"]}