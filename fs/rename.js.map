{"version":3,"sources":["@stdlib/fs/rename/lib/main.js","@stdlib/fs/rename/lib/sync.js","@stdlib/fs/rename/lib/index.js"],"names":["native","__var_0__","rename","oldPath","newPath","clbk","renameSync","err","setReadOnly","__var_1__","sync","__var_2__"],"mappings":"sGAsBA,IAAIA,EAASC,EAAUC,OAqBvB,SAASA,EAAQC,EAASC,EAASC,GAClCL,EAAQG,EAASC,EAASC,GCtB3B,IAAIH,EAASD,EAAUK,WAkBvB,SAASA,EAAYH,EAASC,GAC7B,IACCF,EAAQC,EAASC,GAChB,MAAQG,GACT,OAAOA,EAER,OAAO,KCGR,IAAIC,EAAcP,EACdC,EAASO,EACTC,EAAOC,EAKXH,EAAaN,EAAQ,OAAQQ","sourcesContent":["import __var_0__ from '@stdlib/vendor/fs.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar native = __var_0__.rename;\n\n\n// MAIN //\n\n/**\n* Asynchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @param {Function} clbk - callback to invoke after renaming a path\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*/\nfunction rename( oldPath, newPath, clbk ) {\n\tnative( oldPath, newPath, clbk );\n}\n\n\n// EXPORTS //\nexport default rename;\n","import __var_0__ from '@stdlib/vendor/fs.js'; // eslint-disable-line no-sync\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar rename = __var_0__.renameSync;\n\n\n// MAIN //\n\n/**\n* Synchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction renameSync( oldPath, newPath ) {\n\ttry {\n\t\trename( oldPath, newPath );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default renameSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rename a file.\n*\n* @module @stdlib/fs/rename\n*\n* @example\n* var rename = require( '@stdlib/fs/rename' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*\n* @example\n* var renameSync = require( '@stdlib/fs/rename' ).sync;\n*\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar rename = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( rename, 'sync', sync );\n\n\n// EXPORTS //\nexport default rename;\n"]}