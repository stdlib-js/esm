{"version":3,"sources":["@stdlib/fs/open/lib/main.js","@stdlib/fs/open/lib/sync.js","@stdlib/fs/open/lib/index.js"],"names":["op","__var_0__","open","defaults","__var_1__","path","flags","mode","clbk","nargs","arguments","length","openSync","fd","err","setReadOnly","main","sync","__var_2__"],"mappings":"yIAuBIA,EAAKC,EAAUC,KACfC,EAAWC,EA0Bf,SAASF,EAAMG,EAAMC,EAAOC,EAAMC,GACjC,IAAIC,EAAQC,UAAUC,OACtB,OAAe,IAAVF,EACGT,EAAIK,EAAMF,EAASG,MAAOH,EAASI,KAAMD,GAElC,IAAVG,EACGT,EAAIK,EAAMC,EAAOH,EAASI,KAAMA,QAExCP,EAAIK,EAAMC,EAAOC,EAAMC,GCnCxB,IAAIN,EAAOD,EAAUW,SACjBT,EAAWC,EAsBf,SAASQ,EAAUP,EAAMC,EAAOC,GAC/B,IAAIE,EACAI,EAEJJ,EAAQC,UAAUC,OAClB,IAEEE,EADc,IAAVJ,EACCP,EAAMG,EAAMF,EAASG,MAAOH,EAASI,MAErCL,EAAMG,EAAMC,EADI,IAAVG,EACaN,EAASI,KAETA,GAExB,MAAQO,GACT,OAAOA,EAER,OAAOD,ECVR,IAAIE,EAAcd,EACde,EAAOZ,EACPa,EAAOC,EAKXH,EAAaC,EAAM,OAAQC","sourcesContent":["import __var_0__ from '@stdlib/vendor/fs.js';\nimport __var_1__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar op = __var_0__.open;\nvar defaults = __var_1__;\n\n\n// MAIN //\n\n/**\n* Asynchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @param {Function} clbk - callback to invoke after opening a file\n* @returns {void}\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*/\nfunction open( path, flags, mode, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tvar nargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\treturn op( path, defaults.flags, defaults.mode, flags );\n\t}\n\tif ( nargs === 3 ) {\n\t\treturn op( path, flags, defaults.mode, mode );\n\t}\n\top( path, flags, mode, clbk );\n}\n\n\n// EXPORTS //\nexport default open;\n","import __var_0__ from '@stdlib/vendor/fs.js'; // eslint-disable-line no-sync, stdlib/no-redeclare\nimport __var_1__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar open = __var_0__.openSync;\nvar defaults = __var_1__;\n\n\n// MAIN //\n\n/**\n* Synchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @returns {(integer|Error)} file descriptor or an error\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\nfunction openSync( path, flags, mode ) {\n\tvar nargs;\n\tvar fd;\n\n\tnargs = arguments.length;\n\ttry {\n\t\tif ( nargs === 1 ) {\n\t\t\tfd = open( path, defaults.flags, defaults.mode );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tfd = open( path, flags, defaults.mode );\n\t\t} else {\n\t\t\tfd = open( path, flags, mode );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn fd;\n}\n\n\n// EXPORTS //\nexport default openSync;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './sync.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Open a file.\n*\n* @module @stdlib/fs/open\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar main = __var_1__;\nvar sync = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\nexport default main;\n"]}