{"version":3,"sources":["@stdlib/assert/is-plain-object/lib/main.js","@stdlib/assert/is-plain-object/lib/index.js"],"names":["isObject","__var_0__","isFunction","__var_1__","getPrototypeOf","__var_2__","hasOwnProp","__var_3__","nativeClass","__var_4__","objectPrototype","Object","prototype","ownProps","obj","key","isPlainObject","value","proto","constructor","isPrototypeOf"],"mappings":"2LA0BA,IAAIA,EAAWC,EACXC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAcC,EAKdC,EAAkBC,OAAOC,UAY7B,SAASC,EAAUC,GAClB,IAAIC,EAGJ,IAAMA,KAAOD,EACZ,IAAMR,EAAYQ,EAAKC,GACtB,OAAO,EAGT,OAAO,EAoBR,SAASC,EAAeC,GACvB,IAAIC,EAGJ,QAAMlB,EAAUiB,OAIhBC,EAAQd,EAAgBa,MAOtBX,EAAYW,EAAO,gBAGpBX,EAAYY,EAAO,gBACnBhB,EAAYgB,EAAMC,cACmB,sBAArCX,EAAaU,EAAMC,cAGnBb,EAAYY,EAAO,kBACnBhB,EAAYgB,EAAME,iBAIjBF,IAAUR,GAGVG,EAAUI,KCtEV,IAACD,EAAgBf","sourcesContent":["import __var_0__ from '@stdlib/assert/is-object';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/utils/get-prototype-of';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/utils/native-class';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isFunction = __var_1__;\nvar getPrototypeOf = __var_2__;\nvar hasOwnProp = __var_3__;\nvar nativeClass = __var_4__;\n\n\n// VARIABLES //\n\nvar objectPrototype = Object.prototype;\n\n\n// FUNCTIONS //\n\n/**\n* Tests that an object only has own properties.\n*\n* @private\n* @param {Object} obj - value to test\n* @returns {boolean} boolean indicating if an object only has own properties\n*/\nfunction ownProps( obj ) {\n\tvar key;\n\n\t// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).\n\tfor ( key in obj ) {\n\t\tif ( !hasOwnProp( obj, key ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is a plain object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a plain object\n*\n* @example\n* var bool = isPlainObject( {} );\n* // returns true\n*\n* @example\n* var bool = isPlainObject( null );\n* // returns false\n*/\nfunction isPlainObject( value ) {\n\tvar proto;\n\n\t// Screen for obvious non-objects...\n\tif ( !isObject( value ) ) {\n\t\treturn false;\n\t}\n\t// Objects with no prototype (e.g., `Object.create( null )`) are plain...\n\tproto = getPrototypeOf( value );\n\tif ( !proto ) {\n\t\treturn true;\n\t}\n\t// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...\n\treturn (\n\t\t// Cannot have own `constructor` property:\n\t\t!hasOwnProp( value, 'constructor' ) &&\n\n\t\t// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):\n\t\thasOwnProp( proto, 'constructor' ) &&\n\t\tisFunction( proto.constructor ) &&\n\t\tnativeClass( proto.constructor ) === '[object Function]' &&\n\n\t\t// Test for object-specific method:\n\t\thasOwnProp( proto, 'isPrototypeOf' ) &&\n\t\tisFunction( proto.isPrototypeOf ) &&\n\n\t\t(\n\t\t\t// Test if the prototype matches the global `Object` prototype (same realm):\n\t\t\tproto === objectPrototype ||\n\n\t\t\t// Test that all properties are own properties (cross-realm; *most* likely a plain object):\n\t\t\townProps( value )\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\nexport default isPlainObject;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a plain object.\n*\n* @module @stdlib/assert/is-plain-object\n*\n* @example\n* var isPlainObject = require( '@stdlib/assert/is-plain-object' );\n*\n* var bool = isPlainObject( {} );\n* // returns true\n*\n* bool = isPlainObject( null );\n* // returns false\n*/\n\n// MODULES //\nvar isPlainObject = __var_0__;\n\n\n// EXPORTS //\nexport default isPlainObject;\n"]}