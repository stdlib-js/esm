{"version":3,"sources":["@stdlib/assert/is-arguments/lib/main.js","@stdlib/assert/is-arguments/lib/detect.js","@stdlib/assert/is-arguments/lib/polyfill.js","@stdlib/assert/is-arguments/lib/index.js"],"names":["nativeClass","__var_0__","isArguments","value","bool","detect","arguments","hasOwnProp","isEnumerableProperty","__var_1__","isArray","__var_2__","isInteger","__var_3__","MAX_LENGTH","__var_4__","length","hasArgumentsClass","main","polyfill","isArguments$4"],"mappings":"2PAsBA,IAAIA,EAAcC,EAwBlB,SAASC,EAAaC,GACrB,MAAkC,uBAAzBH,EAAaG,GCzBvB,IAKIC,EALAF,EAAcD,EAoBlB,SAASI,IACR,OAAOH,EAAaI,WAUrB,IAAAL,EAJAG,EAAOC,ICvBHE,EAAaN,EACbO,EAAuBC,EACvBC,EAAUC,EACVC,EAAYC,EACZC,EAAaC,EAwBjB,SAASb,EAAaC,GACrB,OACW,OAAVA,GACiB,iBAAVA,IACNO,EAASP,IACc,iBAAjBA,EAAMa,QACbJ,EAAWT,EAAMa,SACjBb,EAAMa,QAAU,GAChBb,EAAMa,QAAUF,GAChBP,EAAYJ,EAAO,YAClBK,EAAsBL,EAAO,UCrBhC,IAOID,EAPAe,EAAoBhB,EACpBiB,EAAOT,EACPU,EAAWR,EAcfS,EAPClB,EADIe,EACUC,EAEAC","sourcesContent":["import __var_0__ from '@stdlib/utils/native-class';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar nativeClass = __var_0__;\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn ( nativeClass( value ) === '[object Arguments]' );\n}\n\n\n// EXPORTS //\nexport default isArguments;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArguments = __var_0__;\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Detects whether an environment returns the expected internal class of the `arguments` object.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment behaves as expected\n*\n* @example\n* var bool = detect();\n* // returns <boolean>\n*/\nfunction detect() {\n\treturn isArguments( arguments );\n}\n\n\n// MAIN //\n\nbool = detect();\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-enumerable-property';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/math/base/assert/is-integer';\nimport __var_4__ from '@stdlib/constants/math/uint32-max';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isEnumerableProperty = __var_1__;\nvar isArray = __var_2__;\nvar isInteger = __var_3__;\nvar MAX_LENGTH = __var_4__;\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\t!isArray( value ) &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH &&\n\t\thasOwnProp( value, 'callee' ) &&\n\t\t!isEnumerableProperty( value, 'callee' )\n\t);\n}\n\n\n// EXPORTS //\nexport default isArguments;\n","import __var_0__ from './detect.js';\nimport __var_1__ from './main.js';\nimport __var_2__ from './polyfill.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an `arguments` object.\n*\n* @module @stdlib/assert/is-arguments\n*\n* @example\n* var isArguments = require( '@stdlib/assert/is-arguments' );\n*\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* bool = isArguments( [] );\n* // returns false\n*/\n\n// MODULES //\nvar hasArgumentsClass = __var_0__;\nvar main = __var_1__;\nvar polyfill = __var_2__;\n\n\n// MAIN //\n\nvar isArguments;\nif ( hasArgumentsClass ) {\n\tisArguments = main;\n} else {\n\tisArguments = polyfill;\n}\n\n\n// EXPORTS //\nexport default isArguments;\n"]}