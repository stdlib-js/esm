{"version":3,"sources":["@stdlib/assert/is-safe-integer/lib/primitive.js","@stdlib/assert/is-safe-integer/lib/object.js","@stdlib/assert/is-safe-integer/lib/main.js","@stdlib/assert/is-safe-integer/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isSafeInt","__var_1__","isSafeInteger","value","isObject","valueOf","setReadOnly","__var_2__","__var_3__"],"mappings":"2JAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAYC,EAmBhB,SAASC,EAAeC,GACvB,OACCN,EAAUM,IACVH,EAAWG,GCvBb,IAAIN,EAAWC,EAAUM,SACrBJ,EAAYC,EAmBhB,SAASC,EAAeC,GACvB,OACCN,EAAUM,IACVH,EAAWG,EAAME,WCvBnB,IAAIN,EAAcD,EACdM,EAAWH,EA+Bf,SAASC,EAAeC,GACvB,OAASJ,EAAaI,IAAWC,EAAUD,GCW5C,IAAIG,EAAcR,EACdI,EAAgBD,EAChBF,EAAcQ,EACdH,EAAWI,EAKfF,EAAaJ,EAAe,cAAeH,GAC3CO,EAAaJ,EAAe,WAAYE","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/math/base/assert/is-safe-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isSafeInt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a safe integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a safe integer value\n*\n* @example\n* var bool = isSafeInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isSafeInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isSafeInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisSafeInt( value )\n\t);\n}\n\n\n// EXPORTS //\nexport default isSafeInteger;\n","import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/math/base/assert/is-safe-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isObject;\nvar isSafeInt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a safe integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a safe integer value\n*\n* @example\n* var bool = isSafeInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isSafeInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isSafeInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisSafeInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\nexport default isSafeInteger;\n","import __var_0__ from './primitive.js';\nimport __var_1__ from './object.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPrimitive = __var_0__;\nvar isObject = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a safe integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a safe integer\n*\n* @example\n* var bool = isSafeInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isSafeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isSafeInteger( 2.0e300 );\n* // returns false\n*\n* @example\n* var bool = isSafeInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isSafeInteger( null );\n* // returns false\n*/\nfunction isSafeInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\nexport default isSafeInteger;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './primitive.js';\nimport __var_3__ from './object.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a safe integer.\n*\n* @module @stdlib/assert/is-safe-integer\n*\n* @example\n* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' );\n*\n* var bool = isSafeInteger( 5.0 );\n* // returns true\n*\n* bool = isSafeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isSafeInteger( 2.0e200 );\n* // returns false\n*\n* bool = isSafeInteger( -3.14 );\n* // returns false\n*\n* bool = isSafeInteger( null );\n* // returns false\n*\n* @example\n* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' ).isPrimitive;\n*\n* var bool = isSafeInteger( -3.0 );\n* // returns true\n*\n* bool = isSafeInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' ).isObject;\n*\n* var bool = isSafeInteger( 3.0 );\n* // returns false\n*\n* bool = isSafeInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isSafeInteger = __var_1__;\nvar isPrimitive = __var_2__;\nvar isObject = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( isSafeInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isSafeInteger, 'isObject', isObject );\n\n\n// EXPORTS //\nexport default isSafeInteger;\n"]}