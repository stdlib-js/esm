{"version":3,"sources":["@stdlib/assert/is-anagram/lib/main.js","@stdlib/assert/is-anagram/lib/index.js"],"names":["lowercase","__var_0__","replace","__var_1__","isString","__var_2__","isPrimitive","RE_NON_ALPHANUMERIC","ascending","a","b","isAnagram","str","x","TypeError","length","split","sort","join"],"mappings":"4GAwBA,IAAIA,EAAYC,EACZC,EAAUC,EACVC,EAAWC,EAAUC,YAKrBC,EAAsB,aAa1B,SAASC,EAAWC,EAAGC,GACtB,OAAKD,EAAIC,GACA,EAEJD,IAAMC,EACH,EAED,EAsBR,SAASC,EAAWC,EAAKC,GACxB,IAAMT,EAAUQ,GACf,MAAM,IAAIE,UAAW,wEAA0EF,EAAM,MAEtG,QAAMR,EAAUS,KAGhBD,EAAMZ,EAAWY,GACjBA,EAAMV,EAASU,EAAKL,EAAqB,IACzCM,EAAIb,EAAWa,GACfA,EAAIX,EAASW,EAAGN,EAAqB,IAChCK,EAAIG,SAAWF,EAAEE,SAGtBH,EAAMA,EAAII,MAAO,IACfC,KAAMT,GACNU,KAAM,QACRL,EAAIA,EAAEG,MAAO,IACXC,KAAMT,GACNU,KAAM,MCvDN,IAACP,EAAYV","sourcesContent":["import __var_0__ from '@stdlib/string/lowercase';\nimport __var_1__ from '@stdlib/string/replace';\nimport __var_2__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar lowercase = __var_0__;\nvar replace = __var_1__;\nvar isString = __var_2__.isPrimitive;\n\n\n// VARIABLES //\n\nvar RE_NON_ALPHANUMERIC = /[^a-z0-9]/g;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function for sorting characters in ascending order.\n*\n* @private\n* @param {string} a - character\n* @param {string} b - character\n* @returns {number} comparison value\n*/\nfunction ascending( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a === b ) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is an anagram.\n*\n* @param {string} str - comparison string\n* @param {*} x - value to test\n* @throws {TypeError} first argument must be a string primitive\n* @returns {boolean} boolean indicating if a value is an anagram\n*\n* @example\n* var bool = isAnagram( 'I am a weakish speller', 'William Shakespeare' );\n* // returns true\n*\n* @example\n* var bool = isAnagram( 'bat', 'tabba' );\n* // returns false\n*/\nfunction isAnagram( str, x ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string primitive. Value: `' + str + '`.' );\n\t}\n\tif ( !isString( x ) ) {\n\t\treturn false;\n\t}\n\tstr = lowercase( str );\n\tstr = replace( str, RE_NON_ALPHANUMERIC, '' );\n\tx = lowercase( x );\n\tx = replace( x, RE_NON_ALPHANUMERIC, '' );\n\tif ( str.length !== x.length ) {\n\t\treturn false;\n\t}\n\tstr = str.split( '' )\n\t\t.sort( ascending )\n\t\t.join( '' );\n\tx = x.split( '' )\n\t\t.sort( ascending )\n\t\t.join( '' );\n\treturn ( str === x );\n}\n\n\n// EXPORTS //\nexport default isAnagram;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an anagram.\n*\n* @module @stdlib/assert/is-anagram\n*\n* @example\n* var isAnagram = require( '@stdlib/assert/is-anagram' );\n*\n* var bool = isAnagram( 'I am a weakish speller', 'William Shakespeare' );\n* // returns true\n*\n* bool = isAnagram( 'bat', 'tabba' );\n* // returns false\n*/\n\n// MODULES //\nvar isAnagram = __var_0__;\n\n\n// EXPORTS //\nexport default isAnagram;\n"]}