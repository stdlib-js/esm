{"version":3,"sources":["@stdlib/assert/is-iterable-like/lib/main.js","@stdlib/assert/is-iterable-like/lib/index.js"],"names":["isPrimitive","__var_0__","isFunction","__var_1__","ITERATOR","__var_2__","isIteratorLike","__var_3__","isIterableLike","value","f","length","isIterable","hasIteratorSymbolSupport","constantFunction","main","isIterable$1"],"mappings":"4OAyBA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAWC,EACXC,EAAiBC,EAuBrB,SAASC,EAAgBC,GACxB,IAAIC,EACJ,OAAKV,EAAaS,KAGlBC,EAAID,EAAOL,GAEVF,EAAYQ,IACC,IAAbA,EAAEC,QACFL,EAAgBG,EAAOL,OCrBzB,IAOIQ,EAPAC,EAA2BZ,EAC3Ba,EAAmBX,EACnBY,EAAOV,EAcXW,EAPCJ,EADIC,IACSE,EAEAD,GAAkB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-primitive';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/symbol/iterator';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPrimitive = __var_0__;\nvar isFunction = __var_1__;\nvar ITERATOR = __var_2__;\nvar isIteratorLike = __var_3__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is iterable-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is iterable-like\n*\n* @example\n* var bool = isIterableLike( [] );\n* // returns <boolean>\n*\n* @example\n* var bool = isIterableLike( {} );\n* // returns false\n*\n* @example\n* var bool = isIterableLike( null );\n* // returns false\n*/\nfunction isIterableLike( value ) {\n\tvar f;\n\tif ( isPrimitive( value ) ) {\n\t\treturn false;\n\t}\n\tf = value[ ITERATOR ];\n\treturn (\n\t\tisFunction( f ) &&\n\t\tf.length === 0 &&\n\t\tisIteratorLike( value[ ITERATOR ]() ) // Why this form? In order to preserve `this`.\n\t);\n}\n\n\n// EXPORTS //\nexport default isIterableLike;\n","import __var_0__ from '@stdlib/assert/has-iterator-symbol-support';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is iterable-like.\n*\n* @module @stdlib/assert/is-iterable-like\n*\n* @example\n* var isIterableLike = require( '@stdlib/assert/is-iterable-like' );\n*\n* var bool = isIterableLike( [] );\n* // returns <boolean>\n*\n* bool = isIterableLike( {} );\n* // returns false\n*/\n\n// MODULES //\nvar hasIteratorSymbolSupport = __var_0__;\nvar constantFunction = __var_1__;\nvar main = __var_2__;\n\n\n// MAIN //\n\nvar isIterable;\nif ( hasIteratorSymbolSupport() ) {\n\tisIterable = main;\n} else {\n\tisIterable = constantFunction( false );\n}\n\n\n// EXPORTS //\nexport default isIterable;\n"]}