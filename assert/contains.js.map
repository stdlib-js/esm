{"version":3,"sources":["@stdlib/assert/contains/lib/contains.js","@stdlib/assert/contains/lib/index.js"],"names":["isCollection","__var_0__","isInteger","__var_1__","isPrimitive","isString","__var_2__","isnan","__var_3__","contains","val","searchValue","position","len","pos","i","TypeError","arguments","length","Error","indexOf"],"mappings":"0HAyBA,IAAIA,EAAeC,EACfC,EAAYC,EAAUC,YACtBC,EAAWC,EAAUF,YACrBG,EAAQC,EAAUJ,YA6CtB,SAASK,EAAUC,EAAKC,EAAaC,GACpC,IAAIC,EACAC,EACAC,EACJ,IAAMf,EAAcU,KAAUL,EAAUK,GACvC,MAAM,IAAIM,UAAW,gEAAkEN,EAAM,MAE9F,GAAKO,UAAUC,OAAS,EACvB,MAAM,IAAIC,MAAO,8DAElB,GAAKF,UAAUC,OAAS,EAAI,CAC3B,IAAMhB,EAAWU,GAChB,MAAM,IAAII,UAAW,gEAAkEJ,EAAW,OAEnGE,EAAMF,GACK,IACVE,EAAM,QAGPA,EAAM,EAEP,GAAKT,EAAUK,GAAQ,CACtB,IAAML,EAAUM,GACf,MAAM,IAAIK,UAAW,yEAA2EL,EAAc,MAE/G,OAA4C,IAArCD,EAAIU,QAAST,EAAaG,GAGlC,GADAD,EAAMH,EAAIQ,OACLX,EAAOI,GAAgB,CAC3B,IAAMI,EAAID,EAAKC,EAAIF,EAAKE,IACvB,GAAKR,EAAOG,EAAKK,IAChB,OAAO,EAGT,OAAO,EAER,IAAMA,EAAID,EAAKC,EAAIF,EAAKE,IACvB,GAAKL,EAAKK,KAAQJ,EACjB,OAAO,EAGT,OAAO,ECvEL,IAACF,EAAWR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/is-integer';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar isInteger = __var_1__.isPrimitive;\nvar isString = __var_2__.isPrimitive;\nvar isnan = __var_3__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests if an array-like value contains a search value.\n*\n* @param {(Collection|string)} val - input value\n* @param {*} searchValue - search value\n* @param {integer} [position=0] - position at which to start searching for `searchValue`\n* @throws {TypeError} first argument must be array-like\n* @throws {Error} must provide a search value\n* @throws {TypeError} second argument must be a primitive string primitive when the first argument is a string\n* @throws {TypeError} third argument must be an integer\n* @returns {boolean} boolean indicating whether one value contains another\n*\n* @example\n* var bool = contains( 'last man standing', 'stand' );\n* // returns true\n*\n* @example\n* var bool = contains( [ 1, 2, 3, 4 ], 2 );\n* // returns true\n*\n* @example\n* var bool = contains( 'presidential election', 'president' );\n* // returns true\n*\n* @example\n* var bool = contains( [ NaN, 2, 3, 4 ], NaN );\n* // returns true\n*\n* @example\n* var bool = contains( 'javaScript', 'js' );\n* // returns false\n*\n* @example\n* var bool = contains( [ 1, 2, 3, {} ], {} );\n* // returns false\n*\n* @example\n* var bool = contains( 'Hidden Treasures', '' );\n* // returns true\n*/\nfunction contains( val, searchValue, position ) {\n\tvar len;\n\tvar pos;\n\tvar i;\n\tif ( !isCollection( val ) && !isString( val ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be array-like. Value: `' + val + '`.' );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide a search value.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isInteger( position ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + position + '`.' );\n\t\t}\n\t\tpos = position;\n\t\tif ( pos < 0 ) {\n\t\t\tpos = 0;\n\t\t}\n\t} else {\n\t\tpos = 0;\n\t}\n\tif ( isString( val ) ) {\n\t\tif ( !isString( searchValue ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a string primitive. Value: `' + searchValue + '`.' );\n\t\t}\n\t\treturn val.indexOf( searchValue, pos ) !== -1;\n\t}\n\tlen = val.length;\n\tif ( isnan( searchValue ) ) {\n\t\tfor ( i = pos; i < len; i++ ) {\n\t\t\tif ( isnan( val[ i ] ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfor ( i = pos; i < len; i++ ) {\n\t\tif ( val[ i ] === searchValue ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\nexport default contains;\n","import __var_0__ from './contains.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if an array-like value contains another value.\n*\n* @module @stdlib/assert/contains\n*\n* @example\n* var contains = require( '@stdlib/assert/contains' );\n*\n* var bool = contains( 'Hello World', 'World' );\n* // returns true\n*\n* bool = contains( 'Hello World', 'world' );\n* // returns false\n*\n* bool = contains( [ 1, 2, 3, 4 ], 2 );\n* // returns true\n*\n* bool = contains( [ NaN, 2, 3, 4 ], NaN );\n* // returns true\n*/\n\n// MODULES //\nvar contains = __var_0__;\n\n\n// EXPORTS //\nexport default contains;\n"]}