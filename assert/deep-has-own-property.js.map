{"version":3,"sources":["@stdlib/assert/deep-has-own-property/lib/validate.js","@stdlib/assert/deep-has-own-property/lib/has.js","@stdlib/assert/deep-has-own-property/lib/main.js","@stdlib/assert/deep-has-own-property/lib/factory.js","@stdlib/assert/deep-has-own-property/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isObject","__var_1__","hasOwnProp","__var_2__","validate","opts","options","sep","TypeError","deepHasOwnProp","v","props","i","len","length","isArray","copy","__var_3__","defaults","__var_4__","has","__var_5__","value","path","isStr","err","arguments","split","factory","setReadOnly"],"mappings":"2OAwBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAWC,EACXC,EAAaC,EAwBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMN,EAAUM,GAGXJ,EAAYI,EAAS,SACzBD,EAAKE,IAAMD,EAAQC,KACbV,EAAUQ,EAAKE,MACb,IAAIC,UAAW,qEAAuEH,EAAKE,IAAM,MAGnG,KARC,IAAIC,UAAW,iEAAmEF,EAAU,0BC9BjGJ,EAAaJ,EAajB,SAASW,EAAgBC,EAAGC,GAC3B,IACIC,EADAC,EAAMF,EAAMG,OAEhB,GAAa,IAARD,EACJ,OAAO,EAER,IAAMD,EAAI,EAAGA,EAAIC,EAAKD,IAAM,CAC3B,IAAKV,EAAYQ,EAAGC,EAAOC,IAG1B,OAAO,EAFPF,EAAIA,EAAGC,EAAOC,IAKhB,OAAO,ECrBR,IAAIf,EAAWC,EAAUC,YACrBgB,EAAUd,EACVe,EAAOb,EACPC,EAAWa,EACXC,EAAWC,EACXC,EAAMC,EAkDV,SAASZ,EAAgBa,EAAOC,EAAMjB,GACrC,IAAIkB,EACAb,EACAN,EACAoB,EAGJ,KADAD,EAAQ3B,EAAU0B,MACFR,EAASQ,GACxB,MAAM,IAAIf,UAAW,iFAAmFe,EAAO,MAGhH,GADAlB,EAAOW,EAAME,GACRQ,UAAUZ,OAAS,IACvBW,EAAMrB,EAAUC,EAAMC,IAErB,MAAMmB,EAGR,OAAKH,MAAAA,IAIJX,EADIa,EACID,EAAKI,MAAOtB,EAAKE,KAEjBgB,EAEFH,EAAKE,EAAOX,IChFpB,IAAId,EAAWC,EAAUC,YACrBgB,EAAUd,EACVe,EAAOb,EACPC,EAAWa,EACXC,EAAWC,EACXC,EAAMC,EAqBV,SAASO,EAASL,EAAMjB,GACvB,IAAIkB,EACAb,EACAN,EACAoB,EAEJ,KADAD,EAAQ3B,EAAU0B,MACFR,EAASQ,GACxB,MAAM,IAAIf,UAAW,iFAAmFe,EAAO,MAGhH,GADAlB,EAAOW,EAAME,GACRQ,UAAUZ,OAAS,IACvBW,EAAMrB,EAAUC,EAAMC,IAErB,MAAMmB,EAQR,OAJCd,EADIa,EACID,EAAKI,MAAOtB,EAAKE,KAEjBgB,EAEFd,EAaP,SAASA,EAAgBa,GACxB,OAAKA,MAAAA,GAGEF,EAAKE,EAAOX,IC1BrB,IAAIkB,EAAc/B,EACdW,EAAiBR,EACjB2B,EAAUzB,EAKd0B,EAAapB,EAAgB,UAAWmB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '/'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a string primitive. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether an object has a nested property.\n*\n* @private\n* @param {*} v - value to test\n* @param {Array} props - list of properties defining a key path\n* @returns {boolean} boolean indicating whether an object has a nested property\n*/\nfunction deepHasOwnProp( v, props ) {\n\tvar len = props.length;\n\tvar i;\n\tif ( len === 0 ) {\n\t\treturn false;\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( hasOwnProp( v, props[ i ] ) ) {\n\t\t\tv = v[ props[ i ] ];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\nexport default deepHasOwnProp;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/utils/copy';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './defaults.json';\nimport __var_5__ from './has.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isArray = __var_1__;\nvar copy = __var_2__;\nvar validate = __var_3__;\nvar defaults = __var_4__;\nvar has = __var_5__;\n\n\n// MAIN //\n\n/**\n* Tests whether an object contains a nested key path.\n*\n* @param {*} value - value to test\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} second argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {boolean} boolean indicating whether an object has a nested property\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepHasOwnProp( obj, 'a.b.c' );\n* // returns true\n*\n* @example\n* var arr = [\n*     {\n*         'a': [\n*             {\n*                 'b': [\n*                     { 'c': 'd' },\n*                     { 'e': 'f' }\n*                 ]\n*             }\n*         ]\n*     }\n* ];\n* var bool = deepHasOwnProp( arr, '0.a.0.b.0.c' );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepHasOwnProp( obj, [ 'a', 'b', 'c' ] );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepHasOwnProp( obj, 'a/b/c', {\n*     'sep': '/'\n* });\n* // returns true\n*/\nfunction deepHasOwnProp( value, path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( value === void 0 || value === null ) {\n\t\treturn false;\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn has( value, props );\n}\n\n\n// EXPORTS //\nexport default deepHasOwnProp;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/utils/copy';\nimport __var_3__ from './validate.js';\nimport __var_4__ from './defaults.json';\nimport __var_5__ from './has.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isArray = __var_1__;\nvar copy = __var_2__;\nvar validate = __var_3__;\nvar defaults = __var_4__;\nvar has = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function which tests whether an object has a nested key path.\n*\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} first argument must be a string primitive or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which tests whether an object has a nested key path\n*\n* @example\n* var has = factory( 'a/b/c', {\n*     'sep': '/'\n* });\n*/\nfunction factory( path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( 'invalid argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn deepHasOwnProp;\n\n\t/**\n\t* Returns a boolean indicating whether an object has a nested key path.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether an object has a nested property\n\t*\n\t* @example\n\t* var obj = { 'a': { 'b': { 'c': 'd' } } };\n\t* var bool = deepHasOwnProp( obj );\n\t*/\n\tfunction deepHasOwnProp( value ) {\n\t\tif ( value === void 0 || value === null ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn has( value, props );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether an object contains a nested key path.\n*\n* @module @stdlib/assert/deep-has-own-property\n*\n* @example\n* var deepHasOwnProp = require( '@stdlib/assert/deep-has-own-property' );\n*\n* var obj = {\n*     'a': {\n*         'b': {\n*             'c': 'd'\n*         }\n*     }\n* };\n*\n* var bool = deepHasOwnProp( obj, 'a.b.c' );\n* // returns true\n*\n* bool = deepHasOwnProp( obj, [ 'a', 'b', 'c' ] );\n* // returns true\n*\n* @example\n* var factory = require( '@stdlib/assert/deep-has-own-property' ).factory;\n*\n* var has = factory( 'a/b/c', {\n*     'sep': '/'\n* });\n*\n* var obj = {\n*     'a': {\n*         'b': {\n*             'c': 'd'\n*         }\n*     }\n* };\n*\n* var bool = has( obj );\n* // returns true\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar deepHasOwnProp = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( deepHasOwnProp, 'factory', factory );\n\n\n// EXPORTS //\nexport default deepHasOwnProp;\n"]}