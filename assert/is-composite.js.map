{"version":3,"sources":["@stdlib/assert/is-composite/lib/primitive.js","@stdlib/assert/is-composite/lib/object.js","@stdlib/assert/is-composite/lib/main.js","@stdlib/assert/is-composite/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","iscomposite","__var_1__","isComposite","value","isObject","valueOf","setReadOnly","__var_2__","__var_3__"],"mappings":"wJAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAcC,EAmBlB,SAASC,EAAaC,GACrB,QAAMN,EAAUM,IAGTH,EAAaG,GCxBrB,IAAIN,EAAWC,EAAUM,SACrBJ,EAAcC,EAmBlB,SAASC,EAAaC,GACrB,QAAMN,EAAUM,IAGTH,EAAaG,EAAME,WCxB3B,IAAIN,EAAcD,EACdM,EAAWH,EA+Bf,SAASC,EAAaC,GACrB,OAASJ,EAAaI,IAAWC,EAAUD,GCW5C,IAAIG,EAAcR,EACdI,EAAcD,EACdF,EAAcQ,EACdH,EAAWI,EAKfF,EAAaJ,EAAa,cAAeH,GACzCO,EAAaJ,EAAa,WAAYE","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/math/base/assert/is-composite';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar iscomposite = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a value which is a composite number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a composite number\n*\n* @example\n* var bool = isComposite( 4.0 );\n* // returns true\n*\n* @example\n* var bool = isComposite( new Number( 4.0 ) );\n* // returns false\n*/\nfunction isComposite( value ) {\n\tif ( !isNumber( value ) ) {\n\t\treturn false;\n\t}\n\treturn iscomposite( value );\n}\n\n\n// EXPORTS //\nexport default isComposite;\n","import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/math/base/assert/is-composite';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isObject;\nvar iscomposite = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value which is a composite number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value which is a composite number\n*\n* @example\n* var bool = isComposite( 4.0 );\n* // returns false\n*\n* @example\n* var bool = isComposite( new Number( 4.0 ) );\n* // returns true\n*/\nfunction isComposite( value ) {\n\tif ( !isNumber( value ) ) {\n\t\treturn false;\n\t}\n\treturn iscomposite( value.valueOf() );\n}\n\n\n// EXPORTS //\nexport default isComposite;\n","import __var_0__ from './primitive.js';\nimport __var_1__ from './object.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPrimitive = __var_0__;\nvar isObject = __var_1__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a composite number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a composite number\n*\n* @example\n* var bool = isComposite( 4.0 );\n* // returns true\n*\n* @example\n* var bool = isComposite( new Number( 4.0 ) );\n* // returns true\n*\n* @example\n* var bool = isComposite( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isComposite( -4.0 );\n* // returns false\n*\n* @example\n* var bool = isComposite( null );\n* // returns false\n*/\nfunction isComposite( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\nexport default isComposite;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './primitive.js';\nimport __var_3__ from './object.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a composite number.\n*\n* @module @stdlib/assert/is-composite\n*\n* @example\n* var isComposite = require( '@stdlib/assert/is-composite' );\n*\n* var bool = isComposite( 4.0 );\n* // returns true\n*\n* bool = isComposite( new Number( 4.0 ) );\n* // returns true\n*\n* bool = isComposite( 3.14 );\n* // returns false\n*\n* bool = isComposite( -4.0 );\n* // returns false\n*\n* bool = isComposite( null );\n* // returns false\n*\n* @example\n* var isComposite = require( '@stdlib/assert/is-composite' ).isPrimitive;\n*\n* var bool = isComposite( 4.0 );\n* // returns true\n*\n* bool = isComposite( new Number( 4.0 ) );\n* // returns false\n*\n* @example\n* var isComposite = require( '@stdlib/assert/is-composite' ).isObject;\n*\n* var bool = isComposite( 4.0 );\n* // returns false\n*\n* bool = isComposite( new Number( 4.0 ) );\n* // returns true\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isComposite = __var_1__;\nvar isPrimitive = __var_2__;\nvar isObject = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( isComposite, 'isPrimitive', isPrimitive );\nsetReadOnly( isComposite, 'isObject', isObject );\n\n\n// EXPORTS //\nexport default isComposite;\n"]}