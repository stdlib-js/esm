{"version":3,"sources":["@stdlib/assert/is-symbol-array/lib/index.js"],"names":["setReadOnly","__var_0__","arrayfun","__var_1__","isSymbol","__var_2__","isSymbolArray","isPrimitive","isObject"],"mappings":"iJAyDA,IAAIA,EAAcC,EACdC,EAAWC,EACXC,EAAWC,EAKXC,EAAgBJ,EAAUE,GAC9BJ,EAAaM,EAAe,aAAcJ,EAAUE,EAASG,cAC7DP,EAAaM,EAAe,UAAWJ,EAAUE,EAASI","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/tools/array-like-function';\nimport __var_2__ from '@stdlib/assert/is-symbol';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only symbols.\n*\n* @module @stdlib/assert/is-symbol-array\n*\n* @example\n* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' );\n*\n* var bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );\n* // returns true\n*\n* bool = isSymbolArray( [ Symbol( 'abc' ), 'def' ] );\n* // returns false\n*\n* @example\n* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' ).primitives;\n*\n* var bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );\n* // returns true\n*\n* bool = isSymbolArray( [ Symbol( 'abc' ), Object( Symbol( 'def' ) ) ] );\n* // returns false\n*\n* @example\n* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' ).objects;\n*\n* var bool = isSymbolArray( [ Object( Symbol( 'abc' ) ), Object( Symbol( 'def' ) ) ] );\n* // returns true\n*\n* bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );\n* // returns false\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar arrayfun = __var_1__;\nvar isSymbol = __var_2__;\n\n\n// MAIN //\n\nvar isSymbolArray = arrayfun( isSymbol );\nsetReadOnly( isSymbolArray, 'primitives', arrayfun( isSymbol.isPrimitive ) );\nsetReadOnly( isSymbolArray, 'objects', arrayfun( isSymbol.isObject ) );\n\n\n// EXPORTS //\nexport default isSymbolArray;\n"]}