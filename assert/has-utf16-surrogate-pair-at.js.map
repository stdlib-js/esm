{"version":3,"sources":["@stdlib/assert/has-utf16-surrogate-pair-at/lib/main.js","@stdlib/assert/has-utf16-surrogate-pair-at/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isNonNegativeInteger","__var_1__","OxD800","OxDBFF","OxDC00","OxDFFF","hasUTF16SurrogatePairAt","str","pos","ch1","ch2","TypeError","length","RangeError","charCodeAt"],"mappings":"yEAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAuBC,EAAUF,YAMjCG,EAAS,MACTC,EAAS,MAGTC,EAAS,MACTC,EAAS,MAwBb,SAASC,EAAyBC,EAAKC,GACtC,IAAIC,EACAC,EACJ,IAAMb,EAAUU,GACf,MAAM,IAAII,UAAW,oDAAsDJ,EAAM,MAElF,IAAMP,EAAsBQ,GAC3B,MAAM,IAAIG,UAAW,kFAAoFH,EAAM,MAEhH,GAAKA,GAAOD,EAAIK,OACf,MAAM,IAAIC,WAAY,mFAAqFL,EAAM,MAIlH,OAFAC,EAAMF,EAAIO,WAAYN,GACtBE,EAAMH,EAAIO,WAAYN,EAAM,GACrBC,GAAOP,GAAUO,GAAON,GAAUO,GAAON,GAAUM,GAAOL,ECpC/D,IAACC,EAA0BR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\n\n\n// VARIABLES //\n\n// Range for a high surrogate\nvar OxD800 = 0xD800|0; // 55296\nvar OxDBFF = 0xDBFF|0; // 56319\n\n// Range for a low surrogate\nvar OxDC00 = 0xDC00|0; // 56320\nvar OxDFFF = 0xDFFF|0; // 57343\n\n\n// MAIN //\n\n/**\n* Tests if a position in a string marks the start of a UTF-16 surrogate pair.\n*\n* @private\n* @param {string} str - input string\n* @param {NonNegativeInteger} pos - position in string\n* @throws {TypeError} first argument must be a string primitive\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} position must be a valid index in string\n* @returns {boolean} boolean indicating whether the string has a surrogate pair at a position\n*\n* @example\n* var out = hasUTF16SurrogatePairAt( 'ðŸŒ·', 0 );\n* // returns true\n*\n* @example\n* var out = hasUTF16SurrogatePairAt( 'ðŸŒ·', 1 );\n* // returns false\n*/\nfunction hasUTF16SurrogatePairAt( str, pos ) {\n\tvar ch1;\n\tvar ch2;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( pos ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a valid position (nonnegative integer). Value: `' + pos + '`.' );\n\t}\n\tif ( pos >= str.length ) {\n\t\tthrow new RangeError( 'invalid argument. Must provide a valid position (within string bounds). Value: `' + pos + '`.' );\n\t}\n\tch1 = str.charCodeAt( pos );\n\tch2 = str.charCodeAt( pos + 1 );\n\treturn ch1 >= OxD800 && ch1 <= OxDBFF && ch2 >= OxDC00 && ch2 <= OxDFFF;\n}\n\n\n// EXPORTS //\nexport default hasUTF16SurrogatePairAt;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a position in a string marks the start of a UTF-16 surrogate pair.\n*\n* @module @stdlib/assert/has-utf16-surrogate-pair-at\n*\n* @example\n* var hasUTF16SurrogatePairAt = require( '@stdlib/assert/has-utf16-surrogate-pair-at' );\n*\n* var bool = hasUTF16SurrogatePairAt( 'ðŸŒ·', 0 );\n* // returns true\n*\n* bool = hasUTF16SurrogatePairAt( 'ðŸŒ·', 1 );\n* // returns false\n*/\n\n// MODULES //\nvar hasUTF16SurrogatePairAt = __var_0__;\n\n\n// EXPORTS //\nexport default hasUTF16SurrogatePairAt;\n"]}