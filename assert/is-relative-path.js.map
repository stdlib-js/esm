{"version":3,"sources":["@stdlib/assert/is-relative-path/lib/posix.js","@stdlib/assert/is-relative-path/lib/win32.js","@stdlib/assert/is-relative-path/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isAbsolutePath","__var_1__","posix","isRelativePath","value","win32","setReadOnly","IS_WINDOWS","isRelativePathPosix","__var_2__","isRelativePathWin32","__var_3__","isRelativePath$3"],"mappings":"uKAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAiBC,EAAUC,MAmB/B,SAASC,EAAgBC,GACxB,OACCP,EAAUO,KACTJ,EAAgBI,GCvBnB,IAAIP,EAAWC,EAAUC,YACrBC,EAAiBC,EAAUI,MAmB/B,SAASF,EAAgBC,GACxB,OACCP,EAAUO,KACTJ,EAAgBI,GCInB,IAQID,EARAG,EAAcR,EACdS,EAAaN,EACbO,EAAsBC,EACtBC,EAAsBC,EAW1BL,EAJCH,EADII,EACaG,EARQD,EAYG,QAZHA,GAa1BH,EAAaH,EAAgB,QAASO,GAItC,IAAAE,EAAeT","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-absolute-path';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isAbsolutePath = __var_1__.posix;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a POSIX relative path.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a POSIX relative path\n*\n* @example\n* var bool = isRelativePath( './foo/bar/baz' );\n* // returns true\n*\n* @example\n* var bool = isRelativePath( '/foo/../bar/baz' );\n* // returns false\n*/\nfunction isRelativePath( value ) {\n\treturn (\n\t\tisString( value ) &&\n\t\t!isAbsolutePath( value )\n\t);\n}\n\n\n// EXPORTS //\nexport default isRelativePath;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-absolute-path';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isAbsolutePath = __var_1__.win32;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Windows relative path.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a Windows relative path\n*\n* @example\n* var bool = isRelativePath( 'foo\\\\bar\\\\baz' );\n* // returns true\n*\n* @example\n* var bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' );\n* // returns false\n*/\nfunction isRelativePath( value ) {\n\treturn (\n\t\tisString( value ) &&\n\t\t!isAbsolutePath( value )\n\t);\n}\n\n\n// EXPORTS //\nexport default isRelativePath;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-windows';\nimport __var_2__ from './posix.js';\nimport __var_3__ from './win32.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a relative path.\n*\n* @module @stdlib/assert/is-relative-path\n*\n* @example\n* var IS_WINDOWS = require( '@stdlib/assert/is-windows' );\n* var isRelativePath = require( '@stdlib/assert/is-relative-path' );\n*\n* var bool;\n* if ( IS_WINDOWS ) {\n*     bool = isRelativePath( 'foo\\\\bar\\\\baz' );\n*     // returns true\n*\n*     bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' );\n*     // returns false\n* } else {\n*     bool = isRelativePath( './foo/bar/baz' );\n*     // returns true\n*\n*     bool = isRelativePath( '/foo/../bar/baz' );\n*     // returns false\n* }\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar IS_WINDOWS = __var_1__;\nvar isRelativePathPosix = __var_2__;\nvar isRelativePathWin32 = __var_3__;\n\n\n// MAIN //\n\nvar isRelativePath;\nif ( IS_WINDOWS ) {\n\tisRelativePath = isRelativePathWin32;\n} else {\n\tisRelativePath = isRelativePathPosix;\n}\nsetReadOnly( isRelativePath, 'posix', isRelativePathPosix );\nsetReadOnly( isRelativePath, 'win32', isRelativePathWin32 );\n\n\n// EXPORTS //\nexport default isRelativePath;\n"]}