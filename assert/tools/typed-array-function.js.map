{"version":3,"sources":["@stdlib/assert/tools/typed-array-function/lib/typedarrayfcn.js","@stdlib/assert/tools/typed-array-function/lib/index.js"],"names":["isTypedArray","__var_0__","typedarrayfcn","predicate","TypeError","value","len","i","length"],"mappings":"sCAsBA,IAAIA,EAAeC,EA0BnB,SAASC,EAAeC,GACvB,GAA0B,mBAAdA,EACX,MAAM,IAAIC,UAAW,sDAAwDD,EAAY,MAE1F,OASA,SAAgBE,GACf,IAAIC,EACAC,EACJ,IAAMP,EAAcK,GACnB,OAAO,EAGR,GAAa,KADbC,EAAMD,EAAMG,QAEX,OAAO,EAER,IAAMD,EAAI,EAAGA,EAAID,EAAKC,IACrB,IAAiC,IAA5BJ,EAAWE,EAAOE,IACtB,OAAO,EAGT,OAAO,GCjCN,IAACL,EAAgBD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-typed-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isTypedArray = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in a typed array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} a typed array function\n*\n* @example\n* var isOdd = require( '@stdlib/assert/is-odd' );\n*\n* var arr1 = new Int32Array( [ 1, 3, 5, 7 ] );\n* var arr2 = new Int32Array( [ 1, 3, 5, 8 ] );\n*\n* var validate = typedarrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction typedarrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in a typed array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is a typed array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isTypedArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\nexport default typedarrayfcn;\n","import __var_0__ from './typedarrayfcn.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a function which tests if every element in a typed array passes a test condition.\n*\n* @module @stdlib/assert/tools/typed-array-function\n*\n* @example\n* var isOdd = require( '@stdlib/math/base/assert/is-odd' );\n* var typedarrayfcn = require( '@stdlib/assert/tools/typed-array-function' );\n*\n* var arr1 = new Int32Array( [ 1, 3, 5, 7 ] );\n* var arr2 = new Int32Array( [ 3, 5, 6, 8 ] );\n*\n* var f = typedarrayfcn( isOdd );\n*\n* var bool = f( arr1 );\n* // returns true\n*\n* bool = f( arr2 );\n* // returns false\n*/\n\n// MODULES //\nvar typedarrayfcn = __var_0__;\n\n\n// EXPORTS //\nexport default typedarrayfcn;\n"]}