{"version":3,"sources":["@stdlib/assert/is-nonsymmetric-matrix/lib/main.js","@stdlib/assert/is-nonsymmetric-matrix/lib/index.js"],"names":["isMatrixLike","__var_0__","isNonSymmetricMatrix","v","M","i","j","shape","get"],"mappings":"mCAsBA,IAAIA,EAAeC,EA4BnB,SAASC,EAAsBC,GAC9B,IAAIC,EACAC,EACAC,EACJ,IAAMN,EAAcG,GACnB,OAAO,EAGR,IADAC,EAAID,EAAEI,MAAO,MACFJ,EAAEI,MAAO,GACnB,OAAO,EAER,IAAMF,EAAI,EAAGA,EAAID,EAAGC,IACnB,IAAMC,EAAI,EAAGA,EAAID,EAAGC,IACnB,GAAKH,EAAEK,IAAKH,EAAGC,KAAQH,EAAEK,IAAKF,EAAGD,GAChC,OAAO,EAIV,OAAO,EC1BL,IAACH,EAAuBD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-matrix-like';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isMatrixLike = __var_0__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a non-symmetric matrix.\n*\n* ## Notes\n*\n* -   The implementation must rely on manually checking that \\\\(M_{ij} \\neq M_{ji}\\\\), and, while element access is deterministic, no way exists to prevent cache misses outside of reordering the underlying matrix elements, thus incurring a larger performance penalty than just \"jumping around\" in a single pass.\n* -   Worst case scenario: O(N^2).\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating if a value is a non-symmetric matrix\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/ctor' );\n*\n* var ndarray = ctor( 'generic', 2 );\n* var arr = ndarray( [ 1, 2, 3, 4 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n*\n* var bool = isNonSymmetricMatrix( arr );\n* // returns true\n*\n* bool = isNonSymmetricMatrix( [] );\n* // returns false\n*/\nfunction isNonSymmetricMatrix( v ) {\n\tvar M;\n\tvar i;\n\tvar j;\n\tif ( !isMatrixLike( v ) ) {\n\t\treturn false;\n\t}\n\tM = v.shape[ 0 ];\n\tif ( M !== v.shape[ 1 ] ) {\n\t\treturn true;\n\t}\n\tfor ( i = 0; i < M; i++ ) {\n\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\tif ( v.get( i, j ) !== v.get( j, i ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\nexport default isNonSymmetricMatrix;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a non-symmetric matrix.\n*\n* @module @stdlib/assert/is-nonsymmetric-matrix\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/ctor' );\n* var isNonSymmetricMatrix = require( '@stdlib/assert/is-nonsymmetric-matrix' );\n*\n* var ndarray = ctor( 'generic', 2 );\n*\n* var arr = ndarray( [ 1, 2, 3, 4 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n*\n* var bool = isNonSymmetricMatrix( arr );\n* // returns true\n*\n* bool = isNonSymmetricMatrix( [] );\n* // returns false\n*/\n\n// MODULES //\nvar isNonSymmetricMatrix = __var_0__;\n\n\n// EXPORTS //\nexport default isNonSymmetricMatrix;\n"]}