{"version":3,"sources":["@stdlib/assert/is-skew-centrosymmetric-matrix/lib/main.js","@stdlib/assert/is-skew-centrosymmetric-matrix/lib/index.js"],"names":["isSquareMatrix","__var_0__","floor","__var_1__","isOdd","__var_2__","isSkewCentrosymmetricMatrix","v","m1","M","N","n","i","j","shape","get"],"mappings":"mIAwBA,IAAIA,EAAiBC,EACjBC,EAAQC,EACRC,EAAQC,EA4BZ,SAASC,EAA6BC,GACrC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMb,EAAgBO,GACrB,OAAO,EAKR,IAHAE,EAAIF,EAAEO,MAAO,GACbJ,EAAIR,EAAOO,EAAE,GACbD,EAAKC,EAAI,EACHG,EAAI,EAAGA,EAAIF,EAAGE,IAEnB,IADAD,EAAIH,EAAKI,EACHC,EAAI,EAAGA,EAAIJ,EAAGI,IACnB,GAAKN,EAAEQ,IAAKH,EAAGC,MAASN,EAAEQ,IAAKJ,EAAGH,EAAGK,GACpC,OAAO,EAIV,GAAKT,EAAOK,GAEX,IAAMI,EAAI,EAAGA,GAAKH,EAAGG,IACpB,GAAKN,EAAEQ,IAAKH,EAAGC,MAASN,EAAEQ,IAAKL,EAAGF,EAAGK,GACpC,OAAO,EAIV,OAAO,ECzCL,IAACP,EAA8BL","sourcesContent":["import __var_0__ from '@stdlib/assert/is-square-matrix';\nimport __var_1__ from '@stdlib/math/base/special/floor';\nimport __var_2__ from '@stdlib/math/base/assert/is-odd';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isSquareMatrix = __var_0__;\nvar floor = __var_1__;\nvar isOdd = __var_2__;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a skew-centrosymmetric matrix.\n*\n* ## Notes\n*\n* -   The implementation must rely on manually checking that \\\\(M_{ij} = -M_{N-i-1,N-j-1}\\\\), and, while element access is deterministic, no way exists to prevent cache misses outside of reordering the underlying matrix elements, thus incurring a larger performance penalty than just \"jumping around\" in a single pass.\n* -   Worst case scenario: O(N^2).\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating if a value is a skew-centrosymmetric matrix\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/ctor' );\n*\n* var ndarray = ctor( 'generic', 2 );\n* var arr = ndarray( [ 2, 1, -1, -2 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n*\n* var bool = isSkewCentrosymmetricMatrix( arr );\n* // returns true\n*\n* bool = isSkewCentrosymmetricMatrix( [] );\n* // returns false\n*/\nfunction isSkewCentrosymmetricMatrix( v ) { // eslint-disable-line id-length\n\tvar m1;\n\tvar M;\n\tvar N;\n\tvar n;\n\tvar i;\n\tvar j;\n\tif ( !isSquareMatrix( v ) ) {\n\t\treturn false;\n\t}\n\tM = v.shape[ 0 ];\n\tN = floor( M/2.0 ); // corresponds to a row index + 1\n\tm1 = M - 1;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tn = m1 - i;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( v.get( i, j ) !== -v.get( n, m1-j ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif ( isOdd( M ) ) {\n\t\t// Only need to examine the first half of the row (including the center element) due to symmetry...\n\t\tfor ( j = 0; j <= N; j++ ) {\n\t\t\tif ( v.get( i, j ) !== -v.get( N, m1-j ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\nexport default isSkewCentrosymmetricMatrix;\n","import __var_0__ from './main.js'; // eslint-disable-line id-length\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a skew-centrosymmetric matrix.\n*\n* @module @stdlib/assert/is-skew-centrosymmetric-matrix\n*\n* @example\n* var ctor = require( '@stdlib/ndarray/ctor' );\n* var isSkewCentrosymmetricMatrix = require( '@stdlib/assert/is-skew-centrosymmetric-matrix' );\n*\n* var ndarray = ctor( 'generic', 2 );\n*\n* var arr = ndarray( [ 2, 1, -1, -2 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n*\n* var bool = isSkewCentrosymmetricMatrix( arr );\n* // returns true\n*\n* bool = isSkewCentrosymmetricMatrix( [] );\n* // returns false\n*/\n\n// MODULES //\nvar isSkewCentrosymmetricMatrix = __var_0__;\n\n\n// EXPORTS //\nexport default isSkewCentrosymmetricMatrix;\n"]}