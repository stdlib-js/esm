{"version":3,"sources":["@stdlib/assert/is-web-worker/lib/global_scope.js","@stdlib/assert/is-web-worker/lib/main.js","@stdlib/assert/is-web-worker/lib/index.js"],"names":["scope","globalScope","Function","fcn","__var_3__","getGlobal","__var_0__","IS_NODE","__var_1__","isObject","__var_2__","Global","isWebWorker","WorkerGlobalScope","WorkerNavigator","navigator","WorkerLocation","location","self","importScripts","bool"],"mappings":"oGAyBA,IAAIA,EAWJ,SAASC,IAOR,MALO,QACA,wBACA,oBACA,gBACA,IACA,IAAKC,SADZC,4DACO,GAUR,IAAAC,EAJAJ,EAAQC,ICtBJI,EAAYC,EACZC,EAAUC,EACVC,EAAWC,EACXT,EAAcG,EAKdO,EAASN,IAcb,SAASO,IACR,OAEa,IAAZL,GAG6B,iBAAtBM,mBAGPJ,EAAUK,kBAGVC,qBAAqBD,iBAGrBL,EAAUO,iBAGVC,oBAAoBD,gBAGJ,iBAATE,MAGPA,OAASP,IAGO,IAAhBV,GAGyB,mBAAlBkB,cC7CT,IAAIP,EAAcN,EAKdc,EAAOR","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-new-func */\n\n'use strict';\n\n// VARIABLES //\n\nvar scope;\n\n\n// FUNCTIONS //\n\n/**\n* Test if the global scope is bound to the \"self\" variable present in browser web worker environments. When creating a new function using the `Function(){}` constructor, the execution scope aliased by the `this` variable is the global scope.\n*\n* @private\n* @returns {boolean} boolean indicating if global scope is bound to \"self\" variable\n*/\nfunction globalScope() {\n\tvar fcn = '';\n\tfcn += 'try {';\n\tfcn += 'return this === self;';\n\tfcn += '} catch ( err ) {';\n\tfcn += 'return false;';\n\tfcn += '}';\n\treturn (new Function( fcn ))();\n}\n\n\n// MAIN //\n\nscope = globalScope();\n\n\n// EXPORTS //\nexport default scope;\n","import __var_0__ from '@stdlib/utils/global';\nimport __var_1__ from '@stdlib/assert/is-node';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from './global_scope.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* global WorkerGlobalScope, WorkerNavigator, WorkerLocation, self, importScripts, navigator, location */\n\n'use strict';\n\n// MODULES //\nvar getGlobal = __var_0__;\nvar IS_NODE = __var_1__;\nvar isObject = __var_2__;\nvar globalScope = __var_3__;\n\n\n// VARIABLES //\n\nvar Global = getGlobal();\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the runtime is a web worker.\n*\n* @returns {boolean} boolean indicating if runtime is a web worker\n*\n* @example\n* var bool = isWebWorker();\n* // returns <boolean>\n*/\nfunction isWebWorker() {\n\treturn (\n\t\t// Check that we are not running in a Node.js runtime:\n\t\tIS_NODE === false &&\n\n\t\t// Check for presence of `WorkerGlobalScope` global variable:\n\t\ttypeof WorkerGlobalScope === 'object' &&\n\n\t\t// Check for presence of `WorkerNavigator` global variable:\n\t\tisObject( WorkerNavigator ) &&\n\n\t\t// Check that the `navigator` global object is an instance of `WorkerNavigator`:\n\t\tnavigator instanceof WorkerNavigator &&\n\n\t\t// Check for presence of `WorkerLocation` global variable:\n\t\tisObject( WorkerLocation ) &&\n\n\t\t// Check that the `location` global object is an instance of `WorkerLocation`:\n\t\tlocation instanceof WorkerLocation &&\n\n\t\t// Check for presence of `self` variable:\n\t\ttypeof self === 'object' &&\n\n\t\t// Check that the `self` variable matches the determined global variable:\n\t\tself === Global &&\n\n\t\t// Check that the `self` variable is equal to the global scope:\n\t\tglobalScope === true &&\n\n\t\t// Check for presence of `importScripts` function:\n\t\ttypeof importScripts === 'function'\n\t);\n}\n\n\n// EXPORTS //\nexport default isWebWorker;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Boolean indicating if the runtime is a web worker.\n*\n* @module @stdlib/assert/is-web-worker\n*\n* @example\n* var IS_WEB_WORKER = require( '@stdlib/assert/is-web-worker' );\n*\n* var bool = IS_WEB_WORKER;\n* // returns <boolean>\n*/\n\n// MODULES //\nvar isWebWorker = __var_0__;\n\n\n// MAIN //\n\nvar bool = isWebWorker();\n\n\n// EXPORTS //\nexport default bool;\n"]}