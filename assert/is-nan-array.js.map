{"version":3,"sources":["@stdlib/assert/is-nan-array/lib/index.js"],"names":["setReadOnly","__var_0__","arrayfun","__var_1__","isnan","__var_2__","isNaNArray","isPrimitive","isObject"],"mappings":"8IAsDA,IAAIA,EAAcC,EACdC,EAAWC,EACXC,EAAQC,EAKRC,EAAaJ,EAAUE,GAC3BJ,EAAaM,EAAY,aAAcJ,EAAUE,EAAMG,cACvDP,EAAaM,EAAY,UAAWJ,EAAUE,EAAMI","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/tools/array-like-function';\nimport __var_2__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only `NaN` values.\n*\n* @module @stdlib/assert/is-nan-array\n*\n* @example\n* var isNaNArray = require( '@stdlib/assert/is-nan-array' );\n*\n* var bool = isNaNArray( [NaN,NaN,NaN] );\n* // returns true\n*\n* bool = isNaNArray( [NaN,2] );\n* // returns false\n*\n* bool = isNaNArray.primitives( [NaN,new Number( NaN )] );\n* // returns false\n*\n* bool = isNaNArray.primitives( [NaN,NaN,NaN] );\n* // returns true\n*\n* bool = isNaNArray.objects( [new Number( NaN ),new Number( NaN )] );\n* // returns true\n*\n* bool = isNaNArray.objects( [NaN,new Number( NaN ),new Number( NaN )] );\n* // returns false\n*\n* bool = isNaNArray.objects( [NaN,NaN,NaN] );\n* // returns false\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar arrayfun = __var_1__;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\nvar isNaNArray = arrayfun( isnan );\nsetReadOnly( isNaNArray, 'primitives', arrayfun( isnan.isPrimitive ) );\nsetReadOnly( isNaNArray, 'objects', arrayfun( isnan.isObject ) );\n\n\n// EXPORTS //\nexport default isNaNArray;\n"]}