{"version":3,"sources":["@stdlib/streams/node/from-strided-array/lib/validate.js","@stdlib/streams/node/from-strided-array/lib/debug.js","@stdlib/streams/node/from-strided-array/lib/main.js","@stdlib/streams/node/from-strided-array/lib/object_mode.js","@stdlib/streams/node/from-strided-array/lib/factory.js","@stdlib/streams/node/from-strided-array/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isNonNegative","__var_3__","isString","__var_4__","isFunction","__var_5__","validate","opts","options","sep","TypeError","objectMode","encoding","highWaterMark","serialize","logger","debug","Readable","isArrayLikeObject","isError","isBuffer","isInteger","isNonNegativeInteger","copy","__var_6__","inherit","__var_7__","setNonEnumerable","__var_8__","setNonEnumerableReadOnly","__var_9__","string2buffer","__var_10__","Buffer","__var_11__","DEFAULTS","__var_12__","__var_13__","__var_14__","read","FLG","err","v","this","_destroyed","_i","_N","push","_buffer","_idx","JSON","stringify","_stride","_objectMode","_serialize","_sep","concat","Error","emit","destroy","error","self","process","nextTick","message","StridedArrayStream","N","buffer","stride","offset","i","arguments","length","RangeError","call","prototype","factory","createStream","setReadOnly","stream"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegative = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\nvar isFunction = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err= validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a primitive string. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( 'invalid option. `encoding` option must be a primitive string or null. Option: `' + opts.encoding + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( 'invalid option. `serialize` option must be a function. Option: `' + opts.serialize + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// MAIN //\n\nvar debug = logger( 'from-strided-array-stream' );\n\n\n// EXPORTS //\nexport default debug;\n","import process from '@stdlib/vendor/process.js';\nimport __var_0__ from '@stdlib/vendor/readable-stream.js';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-error';\nimport __var_3__ from '@stdlib/assert/is-buffer';\nimport __var_4__ from '@stdlib/assert/is-integer';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_6__ from '@stdlib/utils/copy';\nimport __var_7__ from '@stdlib/utils/inherit';\nimport __var_8__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_9__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_10__ from '@stdlib/buffer/from-string';\nimport __var_11__ from '@stdlib/buffer/ctor'; // TODO: replace Buffer.concat usage with stdlib pkg\nimport __var_12__ from './defaults.json';\nimport __var_13__ from './validate.js';\nimport __var_14__ from './debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Readable = __var_0__.Readable;\nvar isArrayLikeObject = __var_1__;\nvar isError = __var_2__;\nvar isBuffer = __var_3__;\nvar isInteger = __var_4__.isPrimitive;\nvar isNonNegativeInteger = __var_5__.isPrimitive;\nvar copy = __var_6__;\nvar inherit = __var_7__;\nvar setNonEnumerable = __var_8__;\nvar setNonEnumerableReadOnly = __var_9__;\nvar string2buffer = __var_10__;\nvar Buffer = __var_11__;\nvar DEFAULTS = __var_12__;\nvar validate = __var_13__;\nvar debug = __var_14__;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\terr = null;\n\n\t\tthis._i += 1;\n\t\tif ( this._i > this._N ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = this._buffer[ this._idx ];\n\t\tdebug( 'Value: %s. Idx: %d. Iter: %d.', JSON.stringify( v ), this._idx, this._i );\n\n\t\tthis._idx += this._stride;\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( 'invalid operation. Serialization function must return a string or Buffer. Value: `' + v + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\tthis.emit( 'error', err );\n\t\t} else {\n\t\t\tFLG = this.push( v );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {StridedArrayStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\t// TODO: replace with polyfill\n\tprocess.nextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an array-like object.\n*\n* @constructor\n* @param {NonNegativeInteger} N - number of values to stream\n* @param {ArrayLikeObject} buffer - source value\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} linear index cannot exceed array bounds\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {StridedArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = new StridedArrayStream( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction StridedArrayStream( N, buffer, stride, offset, options ) {\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !( this instanceof StridedArrayStream ) ) {\n\t\tif ( arguments.length > 4 ) {\n\t\t\treturn new StridedArrayStream( N, buffer, stride, offset, options );\n\t\t}\n\t\treturn new StridedArrayStream( N, buffer, stride, offset );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t}\n\tif ( !isArrayLikeObject( buffer ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + buffer + '`.' );\n\t}\n\tif ( !isInteger( stride ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + stride + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t}\n\tif ( N > 0 ) {\n\t\ti = offset + ((N-1)*stride);\n\t\tif ( offset >= buffer.length || i < 0 || i >= buffer.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Strided array parameters are incompatible with the provided array-like object. Linear index exceeds array bounds.' );\n\t\t}\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 4 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the data source:\n\tsetNonEnumerableReadOnly( this, '_buffer', buffer );\n\n\t// Cache the strided array parameters:\n\tsetNonEnumerableReadOnly( this, '_N', N );\n\tsetNonEnumerableReadOnly( this, '_stride', stride );\n\tsetNonEnumerableReadOnly( this, '_offset', offset );\n\tsetNonEnumerable( this, '_idx', offset );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( StridedArrayStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof StridedArrayStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( StridedArrayStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof StridedArrayStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {StridedArrayStream} Stream instance\n*/\nsetNonEnumerableReadOnly( StridedArrayStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\nexport default StridedArrayStream;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar StridedArrayStream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an array-like value.\n*\n* @param {NonNegativeInteger} N - number of values to stream\n* @param {ArrayLikeObject} buffer - source value\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {StridedArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = objectMode( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( N, buffer, stride, offset, options ) {\n\tvar opts;\n\tif ( arguments.length > 4 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new StridedArrayStream( N, buffer, stride, offset, opts );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/utils/copy';\nimport __var_1__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\nvar StridedArrayStream = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from strided array-like values.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {Function} stream factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr.length, arr, 1, 0 ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an array-like object.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - number of values to stream\n\t* @param {ArrayLikeObject} buffer - source array-like object\n\t* @param {integer} stride - stride length\n\t* @param {NonNegativeInteger} offset - starting index\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {StridedArrayStream} Stream instance\n\t*/\n\tfunction createStream( N, buffer, stride, offset ) {\n\t\treturn new StridedArrayStream( N, buffer, stride, offset, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from a strided array-like value.\n*\n* @module @stdlib/streams/node/from-strided-array\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = stridedArrayStream( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = stridedArrayStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr.length, arr, 1, 0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = stridedArrayStream.objectMode( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}