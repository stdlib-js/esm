{"version":3,"sources":["@stdlib/streams/node/debug/lib/namespace.js","@stdlib/streams/node/debug/lib/debug.js","@stdlib/streams/node/debug/lib/validate.js","@stdlib/streams/node/debug/lib/logger.js","@stdlib/streams/node/debug/lib/main.js","@stdlib/streams/node/debug/lib/object_mode.js","@stdlib/streams/node/debug/lib/factory.js","@stdlib/streams/node/debug/lib/index.js"],"names":["__var_7__","logger","__var_0__","NAMESPACE","__var_1__","debug","isObject","hasOwnProp","isBoolean","__var_2__","isPrimitive","isNonNegative","__var_3__","isString","__var_4__","validate","opts","options","name","TypeError","objectMode","readableObjectMode","allowHalfOpen","highWaterMark","InspectStream","isFunction","isBuffer","copy","inherit","__var_5__","DEFAULTS","__var_6__","__var_8__","__var_9__","DebugStream","clbk","log","err","cb","this","arguments","length","JSON","stringify","call","inspect","chunk","idx","toString","Stream","streamFactory","debugStream","setReadOnly","stream","factory"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\nexport default 'debug-stream';\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from './namespace.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar NAMESPACE = __var_1__;\n\n\n// MAIN //\n\nvar debug = logger( NAMESPACE );\n\n\n// EXPORTS //\nexport default debug;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_4__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegative = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode] - specifies whether the readable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( 'invalid option. `name` option must be a primitive string. Option: `' + opts.name + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'readableObjectMode' ) ) {\n\t\topts.readableObjectMode = options.readableObjectMode;\n\t\tif ( !isBoolean( opts.readableObjectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `readableObjectMode` option must be a primitive boolean. Option: `' + opts.readableObjectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( 'invalid option. `allowHalfOpen` option must be a primitive boolean. Option: `' + opts.allowHalfOpen + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar debug = __var_0__;\n\n\n// EXPORTS //\nexport default debug;\n","import __var_0__ from '@stdlib/streams/node/inspect';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-buffer';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from '@stdlib/utils/inherit';\nimport __var_5__ from './debug.js';\nimport __var_6__ from './defaults.json';\nimport __var_7__ from './namespace.js';\nimport __var_8__ from './validate.js';\nimport __var_9__ from './logger.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar InspectStream = __var_0__;\nvar isFunction = __var_1__;\nvar isBuffer = __var_2__;\nvar copy = __var_3__;\nvar inherit = __var_4__;\nvar debug = __var_5__;\nvar DEFAULTS = __var_6__;\nvar NAMESPACE = __var_7__;\nvar validate = __var_8__;\nvar logger = __var_9__;\n\n\n// MAIN //\n\n/**\n* Debug stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must a valid callback argument\n* @returns {DebugStream} debug stream\n*\n* @example\n* var stream = new DebugStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*/\nfunction DebugStream( options, clbk ) {\n\tvar opts;\n\tvar name;\n\tvar log;\n\tvar err;\n\tvar cb;\n\tif ( !(this instanceof DebugStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new DebugStream( options, clbk );\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn new DebugStream( options );\n\t\t}\n\t\treturn new DebugStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t\tcb = clbk;\n\t\terr = validate( opts, options );\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\tcb = options;\n\t\t} else {\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.name ) {\n\t\tname = NAMESPACE + ':' + opts.name;\n\t} else {\n\t\tname = NAMESPACE;\n\t}\n\tlog = logger( name );\n\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tInspectStream.call( this, opts, inspect );\n\n\treturn this;\n\n\t/**\n\t* Callback invoked upon receiving a new chunk.\n\t*\n\t* @private\n\t* @param {*} chunk - received chunk\n\t* @param {NonNegativeInteger} idx - chunk index\n\t* @returns {void}\n\t*/\n\tfunction inspect( chunk, idx ) {\n\t\tif ( cb ) {\n\t\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk.toString(), idx );\n\t\t\treturn cb( log, chunk, idx );\n\t\t}\n\t\tif ( isBuffer( chunk ) ) {\n\t\t\tchunk = chunk.toString();\n\t\t}\n\t\tchunk = JSON.stringify( chunk );\n\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk, idx );\n\t\tlog( 'Chunk: %s. Index: %d.', chunk, idx );\n\t}\n}\n\n/*\n* Inherit from the `InspectStream` prototype.\n*/\ninherit( DebugStream, InspectStream );\n\n\n// EXPORTS //\nexport default DebugStream;\n","import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/utils/copy';\nimport __var_3__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isObject = __var_1__;\nvar copy = __var_2__;\nvar Stream = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a debug stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a valid callback argument\n* @returns {DebugStream} debug stream\n*\n* @example\n* var stream = objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\topts = {};\n\t\t\tcb = options;\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t\t}\n\t\t\topts = copy( options );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\tif ( cb === void 0 ) {\n\t\treturn new Stream( opts );\n\t}\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar Stream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Creates a reusable debug stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} debug stream factory\n*\n* @example\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Assign each stream to a separate debug namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn debugStream;\n\n\t/**\n\t* Creates a transform stream for debugging stream pipelines.\n\t*\n\t* @private\n\t* @param {string} name - debug namespace\n\t* @param {Callback} [clbk] - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a valid callback argument\n\t* @returns {DebugStream} debug stream\n\t*/\n\tfunction debugStream( name, clbk ) {\n\t\topts.name = name;\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new Stream( opts, clbk );\n\t\t}\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default streamFactory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream for debugging stream pipelines.\n*\n* @module @stdlib/streams/node/debug\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var stream = debugStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var stream = debugStream.objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = debugStream.factory( opts );\n*\n* // Assign each stream to a separate 'debug' namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}