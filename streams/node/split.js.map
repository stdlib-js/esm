{"version":3,"sources":["@stdlib/streams/node/split/lib/validate.js","@stdlib/streams/node/split/lib/debug.js","@stdlib/streams/node/split/lib/decode.js","@stdlib/streams/node/split/lib/main.js","@stdlib/streams/node/split/lib/object_mode.js","@stdlib/streams/node/split/lib/factory.js","@stdlib/streams/node/split/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isNonNegative","__var_3__","isString","__var_4__","isRegExp","__var_5__","validate","opts","options","sep","objectMode","TypeError","writableObjectMode","encoding","allowHalfOpen","highWaterMark","logger","debug","string2buffer","decode","str","enc","toString","Transform","copy","inherit","setNonEnumerable","setNonEnumerableReadOnly","Buffer","DEFAULTS","__var_6__","__var_7__","__var_8__","__var_9__","RE","transform","chunk","clbk","splits","split","len","i","this","_idx","_sep","JSON","stringify","length","_buffer","_index","push","flush","_encoding","destroy","error","self","_destroyed","process","nextTick","emit","SplitStream","err","arguments","readableObjectMode","decodeStrings","call","prototype","Stream","streamFactory","splitStream","setReadOnly","stream","factory"],"mappings":"2yBA2BIA,EAAWC,EACXC,EAAaC,EACbC,EAAYC,EAAUC,YACtBC,EAAgBC,EAAUF,YAC1BG,EAAWC,EAAUJ,YACrBK,EAAWC,EA8Bf,SAASC,EAAUC,EAAMC,GACxB,OAAMf,EAAUe,IAGXb,EAAYa,EAAS,SACzBD,EAAKE,IAAMD,EAAQC,IAEjBP,EAAUK,EAAKE,MACfL,EAAUG,EAAKE,MAKbd,EAAYa,EAAS,gBACzBD,EAAKG,WAAaF,EAAQE,YACpBb,EAAWU,EAAKG,aACd,IAAIC,UAAW,6EAA+EJ,EAAKG,WAAa,MAGpHf,EAAYa,EAAS,wBACzBD,EAAKK,mBAAqBJ,EAAQI,oBAC5Bf,EAAWU,EAAKK,qBACd,IAAID,UAAW,qFAAuFJ,EAAKK,mBAAqB,MAGpIjB,EAAYa,EAAS,cACzBD,EAAKM,SAAWL,EAAQK,UAClBX,EAAUK,EAAKM,WACb,IAAIF,UAAW,0EAA4EJ,EAAKM,SAAW,MAG/GlB,EAAYa,EAAS,mBACzBD,EAAKO,cAAgBN,EAAQM,eACvBjB,EAAWU,EAAKO,gBACd,IAAIH,UAAW,gFAAkFJ,EAAKO,cAAgB,MAG1HnB,EAAYa,EAAS,mBACzBD,EAAKQ,cAAgBP,EAAQO,eACvBf,EAAeO,EAAKQ,gBAClB,IAAIJ,UAAW,iFAAmFJ,EAAKQ,cAAgB,MAGzH,KAjCE,IAAIJ,UAAW,oGAAsGJ,EAAKE,IAAM,MARjI,IAAIE,UAAW,wDAA0DH,EAAU,MC1C5F,IAAIQ,EAAStB,EAKTuB,EAAQD,EAAQ,gBCLhBE,EAAgBxB,EAapB,SAASyB,EAAQC,EAAKC,GAErB,MAAa,SAARA,GAA0B,WAARA,EACfD,GAERA,EAAMF,EAAeE,GAChBC,EACGD,EAAIE,SAAUD,GAEfD,EAAIE,YCZZ,IAAIC,EAAY7B,EAAU6B,UACtBC,EAAO5B,EACP6B,EAAU3B,EACV4B,EAAmBzB,EACnB0B,EAA2BxB,EAC3ByB,EAASvB,EACTwB,EAAWC,EACXxB,EAAWyB,EACXd,EAAQe,EACRb,EAASc,EAKTC,EAAK,QAaT,SAASC,EAAWC,EAAOvB,EAAUwB,GAEpC,IAAIC,EACAC,EACAC,EACAC,EAsBJ,GApBAC,KAAKC,MAAQ,EACb1B,EAAO,4DAA6DmB,EAAMd,WAAYT,EAAU6B,KAAKC,MACnF,WAAb9B,EAEJuB,EAAQA,EAAMd,WAEQ,SAAbT,IAGTuB,GADAA,EAAQ,IAAIR,EAAQQ,EAAOvB,IACbS,SAAU,SAGzBgB,EAASF,EAAMG,MAAOG,KAAKE,MAC3B3B,EAAO,yBAA0B4B,KAAKC,UAAWR,GAAUI,KAAKC,MAGhEH,EAAMF,EAAOS,OAAS,EACtB9B,EAAO,wBAAyBuB,EAAKE,KAAKC,MAG7B,IAARH,EACJvB,EAAO,wBAAyByB,KAAKC,MACrCD,KAAKM,SAAWV,EAAQE,OAGpB,CAOJ,IANAvB,EAAO,gCAAiCyB,KAAKO,QAC7CV,EAAQG,KAAKM,QAAUV,EAAQ,GAC/BC,EAAQpB,EAAQoB,EAAO1B,GAEvBI,EAAO,2BAA4B,EAAGsB,EAAMjB,WAAYoB,KAAKC,MAC7DD,KAAKQ,KAAMX,EAAO1B,GACZ4B,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAQpB,EAAQmB,EAAQG,GAAK5B,GAC7BI,EAAO,2BAA4BwB,EAAGF,EAAMjB,WAAYoB,KAAKC,MAC7DD,KAAKQ,KAAMX,EAAO1B,GAEnBI,EAAO,uBAAwBqB,EAAOE,GAAKlB,YAC3CoB,KAAKM,QAAUV,EAAQE,GAExBH,IAWD,SAASc,EAAOd,GAEf,IAAIE,EAAQG,KAAKM,QACZT,IACJtB,EAAO,6BACPsB,EAAQpB,EAAQoB,EAAOG,KAAKU,WAC5BV,KAAKQ,KAAMX,EAAOG,KAAKU,YAExBnC,EAAO,0BACPoB,IAYD,SAASgB,EAASC,GAEjB,IAAIC,EACJ,OAAKb,KAAKc,YACTvC,EAAO,qDACAyB,OAERa,EAAOb,KACPA,KAAKc,YAAa,EAGlBC,EAAQC,UASR,WACMJ,IACJrC,EAAO,mDAAoD4B,KAAKC,UAAWQ,IAC3EC,EAAKI,KAAM,QAASL,IAErBrC,EAAO,yBACPsC,EAAKI,KAAM,YAbLjB,MAyCR,SAASkB,EAAapD,GACrB,IAAID,EACAsD,EACJ,KAAQnB,gBAAgBkB,GACvB,OAAKE,UAAUf,OACP,IAAIa,EAAapD,GAElB,IAAIoD,EAGZ,GADArD,EAAOiB,EAAMK,GACRiC,UAAUf,SACdc,EAAMvD,EAAUC,EAAMC,IAErB,MAAMqD,EA4BR,OAxBAtD,EAAKwD,oBAAqB,EAG1BxD,EAAKyD,eAAgB,EAGrB/C,EAAO,yEAA0E4B,KAAKC,UAAWvC,IACjGgB,EAAU0C,KAAMvB,KAAMnC,GAGtBoB,EAA0Be,KAAM,OAAuB,OAAbnC,EAAKE,IAAiByB,EAAK3B,EAAKE,KAG1EiB,EAAkBgB,KAAM,cAAc,GAGtCf,EAA0Be,KAAM,YAAanC,EAAKM,UAGlDa,EAAkBgB,KAAM,UAAW,IAGnChB,EAAkBgB,KAAM,QAAS,GAE1BA,KAMRjB,EAASmC,EAAarC,GAatBI,EAA0BiC,EAAYM,UAAW,aAAc/B,GAW/DR,EAA0BiC,EAAYM,UAAW,SAAUf,GAW3DxB,EAA0BiC,EAAYM,UAAW,UAAWb,GC1P5D,IAAI5D,EAAWC,EACX8B,EAAO5B,EACPuE,EAASrE,EA0Bb,SAASY,EAAYF,GACpB,IAAID,EACJ,GAAKuD,UAAUf,OAAS,CACvB,IAAMtD,EAAUe,GACf,MAAM,IAAIG,UAAW,iEAAmEH,EAAU,MAEnGD,EAAOiB,EAAMhB,QAEbD,EAAO,GAGR,OADAA,EAAKG,YAAa,EACX,IAAIyD,EAAQ5D,GCvCpB,IAAId,EAAWC,EACX8B,EAAO5B,EACPuE,EAASrE,EAkCb,SAASsE,GAAe5D,GACvB,IAAID,EACJ,GAAKuD,UAAUf,OAAS,CACvB,IAAMtD,EAAUe,GACf,MAAM,IAAIG,UAAW,iEAAmEH,EAAU,MAEnGD,EAAOiB,EAAMhB,QAEbD,EAAO,GAER,OAAO8D,EASP,SAASA,IACR,OAAO,IAAIF,EAAQ5D,ICHrB,IAAI+D,GAAc5E,EACd6E,GAAS3E,EACTc,GAAaZ,EACb0E,GAAUvE,GAKdqE,GAAaC,GAAQ,aAAc7D,IACnC4D,GAAaC,GAAQ,UAAWC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/assert/is-regexp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegative = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\nvar isRegExp = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(string|RegExp)} [options.sep] - separator used to split streamed data\n* @param {boolean} [options.objectMode] - specifies whether stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode] - specifies whether the writable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '\\t',\n*     'objectMode': true\n* };\n* var err= validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif (\n\t\t\t!isString( opts.sep ) &&\n\t\t\t!isRegExp( opts.sep )\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be either a primitive string or a regular expression. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a boolean primitive. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'writableObjectMode' ) ) {\n\t\topts.writableObjectMode = options.writableObjectMode;\n\t\tif ( !isBoolean( opts.writableObjectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `writableObjectMode` option must be a boolean primitive. Option: `' + opts.writableObjectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( 'invalid option. `encoding` option must be a string primitive. Option: `' + opts.encoding + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( 'invalid option. `allowHalfOpen` option must be a boolean primitive. Option: `' + opts.allowHalfOpen + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// MAIN //\n\nvar debug = logger( 'split-stream' );\n\n\n// EXPORTS //\nexport default debug;\n","import __var_0__ from '@stdlib/buffer/from-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar string2buffer = __var_0__;\n\n\n// MAIN //\n\n/**\n* Re-decodes a UTF-8 string according to a specified encoding.\n*\n* @private\n* @param {string} str - UTF-8 string to decode\n* @param {string} enc - string encoding\n* @returns {string} decoded string\n*/\nfunction decode( str, enc ) {\n\t// Check if we need to re-decode the string to something other than 'utf8'...\n\tif ( enc === 'utf8' || enc === 'buffer' ) {\n\t\treturn str;\n\t}\n\tstr = string2buffer( str );\n\tif ( enc ) {\n\t\treturn str.toString( enc );\n\t}\n\treturn str.toString();\n}\n\n\n// EXPORTS //\nexport default decode;\n","import process from '@stdlib/vendor/process.js';\nimport __var_0__ from '@stdlib/vendor/readable-stream.js';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from '@stdlib/utils/inherit';\nimport __var_3__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_4__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_5__ from '@stdlib/buffer/ctor';\nimport __var_6__ from './defaults.json';\nimport __var_7__ from './validate.js';\nimport __var_8__ from './debug.js';\nimport __var_9__ from './decode.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Transform = __var_0__.Transform;\nvar copy = __var_1__;\nvar inherit = __var_2__;\nvar setNonEnumerable = __var_3__;\nvar setNonEnumerableReadOnly = __var_4__;\nvar Buffer = __var_5__;\nvar DEFAULTS = __var_6__;\nvar validate = __var_7__;\nvar debug = __var_8__;\nvar decode = __var_9__;\n\n\n// VARIABLES //\n\nvar RE = /\\r?\\n/;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar splits;\n\tvar split;\n\tvar len;\n\tvar i;\n\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tif ( encoding === 'buffer' ) {\n\t\t// Default Buffer decoding is 'utf8':\n\t\tchunk = chunk.toString();\n\t}\n\telse if ( encoding !== 'utf8' ) {\n\t\t// Decode the chunk as a 'utf8' string...\n\t\tchunk = new Buffer( chunk, encoding ); // eslint-disable-line no-buffer-constructor\n\t\tchunk = chunk.toString( 'utf8' );\n\t}\n\t// Split the chunk:\n\tsplits = chunk.split( this._sep );\n\tdebug( 'Splits: %s. Index: %d.', JSON.stringify( splits ), this._idx );\n\n\t// How many splits do we have? We do not count the last \"split\", as it may be incomplete...\n\tlen = splits.length - 1;\n\tdebug( '%s splits. Index: %d.', len, this._idx );\n\n\t// If we do not have any splits, add the chunk to the buffer and wait for more data...\n\tif ( len === 0 ) {\n\t\tdebug( 'No splits. Index: %d.', this._idx );\n\t\tthis._buffer += splits[ len ];\n\t}\n\t// If we have split data, concat any previous partial split, re-decode (if need be) each split according to its original encoding, push each split to the destination, and set anything leftover as the new split buffer...\n\telse {\n\t\tdebug( 'Processing splits. Index: %d.', this._index );\n\t\tsplit = this._buffer + splits[ 0 ];\n\t\tsplit = decode( split, encoding );\n\n\t\tdebug( 'Split %d: %s. Index: %d.', 0, split.toString(), this._idx );\n\t\tthis.push( split, encoding );\n\t\tfor ( i = 1; i < len; i++ ) {\n\t\t\tsplit = decode( splits[ i ], encoding );\n\t\t\tdebug( 'Split %d: %s. Index: %d.', i, split.toString(), this._idx );\n\t\t\tthis.push( split, encoding );\n\t\t}\n\t\tdebug( 'Remaining split: %s.', splits[len].toString() );\n\t\tthis._buffer = splits[ len ];\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nfunction flush( clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar split = this._buffer;\n\tif ( split ) {\n\t\tdebug( 'Processing final split...' );\n\t\tsplit = decode( split, this._encoding );\n\t\tthis.push( split, this._encoding );\n\t}\n\tdebug( 'Flushing the stream...' );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\t// TODO: replace with polyfill\n\tprocess.nextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Split stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = new SplitStream();\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n*/\nfunction SplitStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof SplitStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new SplitStream( options );\n\t\t}\n\t\treturn new SplitStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...\n\topts.readableObjectMode = true;\n\n\t// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:\n\topts.decodeStrings = false;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', ( opts.sep === null ) ? RE : opts.sep );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache the encoding:\n\tsetNonEnumerableReadOnly( this, '_encoding', opts.encoding );\n\n\t// Buffer for storing partial splits:\n\tsetNonEnumerable( this, '_buffer', '' );\n\n\t// Chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( SplitStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\nexport default SplitStream;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar Stream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = objectMode({\n*     'sep': ','\n* });\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar Stream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Creates a reusable stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8'\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn splitStream;\n\n\t/**\n\t* Creates a transform stream for splitting streamed data.\n\t*\n\t* @private\n\t* @throws {TypeError} must provide valid options\n\t* @returns {SplitStream} split stream\n\t*/\n\tfunction splitStream() {\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default streamFactory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which splits streamed data.\n*\n* @module @stdlib/streams/node/split\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var stream = splitStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n* // => '1' => '2' => '3'\n*\n* @example\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = splitStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var stream = splitStream.objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( stdout );\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n* // => 'a' => 'b' => 'c'\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}