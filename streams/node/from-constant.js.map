{"version":3,"sources":["@stdlib/streams/node/from-constant/lib/validate.js","@stdlib/streams/node/from-constant/lib/debug.js","@stdlib/streams/node/from-constant/lib/main.js","@stdlib/streams/node/from-constant/lib/object_mode.js","@stdlib/streams/node/from-constant/lib/factory.js","@stdlib/streams/node/from-constant/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isNonNegative","__var_3__","isString","__var_4__","isNonNegativeInteger","__var_5__","validate","opts","options","sep","TypeError","objectMode","encoding","highWaterMark","iter","logger","debug","Readable","isError","isBuffer","isUint8Array","arraybuffer2buffer","string2buffer","__var_6__","Buffer","__var_7__","copy","__var_8__","inherit","__var_9__","setNonEnumerable","__var_10__","setNonEnumerableReadOnly","__var_11__","DEFAULTS","__var_12__","__var_13__","__var_14__","read","FLG","this","_destroyed","_i","_iter","push","_value","_objectMode","concat","_sep","destroy","error","self","process","nextTick","message","JSON","stringify","emit","ConstantStream","value","err","arguments","length","buffer","byteOffset","call","prototype","factory","nargs","createStream1","createStream2","setReadOnly","stream"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegative = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\nvar isNonNegativeInteger = __var_5__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err= validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a primitive string. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( 'invalid option. `encoding` option must be a primitive string or null. Option: `' + opts.encoding + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + opts.iter + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// MAIN //\n\nvar debug = logger( 'from-constant-stream' );\n\n\n// EXPORTS //\nexport default debug;\n","import process from '@stdlib/vendor/process.js';\nimport __var_0__ from '@stdlib/vendor/readable-stream.js';\nimport __var_1__ from '@stdlib/assert/is-error';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-buffer';\nimport __var_4__ from '@stdlib/assert/is-uint8array';\nimport __var_5__ from '@stdlib/buffer/from-arraybuffer';\nimport __var_6__ from '@stdlib/buffer/from-string';\nimport __var_7__ from '@stdlib/buffer/ctor'; // TODO: replace Buffer.concat usage with stdlib pkg\nimport __var_8__ from '@stdlib/utils/copy';\nimport __var_9__ from '@stdlib/utils/inherit';\nimport __var_10__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_11__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_12__ from './defaults.json';\nimport __var_13__ from './validate.js';\nimport __var_14__ from './debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Readable = __var_0__.Readable;\nvar isError = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isBuffer = __var_3__;\nvar isUint8Array = __var_4__;\nvar arraybuffer2buffer = __var_5__;\nvar string2buffer = __var_6__;\nvar Buffer = __var_7__;\nvar copy = __var_8__;\nvar inherit = __var_9__;\nvar setNonEnumerable = __var_10__;\nvar setNonEnumerableReadOnly = __var_11__;\nvar DEFAULTS = __var_12__;\nvar validate = __var_13__;\nvar debug = __var_14__;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tdebug( 'Value: %s. Iter: %d.', this._value, this._i );\n\t\tif ( this._objectMode === false && this._i > 1 ) {\n\t\t\tFLG = this.push( Buffer.concat( [ this._sep, this._value ] ) );\n\t\t} else {\n\t\t\tFLG = this.push( this._value );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\t// TODO: replace with polyfill\n\tprocess.nextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream which always streams the same value.\n*\n* @constructor\n* @param {(string|Buffer|Uint8Array)} value - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} in binary mode, value to stream must be a string, `Buffer`, or `Uint8Array`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new ConstantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction ConstantStream( value, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof ConstantStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ConstantStream( value, options );\n\t\t}\n\t\treturn new ConstantStream( value );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.objectMode === false ) {\n\t\tif ( isString( value ) ) {\n\t\t\tvalue = string2buffer( value );\n\t\t} else if ( isBuffer( value ) ) { // NOTE: order matters here. We want the `isBuffer` check BEFORE the `isUint8Array` check!!\n\t\t\t// Nothing to do, as value is already a buffer...\n\t\t} else if ( isUint8Array( value ) ) {\n\t\t\t// Convert to a `Buffer` object to provide backward compatibility with older Node.js versions...\n\t\t\tvalue = arraybuffer2buffer( value.buffer, value.byteOffset, value.length ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. In binary mode, a provided value must be a string, Buffer, or Uint8Array. Value: `' + value + '`.' );\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', string2buffer( opts.sep ) );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the value to stream:\n\tsetNonEnumerableReadOnly( this, '_value', value );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( ConstantStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\nexport default ConstantStream;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar ConstantStream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream which always streams the same value.\n*\n* @param {*} value - value to stream\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( value, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new ConstantStream( value, opts );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar copy = __var_1__;\nvar ConstantStream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which always stream the same value.\n*\n* @param {(string|Buffer|Uint8Array|*)} [value] - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*/\nfunction factory( value, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\tvar FLG;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\topts = {};\n\t\tFLG = true;\n\t} else if ( nargs === 1 ) {\n\t\t// Check (imperfectly!) whether we were provided an \"options\" object...\n\t\tif (\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\t(\n\t\t\t\thasOwnProp( value, 'sep' ) ||\n\t\t\t\thasOwnProp( value, 'iter' ) ||\n\t\t\t\thasOwnProp( value, 'objectMode' ) ||\n\t\t\t\thasOwnProp( value, 'encoding' ) ||\n\t\t\t\thasOwnProp( value, 'highWaterMark' )\n\t\t\t)\n\t\t) {\n\t\t\topts = copy( value, 1 );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t} else { // nargs > 1\n\t\topts = copy( options, 1 );\n\t}\n\tif ( FLG ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @param {(string|Buffer|Uint8Array|*)} value - value to stream\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream1( value ) {\n\t\treturn new ConstantStream( value, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new ConstantStream( value, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream which always streams the same value.\n*\n* @module @stdlib/streams/node/from-constant\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = constantStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream.objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}