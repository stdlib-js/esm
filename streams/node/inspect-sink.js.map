{"version":3,"sources":["@stdlib/streams/node/inspect-sink/lib/validate.js","@stdlib/streams/node/inspect-sink/lib/debug.js","@stdlib/streams/node/inspect-sink/lib/main.js","@stdlib/streams/node/inspect-sink/lib/object_mode.js","@stdlib/streams/node/inspect-sink/lib/factory.js","@stdlib/streams/node/inspect-sink/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isString","__var_3__","isNonNegative","__var_4__","validate","opts","options","objectMode","TypeError","highWaterMark","decodeStrings","defaultEncoding","logger","debug","Writable","isFunction","copy","inherit","setNonEnumerable","setNonEnumerableReadOnly","__var_5__","DEFAULTS","__var_6__","__var_7__","__var_8__","write","chunk","encoding","clbk","this","_idx","toString","_inspect","call","_destroyed","process","nextTick","destroy","error","self","JSON","stringify","emit","InspectSinkStream","inspect","err","arguments","length","prototype","Stream","cb","streamFactory","inspectStream","setReadOnly","stream","factory"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/is-nonnegative-number';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isString = __var_3__.isPrimitive;\nvar isNonNegative = __var_4__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding] - default encoding when not explicitly specified when writing data\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'decodeStrings' ) ) {\n\t\topts.decodeStrings = options.decodeStrings;\n\t\tif ( !isBoolean( opts.decodeStrings ) ) {\n\t\t\treturn new TypeError( 'invalid option. `decodeStrings` option must be a primitive boolean. Option: `' + opts.decodeStrings + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'defaultEncoding' ) ) {\n\t\topts.defaultEncoding = options.defaultEncoding;\n\t\tif ( !isString( opts.defaultEncoding ) ) {\n\t\t\treturn new TypeError( 'invalid option. `defaultEncoding` option must be a primitive string. Option: `' + opts.defaultEncoding + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// MAIN //\n\nvar debug = logger( 'inspect-stream-sink' );\n\n\n// EXPORTS //\nexport default debug;\n","import process from '@stdlib/vendor/process.js';\nimport __var_0__ from '@stdlib/vendor/readable-stream.js';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/utils/copy';\nimport __var_3__ from '@stdlib/utils/inherit';\nimport __var_4__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_5__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_6__ from './defaults.json';\nimport __var_7__ from './validate.js';\nimport __var_8__ from './debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Writable = __var_0__.Writable;\nvar isFunction = __var_1__;\nvar copy = __var_2__;\nvar inherit = __var_3__;\nvar setNonEnumerable = __var_4__;\nvar setNonEnumerableReadOnly = __var_5__;\nvar DEFAULTS = __var_6__;\nvar validate = __var_7__;\nvar debug = __var_8__;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n* @returns {void}\n*/\nfunction write( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tthis._inspect.call( null, chunk, this._idx );\n\n\t// Once destroyed, ensure we do not block the event-loop when an upstream stream pipeline is behaving synchronously (otherwise, by continuing to process stream data synchronously, we'll continue receiving data and the stream will never be destroyed)...\n\tif ( this._destroyed ) {\n\t\t// TODO: replace with polyfill\n\t\treturn process.nextTick( clbk );\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\t// TODO: replace with polyfill\n\tprocess.nextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Inspect stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = new InspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*/\nfunction InspectSinkStream( options, clbk ) {\n\tvar inspect;\n\tvar opts;\n\tvar err;\n\tif ( !(this instanceof InspectSinkStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new InspectSinkStream( options, clbk );\n\t\t}\n\t\treturn new InspectSinkStream( options );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tinspect = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tinspect = options;\n\t}\n\tif ( !isFunction( inspect ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + inspect + '`.' );\n\t}\n\t// Make the stream a Writable stream:\n\tdebug( 'Creating a writable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tWritable.call( this, opts );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Initialize a chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\t// Cache a reference to the inspect callback:\n\tsetNonEnumerableReadOnly( this, '_inspect', inspect );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Writable` prototype.\n*/\ninherit( InspectSinkStream, Writable );\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @name _write\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, '_write', write );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\nexport default InspectSinkStream;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar Stream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an inspect stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: 'index: 0'\n* // prints: {'value': 'a'}\n* // prints: 'index: 1'\n* // prints: {'value': 'b'}\n* // prints: 'index: 2'\n* // prints: {'value': 'c'}\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t} else {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar Stream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Creates a reusable inspect stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @throws {TypeError} options argument must be an object\n* @returns {Function} inspect stream factory\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn inspectStream;\n\n\t/**\n\t* Creates a writable stream for inspecting streamed data.\n\t*\n\t* @private\n\t* @param {Callback} clbk - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a callback function\n\t* @returns {InspectStream} inspect stream\n\t*/\n\tfunction inspectStream( clbk ) {\n\t\treturn new Stream( opts, clbk );\n\t}\n}\n\n\n// EXPORTS //\nexport default streamFactory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Writable stream which inspects streamed data.\n*\n* @module @stdlib/streams/node/inspect-sink\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream.objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: {'value': 'a'}\n* // prints: index: 1\n* // prints: {'value': 'b'}\n* // prints: index: 2\n* // prints: {'value': 'c'}\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = inspectSinkStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}