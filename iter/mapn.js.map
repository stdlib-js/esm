{"version":3,"sources":["@stdlib/iter/mapn/lib/main.js","@stdlib/iter/mapn/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isIteratorLike","__var_2__","hasOwnProp","__var_3__","iteratorSymbol","__var_4__","iterMapN","iterators","thisArg","niter","clbk","iter","FLG","idx","i","arguments","length","TypeError","Error","push","next","end","factory","args","v","done","value","apply"],"mappings":"oPA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAsCrB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GANMhB,EAAYiB,WADlBN,EAAQM,UAAUC,QACiB,MAElCR,EAAUO,UADVN,GAAS,KAKJX,EADNY,EAAOK,UADPN,GAAS,IAGR,MAAM,IAAIQ,UAAW,mEAAqEP,EAAO,MAElG,GAAKD,EAAQ,EACZ,MAAM,IAAIS,MAAO,qEAGlB,IADAX,EAAY,GACNO,EAAI,EAAGA,EAAIL,EAAOK,IAAM,CAC7B,IAAMd,EAAgBe,UAAWD,IAChC,MAAM,IAAIG,UAAW,oFAAsFH,EAAI,cAAgBC,UAAWD,GAAM,MAEjJP,EAAUY,KAAMJ,UAAWD,IAQ5B,GAJAlB,EADAe,EAAO,GACY,OAAQS,GAC3BxB,EAAae,EAAM,SAAUU,GAGxBjB,EAAiB,CACrB,IAAMU,EAAI,EAAGA,EAAIL,EAAOK,IACvB,IAAMhB,EAAYS,EAAWO,GAAKV,IAAqB,CACtDQ,GAAM,EACN,MAGIA,GACLhB,EAAae,EAAMP,EAAgBkB,GAMrC,OAHAT,GAAO,EACPD,EAAM,EACNE,EAAI,EACGH,EAQP,SAASS,IACR,IAAIG,EACAC,EACAV,EACJ,GAAKF,EACJ,MAAO,CACNa,MAAQ,GAMV,IAHAF,EAAO,GACPV,GAAO,EACPD,EAAM,EACAE,EAAI,EAAGA,EAAIL,EAAOK,IAAM,CAE7B,IADAU,EAAIjB,EAAWO,GAAIM,QACZK,KAAO,CAEb,GADAb,GAAO,EACFV,EAAYsB,EAAG,SAAY,CAC/BD,EAAKJ,KAAMK,EAAEE,OACb,SAED,MAAO,CACND,MAAQ,GAGVF,EAAKJ,KAAMK,EAAEE,OAGd,OADAH,EAAKJ,KAAMN,GACJ,CACNa,MAAShB,EAAKiB,MAAOnB,EAASe,GAC9BE,MAAQ,GAWV,SAASJ,EAAKK,GAEb,OADAd,EAAM,EACDG,UAAUC,OACP,CACNU,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,IAAIC,EACAT,EAGJ,IADAS,EAAO,GACDT,EAAI,EAAGA,EAAIL,EAAOK,IACvBS,EAAKJ,KAAMZ,EAAWO,GAAKV,MAI5B,OAFAmB,EAAKJ,KAAMT,GACXa,EAAKJ,KAAMX,GACJF,EAASqB,MAAO,KAAMJ,ICjJ5B,IAACjB,EAAWT","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar hasOwnProp = __var_3__;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...Iterator} iterator - subsequent iterators\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @throws {TypeError} callback argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* function transform( x, y ) {\n*     return x + y;\n* }\n*\n* var it1 = array2iterator( [ 1.0, 2.0 ] );\n* var it2 = array2iterator( [ 3.0, 4.0 ] );\n*\n* var iter = iterMapN( it1, it2, transform );\n*\n* var v = iter.next().value;\n* // returns 4.0\n*\n* v = iter.next().value;\n* // returns 6.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterMapN() {\n\tvar iterators;\n\tvar thisArg;\n\tvar niter;\n\tvar clbk;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar i;\n\n\tniter = arguments.length;\n\tif ( !isFunction( arguments[ niter-1 ] ) ) {\n\t\tniter -= 1;\n\t\tthisArg = arguments[ niter ];\n\t}\n\tniter -= 1;\n\tclbk = arguments[ niter ];\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );\n\t}\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide two or more iterators.' );\n\t}\n\titerators = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tif ( !isIteratorLike( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );\n\t\t}\n\t\titerators.push( arguments[ i ] );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( !isFunction( iterators[ i ][ iteratorSymbol ] ) ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tidx = -1;\n\tFLG = 0;\n\ti = 0;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar args;\n\t\tvar v;\n\t\tvar i;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\targs = [];\n\t\tidx += 1;\n\t\tFLG = 0;\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tv = iterators[ i ].next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG += 1;\n\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\targs.push( v.value );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\t\t\targs.push( v.value );\n\t\t}\n\t\targs.push( idx );\n\t\treturn {\n\t\t\t'value': clbk.apply( thisArg, args ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = 1;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t}\n\t\targs.push( clbk );\n\t\targs.push( thisArg );\n\t\treturn iterMapN.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterMapN;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.\n*\n* @module @stdlib/iter/mapn\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterMapN = require( '@stdlib/iter/mapn' );\n*\n* function transform( x, y ) {\n*     return x + y;\n* }\n*\n* var it1 = array2iterator( [ 1.0, 2.0 ] );\n* var it2 = array2iterator( [ 3.0, 4.0 ] );\n*\n* var iter = iterMapN( it1, it2, transform );\n*\n* var v = iter.next().value;\n* // returns 4.0\n*\n* v = iter.next().value;\n* // returns 6.0\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterMapN = __var_0__;\n\n\n// EXPORTS //\nexport default iterMapN;\n"]}