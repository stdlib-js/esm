{"version":3,"sources":["@stdlib/iter/datespace/lib/convert.js","@stdlib/iter/datespace/lib/main.js","@stdlib/iter/datespace/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isNonNegativeInteger","__var_1__","isDateObject","__var_2__","convert","value","Date","parse","TypeError","getTime","setReadOnly","isPlainObject","hasOwnProp","__var_3__","contains","__var_4__","iteratorSymbol","__var_5__","floor","__var_6__","ceil","__var_7__","round","__var_8__","__var_9__","DEFAULT_LENGTH","DEFAULT_ROUNDING_MODE","ROUNDING_MODES","ROUNDING_FCNS","iterDatespace","start","stop","N","options","step","iter","opts","rfcn","FLG","t1","t2","n","d","i","Error","arguments","length","next","end","factory","done","iterator"],"mappings":"sgBAwBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAuBC,EAAUF,YACjCG,EAAeC,EAYnB,SAASC,EAASC,GACjB,OAAKR,EAAUQ,IACdA,EAAQC,KAAKC,MAAOF,KACLA,EACP,IAAIG,UAAW,0DAA4DH,EAAQ,MAEpFA,EAEHL,EAAsBK,GACnBA,EAEHH,EAAcG,GACXA,EAAMI,UAEP,IAAID,UAAW,wIAA0IH,EAAQ,MCrBzK,IAAIK,EAAcZ,EACdE,EAAuBC,EAAUF,YACjCY,EAAgBR,EAChBS,EAAaC,EACbC,EAAWC,EACXC,EAAiBC,EACjBC,EAAQC,EACRC,EAAOC,EACPC,EAAQC,EACRnB,EAAUoB,EAKVC,EAAiB,IACjBC,EAAwB,QACxBC,EAAiB,CACpB,QACA,OACA,SAEGC,EAAgB,CACnBV,MAASA,EACTE,KAAQA,EACRE,MAASA,GAuCV,SAASO,EAAeC,EAAOC,EAAMC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAJ,EAAKnC,EAAS0B,cACKc,MAClB,MAAML,EAGP,IADAC,EAAKpC,EAAS2B,cACKa,MAClB,MAAMJ,EAKP,GAHAJ,EAAO,CACNd,MAASI,GAEgB,IAArBmB,UAAUC,OACd,GAAK9C,EAAsBgC,GAC1BS,EAAIT,MACE,CAAA,IAAKrB,EAAeqB,GAS1B,MAAM,IAAIxB,UAAW,uGAAyGwB,EAAI,MAPlI,GADAS,EAAIhB,EACCb,EAAYoB,EAAG,SAAY,CAC/B,IAAMlB,EAAUa,EAAgBK,EAAEV,OACjC,MAAM,IAAId,UAAW,wDAA0DwB,EAAEV,MAAQ,MAE1Fc,EAAKd,MAAQU,EAAEV,YAKX,GAAKuB,UAAUC,OAAS,EAAI,CAClC,IAAM9C,EAAsBgC,GAC3B,MAAM,IAAIxB,UAAW,2EAA6EwB,EAAI,MAGvG,GADAS,EAAIT,GACErB,EAAesB,GACpB,MAAM,IAAIzB,UAAW,gEAAkEyB,EAAU,MAElG,GAAKrB,EAAYqB,EAAS,SAAY,CACrC,IAAMnB,EAAUa,EAAgBM,EAAQX,OACvC,MAAM,IAAId,UAAW,wDAA0DyB,EAAQX,MAAQ,MAEhGc,EAAKd,MAAQW,EAAQX,YAGtBmB,EAAIhB,EAgBL,OAdAY,EAAOT,EAAeQ,EAAKd,OAE3BY,GAAQM,EAAGD,IADXG,EAAID,EAAI,GAERE,GAAK,EAILjC,EADAyB,EAAO,GACY,OAAQY,GAC3BrC,EAAayB,EAAM,SAAUa,GAGxBhC,GACJN,EAAayB,EAAMnB,EAAgBiC,GAE7Bd,EAQP,SAASY,IAER,OADAJ,GAAK,EACAL,GAAOK,GAAKF,EACT,CACNS,MAAQ,GAGC,IAANP,EACG,CACNtC,MAAS,IAAIC,KAAMiC,GACnBW,MAAQ,GAGLP,IAAMD,EACH,CACNrC,MAAS,IAAIC,KAAMkC,GACnBU,MAAQ,GAGH,CACN7C,MAAS,IAAIC,KAAM+B,EAAME,EAAII,EAAET,IAC/BgB,MAAQ,GAWV,SAASF,EAAK3C,GAEb,OADAiC,GAAM,EACDO,UAAUC,OACP,CACNzC,MAASA,EACT6C,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOpB,EAAeC,EAAOC,EAAMU,EAAGL,IChLrC,IAACe,EAAWrD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-date-object';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isDateObject = __var_2__;\n\n\n// MAIN //\n\n/**\n* Converts a value to a JavaScript timestamp.\n*\n* @private\n* @param {*} value - value to convert\n* @returns {(NonNegativeInteger|Error)} either a JavaScript timestamp or an error object\n*/\nfunction convert( value ) {\n\tif ( isString( value ) ) {\n\t\tvalue = Date.parse( value );\n\t\tif ( value !== value ) {\n\t\t\treturn new TypeError( 'invalid argument. Unable to parse date string. Value: `' + value + '`.' );\n\t\t}\n\t\treturn value;\n\t}\n\tif ( isNonNegativeInteger( value ) ) {\n\t\treturn value;\n\t}\n\tif ( isDateObject( value ) ) {\n\t\treturn value.getTime();\n\t}\n\treturn new TypeError( 'invalid argument. Must provide either a Date object, a JavaScript timestamp (i.e., a nonnegative integer), or a date string. Value: `' + value + '`.' );\n}\n\n\n// EXPORTS //\nexport default convert;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/assert/contains';\nimport __var_5__ from '@stdlib/symbol/iterator';\nimport __var_6__ from '@stdlib/math/base/special/floor';\nimport __var_7__ from '@stdlib/math/base/special/ceil';\nimport __var_8__ from '@stdlib/math/base/special/round';\nimport __var_9__ from './convert.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isPlainObject = __var_2__;\nvar hasOwnProp = __var_3__;\nvar contains = __var_4__;\nvar iteratorSymbol = __var_5__;\nvar floor = __var_6__;\nvar ceil = __var_7__;\nvar round = __var_8__;\nvar convert = __var_9__;\n\n\n// VARIABLES //\n\nvar DEFAULT_LENGTH = 100;\nvar DEFAULT_ROUNDING_MODE = 'floor';\nvar ROUNDING_MODES = [\n\t'floor',\n\t'ceil',\n\t'round'\n];\nvar ROUNDING_FCNS = {\n\t'floor': floor,\n\t'ceil': ceil,\n\t'round': round\n};\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced dates over a specified interval.\n*\n* @param {(NonNegativeInteger|string|Date)} start - starting date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {(NonNegativeInteger|string|Date)} stop - stopping date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {string} [options.round='floor'] - specifies how sub-millisecond times should be rounded: 'floor', 'ceil', or 'round'\n* @throws {TypeError} a numeric `start` argument must be a nonnegative integer\n* @throws {TypeError} a numeric `stop` argument must be a nonnegative integer\n* @throws {TypeError} unable to parse date string\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants/time/milliseconds-in-day' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\nfunction iterDatespace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar opts;\n\tvar rfcn;\n\tvar FLG;\n\tvar t1;\n\tvar t2;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tt1 = convert( start );\n\tif ( t1 instanceof Error ) {\n\t\tthrow t1;\n\t}\n\tt2 = convert( stop );\n\tif ( t2 instanceof Error ) {\n\t\tthrow t2;\n\t}\n\topts = {\n\t\t'round': DEFAULT_ROUNDING_MODE\n\t};\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LENGTH;\n\t\t\tif ( hasOwnProp( N, 'round' ) ) {\n\t\t\t\tif ( !contains( ROUNDING_MODES, N.round ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. Unrecognized rounding mode. Option: `' + N.round + '`.' );\n\t\t\t\t}\n\t\t\t\topts.round = N.round;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be either a nonnegative integer or an options object. Value: `' + N + '`.' );\n\t\t}\n\t} else if ( arguments.length > 3 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'round' ) ) {\n\t\t\tif ( !contains( ROUNDING_MODES, options.round ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. Unrecognized rounding mode. Option: `' + options.round + '`.' );\n\t\t\t}\n\t\t\topts.round = options.round;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LENGTH;\n\t}\n\trfcn = ROUNDING_FCNS[ opts.round ];\n\td = n - 1;\n\tstep = (t2-t1) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t1 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t2 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': new Date( rfcn( t1+(i*step) ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDatespace( start, stop, n, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterDatespace;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced dates over a specified interval.\n*\n* @module @stdlib/iter/datespace\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants/time/milliseconds-in-day' );\n* var iterDatespace = require( '@stdlib/iter/datespace' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}