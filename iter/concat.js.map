{"version":3,"sources":["@stdlib/iter/concat/lib/main.js","@stdlib/iter/concat/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isIteratorLike","__var_2__","hasOwnProp","__var_3__","iteratorSymbol","__var_4__","iterConcat","iterators","iterator","niter","iter","FLG","i","arguments","length","Error","TypeError","push","next","end","factory","v","done","value","args","apply"],"mappings":"oPA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAqCrB,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAH,EAAQI,UAAUC,QACL,EACZ,MAAM,IAAIC,MAAO,qEAGlB,IADAR,EAAY,GACNK,EAAI,EAAGA,EAAIH,EAAOG,IAAM,CAC7B,IAAMZ,EAAgBa,UAAWD,IAChC,MAAM,IAAII,UAAW,oFAAsFJ,EAAI,cAAgBC,UAAWD,GAAM,MAEjJL,EAAUU,KAAMJ,UAAWD,IAQ5B,GAJAhB,EADAc,EAAO,GACY,OAAQQ,GAC3BtB,EAAac,EAAM,SAAUS,GAGxBf,EAAiB,CACrB,IAAMQ,EAAI,EAAGA,EAAIH,EAAOG,IACvB,IAAMd,EAAYS,EAAWK,GAAKR,IAAqB,CACtDO,GAAM,EACN,MAGIA,GACLf,EAAac,EAAMN,EAAgBgB,GAMrC,OAHAZ,EAAWD,EAAW,GACtBI,GAAM,EACNC,EAAI,EACGF,EAQP,SAASQ,IACR,IAAIG,EACJ,GAAKV,EACJ,MAAO,CACNW,MAAQ,GAIV,MACCD,EAAIb,EAASU,QACNI,MAFO,CAIb,IADAV,GAAK,KACMH,EAEV,OADAE,GAAM,EACDT,EAAYmB,EAAG,SACZ,CACNE,MAASF,EAAEE,MACXD,MAAQ,GAGH,CACNA,MAAQ,GAIV,GADAd,EAAWD,EAAWK,GACjBV,EAAYmB,EAAG,SACnB,MAMH,MAAO,CACNE,MAASF,EAAEE,MACXD,MAAQ,GAWV,SAASH,EAAKI,GAEb,OADAZ,GAAM,EACDE,UAAUC,OACP,CACNS,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASF,IACR,IAAII,EACAZ,EAGJ,IADAY,EAAO,GACDZ,EAAI,EAAGA,EAAIH,EAAOG,IACvBY,EAAKP,KAAMV,EAAWK,GAAKR,MAE5B,OAAOE,EAAWmB,MAAO,KAAMD,ICtI9B,IAAClB,EAAaT","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar hasOwnProp = __var_3__;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over the values of two or more iterators.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...Iterator} iterator - subsequent iterators\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var it1 = array2iterator( [ 1, 2 ] );\n* var it2 = array2iterator( [ 3, 4 ] );\n*\n* var iter = iterConcat( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterConcat() {\n\tvar iterators;\n\tvar iterator;\n\tvar niter;\n\tvar iter;\n\tvar FLG;\n\tvar i;\n\n\tniter = arguments.length;\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide two or more iterators.' );\n\t}\n\titerators = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tif ( !isIteratorLike( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );\n\t\t}\n\t\titerators.push( arguments[ i ] );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( !isFunction( iterators[ i ][ iteratorSymbol ] ) ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\titerator = iterators[ 0 ];\n\tFLG = false;\n\ti = 0;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Note: if provided non-empty iterators, this loop executes at most twice...\n\t\twhile ( true ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\ti += 1;\n\t\t\t\tif ( i === niter ) {\n\t\t\t\t\tFLG = true;\n\t\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t'value': v.value,\n\t\t\t\t\t\t\t'done': true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\titerator = iterators[ i ];\n\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t}\n\t\treturn iterConcat.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterConcat;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iterates over the values of two or more iterators.\n*\n* @module @stdlib/iter/concat\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterConcat = require( '@stdlib/iter/concat' );\n*\n* var it1 = array2iterator( [ 1, 2 ] );\n* var it2 = array2iterator( [ 3, 4 ] );\n*\n* var iter = iterConcat( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterConcat = __var_0__;\n\n\n// EXPORTS //\nexport default iterConcat;\n"]}