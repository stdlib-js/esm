{"version":3,"sources":["@stdlib/iter/pipeline/lib/main.js","@stdlib/iter/pipeline/lib/index.js"],"names":["isFunction","__var_0__","isArrayLike","__var_1__","isIteratorLike","__var_2__","iterPipeline","nFuncs","f","i","arguments","length","slice","push","Error","TypeError","pipeline","iterator","iter"],"mappings":"4IAwBA,IAAIA,EAAaC,EACbC,EAAcC,EACdC,EAAiBC,EAgCrB,SAASC,IACR,IAAIC,EACAC,EACAC,EAGJ,GAAgB,KADhBF,EAASG,UAAUC,SACET,EAAaQ,UAAW,IAC5CF,EAAIE,UAAW,GAAIE,QACnBL,EAASC,EAAEG,YAGX,IADAH,EAAI,GACEC,EAAI,EAAGA,EAAIF,EAAQE,IACxBD,EAAEK,KAAMH,UAAWD,IAGrB,GAAgB,IAAXF,EACJ,MAAM,IAAIO,MAAO,8EAElB,IAAML,EAAI,EAAGA,EAAIF,EAAQE,IACxB,IAAMT,EAAYQ,EAAGC,IACpB,MAAM,IAAIM,UAAW,qDAAqDP,EAAGC,GAAI,MAGnF,OAAOO,EAWP,SAASA,EAAUC,GAClB,IAAIC,EACJ,IAAMd,EAAgBa,GACrB,MAAM,IAAIF,UAAW,uDAAyDE,EAAW,KAG1F,IADAC,EAAOD,EACDR,EAAI,EAAGA,EAAIF,EAAO,EAAGE,IAE1B,GADAS,EAAOV,EAAGC,GAAKS,IACTd,EAAgBc,GACrB,MAAM,IAAIH,UAAW,6IAA+IG,EAAO,MAG7K,OAAOV,EAAGD,EAAO,GAAKW,ICzDrB,IAACZ,EAAeL","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isArrayLike = __var_1__;\nvar isIteratorLike = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator pipeline.\n*\n* @param {(Function|FunctionArray)} iterFcn0 - iterator function or an array of iterator functions\n* @param {...Function} [iterFcn] - iterator function(s)\n* @throws {TypeError} must provide functions\n* @throws {Error} must provide at least one iterator function\n* @returns {Function} iterator pipeline\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iterSomeBy = require( '@stdlib/iter/some-by' );\n* var iterHead = require( '@stdlib/iter/head' );\n* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );\n*\n* function threshold( r ) {\n*     return ( r > 0.95 );\n* }\n*\n* var it1 = iterThunk( iterHead, 100 );\n* var it2 = iterThunk( iterSomeBy, 5, threshold );\n*\n* var p = iterPipeline( it1, it2 );\n*\n* var bool = p( randu() );\n* // returns <boolean>\n*/\nfunction iterPipeline() {\n\tvar nFuncs;\n\tvar f;\n\tvar i;\n\n\tnFuncs = arguments.length;\n\tif ( nFuncs === 1 && isArrayLike( arguments[ 0 ] ) ) {\n\t\tf = arguments[ 0 ].slice();\n\t\tnFuncs = f.length;\n\t} else {\n\t\tf = [];\n\t\tfor ( i = 0; i < nFuncs; i++ ) {\n\t\t\tf.push( arguments[ i ] );\n\t\t}\n\t}\n\tif ( nFuncs === 0 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide at least one iterator function.' );\n\t}\n\tfor ( i = 0; i < nFuncs; i++ ) {\n\t\tif ( !isFunction( f[ i ] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide functions. Value: `'+f[ i ]+'`.' );\n\t\t}\n\t}\n\treturn pipeline;\n\n\t/**\n\t* Pipeline function.\n\t*\n\t* @private\n\t* @param {Iterator} iterator - source iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @throws {TypeError} each iterator function, except the last iterator function, within an iterator pipeline must return an iterator\n\t* @returns {(Iterator|*)} an iterator or pipeline result\n\t*/\n\tfunction pipeline( iterator ) {\n\t\tvar iter;\n\t\tif ( !isIteratorLike( iterator ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`' );\n\t\t}\n\t\titer = iterator;\n\t\tfor ( i = 0; i < nFuncs-1; i++ ) {\n\t\t\titer = f[ i ]( iter );\n\t\t\tif ( !isIteratorLike( iter ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Each iterator function, except the last iterator function, within an iterator pipeline must return an iterator. Value: `' + iter + '`.' );\n\t\t\t}\n\t\t}\n\t\treturn f[ nFuncs-1 ]( iter );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterPipeline;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator pipeline.\n*\n* @module @stdlib/iter/pipeline\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iterSomeBy = require( '@stdlib/iter/some-by' );\n* var iterHead = require( '@stdlib/iter/head' );\n* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );\n* var iterPipeline = require( '@stdlib/iter/pipeline' );\n*\n* function threshold( r ) {\n*     return ( r > 0.95 );\n* }\n*\n* var it1 = iterThunk( iterHead, 100 );\n* var it2 = iterThunk( iterSomeBy, 5, threshold );\n*\n* var p = iterPipeline( it1, it2 );\n*\n* var bool = p( randu() );\n* // returns <boolean>\n*/\n\n// MODULES //\nvar iterPipeline = __var_0__;\n\n\n// EXPORTS //\nexport default iterPipeline;\n"]}