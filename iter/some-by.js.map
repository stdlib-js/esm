{"version":3,"sources":["@stdlib/iter/some-by/lib/main.js","@stdlib/iter/some-by/lib/index.js"],"names":["isIteratorLike","__var_0__","isFunction","__var_1__","hasOwnProp","__var_2__","isPositiveInteger","__var_3__","isPrimitive","iterSomeBy","iterator","n","predicate","thisArg","count","v","i","TypeError","next","done","call","value"],"mappings":"0LAyBA,IAAIA,EAAiBC,EACjBC,EAAaC,EACbC,EAAaC,EACbC,EAAoBC,EAAUC,YA6BlC,SAASC,EAAYC,EAAUC,EAAGC,EAAWC,GAC5C,IAAIC,EACAC,EACAC,EACJ,IAAMhB,EAAgBU,GACrB,MAAM,IAAIO,UAAW,iEAAiEP,EAAS,MAEhG,IAAMJ,EAAmBK,GACxB,MAAM,IAAIM,UAAW,yEAA2EN,EAAI,MAErG,IAAMT,EAAYU,GACjB,MAAM,IAAIK,UAAW,gEAAkEL,EAAY,MAIpG,IAFAE,EAAQ,EACRE,GAAK,IACU,CAGd,GAFAA,GAAK,GACLD,EAAIL,EAASQ,QACNC,KAAO,CACb,GAAKf,EAAYW,EAAG,UAAaH,EAAUQ,KAAMP,EAASE,EAAEM,MAAOL,GAElE,OADAF,GAAS,KACUH,EAEpB,MAED,GAAKC,EAAUQ,KAAMP,EAASE,EAAEM,MAAOL,KACtCF,GAAS,KACMH,EACd,OAAO,EAIV,OAAO,EChDL,IAACF,EAAaR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-iterator-like';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from '@stdlib/assert/is-positive-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isIteratorLike = __var_0__;\nvar isFunction = __var_1__;\nvar hasOwnProp = __var_2__;\nvar isPositiveInteger = __var_3__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests whether at least `n` iterated values pass a test implemented by a predicate function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} n - number of successful values\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a function\n* @returns {boolean} boolean indicating whether at least `n` iterated values pass a test implemented by a predicate function\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* function predicate( v ) {\n*     return ( v > 0 );\n* }\n*\n* var it = array2iterator( [ 1, 1, 0, 0, 1 ] );\n*\n* var bool = iterSomeBy( it, 3, predicate );\n* // returns true\n*/\nfunction iterSomeBy( iterator, n, predicate, thisArg ) {\n\tvar count;\n\tvar v;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );\n\t}\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + n + '`.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a function. Value: `' + predicate + '`.' );\n\t}\n\tcount = 0;\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tif ( hasOwnProp( v, 'value' ) && predicate.call( thisArg, v.value, i ) ) {\n\t\t\t\tcount += 1;\n\t\t\t\treturn ( count === n );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif ( predicate.call( thisArg, v.value, i ) ) {\n\t\t\tcount += 1;\n\t\t\tif ( count === n ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\nexport default iterSomeBy;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether at least `n` iterated values pass a test implemented by a predicate function.\n*\n* @module @stdlib/iter/some-by\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterSomeBy = require( '@stdlib/iter/some-by' );\n*\n* function predicate( v ) {\n*     return ( v > 0 );\n* }\n*\n* var it = array2iterator( [ 1, 1, 0, 0, 1 ] );\n*\n* var bool = iterSomeBy( it, 3, predicate );\n* // returns true\n*/\n\n// MODULES //\nvar iterSomeBy = __var_0__;\n\n\n// EXPORTS //\nexport default iterSomeBy;\n"]}