{"version":3,"sources":["@stdlib/iter/constant/lib/main.js","@stdlib/iter/constant/lib/index.js"],"names":["setReadOnly","__var_0__","hasOwnProp","__var_1__","isPlainObject","__var_2__","isNonNegativeInteger","__var_3__","isPrimitive","iteratorSymbol","__var_4__","iterConstant","value","options","opts","iter","FLG","i","arguments","length","TypeError","next","end","factory","done","iterator"],"mappings":"8PA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAgBC,EAChBC,EAAuBC,EAAUC,YACjCC,EAAiBC,EA6BrB,SAASC,EAAcC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAKJ,GAHAH,EAAO,CACNC,KAAQ,OAEJG,UAAUC,OAAS,EAAI,CAE3B,IAAMf,EADNS,EAAUK,UAAW,IAEpB,MAAM,IAAIE,UAAW,iEAAmEP,EAAU,MAEnG,GAAKX,EAAYW,EAAS,UACzBC,EAAKC,KAAOF,EAAQE,MACdT,EAAsBO,EAAQE,OACnC,MAAM,IAAIK,UAAW,yEAA2EP,EAAQE,KAAO,MAelH,OAXAE,EAAI,EAIJjB,EADAe,EAAO,GACY,OAAQM,GAC3BrB,EAAae,EAAM,SAAUO,GAGxBb,GACJT,EAAae,EAAMN,EAAgBc,GAE7BR,EAQP,SAASM,IAER,OADAJ,GAAK,EACAD,GAAOC,EAAIH,EAAKC,KACb,CACNS,MAAQ,GAGH,CACNZ,MAASA,EACTY,MAAQ,GAWV,SAASF,EAAKV,GAEb,OADAI,GAAM,EACDE,UAAUC,OACP,CACNP,MAASA,EACTY,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOZ,EAAcC,EAAOE,IChG3B,IAACW,EAAWxB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isPlainObject = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which always returns the same value.\n*\n* @param {*} value - value to return\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterConstant( 3.14 );\n*\n* var v = iter.next().value;\n* // returns 3.14\n*\n* v = iter.next().value;\n* // returns 3.14\n*\n* v = iter.next().value;\n* // returns 3.14\n*\n* // ...\n*/\nfunction iterConstant( value ) {\n\tvar options;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar i;\n\n\topts = {\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\t\topts.iter = options.iter;\n\t\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value, // Note: can be different than the iterator constant\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterConstant( value, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterConstant;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which always returns the same value.\n*\n* @module @stdlib/iter/constant\n*\n* @example\n* var iterConstant = require( '@stdlib/iter/constant' );\n*\n* var iter = iterConstant( 3.14 );\n*\n* var v = iter.next().value;\n* // returns 3.14\n*\n* v = iter.next().value;\n* // returns 3.14\n*\n* v = iter.next().value;\n* // returns 3.14\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}