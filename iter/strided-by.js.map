{"version":3,"sources":["@stdlib/iter/strided-by/lib/main.js","@stdlib/iter/strided-by/lib/index.js"],"names":["setReadOnly","__var_0__","isNonNegativeInteger","__var_1__","isPrimitive","isPositiveInteger","__var_2__","isBoolean","__var_3__","isFunction","__var_4__","isIteratorLike","__var_5__","hasOwnProp","__var_6__","iteratorSymbol","__var_7__","DEFAULT_OFFSET","DEFAULT_EAGER","iterStridedBy","iterator","fcn","offset","eager","thisArg","stride","iter","bool","FLG","idx","ctx","o","i","s","TypeError","arguments","length","next","done","end","factory","out","v","value","call"],"mappings":"oYA6BA,IAAIA,EAAcC,EACdC,EAAuBC,EAAUC,YACjCC,EAAoBC,EAAUF,YAC9BG,EAAYC,EAAUJ,YACtBK,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAKjBC,EAAiB,EACjBC,GAAgB,EAyCpB,SAASC,EAAeC,EAAUC,EAAKC,EAAQC,EAAOC,GACrD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACJ,IAAMtB,EAAgBS,GACrB,MAAM,IAAIc,UAAW,2FAA6Fd,EAAW,MAE9H,IAAMX,EAAYY,GACjB,MAAM,IAAIa,UAAW,iEAAmEb,EAAM,MAE/F,GAA0B,IAArBc,UAAUC,OACTlC,EAAsBoB,GAC1BO,EAAMP,GAENO,EAAMZ,EACNa,EAAMR,GAEPK,EAAOT,OACD,GAA0B,IAArBiB,UAAUC,OAAe,CACpC,IAAMlC,EAAsBoB,GAC3B,MAAM,IAAIY,UAAW,2EAA6EZ,EAAS,MAE5GO,EAAMP,EACDf,EAAWgB,GACfI,EAAOJ,GAEPI,EAAOT,EACPY,EAAMP,QAED,GAAKY,UAAUC,OAAS,EAAI,CAClC,IAAMlC,EAAsBoB,GAC3B,MAAM,IAAIY,UAAW,2EAA6EZ,EAAS,MAG5G,GADAO,EAAMP,GACAf,EAAWgB,GAChB,MAAM,IAAIW,UAAW,gEAAkEX,EAAQ,MAEhGI,EAAOJ,EACPO,EAAMN,OAENK,EAAMZ,EACNU,EAAOT,EAER,GAAKS,EAAO,CACX,IAAMK,EAAI,EAAGA,EAAIH,EAAKG,IAErB,GADIZ,EAASiB,OACNC,KAAO,CACbV,GAAM,EACN,MAIFI,GAAK,OAELA,GAAK,EAeN,OAbAC,GAAK,EACLR,EAAS,EAITzB,EADA0B,EAAO,GACY,OAAQW,GAC3BrC,EAAa0B,EAAM,SAAUa,GAGxBxB,GAAkBN,EAAYW,EAAUL,MAC5CgB,EAAIF,EACJ7B,EAAa0B,EAAMX,EAAgByB,IAE7Bd,EASP,SAASW,IACR,IAAII,EACAC,EACJ,GAAKd,EACJ,MAAO,CACNU,MAAQ,GAIV,IADAN,GAAK,EACGA,EAAIH,GAAM,CAEjB,IADAa,EAAItB,EAASiB,QACNC,KAEN,OADAV,GAAM,EACC,CACNU,MAAQ,GAGVN,GAAK,EAGN,IADAU,EAAItB,EAASiB,QACNC,KAON,OANAV,GAAM,EACNa,EAAM,GACD5B,EAAY6B,EAAG,WACnBD,EAAIE,MAAQD,EAAEC,OAEfF,EAAIH,MAAO,EACJG,EAIR,GAFAR,GAAK,EACLR,EAASJ,EAAIuB,KAAMd,EAAKY,EAAEC,MAAOX,EAAGC,EAAGR,IACjCpB,EAAmBoB,GACxB,MAAM,IAAIS,UAAW,mFAAqFT,EAAS,MAGpH,OADAI,GAAOJ,EACA,CACNkB,MAASD,EAAEC,MACXL,MAAQ,GAWV,SAASC,EAAKI,GAEb,OADAf,GAAM,EACDO,UAAUC,OACP,CACNO,MAASA,EACTL,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASE,IACR,OAAOrB,EAAeC,EAAUL,KAAoBM,EAAKU,EAAGJ,EAAMG,ICzLjE,IAACX,EAAgBlB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-positive-integer';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/is-iterator-like';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isPositiveInteger = __var_2__.isPrimitive;\nvar isBoolean = __var_3__.isPrimitive;\nvar isFunction = __var_4__;\nvar isIteratorLike = __var_5__;\nvar hasOwnProp = __var_6__;\nvar iteratorSymbol = __var_7__;\n\n\n// VARIABLES //\n\nvar DEFAULT_OFFSET = 0;\nvar DEFAULT_EAGER = false;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which steps according to a provided callback function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - stride function\n* @param {NonNegativeInteger} [offset=0] - offset\n* @param {boolean} [eager=false] - boolean indicating whether to eagerly advance the input iterator when provided a non-zero offset\n* @param {*} [thisArg] - stride function execution context\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} fourth argument must be a boolean\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );\n*\n* function stride( v, i ) {\n*     return (i % 10)+1;\n* }\n*\n* var iter = iterStridedBy( arr, stride );\n*\n* var r = iter.next().value;\n* // returns 0\n*\n* r = iter.next().value;\n* // returns 1\n*\n* r = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\nfunction iterStridedBy( iterator, fcn, offset, eager, thisArg ) {\n\tvar stride;\n\tvar iter;\n\tvar bool;\n\tvar FLG;\n\tvar idx;\n\tvar ctx;\n\tvar o;\n\tvar v;\n\tvar i;\n\tvar s;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( offset ) ) {\n\t\t\tidx = offset;\n\t\t} else {\n\t\t\tidx = DEFAULT_OFFSET;\n\t\t\tctx = offset;\n\t\t}\n\t\tbool = DEFAULT_EAGER;\n\t} else if ( arguments.length === 4 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t\t}\n\t\tidx = offset;\n\t\tif ( isBoolean( eager ) ) {\n\t\t\tbool = eager;\n\t\t} else {\n\t\t\tbool = DEFAULT_EAGER;\n\t\t\tctx = eager;\n\t\t}\n\t} else if ( arguments.length > 4 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t\t}\n\t\tidx = offset;\n\t\tif ( !isBoolean( eager ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a boolean. Value: `' + eager + '`.' );\n\t\t}\n\t\tbool = eager;\n\t\tctx = thisArg;\n\t} else {\n\t\tidx = DEFAULT_OFFSET;\n\t\tbool = DEFAULT_EAGER;\n\t}\n\tif ( bool ) {\n\t\tfor ( i = 0; i < idx; i++ ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// NOTE: if we've successfully advanced the input iterator, `i` is currently equal to `idx` (i.e., the offset)\n\t\ti -= 1;\n\t} else {\n\t\ti = -1;\n\t}\n\ts = -1;\n\tstride = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\to = idx;\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @throws {TypeError} callback function must return a positive integer\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\ti += 1;\n\t\twhile ( i < idx ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout.value = v.value;\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\ts += 1;\n\t\tstride = fcn.call( ctx, v.value, i, s, stride );\n\t\tif ( !isPositiveInteger( stride ) ) {\n\t\t\tthrow new TypeError( 'invalid return value. Callback function must return a positive integer. Value: `' + stride + '`.' );\n\t\t}\n\t\tidx += stride;\n\t\treturn {\n\t\t\t'value': v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterStridedBy( iterator[ iteratorSymbol ](), fcn, o, bool, ctx );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterStridedBy;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which steps according to a provided callback function.\n*\n* @module @stdlib/iter/strided-by\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterStridedBy = require( '@stdlib/iter/strided-by' );\n*\n* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );\n*\n* function stride( v, i ) {\n*     return (i % 10)+1;\n* }\n*\n* var iter = iterStridedBy( arr, stride );\n*\n* var r = iter.next().value;\n* // returns 0\n*\n* r = iter.next().value;\n* // returns 1\n*\n* r = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n\n// MODULES //\nvar iterStridedBy = __var_0__;\n\n\n// EXPORTS //\nexport default iterStridedBy;\n"]}