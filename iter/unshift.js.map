{"version":3,"sources":["@stdlib/iter/unshift/lib/main.js","@stdlib/iter/unshift/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isIteratorLike","__var_2__","hasOwnProp","__var_3__","iteratorSymbol","__var_4__","iterUnshift","iterator","items","iter","FLG","i","TypeError","arguments","length","push","next","end","factory","out","v","done","value","args","apply"],"mappings":"oPA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAiCrB,SAASC,EAAaC,GACrB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMX,EAAgBO,GACrB,MAAM,IAAIK,UAAW,2FAA6FL,EAAW,MAG9H,IADAC,EAAQ,GACFG,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAClCH,EAAMO,KAAMF,UAAWF,IAcxB,OAZAD,EAAM,EACNC,GAAK,EAILf,EADAa,EAAO,GACY,OAAQO,GAC3BpB,EAAaa,EAAM,SAAUQ,GAGxBb,GAAkBN,EAAYS,EAAUH,KAC5CR,EAAaa,EAAML,EAAgBc,GAE7BT,EAQP,SAASO,IACR,IAAIG,EACAC,EACJ,OAAa,IAARV,EACG,CACNW,MAAQ,GAGG,IAARX,GACJU,EAAIb,EAASS,QACNK,MACNX,EAAM,EACNS,EAAM,GACDjB,EAAYkB,EAAG,WACnBD,EAAIG,MAAQF,EAAEE,OAEfH,EAAIE,MAAO,EACJF,GAED,CACNG,MAASF,EAAEE,MACXD,MAAQ,IAGVV,GAAK,IACKH,EAAMM,QACfJ,EAAM,EACCM,KAED,CACNM,MAASd,EAAOG,GAChBU,MAAQ,GAWV,SAASJ,EAAKK,GAEb,OADAZ,EAAM,EACDG,UAAUC,OACP,CACNQ,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,IAAIK,EACAZ,EAGJ,IADAY,EAAO,CAAEhB,EAAUH,MACbO,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,IAC9BY,EAAKR,KAAMP,EAAOG,IAEnB,OAAOL,EAAYkB,MAAO,KAAMD,ICnH/B,IAACjB,EAAcT","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar hasOwnProp = __var_3__;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which prepends values to the beginning of a provided iterator.\n*\n* @param {Iterator} iterator - input iterator\n* @param {*} items - values to prepend\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var iter = iterUnshift( array2iterator( [ 1, 2 ] ), 3, 4 );\n*\n* var v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterUnshift( iterator ) {\n\tvar items;\n\tvar iter;\n\tvar FLG;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\titems = [];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\titems.push( arguments[ i ] );\n\t}\n\tFLG = 0;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG === 2 ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( FLG === 1 ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = 2;\n\t\t\t\tout = {};\n\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\tout.value = v.value;\n\t\t\t\t}\n\t\t\t\tout.done = true;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t'value': v.value,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\ti += 1;\n\t\tif ( i >= items.length ) {\n\t\t\tFLG = 1;\n\t\t\treturn next();\n\t\t}\n\t\treturn {\n\t\t\t'value': items[ i ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = 2;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [ iterator[ iteratorSymbol ]() ];\n\t\tfor ( i = 0; i < items.length; i++ ) {\n\t\t\targs.push( items[ i ] );\n\t\t}\n\t\treturn iterUnshift.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterUnshift;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which prepends values to the beginning of a provided iterator.\n*\n* @module @stdlib/iter/unshift\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterUnshift = require( '@stdlib/iter/unshift' );\n*\n* var iter = iterUnshift( array2iterator( [ 1, 2 ] ), 3, 4 );\n*\n* var v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterUnshift = __var_0__;\n\n\n// EXPORTS //\nexport default iterUnshift;\n"]}