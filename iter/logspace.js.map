{"version":3,"sources":["@stdlib/iter/logspace/lib/main.js","@stdlib/iter/logspace/lib/index.js"],"names":["setReadOnly","__var_0__","isNumber","__var_1__","isPrimitive","isnan","__var_2__","isNonNegativeInteger","__var_3__","isPositiveNumber","__var_4__","isPlainObject","__var_5__","hasOwnProp","__var_6__","iteratorSymbol","__var_7__","pow","__var_8__","DEFAULT_BASE","DEFAULT_LEN","iterLogspace","start","stop","N","options","step","iter","FLG","b","n","d","i","TypeError","arguments","length","base","next","end","factory","done","value","iterator"],"mappings":"mbA8BA,IAAIA,EAAcC,EACdC,EAAWC,EAAUC,YACrBC,EAAQC,EACRC,EAAuBC,EAAUJ,YACjCK,EAAmBC,EAAUN,YAC7BO,EAAgBC,EAChBC,EAAaC,EACbC,EAAiBC,EACjBC,EAAMC,EAKNC,EAAe,GACfC,EAAc,IAkClB,SAASC,EAAcC,EAAOC,EAAMC,EAAGC,GACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAM9B,EAAUoB,IAAWjB,EAAOiB,GACjC,MAAM,IAAIW,UAAW,8DAAgEX,EAAQ,MAE9F,IAAMpB,EAAUqB,IAAUlB,EAAOkB,GAChC,MAAM,IAAIU,UAAW,+DAAiEV,EAAO,MAE9F,GAA0B,IAArBW,UAAUC,OACd,GAAK5B,EAAsBiB,GAC1BM,EAAIN,EACJK,EAAIV,MACE,CAAA,IAAKR,EAAea,GAW1B,MAAM,IAAIS,UAAW,+FAAiGT,EAAI,MAT1H,GADAM,EAAIV,EACCP,EAAYW,EAAG,QAAW,CAC9B,IAAMf,EAAkBe,EAAEY,MACzB,MAAM,IAAIH,UAAW,qEAAuET,EAAEY,KAAO,MAEtGP,EAAIL,EAAEY,UAENP,EAAIV,OAKA,GAAKe,UAAUC,QAAU,EAAI,CACnC,IAAM5B,EAAsBiB,GAC3B,MAAM,IAAIS,UAAW,2EAA6ET,EAAI,MAGvG,GADAM,EAAIN,GACEb,EAAec,GACpB,MAAM,IAAIQ,UAAW,gEAAkER,EAAU,MAElG,GAAKZ,EAAYY,EAAS,QAAW,CACpC,IAAMhB,EAAkBgB,EAAQW,MAC/B,MAAM,IAAIH,UAAW,qEAAuER,EAAQW,KAAO,MAE5GP,EAAIJ,EAAQW,UAEZP,EAAIV,OAGLW,EAAIV,EACJS,EAAIV,EAeL,OAZAO,GAAQH,EAAKD,IADbS,EAAID,EAAI,GAERE,GAAK,EAILhC,EADA2B,EAAO,GACY,OAAQU,GAC3BrC,EAAa2B,EAAM,SAAUW,GAGxBvB,GACJf,EAAa2B,EAAMZ,EAAgBwB,GAE7BZ,EAQP,SAASU,IAER,OADAL,GAAK,EACAJ,GAAOI,GAAKF,EACT,CACNU,MAAQ,GAGC,IAANR,EACG,CACNS,MAASxB,EAAKY,EAAGP,GACjBkB,MAAQ,GAGLR,IAAMD,EACH,CACNU,MAASxB,EAAKY,EAAGN,GACjBiB,MAAQ,GAGH,CACNC,MAASxB,EAAKY,EAAIG,EAAEN,EAAMJ,GAC1BkB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAb,GAAM,EACDM,UAAUC,OACP,CACNM,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOlB,EAAcC,EAAOC,EAAMO,EAAG,CACpCM,KAAQP,KChKR,IAACa,EAAWzC","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/assert/is-positive-number';\nimport __var_5__ from '@stdlib/assert/is-plain-object';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/symbol/iterator';\nimport __var_8__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar isPositiveNumber = __var_4__.isPrimitive;\nvar isPlainObject = __var_5__;\nvar hasOwnProp = __var_6__;\nvar iteratorSymbol = __var_7__;\nvar pow = __var_8__;\n\n\n// VARIABLES //\n\nvar DEFAULT_BASE = 10;\nvar DEFAULT_LEN = 100;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced numbers on a log scale.\n*\n* @param {number} start - exponent of starting value (inclusive)\n* @param {number} stop - exponent of stopping value (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {PositiveNumber} [options.base=10] - base of log space\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterLogspace( 0, 3, 4 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 10\n*\n* v = iter.next().value;\n* // returns 100\n*\n* // ...\n*/\nfunction iterLogspace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar FLG;\n\tvar b;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );\n\t}\n\tif ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t\tb = DEFAULT_BASE;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LEN;\n\t\t\tif ( hasOwnProp( N, 'base' ) ) {\n\t\t\t\tif ( !isPositiveNumber( N.base ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `base` option must be a positive number. Option: `' + N.base + '`.' );\n\t\t\t\t}\n\t\t\t\tb = N.base;\n\t\t\t} else {\n\t\t\t\tb = DEFAULT_BASE;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be either a nonnegative integer or an object. Value: `' + N + '`.' );\n\t\t}\n\t} else if ( arguments.length >= 4 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'base' ) ) {\n\t\t\tif ( !isPositiveNumber( options.base ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `base` option must be a positive number. Option: `' + options.base + '`.' );\n\t\t\t}\n\t\t\tb = options.base;\n\t\t} else {\n\t\t\tb = DEFAULT_BASE;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LEN;\n\t\tb = DEFAULT_BASE;\n\t}\n\td = n - 1;\n\tstep = (stop-start) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': pow( b, start ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': pow( b, stop ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': pow( b, (i*step)+start ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLogspace( start, stop, n, {\n\t\t\t'base': b\n\t\t});\n\t}\n}\n\n\n// EXPORTS //\nexport default iterLogspace;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced numbers on a log scale.\n*\n* @module @stdlib/iter/logspace\n*\n* @example\n* var iterLogspace = require( '@stdlib/iter/logspace' );\n*\n* var iter = iterLogspace( 0, 3, 4 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 10\n*\n* v = iter.next().value;\n* // returns 100\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}