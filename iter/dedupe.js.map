{"version":3,"sources":["@stdlib/iter/dedupe/lib/main.js","@stdlib/iter/dedupe/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isPositiveInteger","__var_2__","isPrimitive","isIteratorLike","__var_3__","hasOwnProp","__var_4__","iteratorSymbol","__var_5__","iterDedupe","iterator","limit","count","iter","prev","FLG","N","TypeError","arguments","length","NaN","next","end","factory","out","v","done","value"],"mappings":"sSA2BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAoBC,EAAUC,YAC9BC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EA+BrB,SAASC,EAAYC,EAAUC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMb,EAAgBO,GACrB,MAAM,IAAIO,UAAW,wFAA0FP,EAAW,MAE3H,GAAKQ,UAAUC,OAAS,EAAI,CAC3B,IAAMnB,EAAmBW,GACxB,MAAM,IAAIM,UAAW,yEAA2EN,EAAQ,MAEzGK,EAAIL,OAEJK,EAAI,EAcL,OAZAF,EAAOM,IACPR,EAAQ,EAIRhB,EADAiB,EAAO,GACY,OAAQQ,GAC3BzB,EAAaiB,EAAM,SAAUS,GAGxBf,GAAkBT,EAAYY,EAAUH,KAC5CX,EAAaiB,EAAMN,EAAgBgB,GAE7BV,EAQP,SAASQ,IACR,IAAIG,EACAC,EACJ,GAAKV,EACJ,MAAO,CACNW,MAAQ,GAIV,IADAD,EAAIf,EAASW,QACNK,KAON,OANAX,GAAM,EACNS,EAAM,GACDnB,EAAYoB,EAAG,UAAaA,EAAEE,QAAUb,IAC5CU,EAAIG,MAAQF,EAAEE,OAEfH,EAAIE,MAAO,EACJF,EAER,GAAKC,EAAEE,QAAUb,GAEhB,IADAF,GAAS,GACII,EAAI,CAEhB,KAAQS,EAAEE,QAAUb,GAEnB,IADAW,EAAIf,EAASW,QACNK,KAON,OANAX,GAAM,EACNS,EAAM,GACDnB,EAAYoB,EAAG,UAAaA,EAAEE,QAAUb,IAC5CU,EAAIG,MAAQF,EAAEE,OAEfH,EAAIE,MAAO,EACJF,EAGTV,EAAOW,EAAEE,MACTf,EAAQ,QAGTE,EAAOW,EAAEE,MACTf,EAAQ,EAET,MAAO,CACNe,MAASb,EACTY,MAAQ,GAWV,SAASJ,EAAKK,GAEb,OADAZ,GAAM,EACDG,UAAUC,OACP,CACNQ,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,OAAOd,EAAYC,EAAUH,KAAoBS,IChIhD,IAACP,EAAaZ","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-positive-integer';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isPositiveInteger = __var_2__.isPrimitive;\nvar isIteratorLike = __var_3__;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which removes consecutive duplicated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} [limit=1] - number of allowed consecutive duplicates\n* @throws {TypeError} must provide an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var iter = iterDedupe( array2iterator( [ 1, 1, 2, 3, 3 ] ) );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterDedupe( iterator, limit ) {\n\tvar count;\n\tvar iter;\n\tvar prev;\n\tvar FLG;\n\tvar N;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isPositiveInteger( limit ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + limit + '`.' );\n\t\t}\n\t\tN = limit;\n\t} else {\n\t\tN = 1;\n\t}\n\tprev = NaN; // Note: we leverage the fact that `NaN` is not equal to anything, including itself, to handle initial condition\n\tcount = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) && v.value !== prev ) {\n\t\t\t\tout.value = v.value;\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\tif ( v.value === prev ) {\n\t\t\tcount += 1;\n\t\t\tif ( count > N ) {\n\t\t\t\t// Find the next \"unique\" value...\n\t\t\t\twhile ( v.value === prev ) {\n\t\t\t\t\tv = iterator.next();\n\t\t\t\t\tif ( v.done ) {\n\t\t\t\t\t\tFLG = true;\n\t\t\t\t\t\tout = {};\n\t\t\t\t\t\tif ( hasOwnProp( v, 'value' ) && v.value !== prev ) {\n\t\t\t\t\t\t\tout.value = v.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout.done = true;\n\t\t\t\t\t\treturn out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprev = v.value;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tprev = v.value;\n\t\t\tcount = 1;\n\t\t}\n\t\treturn {\n\t\t\t'value': prev,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDedupe( iterator[ iteratorSymbol ](), N );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterDedupe;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which removes consecutive duplicated values.\n*\n* @module @stdlib/iter/dedupe\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterDedupe = require( '@stdlib/iter/dedupe' );\n*\n* var iter = iterDedupe( array2iterator( [ 1, 1, 2, 3, 3 ] ) );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterDedupe = __var_0__;\n\n\n// EXPORTS //\nexport default iterDedupe;\n"]}