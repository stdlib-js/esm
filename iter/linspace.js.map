{"version":3,"sources":["@stdlib/iter/linspace/lib/main.js","@stdlib/iter/linspace/lib/index.js"],"names":["setReadOnly","__var_0__","isNumber","__var_1__","isPrimitive","isnan","__var_2__","isNonNegativeInteger","__var_3__","iteratorSymbol","__var_4__","iterLinspace","start","stop","N","delta","step","iter","FLG","n","d","i","TypeError","arguments","length","next","end","factory","done","value","iterator"],"mappings":"wPA0BA,IAAIA,EAAcC,EACdC,EAAWC,EAAUC,YACrBC,EAAQC,EACRC,EAAuBC,EAAUJ,YACjCK,EAAiBC,EA8BrB,SAASC,EAAcC,EAAOC,EAAMC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMnB,EAAUU,IAAWP,EAAOO,GACjC,MAAM,IAAIU,UAAW,8DAAgEV,EAAQ,MAE9F,IAAMV,EAAUW,IAAUR,EAAOQ,GAChC,MAAM,IAAIS,UAAW,+DAAiET,EAAO,MAE9F,GAAKU,UAAUC,OAAS,EAAI,CAC3B,IAAMjB,EAAsBO,GAC3B,MAAM,IAAIQ,UAAW,2EAA6ER,EAAI,MAEvGK,EAAIL,OAEJK,EAAI,IAgBL,OAZAH,GAFAD,EAAQF,EAAOD,IACfQ,EAAID,EAAI,GAERE,GAAK,EAILrB,EADAiB,EAAO,GACY,OAAQQ,GAC3BzB,EAAaiB,EAAM,SAAUS,GAGxBjB,GACJT,EAAaiB,EAAMR,EAAgBkB,GAE7BV,EAYP,SAASQ,IAGR,OADAJ,GAAK,EACAH,GAAOG,GAAKF,EACT,CACNS,MAAQ,GAGC,IAANP,EACG,CACNQ,MAASjB,EACTgB,MAAQ,GAGLP,IAAMD,EACH,CACNS,MAAShB,EACTe,MAAQ,GASH,CACNC,MANa,IAATb,EACEK,EAAED,EAAGL,EAASH,EAEfS,EAAEL,EAAQJ,EAIfgB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAX,GAAM,EACDK,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOhB,EAAcC,EAAOC,EAAMM,IC5HjC,IAACW,EAAW7B","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced numbers over a specified interval.\n*\n* @param {number} start - starting value (inclusive)\n* @param {number} stop - stopping value (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterLinspace( 0, 99, 100 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* // ...\n*/\nfunction iterLinspace( start, stop, N ) {\n\tvar delta;\n\tvar step;\n\tvar iter;\n\tvar FLG;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );\n\t}\n\tif ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t\t}\n\t\tn = N;\n\t} else {\n\t\tn = 100;\n\t}\n\tdelta = stop - start;\n\td = n - 1;\n\tstep = delta / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* ## Notes\n\t*\n\t* -   Provides specialized support for denormalized numbers by switching the order of multiplication and division operations (see <https://github.com/numpy/numpy/issues/5437>).\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': start,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': stop,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\t// Provide support for when the `step` has underflowed (e.g., when wanting to create linearly spaced denormalized numbers)...\n\t\tif ( step === 0.0 ) {\n\t\t\tv = ((i/d)*delta) + start;\n\t\t} else {\n\t\t\tv = (i*step) + start;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLinspace( start, stop, n );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterLinspace;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced numbers over a specified interval.\n*\n* @module @stdlib/iter/linspace\n*\n* @example\n* var iterLinspace = require( '@stdlib/iter/linspace' );\n*\n* var iter = iterLinspace( 0, 99, 100 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}