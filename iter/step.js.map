{"version":3,"sources":["@stdlib/iter/step/lib/main.js","@stdlib/iter/step/lib/index.js"],"names":["setReadOnly","__var_0__","isNumber","__var_1__","isPrimitive","isnan","__var_2__","isNonNegativeInteger","__var_3__","iteratorSymbol","__var_4__","DEFAULT_LENGTH","iterStep","start","increment","N","iter","FLG","n","i","TypeError","arguments","length","next","end","factory","done","value","iterator"],"mappings":"wPA0BA,IAAIA,EAAcC,EACdC,EAAWC,EAAUC,YACrBC,EAAQC,EACRC,EAAuBC,EAAUJ,YACjCK,EAAiBC,EAKjBC,EAAiB,MA8BrB,SAASC,EAAUC,EAAOC,EAAWC,GACpC,IAAIC,EACAC,EACAC,EACAC,EAEJ,IAAMjB,EAAUW,IAAWR,EAAOQ,GACjC,MAAM,IAAIO,UAAW,8DAAgEP,EAAQ,MAE9F,IAAMX,EAAUY,IAAeT,EAAOS,GACrC,MAAM,IAAIM,UAAW,+DAAiEN,EAAY,MAEnG,GAAKO,UAAUC,OAAS,EAAI,CAC3B,IAAMf,EAAsBQ,GAC3B,MAAM,IAAIK,UAAW,2EAA6EL,EAAI,MAEvGG,EAAIH,OAEJG,EAAIP,EAaL,OAXAQ,GAAK,EAILnB,EADAgB,EAAO,GACY,OAAQO,GAC3BvB,EAAagB,EAAM,SAAUQ,GAGxBf,GACJT,EAAagB,EAAMP,EAAgBgB,GAE7BT,EAQP,SAASO,IAER,OADAJ,GAAK,EACAF,GAAOE,GAAKD,EACT,CACNQ,MAAQ,GAGH,CACNC,MAASd,EAASM,EAAEL,EACpBY,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAV,GAAM,EACDI,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOb,EAAUC,EAAOC,EAAWI,ICpGlC,IAACU,EAAW3B","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar iteratorSymbol = __var_4__;\n\n\n// VARIABLES //\n\nvar DEFAULT_LENGTH = 1e308;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns a sequence of numbers according to a specified increment.\n*\n* @param {number} start - starting value (inclusive)\n* @param {number} increment - increment\n* @param {number} [N=1e308] - number of values\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterStep( 0, 2, 10 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\nfunction iterStep( start, increment, N ) {\n\tvar iter;\n\tvar FLG;\n\tvar n;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );\n\t}\n\tif ( !isNumber( increment ) || isnan( increment ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a number. Value: `' + increment + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t\t}\n\t\tn = N;\n\t} else {\n\t\tn = DEFAULT_LENGTH;\n\t}\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': start + (i*increment),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterStep( start, increment, n );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterStep;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns a sequence of numbers according to a specified increment.\n*\n* @module @stdlib/iter/step\n*\n* @example\n* var iterStep = require( '@stdlib/iter/step' );\n*\n* var iter = iterStep( 0, 2, 10 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}