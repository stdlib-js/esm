{"version":3,"sources":["@stdlib/iter/replicate-by/lib/main.js","@stdlib/iter/replicate-by/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isIteratorLike","__var_2__","isInteger","__var_3__","isPrimitive","hasOwnProp","__var_4__","iteratorSymbol","__var_5__","iterReplicateBy","iterator","fcn","thisArg","value","iter","FLG","t","n","i","j","TypeError","out","v","done","next","call","arguments","length"],"mappings":"6RA2BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAiBC,EACjBC,EAAYC,EAAUC,YACtBC,EAAaC,EACbC,EAAiBC,EA2CrB,SAASC,EAAiBC,EAAUC,EAAKC,GACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMnB,EAAgBU,GACrB,MAAM,IAAIU,UAAW,2FAA6FV,EAAW,MAE9H,IAAMZ,EAAYa,GACjB,MAAM,IAAIS,UAAW,iEAAmET,EAAM,MAgB/F,OAdAK,GAAK,EACLE,GAAK,EACLC,GAAK,EACLF,EAAI,EAIJrB,EADAkB,EAAO,GACY,QAgBnB,WACC,IAAIO,EACAC,EACJ,GAAa,IAARP,EACJ,MAAO,CACNQ,MAAQ,GAGV,KACCP,GAAK,GACLE,GAAK,IACKD,GAHI,CAIb,GAAa,IAARF,EAGJ,OADAA,EAAM,EACC,CACNQ,MAAQ,GAIV,IADAD,EAAIZ,EAASc,QACND,KAAO,CAEb,GADAF,EAAM,GACDhB,EAAYiB,EAAG,SAAY,CAK/B,GAHAT,EAAQS,EAAET,MACVM,GAAK,EACLF,EAAIN,EAAIc,KAAMb,EAASC,EAAOM,EAAGH,IAC3Bd,EAAWe,GAChB,MAAM,IAAIG,UAAW,2EAA6EH,EAAI,MAElGA,EAAI,GACRI,EAAIR,MAAQA,EACZQ,EAAIE,MAAO,EACXR,EAAM,EACNG,EAAI,IAEJG,EAAIE,MAAO,EACXR,EAAM,QAGPM,EAAIE,MAAO,EACXR,EAAM,EAEP,OAAOM,EAKR,GAHAR,EAAQS,EAAET,MACVM,GAAK,EACLF,EAAIN,EAAIc,KAAMb,EAASC,EAAOM,EAAGH,IAC3Bd,EAAWe,GAChB,MAAM,IAAIG,UAAW,2EAA6EH,EAAI,MAGvG,GADAC,EAAI,EACCD,EAAI,EAER,MAOH,MAAO,CACNJ,MAASA,EACTU,MAAQ,MA9EV3B,EAAakB,EAAM,UAyFnB,SAAcD,GAEb,GADAE,EAAM,EACDW,UAAUC,OACd,MAAO,CACNd,MAASA,EACTU,MAAQ,GAGV,MAAO,CACNA,MAAQ,MA/FLhB,GAAkBT,EAAYY,EAAUH,KAC5CX,EAAakB,EAAMP,GAwGpB,WACC,OAAOE,EAAiBC,EAAUH,KAAoBI,EAAKC,MAvGrDE,EC5CL,IAACL,EAAkBZ","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar isInteger = __var_3__.isPrimitive;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which replicates each iterated value according to a provided function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - function which specifies how many times to replicate an iterated value\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* function fcn( v, i ) {\n*     return i + 1;\n* }\n*\n* var src = array2iterator( [ 1, 2, 3, 4 ] );\n* var iter = iterReplicateBy( src, fcn );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*/\nfunction iterReplicateBy( iterator, fcn, thisArg ) {\n\tvar value;\n\tvar iter;\n\tvar FLG;\n\tvar t;\n\tvar n;\n\tvar i;\n\tvar j;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );\n\t}\n\tt = -1; // total iteration index\n\ti = -1; // replicate counter\n\tj = -1; // source iteration index\n\tn = 0;  // number of replicates\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @throws {TypeError} callback function must return an integer\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG === 2 ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\twhile ( true ) {\n\t\t\tt += 1;\n\t\t\ti += 1;\n\t\t\tif ( i >= n ) {\n\t\t\t\tif ( FLG === 1 ) {\n\t\t\t\t\t// If we are here, we have finished the last of the replicates...\n\t\t\t\t\tFLG = 2;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tv = iterator.next();\n\t\t\t\tif ( v.done ) {\n\t\t\t\t\tout = {};\n\t\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\t\t// We *may* still need to replicate one more value...\n\t\t\t\t\t\tvalue = v.value; // cached value\n\t\t\t\t\t\tj += 1;\n\t\t\t\t\t\tn = fcn.call( thisArg, value, j, t ); // number of replicates\n\t\t\t\t\t\tif ( !isInteger( n ) ) {\n\t\t\t\t\t\t\tthrow new TypeError( 'invalid return value. Callback function must return an integer. Value: `' + n + '`.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( n > 0 ) {\n\t\t\t\t\t\t\tout.value = value;\n\t\t\t\t\t\t\tout.done = false;\n\t\t\t\t\t\t\tFLG = 1;\n\t\t\t\t\t\t\ti = 0; // reset the counter\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tout.done = true;\n\t\t\t\t\t\t\tFLG = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.done = true;\n\t\t\t\t\t\tFLG = 2;\n\t\t\t\t\t}\n\t\t\t\t\treturn out;\n\t\t\t\t}\n\t\t\t\tvalue = v.value; // cached value\n\t\t\t\tj += 1;\n\t\t\t\tn = fcn.call( thisArg, value, j, t );\n\t\t\t\tif ( !isInteger( n ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid return value. Callback function must return an integer. Value: `' + n + '`.' );\n\t\t\t\t}\n\t\t\t\ti = 0; // reset the counter\n\t\t\t\tif ( n > 0 ) {\n\t\t\t\t\t// Return the newly cached value...\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Return the cached value...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = 2;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterReplicateBy( iterator[ iteratorSymbol ](), fcn, thisArg );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterReplicateBy;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which replicates each iterated value according to a provided function.\n*\n* @module @stdlib/iter/replicate-by\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterReplicateBy = require( '@stdlib/iter/replicate-by' );\n*\n* function fcn( v, i ) {\n*     return i + 1;\n* }\n*\n* var src = array2iterator( [ 1, 2, 3, 4 ] );\n* var iter = iterReplicateBy( src, fcn );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n\n// MODULES //\nvar iterReplicateBy = __var_0__;\n\n\n// EXPORTS //\nexport default iterReplicateBy;\n"]}