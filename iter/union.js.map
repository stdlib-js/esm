{"version":3,"sources":["@stdlib/iter/union/lib/main.js","@stdlib/iter/union/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isIteratorLike","__var_2__","hasOwnProp","__var_3__","iteratorSymbol","__var_4__","contains","arr","v","len","i","length","iterUnion","iterators","iterator","niter","iter","hash","FLG","arguments","Error","TypeError","push","next","end","factory","done","value","args","apply"],"mappings":"oPA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAoBrB,SAASC,EAAUC,EAAKC,GACvB,IAAIC,EACAC,EAGJ,IADAD,EAAMF,EAAII,OACJD,EAAI,EAAGA,EAAID,EAAKC,IACrB,GAAKH,EAAKG,KAAQF,EACjB,OAAO,EAGT,OAAO,EAyCR,SAASI,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAR,EAGJ,IADAK,EAAQI,UAAUR,QACL,EACZ,MAAM,IAAIS,MAAO,qEAGlB,IADAP,EAAY,GACNH,EAAI,EAAGA,EAAIK,EAAOL,IAAM,CAC7B,IAAMV,EAAgBmB,UAAWT,IAChC,MAAM,IAAIW,UAAW,oFAAsFX,EAAI,cAAgBS,UAAWT,GAAM,MAEjJG,EAAUS,KAAMH,UAAWT,IAU5B,GARAO,EAAO,GAIPrB,EADAoB,EAAO,GACY,OAAQO,GAC3B3B,EAAaoB,EAAM,SAAUQ,GAGxBpB,EAAiB,CACrB,IAAMM,EAAI,EAAGA,EAAIK,EAAOL,IACvB,IAAMZ,EAAYe,EAAWH,GAAKN,IAAqB,CACtDc,GAAM,EACN,MAGIA,GACLtB,EAAaoB,EAAMZ,EAAgBqB,GAMrC,OAHAX,EAAWD,EAAW,GACtBK,GAAM,EACNR,EAAI,EACGM,EAQP,SAASO,IACR,IAAIf,EACJ,GAAKU,EACJ,MAAO,CACNQ,MAAQ,GAGV,OAEC,IADAlB,EAAIM,EAASS,QACNG,KAAO,CAEb,IADAhB,GAAK,KACMK,EAEV,OADAG,GAAM,EACDhB,EAAYM,EAAG,WAA2C,IAA9BF,EAAUW,EAAMT,EAAEmB,OAC3C,CACNA,MAASnB,EAAEmB,MACXD,MAAQ,GAGH,CACNA,MAAQ,GAIV,GADAZ,EAAWD,EAAWH,GACjBR,EAAYM,EAAG,WAA2C,IAA9BF,EAAUW,EAAMT,EAAEmB,OAAoB,CACtEnB,EAAIA,EAAEmB,MACNV,EAAKK,KAAMd,GACX,YAID,GADAA,EAAIA,EAAEmB,OACuB,IAAxBrB,EAAUW,EAAMT,GAAgB,CACpCS,EAAKK,KAAMd,GACX,MAIH,MAAO,CACNmB,MAASnB,EACTkB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAT,GAAM,EACDC,UAAUR,OACP,CACNgB,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,IAAIG,EACAlB,EAGJ,IADAkB,EAAO,GACDlB,EAAI,EAAGA,EAAIK,EAAOL,IACvBkB,EAAKN,KAAMT,EAAWH,GAAKN,MAE5B,OAAOQ,EAAUiB,MAAO,KAAMD,IC7K7B,IAAChB,EAAYf","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isIteratorLike = __var_2__;\nvar hasOwnProp = __var_3__;\nvar iteratorSymbol = __var_4__;\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an array contains a provided value.\n*\n* @private\n* @param {Array} arr - input array\n* @param {*} v - test value\n* @returns {boolean} boolean indicating whether an array contains a provided value\n*\n* @example\n* var bool = contains( [ 1, 2, 3 ], 1 );\n* // returns true\n*\n* bool = contains( [ 1, 2, 3 ], 4 );\n* // returns false\n*/\nfunction contains( arr, v ) {\n\tvar len;\n\tvar i;\n\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns the union of two or more iterators.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...Iterator} iterator - subsequent iterators\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n*\n* var iter = iterUnion( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 5\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterUnion() {\n\tvar iterators;\n\tvar iterator;\n\tvar niter;\n\tvar iter;\n\tvar hash;\n\tvar FLG;\n\tvar i;\n\n\tniter = arguments.length;\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide two or more iterators.' );\n\t}\n\titerators = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tif ( !isIteratorLike( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );\n\t\t}\n\t\titerators.push( arguments[ i ] );\n\t}\n\thash = [];\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( !isFunction( iterators[ i ][ iteratorSymbol ] ) ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\titerator = iterators[ 0 ];\n\tFLG = false;\n\ti = 0;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\twhile ( true ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\ti += 1;\n\t\t\t\tif ( i === niter ) {\n\t\t\t\t\tFLG = true;\n\t\t\t\t\tif ( hasOwnProp( v, 'value' ) && contains( hash, v.value ) === false ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t'value': v.value,\n\t\t\t\t\t\t\t'done': true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\titerator = iterators[ i ];\n\t\t\t\tif ( hasOwnProp( v, 'value' ) && contains( hash, v.value ) === false ) {\n\t\t\t\t\tv = v.value;\n\t\t\t\t\thash.push( v );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tv = v.value;\n\t\t\t\tif ( contains( hash, v ) === false ) {\n\t\t\t\t\thash.push( v );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t}\n\t\treturn iterUnion.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterUnion;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns the union of two or more iterators.\n*\n* @module @stdlib/iter/union\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterUnion = require( '@stdlib/iter/union' );\n*\n* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n*\n* var iter = iterUnion( it1, it2 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 5\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterUnion = __var_0__;\n\n\n// EXPORTS //\nexport default iterUnion;\n"]}