{"version":3,"sources":["@stdlib/iter/slice/lib/main.js","@stdlib/iter/slice/lib/index.js"],"names":["setReadOnly","__var_0__","isNonNegativeInteger","__var_1__","isPrimitive","isFunction","__var_2__","isIteratorLike","__var_3__","hasOwnProp","__var_4__","iteratorSymbol","__var_5__","BEGIN","END","iterSlice","iterator","begin","end","iter","FLG","N","M","n","i","TypeError","arguments","length","next","finish","factory","out","v","done","value"],"mappings":"ySA2BA,IAAIA,EAAcC,EACdC,EAAuBC,EAAUC,YACjCC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAKjBC,EAAQ,EACRC,EAAM,MAgCV,SAASC,EAAWC,EAAUC,EAAOC,GACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMjB,EAAgBS,GACrB,MAAM,IAAIS,UAAW,2FAA6FT,EAAW,MAE9H,GAAKU,UAAUC,OAAS,EAAI,CAC3B,IAAMzB,EAAsBe,GAC3B,MAAM,IAAIQ,UAAW,4EAA8ER,EAAQ,MAG5G,GADAI,EAAIJ,EACCS,UAAUC,OAAS,EAAI,CAC3B,IAAMzB,EAAsBgB,GAC3B,MAAM,IAAIO,UAAW,2EAA6EP,EAAM,MAEzGI,EAAIJ,OAEJI,EAAIR,OAGLO,EAAIR,EACJS,EAAIR,EAcL,OAZAS,EAAID,EAAID,EACRG,GAAK,EAILxB,EADAmB,EAAO,GACY,OAAQS,GAC3B5B,EAAamB,EAAM,SAAUU,GAGxBlB,GAAkBN,EAAYW,EAAUL,KAC5CX,EAAamB,EAAMR,EAAgBmB,GAE7BX,EAQP,SAASS,IACR,IAAIG,EACAC,EAGJ,GADAR,GAAK,EACAD,EAAI,GAAKC,EAAIH,EAEjB,IAAMG,EAAI,EAAGA,EAAIH,EAAGG,IACnBJ,EAAMJ,EAASY,OAAOK,KAIxB,OADAV,GAAK,EACAH,GAAOG,EAAI,EACR,CACNU,MAAQ,IAGVD,EAAIhB,EAASY,QACNK,MACNb,GAAM,EACNW,EAAM,GACDtB,EAAYuB,EAAG,WACnBD,EAAIG,MAAQF,EAAEE,OAEfH,EAAIE,MAAO,EACJF,GAED,CACNG,MAASF,EAAEE,MACXD,MAAQ,GAWV,SAASJ,EAAQK,GAEhB,OADAd,GAAM,EACDM,UAAUC,OACP,CACNO,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,OAAOf,EAAWC,EAAUL,KAAoBU,EAAGC,ICpIlD,IAACP,EAAYd","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isFunction = __var_2__;\nvar isIteratorLike = __var_3__;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\n\n\n// VARIABLES //\n\nvar BEGIN = 0;\nvar END = 1e308;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns a subsequence of iterated values from a provided iterator.\n*\n* @param {Iterator} iterator - input iterator\n* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)\n* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n*\n* var iter = iterSlice( randu(), 10, 20 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterSlice( iterator, begin, end ) {\n\tvar iter;\n\tvar FLG;\n\tvar N;\n\tvar M;\n\tvar n;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNonNegativeInteger( begin ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + begin + '`.' );\n\t\t}\n\t\tN = begin;\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isNonNegativeInteger( end ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + end + '`.' );\n\t\t\t}\n\t\t\tM = end;\n\t\t} else {\n\t\t\tM = END;\n\t\t}\n\t} else {\n\t\tN = BEGIN;\n\t\tM = END;\n\t}\n\tn = M - N;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\n\t\ti += 1;\n\t\tif ( n > 0 && i < N ) {\n\t\t\t// Lazily consume the first `N` values from the provided iterator...\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tFLG = iterator.next().done;\n\t\t\t}\n\t\t}\n\t\tn -= 1;\n\t\tif ( FLG || n < 0 ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout.value = v.value;\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\treturn {\n\t\t\t'value': v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSlice( iterator[ iteratorSymbol ](), N, M );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterSlice;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns a subsequence of iterated values from a provided iterator.\n*\n* @module @stdlib/iter/slice\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iterSlice = require( '@stdlib/iter/slice' );\n*\n* var iter = iterSlice( randu(), 10, 20 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterSlice = __var_0__;\n\n\n// EXPORTS //\nexport default iterSlice;\n"]}