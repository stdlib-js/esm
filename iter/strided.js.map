{"version":3,"sources":["@stdlib/iter/strided/lib/main.js","@stdlib/iter/strided/lib/index.js"],"names":["setReadOnly","__var_0__","isNonNegativeInteger","__var_1__","isPrimitive","isPositiveInteger","__var_2__","isBoolean","__var_3__","isFunction","__var_4__","isIteratorLike","__var_5__","hasOwnProp","__var_6__","iteratorSymbol","__var_7__","DEFAULT_OFFSET","DEFAULT_EAGER","iterStrided","iterator","stride","offset","eager","iter","bool","FLG","idx","o","i","TypeError","arguments","length","next","done","end","factory","out","v","value"],"mappings":"oYA6BA,IAAIA,EAAcC,EACdC,EAAuBC,EAAUC,YACjCC,EAAoBC,EACpBC,EAAYC,EAAUJ,YACtBK,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAKjBC,EAAiB,EACjBC,GAAgB,EAoCpB,SAASC,EAAaC,EAAUC,EAAQC,EAAQC,GAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACJ,IAAMlB,EAAgBS,GACrB,MAAM,IAAIU,UAAW,2FAA6FV,EAAW,MAE9H,IAAMf,EAAmBgB,GACxB,MAAM,IAAIS,UAAW,yEAA2ET,EAAS,MAE1G,GAA0B,IAArBU,UAAUC,OAAe,CAC7B,IAAM9B,EAAsBoB,GAC3B,MAAM,IAAIQ,UAAW,2EAA6ER,EAAS,MAE5GK,EAAML,EACNG,EAAOP,OACD,GAAKa,UAAUC,OAAS,EAAI,CAClC,IAAM9B,EAAsBoB,GAC3B,MAAM,IAAIQ,UAAW,2EAA6ER,EAAS,MAG5G,GADAK,EAAML,GACAf,EAAWgB,GAChB,MAAM,IAAIO,UAAW,gEAAkEP,EAAQ,MAEhGE,EAAOF,OAEPI,EAAMV,EACNQ,EAAOP,EAER,GAAKO,EAAO,CACX,IAAMI,EAAI,EAAGA,EAAIF,EAAKE,IAErB,GADIT,EAASa,OACNC,KAAO,CACbR,GAAM,EACN,MAIFG,GAAK,OAELA,GAAK,EAYN,OARA7B,EADAwB,EAAO,GACY,OAAQS,GAC3BjC,EAAawB,EAAM,SAAUW,GAGxBpB,GAAkBN,EAAYW,EAAUL,MAC5Ca,EAAID,EACJ3B,EAAawB,EAAMT,EAAgBqB,IAE7BZ,EAQP,SAASS,IACR,IAAII,EACAC,EACJ,GAAKZ,EACJ,MAAO,CACNQ,MAAQ,GAIV,IADAL,GAAK,EACGA,EAAIF,GAAM,CAEjB,IADAW,EAAIlB,EAASa,QACNC,KAEN,OADAR,GAAM,EACC,CACNQ,MAAQ,GAGVL,GAAK,EAIN,OAFAF,GAAON,GACPiB,EAAIlB,EAASa,QACNC,MACNR,GAAM,EACNW,EAAM,GACDxB,EAAYyB,EAAG,WACnBD,EAAIE,MAAQD,EAAEC,OAEfF,EAAIH,MAAO,EACJG,GAED,CACNE,MAASD,EAAEC,MACXL,MAAQ,GAWV,SAASC,EAAKI,GAEb,OADAb,GAAM,EACDK,UAAUC,OACP,CACNO,MAASA,EACTL,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASE,IACR,OAAOjB,EAAaC,EAAUL,KAAoBM,EAAQO,EAAGH,IC9J5D,IAACN,EAAclB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-positive-integer';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/is-iterator-like';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isPositiveInteger = __var_2__;\nvar isBoolean = __var_3__.isPrimitive;\nvar isFunction = __var_4__;\nvar isIteratorLike = __var_5__;\nvar hasOwnProp = __var_6__;\nvar iteratorSymbol = __var_7__;\n\n\n// VARIABLES //\n\nvar DEFAULT_OFFSET = 0;\nvar DEFAULT_EAGER = false;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which steps by a specified amount.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} stride - stride\n* @param {NonNegativeInteger} [offset=0] - offset\n* @param {boolean} [eager=false] - boolean indicating whether to eagerly advance the input iterator when provided a non-zero offset\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} fourth argument must be a boolean\n* @returns {Iterator} iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );\n*\n* var iter = iterStrided( arr, 2, 1 );\n*\n* var r = iter.next().value;\n* // returns 1\n*\n* r = iter.next().value;\n* // returns 3\n*\n* r = iter.next().value;\n* // returns 5\n*\n* // ...\n*/\nfunction iterStrided( iterator, stride, offset, eager ) {\n\tvar iter;\n\tvar bool;\n\tvar FLG;\n\tvar idx;\n\tvar o;\n\tvar v;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( stride ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + stride + '`.' );\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t\t}\n\t\tidx = offset;\n\t\tbool = DEFAULT_EAGER;\n\t} else if ( arguments.length > 3 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t\t}\n\t\tidx = offset;\n\t\tif ( !isBoolean( eager ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a boolean. Value: `' + eager + '`.' );\n\t\t}\n\t\tbool = eager;\n\t} else {\n\t\tidx = DEFAULT_OFFSET;\n\t\tbool = DEFAULT_EAGER;\n\t}\n\tif ( bool ) {\n\t\tfor ( i = 0; i < idx; i++ ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// NOTE: if we've successfully advanced the input iterator, `i` is currently equal to `idx` (i.e., the offset)\n\t\ti -= 1;\n\t} else {\n\t\ti = -1;\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\to = idx;\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\ti += 1;\n\t\twhile ( i < idx ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tidx += stride;\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout.value = v.value;\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\treturn {\n\t\t\t'value': v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterStrided( iterator[ iteratorSymbol ](), stride, o, bool );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterStrided;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which steps by a specified amount.\n*\n* @module @stdlib/iter/strided\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterStrided = require( '@stdlib/iter/strided' );\n*\n* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );\n*\n* var iter = iterStrided( arr, 2, 1 );\n*\n* var r = iter.next().value;\n* // returns 1\n*\n* r = iter.next().value;\n* // returns 3\n*\n* r = iter.next().value;\n* // returns 5\n*\n* // ...\n*/\n\n// MODULES //\nvar iterStrided = __var_0__;\n\n\n// EXPORTS //\nexport default iterStrided;\n"]}