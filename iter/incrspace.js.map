{"version":3,"sources":["@stdlib/iter/incrspace/lib/main.js","@stdlib/iter/incrspace/lib/index.js"],"names":["setReadOnly","__var_0__","isNumber","__var_1__","isPrimitive","isnan","__var_2__","iteratorSymbol","__var_3__","ceil","__var_4__","DEFAULT_INCREMENT","iterIncrspace","start","stop","increment","iter","incr","FLG","N","i","TypeError","arguments","length","next","end","factory","done","value","iterator"],"mappings":"iPA0BA,IAAIA,EAAcC,EACdC,EAAWC,EAAUC,YACrBC,EAAQC,EACRC,EAAiBC,EACjBC,EAAOC,EAKPC,EAAoB,EA8BxB,SAASC,EAAeC,EAAOC,EAAMC,GACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMlB,EAAUW,IAAWR,EAAOQ,GACjC,MAAM,IAAIQ,UAAW,8DAAgER,EAAQ,MAE9F,IAAMX,EAAUY,IAAUT,EAAOS,GAChC,MAAM,IAAIO,UAAW,+DAAiEP,EAAO,MAE9F,GAAKQ,UAAUC,OAAS,EAAI,CAC3B,IAAMrB,EAAUa,IAAeV,EAAOU,GACrC,MAAM,IAAIM,UAAW,8DAAgEN,EAAY,MAElGE,EAAOF,OAEPE,EAAON,EAcR,OAZAQ,EAAIV,GAAOK,EAAKD,GAAOI,GACvBG,GAAK,EAILpB,EADAgB,EAAO,GACY,OAAQQ,GAC3BxB,EAAagB,EAAM,SAAUS,GAGxBlB,GACJP,EAAagB,EAAMT,EAAgBmB,GAE7BV,EAQP,SAASQ,IAER,OADAJ,GAAK,EACAF,GAAOE,GAAKD,EACT,CACNQ,MAAQ,GAGH,CACNC,MAASf,EAASO,EAAEH,EACpBU,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAV,GAAM,EACDI,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOd,EAAeC,EAAOC,EAAMG,ICtGlC,IAACY,EAAW5B","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/symbol/iterator';\nimport __var_4__ from '@stdlib/math/base/special/ceil';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\nvar iteratorSymbol = __var_3__;\nvar ceil = __var_4__;\n\n\n// VARIABLES //\n\nvar DEFAULT_INCREMENT = 1;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced numbers according to a specified increment.\n*\n* @param {number} start - starting value (inclusive)\n* @param {number} stop - stopping value (exclusive)\n* @param {number} [increment=1] - increment\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterIncrspace( 0, 100, 2 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\nfunction iterIncrspace( start, stop, increment ) {\n\tvar iter;\n\tvar incr;\n\tvar FLG;\n\tvar N;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );\n\t}\n\tif ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNumber( increment ) || isnan( increment ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a number. Value: `' + increment + '`.' );\n\t\t}\n\t\tincr = increment;\n\t} else {\n\t\tincr = DEFAULT_INCREMENT;\n\t}\n\tN = ceil( (stop-start)/incr );\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': start + (i*incr),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterIncrspace( start, stop, incr );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterIncrspace;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced numbers according to a specified increment.\n*\n* @module @stdlib/iter/incrspace\n*\n* @example\n* var iterIncrspace = require( '@stdlib/iter/incrspace' );\n*\n* var iter = iterIncrspace( 0, 100, 2 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}