{"version":3,"sources":["@stdlib/iter/pipeline-thunk/lib/main.js","@stdlib/iter/pipeline-thunk/lib/index.js"],"names":["isFunction","__var_0__","isIteratorLike","__var_1__","iterThunk","iterFcn","pargs","nargs","i","TypeError","arguments","length","push","thunk","iter","args","apply"],"mappings":"yFAuBA,IAAIA,EAAaC,EACbC,EAAiBC,EAwBrB,SAASC,EAAWC,GACnB,IAAIC,EACAC,EACAC,EACJ,IAAMR,EAAYK,GACjB,MAAM,IAAII,UAAW,gEAAkEJ,EAAU,MAIlG,IAFAE,EAAQG,UAAUC,OAClBL,EAAQ,GACFE,EAAI,EAAGA,EAAID,EAAOC,IACvBF,EAAMM,KAAMF,UAAWF,IAExB,OAAOK,EAUP,SAASA,EAAOC,GACf,IAAIC,EACAP,EACJ,IAAMN,EAAgBY,GACrB,MAAM,IAAIL,UAAW,0DAA0DK,EAAK,MAGrF,IADAC,EAAO,CAAED,GACHN,EAAI,EAAGA,EAAID,EAAOC,IACvBO,EAAKH,KAAMN,EAAOE,IAEnB,OAAOH,EAAQW,MAAO,KAAMD,ICxC3B,IAACX,EAAYH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-iterator-like';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isIteratorLike = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator \"thunk\".\n*\n* @param {Function} iterFcn - iterator function\n* @param {...*} [args] - function arguments\n* @throws {TypeError} first argument must be a function\n* @returns {Function} iterator \"thunk\"\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterSome = require( '@stdlib/iter/some' );\n*\n* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );\n*\n* var thunk = iterThunk( iterSome, 3 );\n*\n* var bool = thunk( it );\n* // returns true\n*/\nfunction iterThunk( iterFcn ) {\n\tvar pargs;\n\tvar nargs;\n\tvar i;\n\tif ( !isFunction( iterFcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `' + iterFcn + '`.' );\n\t}\n\tnargs = arguments.length;\n\tpargs = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tpargs.push( arguments[ i ] );\n\t}\n\treturn thunk;\n\n\t/**\n\t* Invokes an iterator function with a provided iterator and previously provided iterator function arguments.\n\t*\n\t* @private\n\t* @param {Iterator} iter - input iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @returns {*} iterator function result\n\t*/\n\tfunction thunk( iter ) {\n\t\tvar args;\n\t\tvar i;\n\t\tif ( !isIteratorLike( iter ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an an iterator. Value: `'+iter+'`.' );\n\t\t}\n\t\targs = [ iter ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\targs.push( pargs[ i ] );\n\t\t}\n\t\treturn iterFcn.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterThunk;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an iterator \"thunk\".\n*\n* @module @stdlib/iter/pipeline-thunk\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n* var iterSome = require( '@stdlib/iter/some' );\n* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );\n*\n* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );\n*\n* var thunk = iterThunk( iterSome, 3 );\n*\n* var bool = thunk( it );\n* // returns true\n*/\n\n// MODULES //\nvar iterThunk = __var_0__;\n\n\n// EXPORTS //\nexport default iterThunk;\n"]}