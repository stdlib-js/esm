{"version":3,"sources":["@stdlib/iter/fill/lib/main.js","@stdlib/iter/fill/lib/index.js"],"names":["setReadOnly","__var_0__","isNonNegativeInteger","__var_1__","isPrimitive","isFunction","__var_2__","isIteratorLike","__var_3__","hasOwnProp","__var_4__","iteratorSymbol","__var_5__","BEGIN","END","iterFill","iterator","value","begin","end","iter","FLG","N","M","i","TypeError","arguments","length","Error","next","finish","factory","out","v","done"],"mappings":"ySA2BA,IAAIA,EAAcC,EACdC,EAAuBC,EAAUC,YACjCC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EAKjBC,EAAQ,EACRC,EAAM,MAkCV,SAASC,EAAUC,EAAUC,EAAOC,EAAOC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMjB,EAAgBS,GACrB,MAAM,IAAIS,UAAW,2FAA6FT,EAAW,MAE9H,GAAKU,UAAUC,OAAS,EAAI,CAC3B,IAAMzB,EAAsBgB,GAC3B,MAAM,IAAIO,UAAW,2EAA6EP,EAAQ,MAG3G,GADAI,EAAIJ,EACCQ,UAAUC,OAAS,EAAI,CAC3B,IAAMzB,EAAsBiB,GAC3B,MAAM,IAAIM,UAAW,4EAA8EN,EAAM,MAE1GI,EAAIJ,OAEJI,EAAIT,MAEC,CAAA,GAAKY,UAAUC,OAAS,EAC9B,MAAM,IAAIC,MAAO,mFAEjBN,EAAIT,EACJU,EAAIT,EAYL,OARAd,EADAoB,EAAO,GACY,OAAQS,GAC3B7B,EAAaoB,EAAM,SAAUU,GAGxBnB,GAAkBN,EAAYW,EAAUL,KAC5CX,EAAaoB,EAAMT,EAAgBoB,GAEpCP,GAAK,EACEJ,EAQP,SAASS,IACR,IAAIG,EACAC,EACJ,OAAKZ,EACG,CACNa,MAAQ,IAGVD,EAAIjB,EAASa,OACbL,GAAK,EACAS,EAAEC,MACNb,GAAM,EACNW,EAAM,GACDvB,EAAYwB,EAAG,WACnBD,EAAIf,MAAUO,GAAKF,GAAKE,EAAID,EAAMN,EAAQgB,EAAEhB,OAE7Ce,EAAIE,MAAO,EACJF,GAED,CACNf,MAAWO,GAAKF,GAAKE,EAAID,EAAMN,EAAQgB,EAAEhB,MACzCiB,MAAQ,IAWV,SAASJ,EAAQb,GAEhB,OADAI,GAAM,EACDK,UAAUC,OACP,CACNV,MAASA,EACTiB,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASH,IACR,OAAOhB,EAAUC,EAAUL,KAAoBM,EAAOK,EAAGC,IC7HxD,IAACR,EAAWd","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-function';\nimport __var_3__ from '@stdlib/assert/is-iterator-like';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isFunction = __var_2__;\nvar isIteratorLike = __var_3__;\nvar hasOwnProp = __var_4__;\nvar iteratorSymbol = __var_5__;\n\n\n// VARIABLES //\n\nvar BEGIN = 0;\nvar END = 1e308;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which replaces all values from a provided iterator from a start index to an end index with a static value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {*} value - static value\n* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)\n* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)\n* @throws {Error} must provide both an iterator and a static value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n*\n* var iter = iterFill( randu(), 3.14, 0, 2 );\n*\n* var r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterFill( iterator, value, begin, end ) {\n\tvar iter;\n\tvar FLG;\n\tvar N;\n\tvar M;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNonNegativeInteger( begin ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + begin + '`.' );\n\t\t}\n\t\tN = begin;\n\t\tif ( arguments.length > 3 ) {\n\t\t\tif ( !isNonNegativeInteger( end ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `' + end + '`.' );\n\t\t\t}\n\t\t\tM = end;\n\t\t} else {\n\t\t\tM = END;\n\t\t}\n\t} else if ( arguments.length < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide both an iterator and a static value.' );\n\t} else {\n\t\tN = BEGIN;\n\t\tM = END;\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\ti = -1;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\ti += 1;\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout = {};\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout.value = ( i >= N && i < M ) ? value : v.value;\n\t\t\t}\n\t\t\tout.done = true;\n\t\t\treturn out;\n\t\t}\n\t\treturn {\n\t\t\t'value': ( i >= N && i < M ) ? value : v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFill( iterator[ iteratorSymbol ](), value, N, M );\n\t}\n}\n\n\n// EXPORTS //\nexport default iterFill;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which replaces all values from a provided iterator from a start index to an end index with a static value.\n*\n* @module @stdlib/iter/fill\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iterFill = require( '@stdlib/iter/fill' );\n*\n* var iter = iterFill( randu(), 3.14, 0, 2 );\n*\n* var r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterFill = __var_0__;\n\n\n// EXPORTS //\nexport default iterFill;\n"]}