{"version":3,"sources":["@stdlib/iter/to-array-view/lib/main.js","@stdlib/iter/to-array-view/lib/index.js"],"names":["isFunction","__var_0__","isArrayLikeObject","__var_1__","isIteratorLike","__var_2__","isInteger","__var_3__","isPrimitive","hasOwnProp","__var_4__","iterator2arrayview","iterator","out","thisArg","nargs","begin","end","fcn","i","v","TypeError","arguments","length","next","call","value","done","main"],"mappings":"oOA0BA,IAAIA,EAAaC,EACbC,EAAoBC,EACpBC,EAAiBC,EACjBC,EAAYC,EAAUC,YACtBC,EAAaC,EAgCjB,SAASC,EAAoBC,EAAUC,GACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMhB,EAAgBQ,GACrB,MAAM,IAAIS,UAAW,2FAA6FT,EAAW,MAE9H,IAAMV,EAAmBW,GACxB,MAAM,IAAIQ,UAAW,2EAA6ER,EAAM,MAGzG,GAAe,KADfE,EAAQO,UAAUC,QAEjBP,EAAQ,EACRC,EAAMJ,EAAIU,YACJ,GAAe,IAAVR,EACNf,EAAYsB,UAAW,KAC3BN,EAAQ,EACRE,EAAMI,UAAW,IAEjBN,EAAQM,UAAW,GAEpBL,EAAMJ,EAAIU,YACJ,GAAe,IAAVR,EACNf,EAAYsB,UAAW,KAC3BN,EAAQ,EACRC,EAAMJ,EAAIU,OACVL,EAAMI,UAAW,GACjBR,EAAUQ,UAAW,IACVtB,EAAYsB,UAAW,KAClCN,EAAQM,UAAW,GACnBL,EAAMJ,EAAIU,OACVL,EAAMI,UAAW,KAEjBN,EAAQM,UAAW,GACnBL,EAAMK,UAAW,SAEZ,GAAe,IAAVP,GAEX,GADAC,EAAQM,UAAW,GACdtB,EAAYsB,UAAW,IAC3BL,EAAMJ,EAAIU,OACVL,EAAMI,UAAW,GACjBR,EAAUQ,UAAW,QAIrB,GAFAL,EAAMK,UAAW,IAEXtB,EADNkB,EAAMI,UAAW,IAEhB,MAAM,IAAID,UAAW,yEAA2EH,EAAM,UAGlG,CAIN,GAHAF,EAAQM,UAAW,GACnBL,EAAMK,UAAW,IAEXtB,EADNkB,EAAMI,UAAW,IAEhB,MAAM,IAAID,UAAW,yEAA2EH,EAAM,MAEvGJ,EAAUQ,UAAW,GAEtB,IAAMhB,EAAWU,GAChB,MAAM,IAAIK,UAAW,+GAAiHL,EAAQ,MAE/I,IAAMV,EAAWW,GAChB,MAAM,IAAII,UAAW,8GAAgHJ,EAAM,MAiB5I,GAfKA,EAAM,GACVA,EAAMJ,EAAIU,OAASN,GACR,IACVA,EAAM,GAEIA,EAAMJ,EAAIU,SACrBN,EAAMJ,EAAIU,QAENP,EAAQ,IACZA,EAAQH,EAAIU,OAASP,GACR,IACZA,EAAQ,GAGVG,EAAIH,EAAQ,EACPE,EAAM,CACV,KAAQC,EAAIF,EAAI,IACfE,GAAK,EACLC,EAAIR,EAASY,OACRf,EAAYW,EAAG,WACnBP,EAAKM,GAAMD,EAAIO,KAAMX,EAASM,EAAEM,MAAOP,EAAGA,EAAEH,KAExCI,EAAEO,QAIR,OAAOd,EAER,KAAQM,EAAIF,EAAI,IACfE,GAAK,EACLC,EAAIR,EAASY,OACRf,EAAYW,EAAG,WACnBP,EAAKM,GAAMC,EAAEM,QAETN,EAAEO,QAIR,OAAOd,ECjIL,IAACe,EAAO3B","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-iterator-like';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar isArrayLikeObject = __var_1__;\nvar isIteratorLike = __var_2__;\nvar isInteger = __var_3__.isPrimitive;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Fills an array-like object view with values returned from an iterator.\n*\n* @param {Iterator} iterator - source iterator\n* @param {ArrayLikeObject} out - output array\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end=out.length] - ending index (non-inclusive)\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer (starting index) or a callback function\n* @throws {TypeError} fourth argument must be an integer (ending index) or a callback function\n* @throws {TypeError} fifth argument must be a function\n* @returns {ArrayLikeObject} output array\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var iter = randu({\n*     'iter': 10\n* });\n*\n* var arr = iterator2arrayview( iter, new Float64Array( 20 ), 5 );\n* // returns <Float64Array>\n*/\nfunction iterator2arrayview( iterator, out ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar begin;\n\tvar end;\n\tvar fcn;\n\tvar i;\n\tvar v;\n\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isArrayLikeObject( out ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + out + '`.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\tbegin = 0;\n\t\tend = out.length;\n\t} else if ( nargs === 3 ) {\n\t\tif ( isFunction( arguments[ 2 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tfcn = arguments[ 2 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 2 ];\n\t\t}\n\t\tend = out.length;\n\t} else if ( nargs === 4 ) {\n\t\tif ( isFunction( arguments[ 2 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tend = out.length;\n\t\t\tfcn = arguments[ 2 ];\n\t\t\tthisArg = arguments[ 3 ];\n\t\t} else if ( isFunction( arguments[ 3 ] ) ) {\n\t\t\tbegin = arguments[ 2 ];\n\t\t\tend = out.length;\n\t\t\tfcn = arguments[ 3 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 2 ];\n\t\t\tend = arguments[ 3 ];\n\t\t}\n\t} else if ( nargs === 5 ) {\n\t\tbegin = arguments[ 2 ];\n\t\tif ( isFunction( arguments[ 3 ] ) ) {\n\t\t\tend = out.length;\n\t\t\tfcn = arguments[ 3 ];\n\t\t\tthisArg = arguments[ 4 ];\n\t\t} else {\n\t\t\tend = arguments[ 3 ];\n\t\t\tfcn = arguments[ 4 ];\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );\n\t\t\t}\n\t\t}\n\t} else { // nargs > 5\n\t\tbegin = arguments[ 2 ];\n\t\tend = arguments[ 3 ];\n\t\tfcn = arguments[ 4 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );\n\t\t}\n\t\tthisArg = arguments[ 5 ];\n\t}\n\tif ( !isInteger( begin ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be either an integer (starting index) or a callback function. Value: `' + begin + '`.' );\n\t}\n\tif ( !isInteger( end ) ) {\n\t\tthrow new TypeError( 'invalid argument. Fourth argument must be either an integer (ending index) or a callback function. Value: `' + end + '`.' );\n\t}\n\tif ( end < 0 ) {\n\t\tend = out.length + end;\n\t\tif ( end < 0 ) {\n\t\t\tend = 0;\n\t\t}\n\t} else if ( end > out.length ) {\n\t\tend = out.length;\n\t}\n\tif ( begin < 0 ) {\n\t\tbegin = out.length + begin;\n\t\tif ( begin < 0 ) {\n\t\t\tbegin = 0;\n\t\t}\n\t}\n\ti = begin - 1;\n\tif ( fcn ) {\n\t\twhile ( i < end-1 ) {\n\t\t\ti += 1;\n\t\t\tv = iterator.next();\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tout[ i ] = fcn.call( thisArg, v.value, i, i-begin );\n\t\t\t}\n\t\t\tif ( v.done ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\twhile ( i < end-1 ) {\n\t\ti += 1;\n\t\tv = iterator.next();\n\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout[ i ] = v.value;\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default iterator2arrayview;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill an array-like object view with values returned from an iterator.\n*\n* @module @stdlib/iter/to-array-view\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var iterator2arrayview = require( '@stdlib/iter/to-array-view' );\n*\n* var iter = randu({\n*     'iter': 10\n* });\n*\n* var arr = iterator2arrayview( iter, new Float64Array( 20 ), 5 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}