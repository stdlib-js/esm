{"version":3,"sources":["@stdlib/buffer/from-string/lib/has_from.js","@stdlib/buffer/from-string/lib/main.js","@stdlib/buffer/from-string/lib/polyfill.js","@stdlib/buffer/from-string/lib/index.js"],"names":["isFunction","__var_0__","Buffer","__var_1__","bool","from","isString","isPrimitive","fromString","str","encoding","TypeError","arguments","length","string2buffer","hasFrom","main","polyfill","__var_2__","string2buffer$1"],"mappings":"2GAuBA,IAAIA,EAAaC,EACbC,EAASC,EAKTC,EAAOJ,EAAYE,EAAOG,MCN1BC,EAAWL,EAAUM,YACrBL,EAASC,EAmBb,SAASK,EAAYC,EAAKC,GACzB,IAAMJ,EAAUG,GACf,MAAM,IAAIE,UAAW,8DAAgEF,EAAM,KAE5F,GAAKG,UAAUC,OAAS,EAAI,CAC3B,IAAMP,EAAUI,GACf,MAAM,IAAIC,UAAW,+DAAiED,EAAW,KAElG,OAAOR,EAAOG,KAAMI,EAAKC,GAE1B,OAAOR,EAAOG,KAAMI,EAAK,QC9B1B,IAAIH,EAAWL,EAAUM,YACrBL,EAASC,EAmBb,SAASK,EAAYC,EAAKC,GACzB,IAAMJ,EAAUG,GACf,MAAM,IAAIE,UAAW,8DAAgEF,EAAM,KAE5F,GAAKG,UAAUC,OAAS,EAAI,CAC3B,IAAMP,EAAUI,GACf,MAAM,IAAIC,UAAW,+DAAiED,EAAW,KAElG,OAAO,IAAIR,EAAQO,EAAKC,GAEzB,OAAO,IAAIR,EAAQO,EAAK,QCjBzB,IAOIK,EAPAC,EAAUd,EACVe,EAAOb,EACPc,EAAWC,EAcfC,EAPCL,EADIC,EACYC,EAEAC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.from );\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\n/**\n* Allocates a buffer containing a provided string.\n*\n* @param {string} str - input string\n* @param {string} [encoding=\"utf8\"] - character encoding\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {TypeError} second argument must be a valid encoding\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = fromString( 'beep boop' );\n* // returns <Buffer>\n*/\nfunction fromString( str, encoding ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + str + '`' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isString( encoding ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a string. Value: `' + encoding + '`' );\n\t\t}\n\t\treturn Buffer.from( str, encoding );\n\t}\n\treturn Buffer.from( str, 'utf8' );\n}\n\n\n// EXPORTS //\nexport default fromString;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\n/**\n* Allocates a buffer containing a provided string.\n*\n* @param {string} str - input string\n* @param {string} [encoding=\"utf8\"] - character encoding\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {TypeError} second argument must be a valid encoding\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = fromString( 'beep boop' );\n* // returns <Buffer>\n*/\nfunction fromString( str, encoding ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string. Value: `' + str + '`' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isString( encoding ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a string. Value: `' + encoding + '`' );\n\t\t}\n\t\treturn new Buffer( str, encoding ); // eslint-disable-line no-buffer-constructor\n\t}\n\treturn new Buffer( str, 'utf8' ); // eslint-disable-line no-buffer-constructor\n}\n\n\n// EXPORTS //\nexport default fromString;\n","import __var_0__ from './has_from.js';\nimport __var_1__ from './main.js';\nimport __var_2__ from './polyfill.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer containing a provided string.\n*\n* @module @stdlib/buffer/from-string\n*\n* @example\n* var string2buffer = require( '@stdlib/buffer/from-string' );\n*\n* var buf = string2buffer( 'beep boop' );\n* // returns <Buffer>\n*/\n\n// MODULES //\nvar hasFrom = __var_0__;\nvar main = __var_1__;\nvar polyfill = __var_2__;\n\n\n// MAIN //\n\nvar string2buffer;\nif ( hasFrom ) {\n\tstring2buffer = main;\n} else {\n\tstring2buffer = polyfill;\n}\n\n\n// EXPORTS //\nexport default string2buffer;\n"]}