{"version":3,"sources":["@stdlib/buffer/alloc-unsafe/lib/has_alloc_unsafe.js","@stdlib/buffer/alloc-unsafe/lib/main.js","@stdlib/buffer/alloc-unsafe/lib/polyfill.js","@stdlib/buffer/alloc-unsafe/lib/index.js"],"names":["isFunction","__var_0__","Buffer","__var_1__","bool","allocUnsafe","isNonNegativeInteger","size","TypeError","hasAllocUnsafe","main","polyfill","__var_2__","allocUnsafe$3"],"mappings":"wHAuBA,IAAIA,EAAaC,EACbC,EAASC,EAKTC,EAAOJ,EAAYE,EAAOG,aCN1BC,EAAuBL,EACvBC,EAASC,EAsBb,SAASE,EAAaE,GACrB,IAAMD,EAAsBC,GAC3B,MAAM,IAAIC,UAAW,iEAAmED,EAAO,KAEhG,OAAOL,EAAOG,YAAaE,GC3B5B,IAAID,EAAuBL,EACvBC,EAASC,EAsBb,SAASE,EAAaE,GACrB,IAAMD,EAAsBC,GAC3B,MAAM,IAAIC,UAAW,iEAAmED,EAAO,KAEhG,OAAO,IAAIL,EAAQK,GCdpB,IAOIF,EAPAI,EAAiBR,EACjBS,EAAOP,EACPQ,EAAWC,EAcfC,EAPCR,EADII,EACUC,EAEAC","sourcesContent":["import __var_0__ from '@stdlib/assert/is-function';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.allocUnsafe );\n\n\n// EXPORTS //\nexport default bool;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + size + '`' );\n\t}\n\treturn Buffer.allocUnsafe( size );\n}\n\n\n// EXPORTS //\nexport default allocUnsafe;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/buffer/ctor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar Buffer = __var_1__;\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + size + '`' );\n\t}\n\treturn new Buffer( size ); // eslint-disable-line no-buffer-constructor\n}\n\n\n// EXPORTS //\nexport default allocUnsafe;\n","import __var_0__ from './has_alloc_unsafe.js';\nimport __var_1__ from './main.js';\nimport __var_2__ from './polyfill.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer having a specified number of bytes.\n*\n* @module @stdlib/buffer/alloc-unsafe\n*\n* @example\n* var allocUnsafe = require( '@stdlib/buffer/alloc-unsafe' );\n*\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\n\n// MODULES //\nvar hasAllocUnsafe = __var_0__;\nvar main = __var_1__;\nvar polyfill = __var_2__;\n\n\n// MAIN //\n\nvar allocUnsafe;\nif ( hasAllocUnsafe ) {\n\tallocUnsafe = main;\n} else {\n\tallocUnsafe = polyfill;\n}\n\n\n// EXPORTS //\nexport default allocUnsafe;\n"]}