{"version":3,"sources":["@stdlib/error/to-json/lib/ctors.js","@stdlib/error/to-json/lib/type.js","@stdlib/error/to-json/lib/main.js","@stdlib/error/to-json/lib/index.js"],"names":["CTORS","TypeError","SyntaxError","ReferenceError","RangeError","URIError","EvalError","Error","instanceOf","__var_0__","ctorName","__var_1__","getPrototypeOf","__var_2__","__var_3__","typeName","error","v","i","length","objectKeys","copy","isError","toJSON","err","keys","out","type","message","name","stack","code","errno","syscall"],"mappings":"iPAuBA,IAAIA,EAAQ,CACX,CAAEC,UAAW,aACb,CAAEC,YAAa,eACf,CAAEC,eAAgB,kBAClB,CAAEC,WAAY,cACd,CAAEC,SAAU,YACZ,CAAEC,UAAW,aACb,CAAEC,MAAO,UCLNC,EAAaC,EACbC,EAAWC,EACXC,EAAiBC,EACjBb,EAAQc,EAiBZ,SAASC,EAAUC,GAClB,IAAIC,EACAC,EAGJ,IAAMA,EAAI,EAAGA,EAAIlB,EAAMmB,OAAQD,IAC9B,GAAKV,EAAYQ,EAAOhB,EAAOkB,GAAK,IACnC,OAAOlB,EAAOkB,GAAK,GAIrB,KAAQF,GAAQ,CAEf,IADAC,EAAIP,EAAUM,GACRE,EAAI,EAAGA,EAAIlB,EAAMmB,OAAQD,IAC9B,GAAKD,IAAMjB,EAAOkB,GAAK,GACtB,OAAOlB,EAAOkB,GAAK,GAGrBF,EAAQJ,EAAgBI,ICtC1B,IAAII,EAAaX,EACbY,EAAOV,EACPW,EAAUT,EACVE,EAAWD,EAiBf,SAASS,EAAQC,GAChB,IAAIC,EACAC,EACAR,EACJ,IAAMI,EAASE,GACd,MAAM,IAAIvB,UAAW,2DAA6DuB,EAAM,MA2BzF,KAzBAE,EAAM,IAGFC,KAAOZ,EAAUS,GACrBE,EAAIE,QAAUJ,EAAII,QAGbJ,EAAIK,OACRH,EAAIG,KAAOL,EAAIK,MAEXL,EAAIM,QACRJ,EAAII,MAAQN,EAAIM,OAGZN,EAAIO,OACRL,EAAIK,KAAOP,EAAIO,MAEXP,EAAIQ,QACRN,EAAIM,MAAQR,EAAIQ,OAEZR,EAAIS,UACRP,EAAIO,QAAUT,EAAIS,SAGnBR,EAAOL,EAAYI,GACbN,EAAI,EAAGA,EAAIO,EAAKN,OAAQD,IAC7BQ,EAAKD,EAAKP,IAAOG,EAAMG,EAAKC,EAAKP,KAElC,OAAOQ,EC7CL,IAACH,EAASd","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CTORS = [\n\t[ TypeError, 'TypeError' ],\n\t[ SyntaxError, 'SyntaxError' ],\n\t[ ReferenceError, 'ReferenceError' ],\n\t[ RangeError, 'RangeError' ],\n\t[ URIError, 'URIError' ],\n\t[ EvalError, 'EvalError' ],\n\t[ Error, 'Error' ]\n];\n\n\n// EXPORTS //\nexport default CTORS;\n","import __var_0__ from '@stdlib/assert/instance-of';\nimport __var_1__ from '@stdlib/utils/constructor-name';\nimport __var_2__ from '@stdlib/utils/get-prototype-of';\nimport __var_3__ from './ctors.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar instanceOf = __var_0__;\nvar ctorName = __var_1__;\nvar getPrototypeOf = __var_2__;\nvar CTORS = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns the error type.\n*\n* @private\n* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - input error\n* @returns {(string|void)} error type\n*\n* @example\n* var err = new TypeError();\n* var out = typeName( err );\n* // returns 'TypeError'\n*/\nfunction typeName( error ) {\n\tvar v;\n\tvar i;\n\n\t// Check for error objects from the same realm (same Node.js `vm` or same `Window` object)...\n\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\tif ( instanceOf( error, CTORS[ i ][ 0 ] ) ) {\n\t\t\treturn CTORS[ i ][ 1 ];\n\t\t}\n\t}\n\t// Walk the prototype tree until we find an object having a desired native class...\n\twhile ( error ) {\n\t\tv = ctorName( error );\n\t\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\t\tif ( v === CTORS[ i ][ 1 ] ) {\n\t\t\t\treturn CTORS[ i ][ 1 ];\n\t\t\t}\n\t\t}\n\t\terror = getPrototypeOf( error );\n\t}\n}\n\n\n// EXPORTS //\nexport default typeName;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from '@stdlib/assert/is-error';\nimport __var_3__ from './type.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar copy = __var_1__;\nvar isError = __var_2__;\nvar typeName = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of an error object.\n*\n* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} err - error to serialize\n* @throws {TypeError} first argument must be an error object\n* @returns {Object} JSON representation\n*\n* @example\n* var err = new Error( 'beep' );\n* var json = toJSON( err );\n* // returns {...}\n*/\nfunction toJSON( err ) {\n\tvar keys;\n\tvar out;\n\tvar i;\n\tif ( !isError( err ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an error object. Value: `' + err + '`.' );\n\t}\n\tout = {};\n\n\t// Guaranteed properties:\n\tout.type = typeName( err );\n\tout.message = err.message;\n\n\t// Possible general error properties...\n\tif ( err.name ) {\n\t\tout.name = err.name;\n\t}\n\tif ( err.stack ) {\n\t\tout.stack = err.stack;\n\t}\n\t// Possible Node.js (system error) properties...\n\tif ( err.code ) {\n\t\tout.code = err.code;\n\t}\n\tif ( err.errno ) {\n\t\tout.errno = err.errno;\n\t}\n\tif ( err.syscall ) {\n\t\tout.syscall = err.syscall;\n\t}\n\t// Any enumerable properties...\n\tkeys = objectKeys( err );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tout[ keys[i] ] = copy( err[ keys[i] ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default toJSON;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a JSON representation of an error object.\n*\n* @module @stdlib/error/to-json\n*\n* @example\n* var toJSON = require( '@stdlib/error/to-json' );\n*\n* var err = new Error( 'beep' );\n* var json = toJSON( err );\n* // returns <Object>\n*/\n\n// MODULES //\nvar toJSON = __var_0__;\n\n\n// EXPORTS //\nexport default toJSON;\n"]}