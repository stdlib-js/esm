{"version":3,"sources":["@stdlib/complex/float32/lib/tostring.js","@stdlib/complex/float32/lib/tojson.js","@stdlib/complex/float32/lib/complex64.js","@stdlib/complex/float32/lib/index.js"],"names":["toString","str","this","re","im","toJSON","out","type","isNumber","__var_0__","isPrimitive","defineProperty","__var_1__","setReadOnly","__var_2__","Float32Array","__var_3__","__var_4__","__var_5__","Complex64","real","imag","view","TypeError","configurable","enumerable","get","prototype"],"mappings":"+LA2BA,SAASA,IAER,IAAIC,EAAM,GAAKC,KAAKC,GAOpB,OANKD,KAAKE,GAAK,EACdH,GAAO,OAAUC,KAAKE,GAEtBH,GAAO,MAAQC,KAAKE,GAErBH,GAAO,ICRR,SAASI,IAER,IAAIC,EAAM,CACVC,KAAW,aAGX,OAFAD,EAAIH,GAAKD,KAAKC,GACdG,EAAIF,GAAKF,KAAKE,GACPE,ECNR,IAAIE,EAAWC,EAAUC,YACrBC,EAAiBC,EACjBC,EAAcC,EACdC,EAAeC,EACfhB,EAAWiB,EACXZ,EAASa,EAoBb,SAASC,EAAWC,EAAMC,GACzB,IAAIC,EACJ,KAAQpB,gBAAgBiB,GACvB,MAAM,IAAII,UAAW,0EAEtB,IAAMf,EAAUY,GACf,MAAM,IAAIG,UAAW,wEAAwEH,EAAK,MAEnG,IAAMZ,EAAUa,GACf,MAAM,IAAIE,UAAW,6EAA6EF,EAAK,MAiBxG,OAfAV,EAAgBT,KAAM,KAAM,CAC3BsB,cAAgB,EAChBC,YAAc,EACdC,IAoBD,WACC,OAAOJ,EAAM,MAlBdX,EAAgBT,KAAM,KAAM,CAC3BsB,cAAgB,EAChBC,YAAc,EACdC,IAwBD,WACC,OAAOJ,EAAM,OAvBdA,EAAO,IAAIP,EAAc,IACnB,GAAMK,EACZE,EAAM,GAAMD,EAELnB,KAmCRW,EAAaM,EAAW,oBAAqB,GAgB7CN,EAAaM,EAAUQ,UAAW,oBAAqB,GAgBvDd,EAAaM,EAAUQ,UAAW,aAAc,GAgBhDd,EAAaM,EAAUQ,UAAW,WAAY3B,GAqB9Ca,EAAaM,EAAUQ,UAAW,SAAUtB,GCpJzC,IAACc,EAAYV","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default toString;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default toJSON;\n","import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/utils/define-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_3__ from '@stdlib/array/float32';\nimport __var_4__ from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\nimport __var_5__ from './tojson.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar defineProperty = __var_1__;\nvar setReadOnly = __var_2__;\nvar Float32Array = __var_3__;\nvar toString = __var_4__;\nvar toJSON = __var_5__;\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number primitive\n* @throws {TypeError} imaginary component must be a number primitive\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tvar view;\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( 'invalid argument. Real component must be a number primitive. Value: `'+real+'`.' );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( 'invalid argument. Imaginary component must be a number primitive. Value: `'+imag+'`.' );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': getReal\n\t});\n\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': getImag\n\t});\n\tview = new Float32Array( 2 );\n\tview[ 0 ] = real;\n\tview[ 1 ] = imag;\n\n\treturn this;\n\n\t/**\n\t* Returns a real component.\n\t*\n\t* @private\n\t* @returns {number} real component\n\t*/\n\tfunction getReal() {\n\t\treturn view[ 0 ];\n\t}\n\n\t/**\n\t* Returns an imaginary component.\n\t*\n\t* @private\n\t* @returns {number} imaginary component\n\t*/\n\tfunction getImag() {\n\t\treturn view[ 1 ];\n\t}\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toString );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\nexport default Complex64;\n","import __var_0__ from './complex64.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* 64-bit complex number constructor.\n*\n* @module @stdlib/complex/float32\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\n\n// MODULES //\nvar Complex64 = __var_0__;\n\n\n// EXPORTS //\nexport default Complex64;\n"]}