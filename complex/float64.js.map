{"version":3,"sources":["@stdlib/complex/float64/lib/tostring.js","@stdlib/complex/float64/lib/tojson.js","@stdlib/complex/float64/lib/complex128.js","@stdlib/complex/float64/lib/index.js"],"names":["toString","str","this","re","im","toJSON","out","type","isNumber","__var_0__","isPrimitive","defineProperty","__var_1__","setReadOnly","__var_2__","__var_3__","__var_4__","Complex128","real","imag","TypeError","configurable","enumerable","writable","value","prototype"],"mappings":"0JA2BA,SAASA,IAER,IAAIC,EAAM,GAAKC,KAAKC,GAOpB,OANKD,KAAKE,GAAK,EACdH,GAAO,OAAUC,KAAKE,GAEtBH,GAAO,MAAQC,KAAKE,GAErBH,GAAO,ICRR,SAASI,IAER,IAAIC,EAAM,CACVC,KAAW,cAGX,OAFAD,EAAIH,GAAKD,KAAKC,GACdG,EAAIF,GAAKF,KAAKE,GACPE,ECPR,IAAIE,EAAWC,EAAUC,YACrBC,EAAiBC,EACjBC,EAAcC,EACdd,EAAWe,EACXV,EAASW,EAoBb,SAASC,EAAYC,EAAMC,GAC1B,KAAQjB,gBAAgBe,GACvB,MAAM,IAAIG,UAAW,0EAEtB,IAAMZ,EAAUU,GACf,MAAM,IAAIE,UAAW,wEAAwEF,EAAK,MAEnG,IAAMV,EAAUW,GACf,MAAM,IAAIC,UAAW,6EAA6ED,EAAK,MAkBxG,OAhBAR,EAAgBT,KAAM,KAAM,CAC3BmB,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAASN,IAGVP,EAAgBT,KAAM,KAAM,CAC3BmB,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAASL,IAKHjB,KAeRW,EAAaI,EAAY,oBAAqB,GAgB9CJ,EAAaI,EAAWQ,UAAW,oBAAqB,GAgBxDZ,EAAaI,EAAWQ,UAAW,aAAc,IAgBjDZ,EAAaI,EAAWQ,UAAW,WAAYzB,GAqB/Ca,EAAaI,EAAWQ,UAAW,SAAUpB,GC9H1C,IAACY,EAAaR","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default toString;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default toJSON;\n","import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/utils/define-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_3__ from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\nimport __var_4__ from './tojson.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar defineProperty = __var_1__;\nvar setReadOnly = __var_2__;\nvar toString = __var_3__;\nvar toJSON = __var_4__;\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number primitive\n* @throws {TypeError} imaginary component must be a number primitive\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( 'invalid argument. Real component must be a number primitive. Value: `'+real+'`.' );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( 'invalid argument. Imaginary component must be a number primitive. Value: `'+imag+'`.' );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\n\t// Note: we do not use a backing store coupled with getters, as numbers in JavaScript are double-precision by default.\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toString );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\nexport default Complex128;\n","import __var_0__ from './complex128.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* 128-bit complex number constructor.\n*\n* @module @stdlib/complex/float64\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\n\n// MODULES //\nvar Complex128 = __var_0__;\n\n\n// EXPORTS //\nexport default Complex128;\n"]}