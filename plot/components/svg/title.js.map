{"version":3,"sources":["@stdlib/plot/components/svg/title/lib/validators/text.js","@stdlib/plot/components/svg/title/lib/validators/auto_render.js","@stdlib/plot/components/svg/title/lib/validators/index.js","@stdlib/plot/components/svg/title/lib/validate.js","@stdlib/plot/components/svg/title/lib/events/index.js","@stdlib/plot/components/svg/title/lib/props/text/set.js","@stdlib/plot/components/svg/title/lib/props/text/get.js","@stdlib/plot/components/svg/title/lib/props/auto-render/set.js","@stdlib/plot/components/svg/title/lib/props/auto-render/get.js","@stdlib/plot/components/svg/title/lib/methods/render.js","@stdlib/plot/components/svg/title/lib/title.js","@stdlib/plot/components/svg/title/lib/index.js"],"names":["isString","__var_0__","isPrimitive","test","v","TypeError","isBoolean","text","autoRender","__var_1__","validators","objectKeys","isObject","hasOwnProp","__var_2__","__var_3__","KEYS","validate","opts","options","err","key","val","i","length","EVENTS","get","prop","logger","events","isValid","debug","CHANGE_EVENT","set","this","_text","emit","bool","_autoRender","h","ELEMENT","render","props","vtree","namespace","property","className","attributes","x","y","text-anchor","JSON","stringify","EventEmitter","defineProperty","setReadOnly","copy","__var_4__","defaults","__var_5__","__var_6__","setText","__var_7__","getText","__var_8__","setAutoRender","__var_9__","getAutoRender","__var_10__","__var_11__","Title","self","call","configurable","enumerable","writable","value","on","args","Array","arguments","apply","prototype","Object","create","constructor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates `text`.\n*\n* @private\n* @param {*} v - value to test\n* @returns {(Error|null)} error object or null\n*/\nfunction test( v ) {\n\tif ( !isString( v ) ) {\n\t\treturn new TypeError( 'invalid value. `text` must be a string primitive. Value: `' + v + '.`' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default test;\n","import __var_0__ from '@stdlib/assert/is-boolean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates `autoRender`.\n*\n* @private\n* @param {*} v - value to test\n* @returns {(Error|null)} error object or null\n*/\nfunction test( v ) {\n\tif ( !isBoolean( v ) ) {\n\t\treturn new TypeError( 'invalid value. `autoRender` must be a boolean primitive. Value: `' + v + '.`' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default test;\n","import __var_0__ from './text.js';\nimport __var_1__ from './auto_render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar text = __var_0__;\nvar autoRender = __var_1__;\n\n\n// MAIN //\n\nvar validators = {\n\t'text': text,\n\t'autoRender': autoRender\n};\n\n\n// EXPORTS //\nexport default validators;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from './validators/index.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\nvar validators = __var_3__;\n\n\n// VARIABLES //\n\nvar KEYS = objectKeys( validators );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.text] - title text\n* @param {boolean} [options.autoRender] - indicates whether to re-render on a change event\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'text': 'Beep'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar err;\n\tvar key;\n\tvar val;\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tfor ( i = 0; i < KEYS.length; i++ ) {\n\t\tkey = KEYS[ i ];\n\t\tif ( hasOwnProp( options, key ) ) {\n\t\t\tval = options[ key ];\n\t\t\terr = validators[ key ]( val );\n\t\t\tif ( err ) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\topts[ key ] = val;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from './events.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar EVENTS = __var_0__;\n\n\n// MAIN //\n\n/**\n* Provided a property, returns a corresponding event name for when a property value changes.\n*\n* @private\n* @param {string} prop - property\n* @returns {string} event name\n*/\nfunction get( prop ) {\n\treturn EVENTS[ prop ];\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from './../../events/index.js';\nimport __var_2__ from './../../validators/text.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar events = __var_1__;\nvar isValid = __var_2__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'title:set:text' );\nvar CHANGE_EVENT = events( 'text' );\n\n\n// MAIN //\n\n/**\n* Sets the title text.\n*\n* @private\n* @param {string} text - text\n* @throws {TypeError} must be a string primitive\n*/\nfunction set( text ) {\n\t/* eslint-disable no-invalid-this */\n\tvar err = isValid( text );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Current value: %d.', this._text );\n\n\tthis._text = text;\n\tdebug( 'New Value: %d.', this._text );\n\n\tthis.emit( CHANGE_EVENT );\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the title text.\n*\n* @private\n* @returns {string} text\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._text;\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from './../../events/index.js';\nimport __var_2__ from './../../validators/auto_render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar events = __var_1__;\nvar isValid = __var_2__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'title:set:auto-render' );\nvar CHANGE_EVENT = events( 'autoRender' );\n\n\n// MAIN //\n\n/**\n* Sets the rendering mode.\n*\n* @private\n* @param {boolean} bool - boolean indicating whether to re-render on a change event\n* @throws {TypeError} must be a positive number\n*/\nfunction set( bool ) {\n\t/* eslint-disable no-invalid-this */\n\tvar err = isValid( bool );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Current value: %d.', this._autoRender );\n\n\tthis._autoRender = bool;\n\tdebug( 'New Value: %d.', this._autoRender );\n\n\tthis.emit( CHANGE_EVENT );\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the rendering mode.\n*\n* @private\n* @returns {boolean} rendering mode\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._autoRender;\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/vendor/virtual-dom/h.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar h = __var_1__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'title:render' );\nvar ELEMENT = 'text';\n\n\n// MAIN //\n\n/**\n* Renders a virtual DOM tree.\n*\n* @private\n* @returns {VTree} virtual DOM tree\n*/\nfunction render() {\n\t/* eslint-disable no-invalid-this */\n\tvar props;\n\tvar vtree;\n\tvar text;\n\n\tdebug( 'Rendering...' );\n\n\tprops = {\n\t\t'namespace': 'http://www.w3.org/2000/svg',\n\t\t'property': 'title',\n\t\t'className': 'title noselect',\n\t\t'attributes': {\n\t\t\t'x': 0,\n\t\t\t'y': 0,\n\t\t\t'text-anchor': 'middle'\n\t\t}\n\t};\n\n\ttext = this.text;\n\tdebug( 'Title: %s.', text );\n\n\tdebug( 'Generating a virtual DOM tree (%s) with properties: %s.', ELEMENT, JSON.stringify( props ) );\n\tvtree = h( ELEMENT, props, text );\n\n\t// Announce that a new tree has been rendered:\n\tthis.emit( '_render', vtree );\n\n\treturn vtree;\n}\n\n\n// EXPORTS //\nexport default render;\n","import __var_0__ from '@stdlib/vendor/events.js';\nimport __var_1__ from '@stdlib/vendor/debug.js';\nimport __var_2__ from '@stdlib/utils/define-property';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/utils/copy';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './validate.js';\nimport __var_7__ from './props/text/set.js';\nimport __var_8__ from './props/text/get.js';\nimport __var_9__ from './props/auto-render/set.js';\nimport __var_10__ from './props/auto-render/get.js';\nimport __var_11__ from './methods/render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar EventEmitter = __var_0__.EventEmitter;\nvar logger = __var_1__;\nvar defineProperty = __var_2__;\nvar setReadOnly = __var_3__;\nvar copy = __var_4__;\nvar defaults = __var_5__;\nvar validate = __var_6__;\nvar setText = __var_7__;\nvar getText = __var_8__;\nvar setAutoRender = __var_9__;\nvar getAutoRender = __var_10__;\nvar render = __var_11__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'title:main' );\n\n\n// MAIN //\n\n/**\n* Title constructor.\n*\n* @constructor\n* @param {Options} options - constructor options\n* @param {string} [options.text] - title text\n* @param {boolean} [options.autoRender=false] - indicates whether to re-render on a change event\n* @throws {TypeError} must provide valid options\n* @returns {Title} title instance\n*\n* @example\n* var title = new Title({\n*     'text':'Beep'\n* });\n*/\nfunction Title( options ) {\n\tvar self;\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof Title ) ) {\n\t\treturn new Title( options );\n\t}\n\tself = this;\n\topts = copy( defaults );\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );\n\tEventEmitter.call( this );\n\n\tdefineProperty( this, '_text', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': opts.text\n\t});\n\tdefineProperty( this, '_autoRender', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': opts.autoRender\n\t});\n\n\tthis.on( 'change', onChange );\n\tthis.on( '_render', onRender );\n\n\treturn this;\n\n\t/**\n\t* Callback invoked upon receiving a change event.\n\t*\n\t* @private\n\t*/\n\tfunction onChange() {\n\t\tdebug( 'Received a change event.' );\n\t\tif ( self._autoRender ) { // eslint-disable-line no-underscore-dangle\n\t\t\tself.render();\n\t\t}\n\t}\n\n\t/**\n\t* Re-emits a render event.\n\t*\n\t* @private\n\t*/\n\tfunction onRender() {\n\t\tvar args;\n\t\tvar i;\n\t\tdebug( 'Received a render event. Re-emitting...' );\n\t\targs = new Array( arguments.length+1 );\n\t\targs[ 0 ] = 'render';\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs[ i+1 ] = arguments[ i ];\n\t\t}\n\t\tself.emit.apply( self, args );\n\t}\n}\n\n/*\n* Create a prototype which inherits from the parent prototype.\n*/\nTitle.prototype = Object.create( EventEmitter.prototype );\n\n/*\n* Set the constructor.\n*/\nTitle.prototype.constructor = Title;\n\n/**\n* Title text.\n*\n* @name text\n* @memberof Title.prototype\n* @type {string}\n* @throws {TypeError} must be a primitive string\n*\n* @example\n* var title = new Title({\n*     'text': 'Beep'\n* });\n*\n* var text = title.text;\n* // returns 'Beep'\n*/\ndefineProperty( Title.prototype, 'text', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setText,\n\t'get': getText\n});\n\n/**\n* Rendering mode. If `true`, an instance re-renders on each change event.\n*\n* @name autoRender\n* @memberof Title.prototype\n* @type {boolean}\n* @throws {TypeError} must be a boolean primitive\n* @default false\n*\n* @example\n* var title = new Title({\n*     'autoRender': true\n* });\n*\n* var mode = title.autoRender;\n* // returns true\n*/\ndefineProperty( Title.prototype, 'autoRender', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setAutoRender,\n\t'get': getAutoRender\n});\n\n/**\n* Renders a virtual DOM tree.\n*\n* @name render\n* @memberof Title.prototype\n* @type {Function}\n* @returns {VTree} virtual tree\n*\n* @example\n* var title = new Title();\n*\n* var out = title.render();\n*/\nsetReadOnly( Title.prototype, 'render', render );\n\n\n// EXPORTS //\nexport default Title;\n","import __var_0__ from './title.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Title.\n*\n* @module @stdlib/plot/components/svg/title\n*\n* @example\n* var Title = require( '@stdlib/plot/components/svg/title' );\n*\n* var title = new Title({\n*     'text': 'Beep'\n* });\n*/\n\n// MODULES //\nvar Title = __var_0__;\n\n\n// EXPORTS //\nexport default Title;\n"]}