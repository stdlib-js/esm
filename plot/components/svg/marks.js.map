{"version":3,"sources":["@stdlib/plot/components/svg/marks/lib/validators/clip_path_id.js","@stdlib/plot/components/svg/marks/lib/validators/auto_render.js","@stdlib/plot/components/svg/marks/lib/validators/index.js","@stdlib/plot/components/svg/marks/lib/validate.js","@stdlib/plot/components/svg/marks/lib/events/index.js","@stdlib/plot/components/svg/marks/lib/props/clip-path-id/set.js","@stdlib/plot/components/svg/marks/lib/props/clip-path-id/get.js","@stdlib/plot/components/svg/marks/lib/props/auto-render/set.js","@stdlib/plot/components/svg/marks/lib/props/auto-render/get.js","@stdlib/plot/components/svg/marks/lib/methods/render.js","@stdlib/plot/components/svg/marks/lib/marks.js","@stdlib/plot/components/svg/marks/lib/index.js"],"names":["isString","__var_0__","isPrimitive","test","v","TypeError","isBoolean","clipPathId","autoRender","__var_1__","validators","objectKeys","isObject","hasOwnProp","__var_2__","__var_3__","KEYS","validate","opts","options","err","key","val","i","length","EVENTS","get","prop","logger","events","isValid","debug","CHANGE_EVENT","set","id","this","_clipPathId","emit","bool","_autoRender","h","ELEMENT","render","props","vtree","namespace","property","className","attributes","clip-path","JSON","stringify","EventEmitter","defineProperty","setReadOnly","copy","__var_4__","defaults","__var_5__","__var_6__","setClipPathId","__var_7__","getClipPathId","__var_8__","setAutoRender","__var_9__","getAutoRender","__var_10__","__var_11__","Marks","self","call","configurable","enumerable","writable","value","on","args","Array","arguments","apply","prototype","Object","create","constructor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates `clipPathId`.\n*\n* @private\n* @param {*} v - value to test\n* @returns {(Error|null)} error object or null\n*/\nfunction test( v ) {\n\tif ( !isString( v ) ) {\n\t\treturn new TypeError( 'invalid value. `clipPathId` must be a string primitive. Value: `' + v + '.`' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default test;\n","import __var_0__ from '@stdlib/assert/is-boolean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates `autoRender`.\n*\n* @private\n* @param {*} v - value to test\n* @returns {(Error|null)} error object or null\n*/\nfunction test( v ) {\n\tif ( !isBoolean( v ) ) {\n\t\treturn new TypeError( 'invalid value. `autoRender` must be a boolean primitive. Value: `' + v + '.`' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default test;\n","import __var_0__ from './clip_path_id.js';\nimport __var_1__ from './auto_render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar clipPathId = __var_0__;\nvar autoRender = __var_1__;\n\n\n// MAIN //\n\nvar validators = {\n\t'clipPathId': clipPathId,\n\t'autoRender': autoRender\n};\n\n\n// EXPORTS //\nexport default validators;\n","import __var_0__ from '@stdlib/utils/keys';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from './validators/index.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar objectKeys = __var_0__;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\nvar validators = __var_3__;\n\n\n// VARIABLES //\n\nvar KEYS = objectKeys( validators );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.clipPathId] - clipping path id\n* @param {boolean} [options.autoRender] - indicates whether to re-render on a change event\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'clipPathId': '1234'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar err;\n\tvar key;\n\tvar val;\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tfor ( i = 0; i < KEYS.length; i++ ) {\n\t\tkey = KEYS[ i ];\n\t\tif ( hasOwnProp( options, key ) ) {\n\t\t\tval = options[ key ];\n\t\t\terr = validators[ key ]( val );\n\t\t\tif ( err ) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\topts[ key ] = val;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from './events.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar EVENTS = __var_0__;\n\n\n// MAIN //\n\n/**\n* Provided a property, returns a corresponding event name for when a property value changes.\n*\n* @private\n* @param {string} prop - property\n* @returns {string} event name\n*/\nfunction get( prop ) {\n\treturn EVENTS[ prop ];\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from './../../events/index.js';\nimport __var_2__ from './../../validators/clip_path_id.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar events = __var_1__;\nvar isValid = __var_2__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'marks:set:clip-path-id' );\nvar CHANGE_EVENT = events( 'clipPathId' );\n\n\n// MAIN //\n\n/**\n* Sets the clipping path id.\n*\n* @private\n* @param {string} id - clipping path id\n* @throws {TypeError} must be a string primitive\n*/\nfunction set( id ) {\n\t/* eslint-disable no-invalid-this */\n\tvar err = isValid( id );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Current value: %d.', this._clipPathId );\n\n\tthis._clipPathId = id;\n\tdebug( 'New Value: %d.', this._clipPathId );\n\n\tthis.emit( CHANGE_EVENT );\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the clipping path id.\n*\n* @private\n* @returns {string} id\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._clipPathId;\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from './../../events/index.js';\nimport __var_2__ from './../../validators/auto_render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar events = __var_1__;\nvar isValid = __var_2__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'marks:set:auto-render' );\nvar CHANGE_EVENT = events( 'autoRender' );\n\n\n// MAIN //\n\n/**\n* Sets the rendering mode.\n*\n* @private\n* @param {boolean} bool - boolean indicating whether to re-render on a change event\n* @throws {TypeError} must be a positive number\n*/\nfunction set( bool ) {\n\t/* eslint-disable no-invalid-this */\n\tvar err = isValid( bool );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Current value: %d.', this._autoRender );\n\n\tthis._autoRender = bool;\n\tdebug( 'New Value: %d.', this._autoRender );\n\n\tthis.emit( CHANGE_EVENT );\n}\n\n\n// EXPORTS //\nexport default set;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the rendering mode.\n*\n* @private\n* @returns {boolean} rendering mode\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._autoRender;\n}\n\n\n// EXPORTS //\nexport default get;\n","import __var_0__ from '@stdlib/vendor/debug.js';\nimport __var_1__ from '@stdlib/vendor/virtual-dom/h.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\nvar h = __var_1__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'marks:render' );\nvar ELEMENT = 'g';\n\n\n// MAIN //\n\n/**\n* Renders a virtual DOM tree.\n*\n* @private\n* @returns {VTree} virtual DOM tree\n*/\nfunction render() {\n\t/* eslint-disable no-invalid-this */\n\tvar props;\n\tvar vtree;\n\n\tdebug( 'Rendering...' );\n\n\tprops = {\n\t\t'namespace': 'http://www.w3.org/2000/svg',\n\t\t'property': 'marks',\n\t\t'className': 'marks',\n\t\t'attributes': {\n\t\t\t'clip-path': 'url(#'+this._clipPathId+')'\n\t\t}\n\t};\n\n\tdebug( 'Generating a virtual DOM tree (%s) with properties: %s.', ELEMENT, JSON.stringify( props ) );\n\tvtree = h( ELEMENT, props, [] );\n\n\t// Announce that a new tree has been rendered:\n\tthis.emit( '_render', vtree );\n\n\treturn vtree;\n}\n\n\n// EXPORTS //\nexport default render;\n","import __var_0__ from '@stdlib/vendor/events.js';\nimport __var_1__ from '@stdlib/vendor/debug.js';\nimport __var_2__ from '@stdlib/utils/define-property';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/utils/copy';\nimport __var_5__ from './defaults.json';\nimport __var_6__ from './validate.js';\nimport __var_7__ from './props/clip-path-id/set.js';\nimport __var_8__ from './props/clip-path-id/get.js';\nimport __var_9__ from './props/auto-render/set.js';\nimport __var_10__ from './props/auto-render/get.js';\nimport __var_11__ from './methods/render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar EventEmitter = __var_0__.EventEmitter;\nvar logger = __var_1__;\nvar defineProperty = __var_2__;\nvar setReadOnly = __var_3__;\nvar copy = __var_4__;\nvar defaults = __var_5__;\nvar validate = __var_6__;\nvar setClipPathId = __var_7__;\nvar getClipPathId = __var_8__;\nvar setAutoRender = __var_9__;\nvar getAutoRender = __var_10__;\nvar render = __var_11__;\n\n\n// VARIABLES //\n\nvar debug = logger( 'marks:main' );\n\n\n// MAIN //\n\n/**\n* Marks constructor.\n*\n* @constructor\n* @param {Options} options - constructor options\n* @param {string} [options.clipPathId] - clipping path id\n* @param {boolean} [options.autoRender=false] - indicates whether to re-render on a change event\n* @throws {TypeError} must provide valid options\n* @returns {Marks} marks instance\n*\n* @example\n* var marks = new Marks({\n*     'clipPathId': '1234'\n* });\n*/\nfunction Marks( options ) {\n\tvar self;\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof Marks ) ) {\n\t\treturn new Marks( options );\n\t}\n\tself = this;\n\topts = copy( defaults );\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tdebug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );\n\tEventEmitter.call( this );\n\n\tdefineProperty( this, '_clipPathId', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': opts.clipPathId\n\t});\n\tdefineProperty( this, '_autoRender', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': opts.autoRender\n\t});\n\n\tthis.on( 'change', onChange );\n\tthis.on( '_render', onRender );\n\n\treturn this;\n\n\t/**\n\t* Callback invoked upon receiving a change event.\n\t*\n\t* @private\n\t*/\n\tfunction onChange() {\n\t\tdebug( 'Received a change event.' );\n\t\tif ( self._autoRender ) { // eslint-disable-line no-underscore-dangle\n\t\t\tself.render();\n\t\t}\n\t}\n\n\t/**\n\t* Re-emits a render event.\n\t*\n\t* @private\n\t*/\n\tfunction onRender() {\n\t\tvar args;\n\t\tvar i;\n\t\tdebug( 'Received a render event. Re-emitting...' );\n\t\targs = new Array( arguments.length+1 );\n\t\targs[ 0 ] = 'render';\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs[ i+1 ] = arguments[ i ];\n\t\t}\n\t\tself.emit.apply( self, args );\n\t}\n}\n\n/*\n* Create a prototype which inherits from the parent prototype.\n*/\nMarks.prototype = Object.create( EventEmitter.prototype );\n\n/*\n* Set the constructor.\n*/\nMarks.prototype.constructor = Marks;\n\n/**\n* Clipping path id.\n*\n* @name clipPathId\n* @memberof Marks.prototype\n* @type {string}\n* @throws {TypeError} must be a primitive string\n*\n* @example\n* var marks = new Marks({\n*     'clipPathId': '1234'\n* });\n*\n* var id = marks.clipPathId;\n* // returns '1234'\n*/\ndefineProperty( Marks.prototype, 'clipPathId', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setClipPathId,\n\t'get': getClipPathId\n});\n\n/**\n* Rendering mode. If `true`, an instance re-renders on each change event.\n*\n* @name autoRender\n* @memberof Marks.prototype\n* @type {boolean}\n* @throws {TypeError} must be a boolean primitive\n* @default false\n*\n* @example\n* var marks = new Marks({\n*     'autoRender': true\n* });\n*\n* var mode = marks.autoRender;\n* // returns true\n*/\ndefineProperty( Marks.prototype, 'autoRender', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setAutoRender,\n\t'get': getAutoRender\n});\n\n/**\n* Renders a virtual DOM tree.\n*\n* @name render\n* @memberof Marks.prototype\n* @type {Function}\n* @returns {VTree} virtual tree\n*\n* @example\n* var marks = new Marks();\n*\n* var out = marks.render();\n*/\nsetReadOnly( Marks.prototype, 'render', render );\n\n\n// EXPORTS //\nexport default Marks;\n","import __var_0__ from './marks.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Marks.\n*\n* @module @stdlib/plot/components/svg/marks\n*\n* @example\n* var Marks = require( '@stdlib/plot/components/svg/marks' );\n*\n* var marks = new Marks({\n*     'clipPathId': '1234'\n* });\n*/\n\n// MODULES //\nvar Marks = __var_0__;\n\n\n// EXPORTS //\nexport default Marks;\n"]}