{"version":3,"sources":["@stdlib/plot/unicode/stemleaf/lib/x_value.js","@stdlib/plot/unicode/stemleaf/lib/y_value.js","@stdlib/plot/unicode/stemleaf/lib/format_data.js","@stdlib/plot/unicode/stemleaf/lib/validate.js","@stdlib/plot/unicode/stemleaf/lib/set_xvalue.js","@stdlib/plot/unicode/stemleaf/lib/get_xvalue.js","@stdlib/plot/unicode/stemleaf/lib/set_yvalue.js","@stdlib/plot/unicode/stemleaf/lib/get_yvalue.js","@stdlib/plot/unicode/stemleaf/lib/set_x.js","@stdlib/plot/unicode/stemleaf/lib/get_x.js","@stdlib/plot/unicode/stemleaf/lib/set_y.js","@stdlib/plot/unicode/stemleaf/lib/get_y.js","@stdlib/plot/unicode/stemleaf/lib/render.js","@stdlib/plot/unicode/stemleaf/lib/ctor.js","@stdlib/plot/unicode/stemleaf/lib/index.js"],"names":["xValue","x","yValue","y","isnan","__var_0__","round","__var_1__","isInfinite","__var_2__","formatData","data","getValue","out","d","i","Array","length","isObject","isFunction","isArray","isTypedArray","__var_3__","isPositiveInteger","__var_4__","isPrimitive","hasOwnProp","__var_5__","validate","opts","TypeError","leafDigits","setXValue","fcn","this","_xValue","getXValue","setYValue","_yValue","getYValue","setX","_x","copy","getX","setY","_y","getY","floor","exp10","ascending","a","b","ascending2","val","spaces","n","join","constructSingleDisplay","interval","stemWidth","leafWidth","lastStem","chrs","len","str","stm","lf","v","sort","toString","constructDoubleDisplay","xLeafWidth","nSpaces","lines","line","lmax","arr","lfs","class","push","indexOf","split","render","digits","ret","_leafDigits","defineProperty","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","__var_13__","StemLeaf","options","err","arguments","configurable","enumerable","writable","value","prototype","set","get"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* `x`-value accessor function.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} input value\n*\n* @example\n* var v = xValue( 5.0 );\n* // returns 5.0\n*/\nfunction xValue( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default xValue;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* `y`-value accessor function.\n*\n* @private\n* @param {number} y - input value\n* @returns {number} input value\n*\n* @example\n* var v = yValue( 5.0 );\n* // returns 5.0\n*/\nfunction yValue( y ) {\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default yValue;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/round';\nimport __var_2__ from '@stdlib/math/base/assert/is-infinite';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar round = __var_1__;\nvar isInfinite = __var_2__;\n\n\n// MAIN //\n\n/**\n* Formats data to a standard representation. This is required for non-deterministic accessors.\n*\n* @private\n* @param {(Array|TypedArray)} data - data to standardize\n* @param {Function} getValue - accessor function\n* @returns {ObjectArray} standardized data\n*\n* @example\n* var data = [{'y':5.0},{'y':3.0},{'y':2.0}];\n* function yValue( d ) {\n*     return d.y;\n* }\n* var arr = formatData( data, yValue );\n* // returns [ 5.0, 3.0, 2.0 ]\n*/\nfunction formatData( data, getValue ) {\n\tvar out;\n\tvar d;\n\tvar i;\n\n\t// TODO: add support for `ndarray`-like interfaces\n\n\tout = new Array( data.length );\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\td = getValue( data[ i ], i );\n\t\tif ( isnan( d ) || isInfinite( d ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tout[ i ] = round( d );\n\t}\n\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default formatData;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/assert/is-typed-array';\nimport __var_4__ from '@stdlib/assert/is-positive-integer';\nimport __var_5__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar isFunction = __var_1__;\nvar isArray = __var_2__;\nvar isTypedArray = __var_3__;\nvar isPositiveInteger = __var_4__.isPrimitive;\nvar hasOwnProp = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Options} opts - function options\n* @param {(Array|TypedArray)} [opts.x] - chart data\n* @param {(Array|TypedArray)} [opts.y] - chart data\n* @param {Function} [opts.xValue] - x-value accessor\n* @param {Function} [opts.yValue] - y-value accessor\n* @param {PositiveInteger} leafDigits - number of digits to display as leafs\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {\n*     'x': [ 23, 11, 137, 58 ],\n*     'y': [ 21, 11, 39, 80 ]\n* };\n* var err = validate( opts );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts ) {\n\tif ( !isObject( opts ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t}\n\tif ( hasOwnProp( opts, 'x' ) ) {\n\t\tif ( !isArray( opts.x ) && !isTypedArray( opts.x ) ) {\n\t\t\treturn new TypeError( 'invalid option. `x` option must be an array or typed array. Option: `' + opts.x + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( opts, 'xValue' ) ) {\n\t\tif ( !isFunction( opts.xValue ) ) {\n\t\t\treturn new TypeError( 'invalid option. `xValue` option must be a function. Option: `' + opts.xValue + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( opts, 'y' ) ) {\n\t\tif ( !isArray( opts.y ) && !isTypedArray( opts.y ) ) {\n\t\t\treturn new TypeError( 'invalid option. `y` option must be an array or typed array. Option: `' + opts.y + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( opts, 'yValue' ) ) {\n\t\tif ( !isFunction( opts.yValue ) ) {\n\t\t\treturn new TypeError( 'invalid option. `yValue` option must be a function. Option: `' + opts.yValue + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( opts, 'leafDigits' ) ) {\n\t\tif ( !isPositiveInteger( opts.leafDigits ) ) {\n\t\t\treturn new TypeError( 'invalid option. `leafDigits` option must be a positive integer. Option: `' + opts.leafDigits + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* Sets the x-value accessor.\n*\n* @private\n* @param {Function} fcn - accessor function\n* @throws {TypeError} must be a function\n*/\nfunction setXValue( fcn ) {\n\t/* eslint-disable no-invalid-this */\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid value. `xValue` must be a function. Value: `' + fcn + '`.' );\n\t}\n\tthis._xValue = fcn;\n}\n\n\n// EXPORTS //\nexport default setXValue;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the x-value accessor.\n*\n* @private\n* @returns {Function} x-value accessor\n*/\nfunction getXValue() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._xValue;\n}\n\n\n// EXPORTS //\nexport default getXValue;\n","import __var_0__ from '@stdlib/assert/is-function';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isFunction = __var_0__;\n\n\n// MAIN //\n\n/**\n* Sets the y-value accessor.\n*\n* @private\n* @param {Function} fcn - accessor function\n* @throws {TypeError} must be a function\n*/\nfunction setYValue( fcn ) {\n\t/* eslint-disable no-invalid-this */\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid value. `yValue` must be a function. Value: `' + fcn + '`.' );\n\t}\n\tthis._yValue = fcn;\n}\n\n\n// EXPORTS //\nexport default setYValue;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the y-value accessor.\n*\n* @private\n* @returns {Function} y-value accessor\n*/\nfunction getYValue() {\n\t/* eslint-disable no-invalid-this */\n\treturn this._yValue;\n}\n\n\n// EXPORTS //\nexport default getYValue;\n","import __var_0__ from '@stdlib/assert/is-typed-array';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from './format_data.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isTypedArray = __var_0__;\nvar isArray = __var_1__;\nvar formatData = __var_2__;\n\n\n// MAIN //\n\n/**\n* Sets the first chart data.\n*\n* @private\n* @param {(Array|TypedArray)} x - data\n* @throws {TypeError} must be an array or typed array\n*/\nfunction setX( x ) {\n\t/* eslint-disable no-invalid-this */\n\tif (\n\t\t!isArray( x ) &&\n\t\t!isTypedArray( x )\n\t) {\n\t\tthrow new TypeError( 'invalid value. Must be an array or typed array. Value: `' + x + '`.' );\n\t}\n\tthis._x = formatData( x, this._xValue );\n}\n\n\n// EXPORTS //\nexport default setX;\n","import __var_0__ from '@stdlib/utils/copy';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns first chart data.\n*\n* @private\n* @returns {(Array|TypedArray)} first stem-and-leaf data\n*/\nfunction getX() {\n\t/* eslint-disable no-invalid-this */\n\treturn copy( this._x );\n}\n\n\n// EXPORTS //\nexport default getX;\n","import __var_0__ from '@stdlib/assert/is-typed-array';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from './format_data.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isTypedArray = __var_0__;\nvar isArray = __var_1__;\nvar formatData = __var_2__;\n\n\n// MAIN //\n\n/**\n* Sets the second chart data.\n*\n* @private\n* @param {(Array|TypedArray)} y - data\n* @throws {TypeError} must be an array or typed array\n*/\nfunction setY( y ) {\n\t/* eslint-disable no-invalid-this */\n\tif (\n\t\t!isArray( y ) &&\n\t\t!isTypedArray( y )\n\t) {\n\t\tthrow new TypeError( 'invalid value. Must be an array or typed array. Value: `' + y + '`.' );\n\t}\n\tthis._y = formatData( y, this._yValue );\n}\n\n\n// EXPORTS //\nexport default setY;\n","import __var_0__ from '@stdlib/utils/copy';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns second chart data.\n*\n* @private\n* @returns {(Array|TypedArray)} second stem-and-leaf data\n*/\nfunction getY() {\n\t/* eslint-disable no-invalid-this */\n\treturn copy( this._y );\n}\n\n\n// EXPORTS //\nexport default getY;\n","import __var_0__ from '@stdlib/math/base/special/floor';\nimport __var_1__ from '@stdlib/math/base/special/exp10';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\nvar exp10 = __var_1__;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort numeric array in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} a - b\n*\n* @example\n* var arr = [ 3, 1, 2, 5, 4 ];\n* var sorted = arr.sort( ascending );\n* // returns [ 1, 2, 3, 4, 5 ]\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Comparator function to sort object data array in ascending order.\n*\n* @private\n* @param {Object} a - first data object\n* @param {Object} b - second data object\n* @returns {number} a.val - b.val\n*\n* @example\n* var arr = [\n*    { 'val': 2, 'class': 'x' },\n*    { 'val': 3, 'class': 'y' },\n*    { 'val': 7, 'class': 'y' },\n*    { 'val': 2, 'class': 'x' },\n* ];\n* var sorted = arr.sort( ascending2 );\n* // returns [...]\n*/\nfunction ascending2( a, b ) {\n\treturn a.val - b.val;\n}\n\n/**\n* Generates a sequence of whitespace characters.\n*\n* @private\n* @param {integer} n - number of characters\n* @returns {string} sequence of whitespace characters\n*\n* @example\n* var str = spaces( 3 );\n* // returns '   '\n*/\nfunction spaces( n ) {\n\treturn new Array( n ).join( ' ' );\n}\n\n/**\n* Create string representation of stem-and-leaf plot for a single data vector.\n*\n* @private\n* @param {(Array|TypedArray)} x - input data\n* @param {PositiveInteger} interval - 10**leafDigits\n* @returns {string} chart representation\n*/\nfunction constructSingleDisplay( x, interval ) {\n\tvar stemWidth;\n\tvar leafWidth;\n\tvar lastStem;\n\tvar chrs;\n\tvar len;\n\tvar str;\n\tvar stm;\n\tvar lf;\n\tvar i;\n\tvar v;\n\tvar n;\n\n\tx.sort( ascending );\n\n\tlen = x.length;\n\tstm = new Array( len );\n\tlf = new Array( len );\n\tstemWidth = 0;\n\tleafWidth = 0;\n\n\tfor ( i = 0; i < len; i++ ) {\n\t\tstm[ i ] = floor( x[ i ] / interval );\n\t\tchrs = stm[ i ].toString().length;\n\t\tif ( chrs > stemWidth ) {\n\t\t\tstemWidth = chrs;\n\t\t}\n\t\tlf[ i ] = x[ i ] % interval;\n\t\tchrs = lf[ i ].toString().length;\n\t\tif ( chrs > leafWidth ) {\n\t\t\tleafWidth = chrs;\n\t\t}\n\t}\n\n\tstr = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\twhile ( lastStem < stm[ i ] ) {\n\t\t\tlastStem += 1;\n\t\t\tstr += '\\n';\n\t\t\tn = lastStem.toString().length - 1;\n\t\t\tstr += ' ' + lastStem + spaces( stemWidth - n );\n\t\t\tstr += ' | ';\n\t\t}\n\t\tif ( stm[ i ] !== lastStem ) {\n\t\t\tstr += '\\n';\n\t\t\tv = stm[ i ].toString();\n\t\t\tn = v.length - 1;\n\t\t\tstr += ' ' + v + spaces( stemWidth - n );\n\t\t\tstr += ' | ';\n\t\t}\n\t\tv = lf[ i ].toString();\n\t\tn = v.length;\n\t\tstr += v + spaces( leafWidth - n ) + ' ';\n\t\tlastStem = stm[ i ];\n\t}\n\treturn str;\n}\n\n/**\n* Create string representation of stem-and-leaf plot for two data vectors.\n*\n* @private\n* @param {(Array|TypedArray)} x - first input data\n* @param {(Array|TypedArray)} y - second input data\n* @param {PositiveInteger} interval - 10**leafDigits\n* @returns {string} chart representation\n*/\nfunction constructDoubleDisplay( x, y, interval ) {\n\tvar xLeafWidth;\n\tvar yLeafWidth;\n\tvar stemWidth;\n\tvar lastStem;\n\tvar nSpaces;\n\tvar lines;\n\tvar line;\n\tvar lmax;\n\tvar chrs;\n\tvar data;\n\tvar arr;\n\tvar lfs;\n\tvar len;\n\tvar stm;\n\tvar i;\n\tvar v;\n\tvar n;\n\n\tdata = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tv = {\n\t\t\t'val': x[ i ],\n\t\t\t'class': 'x'\n\t\t};\n\t\tdata.push( v );\n\t}\n\tfor ( i = 0; i < y.length; i++ ) {\n\t\tv = {\n\t\t\t'val': y[ i ],\n\t\t\t'class': 'y'\n\t\t};\n\t\tdata.push( v );\n\t}\n\tlen = data.length;\n\n\tdata.sort( ascending2 );\n\n\tstemWidth = 0;\n\txLeafWidth = 0;\n\tyLeafWidth = 0;\n\n\tstm = new Array( len );\n\tlfs = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tstm[ i ] = floor( data[ i ].val / interval );\n\t\tchrs = stm[ i ].toString().length;\n\t\tif ( chrs > stemWidth ) {\n\t\t\tstemWidth = chrs;\n\t\t}\n\t\tif ( data[i].class === 'x' ) {\n\t\t\tlfs[ i ] = data[ i ].val % interval;\n\t\t\tchrs = lfs[ i ].toString().length;\n\t\t\tif ( chrs > xLeafWidth ) {\n\t\t\t\txLeafWidth = chrs;\n\t\t\t}\n\t\t} else if ( data[i].class === 'y' ) {\n\t\t\tlfs[ i ] = data[ i ].val % interval;\n\t\t\tchrs = lfs[ i ].toString().length;\n\t\t\tif ( chrs > yLeafWidth ) {\n\t\t\t\tyLeafWidth = chrs;\n\t\t\t}\n\t\t}\n\t}\n\n\tlines = [];\n\tline = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\twhile ( lastStem < stm[ i ] ) {\n\t\t\tlines.push( line );\n\t\t\tlastStem += 1;\n\t\t\tn = lastStem.toString().length - 1;\n\t\t\tline = '& | ' + spaces( stemWidth - n ) + lastStem + ' | ';\n\t\t}\n\t\tif ( stm[ i ] !== lastStem ) {\n\t\t\tif ( line ) {\n\t\t\t\tlines.push( line );\n\t\t\t}\n\t\t\tv = stm[ i ].toString();\n\t\t\tn = v.length - 1;\n\t\t\tline = '& | ';\n\t\t\tline += spaces( stemWidth - n ) + v;\n\t\t\tline += ' | ';\n\t\t}\n\t\tv = lfs[ i ].toString();\n\t\tn = v.length;\n\t\tif ( data[i].class === 'x' ) {\n\t\t\tline = v + spaces( xLeafWidth - n ) + ' ' + line;\n\t\t} else if ( data[i].class === 'y' ) {\n\t\t\tline = line + v + spaces( xLeafWidth - n ) + ' ';\n\t\t}\n\t\tlastStem = stm[ i ];\n\t}\n\n\t// Align lines...\n\tlmax = 0;\n\tfor ( i = 0; i < lines.length; i++ ) {\n\t\tv = lines[ i ].indexOf( '|' );\n\t\tif ( v > lmax ) {\n\t\t\tlmax = v;\n\t\t}\n\t}\n\tfor ( i = 0; i < lines.length; i++ ) {\n\t\tarr = lines[ i ].split( '&', 2 );\n\t\tnSpaces = lmax - arr[ 0 ].length;\n\t\tarr[ 0 ] = spaces( nSpaces ) + arr[ 0 ];\n\t\tlines[ i ] = arr[ 0 ] + arr[ 1 ];\n\t}\n\n\treturn lines.join( '\\n' );\n}\n\n\n// MAIN //\n\n/**\n* Renders a chart.\n*\n* @private\n* @returns {string} rendered chart\n*/\nfunction render() {\n\t/* eslint-disable no-invalid-this */\n\tvar interval;\n\tvar digits;\n\tvar ret;\n\tvar x;\n\tvar y;\n\n\tx = this._x;\n\ty = this._y;\n\n\tdigits = this._leafDigits;\n\tinterval = exp10( digits );\n\n\tif ( x.length && y.length ) {\n\t\tret = constructDoubleDisplay( x, y, interval );\n\t} else if ( x.length && !y.length ) {\n\t\tret = constructSingleDisplay( x, interval );\n\t} else if ( y.length && !x.length ) {\n\t\tret = constructSingleDisplay( y, interval );\n\t}\n\n\tret += '\\n\\n';\n\tret += 'Legend: ';\n\tret += '\\n X | Y  => ' + interval + ' * X + Y\\n';\n\treturn ret;\n}\n\n\n// EXPORTS //\nexport default render;\n","import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from './x_value.js';\nimport __var_2__ from './y_value.js';\nimport __var_3__ from './format_data.js';\nimport __var_4__ from './validate.js';\nimport __var_5__ from './set_xvalue.js';\nimport __var_6__ from './get_xvalue.js';\nimport __var_7__ from './set_yvalue.js';\nimport __var_8__ from './get_yvalue.js';\nimport __var_9__ from './set_x.js';\nimport __var_10__ from './get_x.js';\nimport __var_11__ from './set_y.js';\nimport __var_12__ from './get_y.js';\nimport __var_13__ from './render.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar xValue = __var_1__;\nvar yValue = __var_2__;\nvar formatData = __var_3__;\nvar validate = __var_4__;\nvar setXValue = __var_5__;\nvar getXValue = __var_6__;\nvar setYValue = __var_7__;\nvar getYValue = __var_8__;\nvar setX = __var_9__;\nvar getX = __var_10__;\nvar setY = __var_11__;\nvar getY = __var_12__;\nvar render = __var_13__;\n\n\n// MAIN //\n\n/**\n* Creates a stem-and-leaf plot.\n*\n* @constructor\n* @param {Options} [options] - steam-and-leaf options\n* @param {(Array|TypedArray)} [options.x] - first input data\n* @param {(Array|TypedArray)} [options.y] - second input data\n* @param {Function} [options.xValue] - x-value accessor\n* @param {Function} [options.yValue] - y-value accessor\n* @param {PositiveInteger} [options.leafDigits=1] - number of digits to display as leafs\n* @returns {StemLeaf} chart instance\n*/\nfunction StemLeaf( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !(this instanceof StemLeaf) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new StemLeaf( options );\n\t\t}\n\t\treturn new StemLeaf();\n\t}\n\tif ( arguments.length ) {\n\t\topts = options;\n\t\terr = validate( opts );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\n\tdefineProperty( this, '_x', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': []\n\t});\n\tdefineProperty( this, '_xValue', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': xValue\n\t});\n\tdefineProperty( this, '_y', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': []\n\t});\n\tdefineProperty( this, '_yValue', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': yValue\n\t});\n\tdefineProperty( this, '_leafDigits', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': 1\n\t});\n\n\tif ( opts.xValue !== void 0 ) {\n\t\tthis._xValue = opts.xValue;\n\t}\n\tif ( opts.yValue !== void 0 ) {\n\t\tthis._yValue = opts.yValue;\n\t}\n\tif ( opts.x !== void 0 ) {\n\t\tthis._x = formatData( opts.x, this._yValue );\n\t}\n\tif ( opts.y !== void 0 ) {\n\t\tthis._y = formatData( opts.y, this._yValue );\n\t}\n\tif ( opts.leafDigits !== void 0 ) {\n\t\tthis._leafDigits = opts.leafDigits;\n\t}\n\treturn this;\n}\n\n/**\n* `x`-value accessor.\n*\n* @name xValue\n* @memberof StemLeaf.prototype\n* @type {Function}\n* @throws {TypeError} must be a function\n*\n* @example\n* function xValue( d ) {\n*     return d.y;\n* }\n* var chart = new StemLeaf();\n* chart.xValue = xValue;\n*\n* @example\n* function xValue( d ) {\n*     return d.y;\n* }\n* var chart = new StemLeaf({\n*     'xValue': xValue\n* });\n* var fcn = chart.xValue;\n* var bool = ( fcn === xValue );\n* // returns true\n*/\ndefineProperty( StemLeaf.prototype, 'xValue', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setXValue,\n\t'get': getXValue\n});\n\n/**\n* `y`-value accessor.\n*\n* @name yValue\n* @memberof StemLeaf.prototype\n* @type {Function}\n* @throws {TypeError} must be a function\n*\n* @example\n* function yValue( d ) {\n*     return d.y;\n* }\n* var chart = new StemLeaf();\n* chart.yValue = yValue;\n*\n* @example\n* function yValue( d ) {\n*     return d.y;\n* }\n* var chart = new StemLeaf({\n*     'yValue': yValue\n* });\n* var fcn = chart.yValue;\n* var bool = ( fcn === yValue );\n* // returns true\n*/\ndefineProperty( StemLeaf.prototype, 'yValue', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setYValue,\n\t'get': getYValue\n});\n\n/**\n* First stem-and-leaf data.\n*\n* @name x\n* @memberof StemLeaf.prototype\n* @type {(Array|TypedArray)}\n* @throws {TypeError} must be an array or typed array\n*\n* @example\n* var chart = new StemLeaf();\n* chart.x = [ 1.0, 0.0, 8.0, 2.0, 5.0 ];\n*\n* @example\n* var x = [ 1.0, 0.0, 9.0, 2.0, 5.0 ];\n* var chart = new StemLeaf({\n*     'x': x\n* });\n* var d = chart.x;\n* // returns [...]\n*/\ndefineProperty( StemLeaf.prototype, 'x', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setX,\n\t'get': getX\n});\n\n/**\n* Second stem-and-leaf data.\n*\n* @name y\n* @memberof StemLeaf.prototype\n* @type {(Array|TypedArray)}\n* @throws {TypeError} must be an array or typed array\n*\n* @example\n* var chart = new StemLeaf();\n* chart.y = [ 1.0, 0.0, 8.0, 2.0, 5.0 ];\n*\n* @example\n* var y = [ 1.0, 0.0, 9.0, 2.0, 5.0 ];\n* var chart = new StemLeaf({\n*     'y': y\n* });\n* var d = chart.y;\n* // returns [...]\n*/\ndefineProperty( StemLeaf.prototype, 'y', {\n\t'configurable': false,\n\t'enumerable': true,\n\t'set': setY,\n\t'get': getY\n});\n\n/**\n* Renders a stem-and-leaf plot.\n*\n* @memberof StemLeaf.prototype\n* @function render\n* @returns {string} rendered stem-and-leaf display\n*/\nStemLeaf.prototype.render = render;\n\n\n// EXPORTS //\nexport default StemLeaf;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Stem-and-Leaf Plot.\n*\n* @module @stdlib/plot/unicode/stemleaf\n*\n* @example\n* var StemLeaf = require( '@stdlib/plot/unicode/stemleaf' );\n*/\n\n// MODULES //\nvar StemLeaf = __var_0__;\n\n\n// EXPORTS //\nexport default StemLeaf;\n"]}