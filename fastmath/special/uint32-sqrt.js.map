{"version":3,"sources":["@stdlib/fastmath/special/uint32-sqrt/lib/sqrt.js","@stdlib/fastmath/special/uint32-sqrt/lib/index.js"],"names":["BIT","sqrt","x","root","bit","sum","y","sqrtUint32","__var_0__"],"mappings":"AAwBA,IAAIA,EAAM,WA2BV,SAASC,EAAMC,GACd,IAAIC,EACAC,EACAC,EACAC,EAQJ,IANAA,EAAIJ,IAAM,EAEVC,EAAO,EACPC,EAAMJ,EAGEI,EAAME,GACbF,KAAS,EAGV,KAAgB,IAARA,GACPC,EAAQF,EAAOC,IAAU,EACzBD,KAAU,EACLD,GAAKG,IACTH,GAAKG,EACLF,GAAQC,GAETA,KAAS,EAIV,OAAOD,IAAS,ECnCd,IAACI,EAAaC","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Set the second most significant bit: 00100000000000000000000000000000 => 1<<30 = 1073741824\nvar BIT = 1073741824 >>> 0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Returns an integer square root.\n*\n* @param {uinteger32} x - input value\n* @returns {uinteger32} integer square root\n*\n* @example\n* var v = sqrt( 9 >>> 0 );\n* // returns 3\n*\n* @example\n* var v = sqrt( 2 >>> 0 );\n* // returns 1\n*\n* @example\n* var v = sqrt( 3 >>> 0 );\n* // returns 1\n*\n* @example\n* var v = sqrt( 0 >>> 0 );\n* // returns 0\n*/\nfunction sqrt( x ) {\n\tvar root;\n\tvar bit;\n\tvar sum;\n\tvar y;\n\n\ty = x >>> 0; // asm type annotation\n\n\troot = 0 >>> 0; // asm type annotation\n\tbit = BIT;\n\n\t// `bit` should start as the highest power of `4` less than or equal to `x`:\n\twhile ( bit > y ) {\n\t\tbit >>>= 2;\n\t}\n\t// Perform a digit-by-digit/abacus computation...\n\twhile ( bit !== 0 ) {\n\t\tsum = ( root + bit ) >>> 0; // asm type annotation\n\t\troot >>>= 1;\n\t\tif ( x >= sum ) {\n\t\t\tx -= sum;\n\t\t\troot += bit;\n\t\t}\n\t\tbit >>>= 2;\n\t}\n\t// Note: `x` is the remainder\n\n\treturn root >>> 0; // asm type annotation\n}\n\n\n// EXPORTS //\nexport default sqrt;\n","import __var_0__ from './sqrt.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Integer square root.\n*\n* @module @stdlib/fastmath/special/uint32-sqrt\n*\n* @example\n* var sqrtUint32 = require( '@stdlib/fastmath/special/uint32-sqrt' );\n*\n* var v = sqrtUint32( 9 >>> 0 );\n* // returns 3\n*\n* v = sqrtUint32( 2 >>> 0 );\n* // returns 1\n*\n* v = sqrtUint32( 3 >>> 0 );\n* // returns 1\n*\n* v = sqrtUint32( 0 >>> 0 );\n* // returns 0\n*/\n\n// MODULES //\nvar sqrtUint32 = __var_0__;\n\n\n// EXPORTS //\nexport default sqrtUint32;\n"]}