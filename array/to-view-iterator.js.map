{"version":3,"sources":["@stdlib/array/to-view-iterator/lib/main.js","@stdlib/array/to-view-iterator/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isArrayLikeObject","__var_2__","isInteger","__var_3__","isPrimitive","iteratorSymbol","__var_4__","arrayview2iterator","src","thisArg","begin","nargs","iter","FLG","fcn","end","i","TypeError","arguments","length","next1","next2","finish","factory","done","value","call","iterator"],"mappings":"kPA0BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAoBC,EACpBC,EAAYC,EAAUC,YACtBC,EAAiBC,EA+BrB,SAASC,EAAoBC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMhB,EAAmBQ,GACxB,MAAM,IAAIS,UAAW,0EAA4ET,EAAM,MAGxG,GAAe,KADfG,EAAQO,UAAUC,QAEjBT,EAAQ,EACRK,EAAMP,EAAIW,YACJ,GAAe,IAAVR,EACNb,EAAYoB,UAAW,KAC3BR,EAAQ,EACRI,EAAMI,UAAW,IAEjBR,EAAQQ,UAAW,GAEpBH,EAAMP,EAAIW,YACJ,GAAe,IAAVR,EACNb,EAAYoB,UAAW,KAC3BR,EAAQ,EACRK,EAAMP,EAAIW,OACVL,EAAMI,UAAW,GACjBT,EAAUS,UAAW,IACVpB,EAAYoB,UAAW,KAClCR,EAAQQ,UAAW,GACnBH,EAAMP,EAAIW,OACVL,EAAMI,UAAW,KAEjBR,EAAQQ,UAAW,GACnBH,EAAMG,UAAW,QAEZ,CAIN,GAHAR,EAAQQ,UAAW,GACnBH,EAAMG,UAAW,IAEXpB,EADNgB,EAAMI,UAAW,IAEhB,MAAM,IAAID,UAAW,iEAAmEH,EAAM,MAE/FL,EAAUS,UAAW,GAEtB,IAAMhB,EAAWQ,GAChB,MAAM,IAAIO,UAAW,gHAAkHP,EAAQ,MAEhJ,IAAMR,EAAWa,GAChB,MAAM,IAAIE,UAAW,6GAA+GF,EAAM,MA+B3I,OA7BKA,EAAM,GACVA,EAAMP,EAAIW,OAASJ,GACR,IACVA,EAAM,GAEIA,EAAMP,EAAIW,SACrBJ,EAAMP,EAAIW,QAENT,EAAQ,IACZA,EAAQF,EAAIW,OAAST,GACR,IACZA,EAAQ,GAGVM,EAAIN,EAAQ,EAKXd,EAFDgB,EAAO,GAEa,OADfE,EACuBM,EAEAC,GAE5BzB,EAAagB,EAAM,SAAUU,GAGxBjB,GACJT,EAAagB,EAAMP,EAAgBkB,GAE7BX,EAQP,SAASQ,IAER,OADAJ,GAAK,EACAH,GAAOG,GAAKD,EACT,CACNS,MAAQ,GAGH,CACNC,MAASX,EAAIY,KAAMjB,EAASD,EAAKQ,GAAKA,EAAGA,EAAEN,EAAOF,GAClDgB,MAAQ,GAUV,SAASH,IAER,OADAL,GAAK,EACAH,GAAOG,GAAKD,EACT,CACNS,MAAQ,GAGH,CACNC,MAASjB,EAAKQ,GACdQ,MAAQ,GAWV,SAASF,EAAQG,GAEhB,OADAZ,GAAM,EACDK,UAAUC,OACP,CACNM,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAKT,EACGP,EAAoBC,EAAKE,EAAOK,EAAKD,EAAKL,GAE3CF,EAAoBC,EAAKE,EAAOK,IC3KtC,IAACY,EAAW9B","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-array-like-object';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isArrayLikeObject = __var_2__;\nvar isInteger = __var_3__.isPrimitive;\nvar iteratorSymbol = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each element in an array-like object view.\n*\n* @param {ArrayLikeObject} src - input value\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end=src.length] - ending index (non-inclusive)\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be either an integer (starting index) or a function\n* @throws {TypeError} third argument must be either an integer (ending index) or a function\n* @throws {TypeError} fourth argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );\n*\n* var v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction arrayview2iterator( src ) {\n\tvar thisArg;\n\tvar begin;\n\tvar nargs;\n\tvar iter;\n\tvar FLG;\n\tvar fcn;\n\tvar end;\n\tvar i;\n\tif ( !isArrayLikeObject( src ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tbegin = 0;\n\t\tend = src.length;\n\t} else if ( nargs === 2 ) {\n\t\tif ( isFunction( arguments[ 1 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tfcn = arguments[ 1 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 1 ];\n\t\t}\n\t\tend = src.length;\n\t} else if ( nargs === 3 ) {\n\t\tif ( isFunction( arguments[ 1 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tend = src.length;\n\t\t\tfcn = arguments[ 1 ];\n\t\t\tthisArg = arguments[ 2 ];\n\t\t} else if ( isFunction( arguments[ 2 ] ) ) {\n\t\t\tbegin = arguments[ 1 ];\n\t\t\tend = src.length;\n\t\t\tfcn = arguments[ 2 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 1 ];\n\t\t\tend = arguments[ 2 ];\n\t\t}\n\t} else { // nargs >= 4\n\t\tbegin = arguments[ 1 ];\n\t\tend = arguments[ 2 ];\n\t\tfcn = arguments[ 3 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a function. Value: `' + fcn + '`.' );\n\t\t}\n\t\tthisArg = arguments[ 4 ];\n\t}\n\tif ( !isInteger( begin ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be either an integer (starting index) or a callback function. Value: `' + begin + '`.' );\n\t}\n\tif ( !isInteger( end ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be either an integer (ending index) or a callback function. Value: `' + end + '`.' );\n\t}\n\tif ( end < 0 ) {\n\t\tend = src.length + end;\n\t\tif ( end < 0 ) {\n\t\t\tend = 0;\n\t\t}\n\t} else if ( end > src.length ) {\n\t\tend = src.length;\n\t}\n\tif ( begin < 0 ) {\n\t\tbegin = src.length + begin;\n\t\tif ( begin < 0 ) {\n\t\t\tbegin = 0;\n\t\t}\n\t}\n\ti = begin - 1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tif ( fcn ) {\n\t\tsetReadOnly( iter, 'next', next1 );\n\t} else {\n\t\tsetReadOnly( iter, 'next', next2 );\n\t}\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\ti += 1;\n\t\tif ( FLG || i >= end ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': fcn.call( thisArg, src[ i ], i, i-begin, src ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\ti += 1;\n\t\tif ( FLG || i >= end ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': src[ i ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tif ( fcn ) {\n\t\t\treturn arrayview2iterator( src, begin, end, fcn, thisArg );\n\t\t}\n\t\treturn arrayview2iterator( src, begin, end );\n\t}\n}\n\n\n// EXPORTS //\nexport default arrayview2iterator;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator from an array-like object view.\n*\n* @module @stdlib/array/to-view-iterator\n*\n* @example\n* var arrayview2iterator = require( '@stdlib/array/to-view-iterator' );\n*\n* var iter = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );\n*\n* var v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}