{"version":3,"sources":["@stdlib/array/complex128/lib/from_iterator.js","@stdlib/array/complex128/lib/from_iterator_map.js","@stdlib/array/complex128/lib/from_array.js","@stdlib/array/complex128/lib/main.js","@stdlib/array/complex128/lib/index.js"],"names":["isArrayLikeObject","__var_0__","isComplexLike","__var_1__","real","__var_2__","imag","__var_3__","fromIterator","it","out","v","next","value","push","TypeError","done","fromIteratorMap","clbk","thisArg","i","call","fromArray","buf","arr","len","j","length","isNonNegativeInteger","isPrimitive","isCollection","isArrayBuffer","isObject","__var_4__","isArray","__var_5__","isFunction","__var_6__","__var_7__","isEven","__var_8__","isInteger","__var_9__","hasIteratorSymbolSupport","__var_10__","ITERATOR_SYMBOL","__var_11__","defineProperty","__var_12__","Float64Array","__var_13__","Complex128","__var_14__","__var_15__","__var_16__","__var_17__","__var_18__","__var_19__","BYTES_PER_ELEMENT","HAS_ITERATOR_SYMBOL","isComplexArray","Complex128Array","constructor","name","_length","_buffer","isComplexArrayConstructor","byteOffset","nargs","arguments","this","RangeError","byteLength","Error","configurable","enumerable","writable","src","tmp","flg","args","prototype","get","buffer","idx","dbuf","N"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-array-like-object';\nimport __var_1__ from '@stdlib/assert/is-complex-like';\nimport __var_2__ from '@stdlib/complex/real';\nimport __var_3__ from '@stdlib/complex/imag';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLikeObject = __var_0__;\nvar isComplexLike = __var_1__;\nvar real = __var_2__;\nvar imag = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.value ) {\n\t\t\tif ( isArrayLikeObject( v.value ) ) {\n\t\t\t\tout.push( v.value[0], v.value[1] );\n\t\t\t} else if ( isComplexLike( v.value ) ) {\n\t\t\t\tout.push( real( v.value ), imag( v.value ) );\n\t\t\t} else {\n\t\t\t\treturn new TypeError( 'invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `'+v.value+'`.' );\n\t\t\t}\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default fromIterator;\n","import __var_0__ from '@stdlib/assert/is-array-like-object';\nimport __var_1__ from '@stdlib/assert/is-complex-like';\nimport __var_2__ from '@stdlib/complex/real';\nimport __var_3__ from '@stdlib/complex/imag';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLikeObject = __var_0__;\nvar isComplexLike = __var_1__;\nvar real = __var_2__;\nvar imag = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = 0;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\ti += 1;\n\t\tif ( v.value ) {\n\t\t\tv = clbk.call( thisArg, v.value, i );\n\t\t\tif ( isArrayLikeObject( v ) ) {\n\t\t\t\tout.push( v[ 0 ], v[ 1 ] );\n\t\t\t} else if ( isComplexLike( v ) ) {\n\t\t\t\tout.push( real( v ), imag( v ) );\n\t\t\t} else {\n\t\t\t\treturn new TypeError( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `'+v+'`.' );\n\t\t\t}\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default fromIteratorMap;\n","import __var_0__ from '@stdlib/assert/is-complex-like';\nimport __var_1__ from '@stdlib/complex/real';\nimport __var_2__ from '@stdlib/complex/imag';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isComplexLike = __var_0__;\nvar real = __var_1__;\nvar imag = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a strided array of real and imaginary components.\n*\n* @private\n* @param {Float64Array} buf - output array\n* @param {Array} arr - array containing complex numbers\n* @returns {(Float64Array|null)} output array or null\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tlen = arr.length;\n\tj = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( !isComplexLike( v ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf[ j ] = real( v );\n\t\tbuf[ j+1 ] = imag( v );\n\t\tj += 2; // stride\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\nexport default fromArray;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-collection';\nimport __var_3__ from '@stdlib/assert/is-arraybuffer';\nimport __var_4__ from '@stdlib/assert/is-object';\nimport __var_5__ from '@stdlib/assert/is-array';\nimport __var_6__ from '@stdlib/assert/is-function';\nimport __var_7__ from '@stdlib/assert/is-complex-like';\nimport __var_8__ from '@stdlib/math/base/assert/is-even';\nimport __var_9__ from '@stdlib/math/base/assert/is-integer';\nimport __var_10__ from '@stdlib/assert/has-iterator-symbol-support';\nimport __var_11__ from '@stdlib/symbol/iterator';\nimport __var_12__ from '@stdlib/utils/define-property';\nimport __var_13__ from '@stdlib/array/float64';\nimport __var_14__ from '@stdlib/complex/float64';\nimport __var_15__ from '@stdlib/complex/real';\nimport __var_16__ from '@stdlib/complex/imag';\nimport __var_17__ from './from_iterator.js';\nimport __var_18__ from './from_iterator_map.js';\nimport __var_19__ from './from_array.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isArrayLikeObject = __var_1__;\nvar isCollection = __var_2__;\nvar isArrayBuffer = __var_3__;\nvar isObject = __var_4__;\nvar isArray = __var_5__;\nvar isFunction = __var_6__;\nvar isComplexLike = __var_7__;\nvar isEven = __var_8__;\nvar isInteger = __var_9__;\nvar hasIteratorSymbolSupport = __var_10__;\nvar ITERATOR_SYMBOL = __var_11__;\nvar defineProperty = __var_12__;\nvar Float64Array = __var_13__;\nvar Complex128 = __var_14__;\nvar real = __var_15__;\nvar imag = __var_16__;\nvar fromIterator = __var_17__;\nvar fromIteratorMap = __var_18__;\nvar fromArray = __var_19__;\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Float64Array.BYTES_PER_ELEMENT * 2;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a complex typed array.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array\n*/\nfunction isComplexArray( value ) {\n\treturn (\n\t\tvalue instanceof Complex128Array ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\t(\n\t\t\t\tvalue.constructor.name === 'Complex64Array' ||\n\t\t\t\tvalue.constructor.name === 'Complex128Array'\n\t\t\t) &&\n\t\t\ttypeof value._length === 'number' && // eslint-disable-line no-underscore-dangle\n\n\t\t\t// NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...\n\t\t\ttypeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle\n\t\t)\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a complex typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array constructor\n*/\nfunction isComplexArrayConstructor( value ) {\n\treturn (\n\t\tvalue === Complex128Array ||\n\n\t\t// NOTE: weaker test in order to avoid a circular dependency with Complex64Array...\n\t\tvalue.name === 'Complex64Array'\n\t);\n}\n\n\n// MAIN //\n\n/**\n* 128-bit complex number array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, or buffer\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {RangeError} ArrayBuffer byte length must be a multiple of `16`\n* @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} byte offset must be a multiple of `16`\n* @throws {TypeError} view length must be a positive multiple of `16`\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} complex number array\n*\n* @example\n* var arr = new Complex128Array();\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Complex128Array( 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Complex128Array( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf, 16 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Complex128Array( buf, 16, 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Complex128Array() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof Complex128Array) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Complex128Array();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Complex128Array( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Complex128Array( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Complex128Array( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Float64Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\tif ( isNonNegativeInteger( arguments[0] ) ) {\n\t\t\tbuf = new Float64Array( arguments[0]*2 );\n\t\t} else if ( isCollection( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tlen = buf.length;\n\n\t\t\t// If provided a \"generic\" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to \"normal\" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...\n\t\t\tif ( len && isArray( buf ) && isComplexLike( buf[0] ) ) {\n\t\t\t\tbuf = fromArray( new Float64Array( len*2 ), buf );\n\t\t\t\tif ( buf === null ) {\n\t\t\t\t\t// We failed and we are now forced to allocate a new array :-(\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. Array-like object input arguments must have a length which is a multiple of two. Length: `'+len+'`.' );\n\t\t\t\t\t}\n\t\t\t\t\t// We failed, so fall back to directly setting values...\n\t\t\t\t\tbuf = new Float64Array( arguments[0] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Array-like object and typed array input arguments must have a length which is a multiple of two. Length: `'+len+'`.' );\n\t\t\t\t}\n\t\t\t\tbuf = new Float64Array( buf );\n\t\t\t}\n\t\t} else if ( isArrayBuffer( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( !isInteger( buf.byteLength/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. ArrayBuffer byte length must be a multiple of '+BYTES_PER_ELEMENT+'. Byte length: `'+buf.byteLength+'`.' );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else if ( isObject( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `'+buf+'`.' );\n\t\t\t}\n\t\t\tif ( !isFunction( buf[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `'+buf+'`.' );\n\t\t\t}\n\t\t\tbuf = buf[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable.' );\n\t\t\t}\n\t\t\tbuf = fromIterator( buf );\n\t\t\tif ( buf instanceof Error ) {\n\t\t\t\tthrow buf;\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `'+arguments[0]+'`.' );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array buffer. Value: `'+buf+'`.' );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Byte offset must be a nonnegative integer. Value: `'+byteOffset+'`.' );\n\t\t}\n\t\tif ( !isInteger( byteOffset/BYTES_PER_ELEMENT ) ) {\n\t\t\tthrow new RangeError( 'invalid argument. Byte offset must be a multiple of '+BYTES_PER_ELEMENT+'. Value: `'+byteOffset+'`.' );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t\tif ( !isInteger( len/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. ArrayBuffer view byte length must be a multiple of '+BYTES_PER_ELEMENT+'. View byte length: `'+len+'`.' );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Length must be a nonnegative integer. Value: `'+len+'`.' );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `'+(len*BYTES_PER_ELEMENT)+'`.' );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset, len*2 );\n\t\t}\n\t}\n\tdefineProperty( this, '_buffer', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': buf\n\t});\n\tdefineProperty( this, '_length', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': buf.length / 2\n\t});\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var nbytes = Complex128Array.BYTES_PER_ELEMENT;\n* // returns 16\n*/\ndefineProperty( Complex128Array, 'BYTES_PER_ELEMENT', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': BYTES_PER_ELEMENT\n});\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Complex128Array\n* @type {string}\n* @default 'Complex128Array'\n*\n* @example\n* var name = Complex128Array.name;\n* // returns 'Complex128Array'\n*/\ndefineProperty( Complex128Array, 'name', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': 'Complex128Array'\n});\n\n/**\n* Creates a new 128-bit complex number array from an array-like object or an iterable.\n*\n* @name from\n* @memberof Complex128Array\n* @type {Function}\n* @param {(ArrayLikeObject|Object)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.from( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* function clbk( v ) {\n*     return new Complex128( real(v)*2.0, imag(v)*2.0 );\n* }\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ], clbk );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*/\ndefineProperty( Complex128Array, 'from', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': function from( src ) {\n\t\tvar thisArg;\n\t\tvar nargs;\n\t\tvar clbk;\n\t\tvar out;\n\t\tvar buf;\n\t\tvar tmp;\n\t\tvar len;\n\t\tvar flg;\n\t\tvar v;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( !isFunction( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t\t}\n\t\tif ( !isComplexArrayConstructor( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t\t}\n\t\tnargs = arguments.length;\n\t\tif ( nargs > 1 ) {\n\t\t\tclbk = arguments[ 1 ];\n\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a function. Value: `'+clbk+'`.' );\n\t\t\t}\n\t\t\tif ( nargs > 2 ) {\n\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t\tif ( isCollection( src ) ) {\n\t\t\tif ( clbk ) {\n\t\t\t\t// Note: array contents affect how we iterate over a provided data source. If only complex numbers, we can extract real and imaginary components. Otherwise, we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.\n\n\t\t\t\t// Detect whether we've been provided an array of complex numbers...\n\t\t\t\tlen = src.length;\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( !isComplexLike( src[ i ] ) ) {\n\t\t\t\t\t\tflg = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\t\t\tif ( flg ) {\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. First argument must have a length which is a multiple of two. Length: `'+len+'`.' );\n\t\t\t\t\t}\n\t\t\t\t\tout = new this( len/2 );\n\t\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\t\tbuf[ i ] = clbk.call( thisArg, src[ i ], i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\t\t\telse {\n\t\t\t\t\tout = new this( len );\n\t\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\t\tj = 0;\n\t\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\t\tv = clbk.call( thisArg, src[ i ], i );\n\t\t\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\t\t\tbuf[ j ] = real( v );\n\t\t\t\t\t\t\tbuf[ j+1 ] = imag( v );\n\t\t\t\t\t\t} else if ( isArrayLikeObject( v ) ) {\n\t\t\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new TypeError( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `'+v+'`.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj += 2; // stride\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tout = new this( src );\n\t\t\t}\n\t\t} else if ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object or an iterable.' );\n\t\t\t}\n\t\t\tif ( clbk ) {\n\t\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t\t} else {\n\t\t\t\ttmp = fromIterator( buf );\n\t\t\t}\n\t\t\tif ( tmp instanceof Error ) {\n\t\t\t\tthrow tmp;\n\t\t\t}\n\t\t\tlen = tmp.length / 2;\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tbuf[ i ] = tmp[ i ];\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object or an iterable. Value: `'+src+'`.' );\n\t\t}\n\t\treturn out;\n\t}\n});\n\n/**\n* Creates a new 128-bit complex number array from a variable number of arguments.\n*\n* @name of\n* @memberof Complex128Array\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\ndefineProperty( Complex128Array, 'of', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': function of() {\n\t\tvar args;\n\t\tvar i;\n\t\tif ( !isFunction( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t\t}\n\t\tif ( !isComplexArrayConstructor( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t\t}\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn new this( args );\n\t}\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof Complex128Array.prototype\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\ndefineProperty( Complex128Array.prototype, 'buffer', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'get': function get() {\n\t\treturn this._buffer.buffer;\n\t}\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof Complex128Array.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 160\n*/\ndefineProperty( Complex128Array.prototype, 'byteLength', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'get': function get() {\n\t\treturn this._buffer.byteLength;\n\t}\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof Complex128Array.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\ndefineProperty( Complex128Array.prototype, 'byteOffset', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'get': function get() {\n\t\treturn this._buffer.byteOffset;\n\t}\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array.prototype\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 16\n*/\ndefineProperty( Complex128Array.prototype, 'BYTES_PER_ELEMENT', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': Complex128Array.BYTES_PER_ELEMENT\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ArrayLikeObject} [out] - output array\n* @param {NonNegativeInteger} i - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {TypeError} output argument must be an array-like object\n* @returns {(Complex128|ArrayLikeObject|void)} array element\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( [ 0.0, 0.0 ], 0 );\n* // returns [ 1.0, -1.0 ]\n*\n* z = arr.get( 100 );\n* // returns undefined\n*/\ndefineProperty( Complex128Array.prototype, 'get', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': function get( i ) {\n\t\tvar idx;\n\t\tvar out;\n\t\tvar buf;\n\n\t\tif ( !isComplexArray( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t\t}\n\t\tbuf = this._buffer;\n\t\tif ( arguments.length > 1 ) {\n\t\t\tidx = arguments[ 1 ];\n\t\t\tout = i;\n\t\t\tif ( !isArrayLikeObject( out ) || out.length < 2 ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Output argument must be an array-like object. Value: `'+out+'`.' );\n\t\t\t}\n\t\t} else {\n\t\t\tidx = i;\n\t\t}\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Index argument must be a nonnegative integer. Value: `'+idx+'`.' );\n\t\t}\n\t\tif ( idx >= this._length ) {\n\t\t\treturn;\n\t\t}\n\t\tidx *= 2;\n\t\tif ( out ) {\n\t\t\tout[ 0 ] = buf[ idx ];\n\t\t\tout[ 1 ] = buf[ idx+1 ];\n\t\t\treturn out;\n\t\t}\n\t\treturn new Complex128( buf[ idx ], buf[ idx+1 ] );\n\t}\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof Complex128Array.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\ndefineProperty( Complex128Array.prototype, 'length', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'get': function get() {\n\t\treturn this._length;\n\t}\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values as intended.\n*\n*\n* @name set\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {(ArrayLikeObject|Complex|ComplexArray)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*/\ndefineProperty( Complex128Array.prototype, 'set', {\n\t'configurable': false,\n\t'enumerable': false,\n\t'writable': false,\n\t'value': function set( value ) {\n\t\t/* eslint-disable no-underscore-dangle */\n\t\tvar dbuf;\n\t\tvar idx;\n\t\tvar buf;\n\t\tvar tmp;\n\t\tvar flg;\n\t\tvar N;\n\t\tvar v;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( !isComplexArray( this ) ) {\n\t\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t\t}\n\t\tbuf = this._buffer;\n\t\tif ( arguments.length > 1 ) {\n\t\t\tidx = arguments[ 1 ];\n\t\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Index argument must be a nonnegative integer. Value: `'+idx+'`.' );\n\t\t\t}\n\t\t} else {\n\t\t\tidx = 0;\n\t\t}\n\t\tif ( isComplexLike( value ) ) {\n\t\t\tif ( idx >= this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Index argument is out-of-bounds. Value: `'+idx+'`.' );\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tbuf[ idx ] = real( value );\n\t\t\tbuf[ idx+1 ] = imag( value );\n\t\t\treturn;\n\t\t}\n\t\tif ( isComplexArray( value ) ) {\n\t\t\tN = value._length;\n\t\t\tif ( idx+N > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tdbuf = value._buffer;\n\n\t\t\t// Check for overlapping memory...\n\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\tif (\n\t\t\t\tdbuf.buffer === buf.buffer &&\n\t\t\t\t(\n\t\t\t\t\tdbuf.byteOffset < j &&\n\t\t\t\t\tdbuf.byteOffset+dbuf.byteLength > j\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// We need to copy source values...\n\t\t\t\ttmp = new Float64Array( dbuf.length );\n\t\t\t\tfor ( i = 0; i < dbuf.length; i++ ) {\n\t\t\t\t\ttmp[ i ] = dbuf[ i ];\n\t\t\t\t}\n\t\t\t\tdbuf = tmp;\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tbuf[ idx ] = dbuf[ j ];\n\t\t\t\tbuf[ idx+1 ] = dbuf[ j+1 ];\n\t\t\t\tidx += 2; // stride\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif ( isArrayLikeObject( value ) ) {\n\t\t\t// Detect whether we've been provided an array of complex numbers...\n\t\t\tN = value.length;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tif ( !isComplexLike( value[ i ] ) ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\t\tif ( flg ) {\n\t\t\t\tif ( !isEven( N ) ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `'+N+'`.' );\n\t\t\t\t}\n\t\t\t\tif ( idx+(N/2) > this._length ) {\n\t\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t\t}\n\t\t\t\tdbuf = value;\n\n\t\t\t\t// Check for overlapping memory...\n\t\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\t\tif (\n\t\t\t\t\tdbuf.buffer === buf.buffer &&\n\t\t\t\t\t(\n\t\t\t\t\t\tdbuf.byteOffset < j &&\n\t\t\t\t\t\tdbuf.byteOffset+dbuf.byteLength > j\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// We need to copy source values...\n\t\t\t\t\ttmp = new Float64Array( N );\n\t\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\t\ttmp[ i ] = dbuf[ i ];\n\t\t\t\t\t}\n\t\t\t\t\tdbuf = tmp;\n\t\t\t\t}\n\t\t\t\tidx *= 2;\n\t\t\t\tN /= 2;\n\t\t\t\tj = 0;\n\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\tbuf[ idx ] = dbuf[ j ];\n\t\t\t\t\tbuf[ idx+1 ] = dbuf[ j+1 ];\n\t\t\t\t\tidx += 2; // stride\n\t\t\t\t\tj += 2; // stride\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\t\tif ( idx+N > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tv = value[ i ];\n\t\t\t\tbuf[ idx ] = real( v );\n\t\t\t\tbuf[ idx+1 ] = imag( v );\n\t\t\t\tidx += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthrow new TypeError( 'invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `'+value+'`.' );\n\n\t\t/* eslint-enable no-underscore-dangle */\n\t}\n});\n\n\n// EXPORTS //\nexport default Complex128Array;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* 128-bit complex number array.\n*\n* @module @stdlib/array/complex128\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var arr = new Complex128Array();\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var arr = new Complex128Array( 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var arr = new Complex128Array( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf, 16 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Complex128Array( buf, 16, 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\n\n// MODULES //\nvar Complex128Array = __var_0__;\n\n\n// EXPORTS //\nexport default Complex128Array;\n"]}