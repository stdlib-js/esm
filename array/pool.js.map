{"version":3,"sources":["@stdlib/array/pool/lib/validate.js","@stdlib/array/pool/lib/pool.js","@stdlib/array/pool/lib/factory.js","@stdlib/array/pool/lib/main.js","@stdlib/array/pool/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isNonNegativeInteger","__var_2__","isPrimitive","validate","opts","options","highWaterMark","TypeError","pool","n","out","i","push","isString","isCollection","isTypedArrayLike","__var_3__","isArrayBuffer","__var_4__","setReadOnly","__var_5__","setReadOnlyAccessor","__var_6__","ctors","__var_7__","copy","__var_8__","ArrayBuffer","__var_9__","ceil","__var_10__","floor","__var_11__","ceil2","__var_12__","log2","__var_13__","min","__var_14__","defaults","__var_15__","__var_16__","createPool","__var_17__","BYTES_PER_ELEMENT","__var_18__","factory","nbytes","err","arguments","length","malloc","calloc","free","clear","getBytes","arraybuffer","buf","pop","typedarray","ctor","len","dtype","nargs","arr","p","buffer","byteLength","typedarraypool"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isNonNegativeInteger = __var_2__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'highWaterMark': 1024\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegativeInteger( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative integer. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initializes a cache for pooled typed array buffers.\n*\n* @private\n* @param {NonNegativeInteger} n - base-2 logarithm of the maximum typed array size\n* @returns {ArrayArray} initialized cache\n*/\nfunction pool( n ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < n+1; i++ ) {\n\t\tout.push( [] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default pool;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-collection';\nimport __var_3__ from '@stdlib/assert/is-typed-array-like';\nimport __var_4__ from '@stdlib/assert/is-arraybuffer';\nimport __var_5__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_6__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_7__ from '@stdlib/array/typed-ctors';\nimport __var_8__ from '@stdlib/utils/copy';\nimport __var_9__ from '@stdlib/array/buffer';\nimport __var_10__ from '@stdlib/math/base/special/ceil';\nimport __var_11__ from '@stdlib/math/base/special/floor';\nimport __var_12__ from '@stdlib/math/base/special/ceil2';\nimport __var_13__ from '@stdlib/math/base/special/log2';\nimport __var_14__ from '@stdlib/math/base/special/min';\nimport __var_15__ from './defaults.json';\nimport __var_16__ from './validate.js';\nimport __var_17__ from './pool.js';\nimport __var_18__ from './bytes_per_element.json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isCollection = __var_2__;\nvar isTypedArrayLike = __var_3__;\nvar isArrayBuffer = __var_4__;\nvar setReadOnly = __var_5__;\nvar setReadOnlyAccessor = __var_6__;\nvar ctors = __var_7__;\nvar copy = __var_8__;\nvar ArrayBuffer = __var_9__;\nvar ceil = __var_10__;\nvar floor = __var_11__;\nvar ceil2 = __var_12__;\nvar log2 = __var_13__;\nvar min = __var_14__;\nvar defaults = __var_15__;\nvar validate = __var_16__;\nvar createPool = __var_17__;\nvar BYTES_PER_ELEMENT = __var_18__;\n\n\n// MAIN //\n\n/**\n* Creates a typed array pool.\n*\n* @param {Options} [options] - pool options\n* @param {NonNegativeInteger} [options.highWaterMark] - maximum total memory which can be allocated\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} allocator\n*\n* @example\n* var typedarraypool = factory();\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nfunction factory( options ) {\n\tvar nbytes;\n\tvar pool;\n\tvar opts;\n\tvar err;\n\n\topts = copy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tpool = createPool( ceil( log2( opts.highWaterMark ) ) );\n\tnbytes = 0;\n\n\tsetReadOnly( malloc, 'malloc', malloc ); // circular reference\n\tsetReadOnly( malloc, 'calloc', calloc );\n\tsetReadOnly( malloc, 'free', free );\n\tsetReadOnly( malloc, 'clear', clear );\n\tsetReadOnly( malloc, 'highWaterMark', opts.highWaterMark );\n\tsetReadOnlyAccessor( malloc, 'nbytes', getBytes );\n\n\treturn malloc;\n\n\t/**\n\t* Returns the number of allocated bytes.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} number of allocated bytes\n\t*/\n\tfunction getBytes() {\n\t\treturn nbytes;\n\t}\n\n\t/**\n\t* Returns an array buffer.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} n - number of bytes\n\t* @returns {(ArrayBuffer|null)} array buffer or null\n\t*/\n\tfunction arraybuffer( n ) {\n\t\tvar buf;\n\t\tvar i;\n\n\t\t// Convert the number of bytes to an index in our pool table:\n\t\ti = log2( n );\n\n\t\t// If we already have an available array buffer, use it...\n\t\tif ( i < pool.length && pool[ i ].length ) {\n\t\t\treturn pool[ i ].pop();\n\t\t}\n\t\t// Before allocating a new array buffer, ensure that we have not exceeded the maximum number of bytes we are allowed to allocate...\n\t\tif ( nbytes+n > opts.highWaterMark ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf = new ArrayBuffer( n );\n\n\t\t// Update the running counter of allocated bytes:\n\t\tnbytes += n;\n\n\t\treturn buf;\n\t}\n\n\t/**\n\t* Returns a typed array.\n\t*\n\t* @private\n\t* @param {Function} ctor - typed array constructor\n\t* @param {NonNegativeInteger} len - view length\n\t* @param {string} dtype - data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction typedarray( ctor, len, dtype ) {\n\t\tvar buf;\n\t\tif ( len === 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\tbuf = arraybuffer( ceil2( len )*BYTES_PER_ELEMENT[ dtype ] );\n\t\tif ( buf === null ) {\n\t\t\treturn buf;\n\t\t}\n\t\treturn new ctor( buf, 0, len );\n\t}\n\n\t/**\n\t* Returns an uninitialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   Memory is **not** initialized.\n\t* -   Memory is lazily allocated.\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {(NonNegativeInteger|Collection)} [arg] - an array length or an array-like object\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length or an array-like object\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction malloc() {\n\t\tvar nargs;\n\t\tvar dtype;\n\t\tvar ctor;\n\t\tvar len;\n\t\tvar arr;\n\t\tvar out;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs && isString( arguments[ nargs-1 ] ) ) {\n\t\t\tnargs -= 1;\n\t\t\tdtype = arguments[ nargs ];\n\t\t} else {\n\t\t\tdtype = 'float64';\n\t\t}\n\t\tctor = ctors( dtype );\n\t\tif ( ctor === null ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a recognized data type. Value: `'+dtype+'`.' );\n\t\t}\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn new ctor( 0 );\n\t\t}\n\t\t// Check if provided a typed array length...\n\t\tif ( isNonNegativeInteger( arguments[ 0 ] ) ) {\n\t\t\treturn typedarray( ctor, arguments[ 0 ], dtype );\n\t\t}\n\t\t// Check if provided an array-like object containing data elements...\n\t\tif ( isCollection( arguments[ 0 ] ) ) {\n\t\t\tarr = arguments[ 0 ];\n\t\t\tlen = arr.length;\n\t\t\tout = typedarray( ctor, len, dtype );\n\t\t\tif ( out === null ) {\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tout[ i ] = arr[ i ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( 'invalid argument. First argument must be either an array length or an array-like object. Value: `'+arguments[ 0 ]+'`.' );\n\t}\n\n\t/**\n\t* Returns a zero-initialized typed array.\n\t*\n\t* ## Notes\n\t*\n\t* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} [len=0] - array length\n\t* @param {string} [dtype=\"float64\"] - data type\n\t* @throws {TypeError} must provide a valid array length\n\t* @throws {TypeError} must provide a recognized data type\n\t* @returns {(TypedArray|null)} typed array or null\n\t*/\n\tfunction calloc() {\n\t\tvar nargs;\n\t\tvar out;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs === 0 ) {\n\t\t\tout = malloc();\n\t\t} else if ( nargs === 1 ) {\n\t\t\tout = malloc( arguments[ 0 ] );\n\t\t} else {\n\t\t\tout = malloc( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( out !== null ) {\n\t\t\t// Initialize the memory...\n\t\t\tfor ( i = 0; i < out.length; i++ ) {\n\t\t\t\tout[ i ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Frees a typed array or typed array buffer.\n\t*\n\t* ## Notes\n\t*\n\t* -   Implicitly, we support providing non-internally allocated arrays and array buffer (e.g., \"freeing\" a typed array allocated in userland); however, the freed array buffer is likely to have excess capacity when compared to other members in its pool.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayBuffer)} buf - typed array or array buffer to free\n\t* @throws {TypeError} must provide a typed array or typed array buffer\n\t* @returns {boolean} boolean indicating whether the typed array or array buffer was successfully freed\n\t*/\n\tfunction free( buf ) {\n\t\tvar n;\n\t\tvar p;\n\t\tvar i;\n\t\tif ( isTypedArrayLike( buf ) && buf.buffer ) {\n\t\t\tbuf = buf.buffer;\n\t\t} else if ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a typed array or typed array buffer. Value: `'+buf+'`.' );\n\t\t}\n\t\tif ( buf.byteLength > 0 ) {\n\t\t\tn = floor( log2( buf.byteLength ) );\n\n\t\t\t// Prohibit \"freeing\" array buffers which would potentially allow users to circumvent high water mark limits:\n\t\t\tn = min( pool.length-1, n );\n\n\t\t\t// Ensure that we do not attempt to free the same buffer more than once...\n\t\t\tp = pool[ n ];\n\t\t\tfor ( i = 0; i < p.length; i++ ) {\n\t\t\t\tif ( p[ i ] === buf ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add the buffer to our pool of free buffers:\n\t\t\tp.push( buf );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Clears the typed array pool allowing garbage collection of previously allocated (and currently free) array buffers.\n\t*\n\t* @private\n\t*/\n\tfunction clear() {\n\t\tvar i;\n\t\tfor ( i = 0; i < pool.length; i++ ) {\n\t\t\tpool[ i ].length = 0;\n\t\t}\n\t\tnbytes = 0;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns an uninitialized typed array.\n*\n* ## Notes\n*\n* -   Memory is **not** initialized.\n* -   Memory is lazily allocated.\n* -   If the function returns `null`, the function was unable to allocate a new typed array from the typed array pool (most likely due to insufficient memory).\n*\n* @name typedarraypool\n* @type {Function}\n* @param {(NonNegativeInteger|ArrayLikeObject)} [arg] - an array length or an array-like object\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a valid array length or an array-like object\n* @throws {TypeError} must provide a recognized data type\n* @returns {(TypedArray|null)} typed array or null\n*\n* @example\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // e.g., returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\nvar typedarraypool = factory();\n\n\n// EXPORTS //\nexport default typedarraypool;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array pool.\n*\n* @module @stdlib/array/pool\n*\n* @example\n* var typedarraypool = require( '@stdlib/array/pool' );\n*\n* // Allocate an array of doubles:\n* var arr = typedarraypool( 5, 'float64' );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* arr[ 0 ] = 3.14;\n* arr[ 1 ] = 3.14;\n*\n* // ...\n*\n* // Free the allocated memory to be used in a future allocation:\n* typedarraypool.free( arr );\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar typedarraypool = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( typedarraypool, 'factory', factory );\n\n\n// EXPORTS //\nexport default typedarraypool;\n"]}