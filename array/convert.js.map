{"version":3,"sources":["@stdlib/array/convert/lib/main.js","@stdlib/array/convert/lib/index.js"],"names":["isCollection","__var_0__","ctors","__var_1__","convert","x","dtype","ctor","out","len","i","TypeError","length","push"],"mappings":"sEAuBA,IAAIA,EAAeC,EACfC,EAAQC,EAmBZ,SAASC,EAASC,EAAGC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMV,EAAcK,GACnB,MAAM,IAAIM,UAAW,0EAA4EN,EAAI,MAItG,GAFAI,EAAMJ,EAAEO,OAEM,QADdL,EAAOL,EAAOI,IAEb,MAAM,IAAIK,UAAW,mFAAqFL,EAAQ,MAEnH,GAAe,YAAVA,EAAsB,CAE1B,IADAE,EAAM,GACAE,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAIK,KAAMR,EAAGK,IAEd,OAAOF,EAGR,IADAA,EAAM,IAAID,EAAME,GACVC,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAKE,GAAML,EAAGK,GAEf,OAAOF,EChCL,IAACJ,EAAUH","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/array/ctors';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar ctors = __var_1__;\n\n\n// MAIN //\n\n/**\n* Converts an array to an array of a different data type.\n*\n* @param {Collection} x - array to convert\n* @param {string} dtype - output data type\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a recognized array data type\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n* var out = convert( arr, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction convert( x, dtype ) {\n\tvar ctor;\n\tvar out;\n\tvar len;\n\tvar i;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + x + '`.' );\n\t}\n\tlen = x.length;\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a recognized array data type. Value: `' + dtype + '`.' );\n\t}\n\tif ( dtype === 'generic' ) {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( x[ i ] ); // ensure \"fast\" elements\n\t\t}\n\t\treturn out;\n\t}\n\tout = new ctor( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = x[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default convert;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an array to an array of a different data type.\n*\n* @module @stdlib/array/convert\n*\n* @example\n* var convert = require( '@stdlib/array/convert' );\n*\n* var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n* var out = convert( arr, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\n\n// MODULES //\nvar convert = __var_0__;\n\n\n// EXPORTS //\nexport default convert;\n"]}