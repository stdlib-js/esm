{"version":3,"sources":["@stdlib/array/convert-same/lib/main.js","@stdlib/array/convert-same/lib/index.js"],"names":["isCollection","__var_0__","getType","__var_1__","ctors","__var_2__","convertSame","x","y","dtype","ctor","out","len","i","TypeError","length","push"],"mappings":"gGAwBA,IAAIA,EAAeC,EACfC,EAAUC,EACVC,EAAQC,EAuBZ,SAASC,EAAaC,EAAGC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMb,EAAcO,GACnB,MAAM,IAAIO,UAAW,0EAA4EP,EAAI,MAItG,GAFAE,EAAQP,EAASM,GAEH,QADdE,EAAON,EAAOK,IAEb,MAAM,IAAIK,UAAW,+EAAiFL,EAAQ,MAG/G,GADAG,EAAML,EAAEQ,OACO,YAAVN,EAAsB,CAE1B,IADAE,EAAM,GACAE,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAIK,KAAMT,EAAGM,IAEd,OAAOF,EAGR,IADAA,EAAM,IAAID,EAAME,GACVC,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAKE,GAAMN,EAAGM,GAEf,OAAOF,ECrCL,IAACL,EAAcL","sourcesContent":["import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/array/dtype';\nimport __var_2__ from '@stdlib/array/ctors';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar getType = __var_1__;\nvar ctors = __var_2__;\n\n\n// MAIN //\n\n/**\n* Converts an array to the same data type as a second input array.\n*\n* @param {Collection} x - array to convert\n* @param {(Array|TypedArray)} y - array having the desired output data type\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must have a recognized data type\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var y = new Float64Array( 0 );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0 ];\n* var out = convertSame( x, y );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction convertSame( x, y ) {\n\tvar dtype;\n\tvar ctor;\n\tvar out;\n\tvar len;\n\tvar i;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + x + '`.' );\n\t}\n\tdtype = getType( y );\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must have a recognized data type. Value: `' + dtype + '`.' );\n\t}\n\tlen = x.length;\n\tif ( dtype === 'generic' ) {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( x[ i ] ); // ensure \"fast\" elements\n\t\t}\n\t\treturn out;\n\t}\n\tout = new ctor( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = x[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default convertSame;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an array to the same data type as a second input array.\n*\n* @module @stdlib/array/convert-same\n*\n* @example\n* var convertSame = require( '@stdlib/array/convert-same' );\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var y = new Float64Array( 0 );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0 ];\n* var out = convertSame( x, y );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\n\n// MODULES //\nvar convertSame = __var_0__;\n\n\n// EXPORTS //\nexport default convertSame;\n"]}