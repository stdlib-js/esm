{"version":3,"sources":["@stdlib/array/filled/lib/main.js","@stdlib/array/filled/lib/index.js"],"names":["isString","__var_0__","isPrimitive","isNonNegativeInteger","__var_1__","isCollection","__var_2__","isArrayBuffer","__var_3__","isObject","__var_4__","isFunction","__var_5__","hasOwnProp","__var_6__","ctors","__var_7__","gfill","__var_8__","hasIteratorSymbolSupport","__var_9__","ITERATOR_SYMBOL","__var_10__","HAS_ITERATOR_SYMBOL","filledarray","value","nargs","dtype","ctor","arr","len","arg","v","i","arguments","length","TypeError","push","Error","next","done"],"mappings":"6dAgCA,IAAIA,EAAWC,EAAUC,YACrBC,EAAuBC,EAAUF,YACjCG,EAAeC,EACfC,EAAgBC,EAChBC,EAAWC,EACXC,EAAaC,EACbC,EAAaC,EACbC,EAAQC,EACRC,EAAQC,EACRC,EAA2BC,EAC3BC,EAAkBC,EAKlBC,EAAsBJ,IA8F1B,SAASK,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAWJ,GATAP,EAAQQ,UAAUC,QAClBT,GAAS,IACK,GAAK1B,EAAUkC,UAAWR,KACvCC,EAAQO,UAAWR,GACnBA,GAAS,GAETC,EAAQ,UAGK,QADdC,EAAOb,EAAOY,IAEb,MAAM,IAAIS,UAAW,kEAAkET,EAAM,MAE9F,GAAe,YAAVA,EAAsB,CAC1B,GAAKD,GAAS,EACb,MAAO,GAIR,GAFAD,EAAQS,UAAW,GACnBH,EAAMG,UAAW,GACF,IAAVR,EAAc,CAMlB,GALKvB,EAAsB4B,GAC1BD,EAAMC,EACK1B,EAAc0B,KACzBD,EAAMC,EAAII,aAEE,IAARL,EAAiB,CAIrB,IAHAD,EAAM,GAGAI,EAAI,EAAGA,EAAIH,EAAKG,IACrBJ,EAAIQ,KAAMZ,GAEX,OAAOI,EAER,GAAKtB,EAAewB,GACnB,MAAM,IAAIO,MAAO,qFAElB,GAAK7B,EAAUsB,GAAQ,CACtB,IAA6B,IAAxBR,EACJ,MAAM,IAAIa,UAAW,kIAAkIL,EAAI,MAE5J,IAAMpB,EAAYoB,EAAKV,IACtB,MAAM,IAAIe,UAAW,oGAAoGL,EAAI,MAG9H,GADAA,EAAMA,EAAKV,MACLV,EAAYoB,EAAIQ,MACrB,MAAM,IAAIH,UAAW,4FAGtB,IADAP,EAAM,GAELG,EAAID,EAAIQ,OACH1B,EAAYmB,EAAG,UACnBH,EAAIQ,KAAMZ,IAENO,EAAEQ,OAIR,OAAOX,EAER,MAAM,IAAIO,UAAW,oGAAoGL,EAAI,MACvH,GAAKxB,EAAewB,GAC1B,MAAM,IAAIO,MAAO,qFAElB,MAAM,IAAIF,UAAW,oGAAoGL,EAAI,MAE9H,OAAKL,GAAS,EACN,IAAIE,EAAM,IAGjBC,EADc,IAAVH,EACE,IAAIE,EAAMM,UAAU,IACL,IAAVR,EACL,IAAIE,EAAMM,UAAU,GAAIA,UAAU,IAElC,IAAIN,EAAMM,UAAU,GAAIA,UAAU,GAAIA,UAAU,IAEvDT,EAAQS,UAAW,GACdL,EAAIM,OAAS,GAAe,IAAVV,GACtBR,EAAOY,EAAIM,OAAQV,EAAOI,EAAK,GAEzBA,GCzGL,IAACL,EAAcvB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/assert/is-collection';\nimport __var_3__ from '@stdlib/assert/is-arraybuffer';\nimport __var_4__ from '@stdlib/assert/is-object';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/array/ctors';\nimport __var_8__ from '@stdlib/blas/ext/base/gfill';\nimport __var_9__ from '@stdlib/assert/has-iterator-symbol-support';\nimport __var_10__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__.isPrimitive;\nvar isNonNegativeInteger = __var_1__.isPrimitive;\nvar isCollection = __var_2__;\nvar isArrayBuffer = __var_3__;\nvar isObject = __var_4__;\nvar isFunction = __var_5__;\nvar hasOwnProp = __var_6__;\nvar ctors = __var_7__;\nvar gfill = __var_8__;\nvar hasIteratorSymbolSupport = __var_9__;\nvar ITERATOR_SYMBOL = __var_10__;\n\n\n// VARIABLES //\n\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// MAIN //\n\n/**\n* Creates a filled array.\n*\n* @param {*} [value] - fill value\n* @param {(NonNegativeInteger|TypedArray|ArrayLikeObject|ArrayBuffer)} [arg] - a length, typed array, array-like object, or buffer\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a recognized data type\n* @throws {TypeError} must provide a length, typed array, array-like object, or buffer\n* @throws {Error} creating a generic array from an `ArrayBuffer` is not supported\n* @returns {(TypedArray|Array)} array or typed array\n*\n* @example\n* var arr = filledarray();\n* // returns <Float64Array>\n*\n* @example\n* var arr = filledarray( 1.0, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, 2, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, 2, 'generic' );\n* // returns [ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, [ 0.5, 0.5 ] );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1, [ 5, -3 ], 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*\n* @example\n* var arr1 = filledarray( 2, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 1.0, arr1 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr1 = filledarray( 2, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 1, arr1, 'uint32' );\n* // returns <Uint32Array>[ 1, 1 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8 );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1.0, buf, 8, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1, buf, 8, 2, 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*/\nfunction filledarray() {\n\tvar value;\n\tvar nargs;\n\tvar dtype;\n\tvar ctor;\n\tvar arr;\n\tvar len;\n\tvar arg;\n\tvar v;\n\tvar i;\n\n\tnargs = arguments.length;\n\tnargs -= 1;\n\tif ( nargs >= 0 && isString( arguments[ nargs ] ) ) {\n\t\tdtype = arguments[ nargs ];\n\t\tnargs -= 1;\n\t} else {\n\t\tdtype = 'float64';\n\t}\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a recognized data type. Value: `'+dtype+'`.' );\n\t}\n\tif ( dtype === 'generic' ) {\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tvalue = arguments[ 0 ];\n\t\targ = arguments[ 1 ];\n\t\tif ( nargs === 1 ) {\n\t\t\tif ( isNonNegativeInteger( arg ) ) {\n\t\t\t\tlen = arg;\n\t\t\t} else if ( isCollection( arg ) ) {\n\t\t\t\tlen = arg.length;\n\t\t\t}\n\t\t\tif ( len !== void 0 ) {\n\t\t\t\tarr = [];\n\n\t\t\t\t// Manually push elements in order to ensure \"fast\" elements...\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tarr.push( value );\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tif ( isArrayBuffer( arg ) ) {\n\t\t\t\tthrow new Error( 'invalid arguments. Creating a generic array from an ArrayBuffer is not supported.' );\n\t\t\t}\n\t\t\tif ( isObject( arg ) ) {\n\t\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, typed array, or array-like object. Value: `'+arg+'`.' );\n\t\t\t\t}\n\t\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `'+arg+'`.' );\n\t\t\t\t}\n\t\t\t\targ = arg[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( arg.next ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable.' );\n\t\t\t\t}\n\t\t\t\tarr = [];\n\t\t\t\twhile ( true ) {\n\t\t\t\t\tv = arg.next();\n\t\t\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\t\t\tarr.push( value );\n\t\t\t\t\t}\n\t\t\t\t\tif ( v.done ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `'+arg+'`.' );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tthrow new Error( 'invalid arguments. Creating a generic array from an ArrayBuffer is not supported.' );\n\t\t}\n\t\tthrow new TypeError( 'invalid argument. Must provide a length, typed array, array-like object, or an iterable. Value: `'+arg+'`.' );\n\t}\n\tif ( nargs <= 0 ) {\n\t\treturn new ctor( 0 );\n\t}\n\tif ( nargs === 1 ) {\n\t\tarr = new ctor( arguments[1] );\n\t} else if ( nargs === 2 ) {\n\t\tarr = new ctor( arguments[1], arguments[2] );\n\t} else {\n\t\tarr = new ctor( arguments[1], arguments[2], arguments[3] );\n\t}\n\tvalue = arguments[ 0 ];\n\tif ( arr.length > 0 && value !== 0 ) { // i.e., nonzero\n\t\tgfill( arr.length, value, arr, 1 );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\nexport default filledarray;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a filled array.\n*\n* @module @stdlib/array/filled\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray();\n* // returns <Float64Array>\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray( 1.0, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray( 1.0, 2, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray( 1.0, 2, 'generic' );\n* // returns [ 1.0, 1.0 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray( 1.0, [ 0.5, 0.5 ] );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr = filledarray( 1, [ 5, -3 ], 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr1 = filledarray( 10, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 1.0, arr1 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var arr1 = filledarray( 1, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 2, arr1, 'uint32' );\n* // returns <Uint32Array>[ 2, 2 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8 );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1.0, buf, 8, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var filledarray = require( '@stdlib/array/filled' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1, buf, 8, 2, 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*/\n\n// MODULES //\nvar filledarray = __var_0__;\n\n\n// EXPORTS //\nexport default filledarray;\n"]}