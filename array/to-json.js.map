{"version":3,"sources":["@stdlib/array/to-json/lib/ctors.js","@stdlib/array/to-json/lib/type.js","@stdlib/array/to-json/lib/to_json.js","@stdlib/array/to-json/lib/index.js"],"names":["Int8Array","__var_0__","Uint8Array","__var_1__","Uint8ClampedArray","__var_2__","Int16Array","__var_3__","Uint16Array","__var_4__","Int32Array","__var_5__","Uint32Array","__var_6__","Float32Array","__var_7__","Float64Array","__var_8__","CTORS","instanceOf","ctorName","getPrototypeOf","typeName","arr","v","i","length","isTypedArray","toJSON","out","TypeError","type","data","push"],"mappings":"maA8BA,IAAIA,EAAYC,EACZC,EAAaC,EACbC,EAAoBC,EACpBC,EAAaC,EACbC,EAAcC,EACdC,EAAaC,EACbC,EAAcC,EACdC,EAAeC,EACfC,EAAeC,EAKfC,EAAQ,CACX,CAAEF,EAAc,gBAChB,CAAEF,EAAc,gBAChB,CAAEJ,EAAY,cACd,CAAEE,EAAa,eACf,CAAEN,EAAY,cACd,CAAEE,EAAa,eACf,CAAER,EAAW,aACb,CAAEE,EAAY,cACd,CAAEE,EAAmB,sBC3BlBe,EAAalB,EACbmB,EAAWjB,EACXkB,EAAiBhB,EACjBa,EAAQX,EAmBZ,SAASe,EAAUC,GAClB,IAAIC,EACAC,EAGJ,IAAMA,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAC9B,GAAKN,EAAYI,EAAKL,EAAOO,GAAK,IACjC,OAAOP,EAAOO,GAAK,GAIrB,KAAQF,GAAM,CAEb,IADAC,EAAIJ,EAAUG,GACRE,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAC9B,GAAKD,IAAMN,EAAOO,GAAK,GACtB,OAAOP,EAAOO,GAAK,GAGrBF,EAAMF,EAAgBE,IC1CxB,IAAII,EAAe1B,EACfqB,EAAWnB,EAyBf,SAASyB,EAAQL,GAChB,IAAIM,EACAJ,EACJ,IAAME,EAAcJ,GACnB,MAAM,IAAIO,UAAW,yDAA2DP,EAAM,MAKvF,KAHAM,EAAM,IACFE,KAAOT,EAAUC,GACrBM,EAAIG,KAAO,GACLP,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC5BI,EAAIG,KAAKC,KAAMV,EAAKE,IAErB,OAAOI,ECzBL,IAACD,EAAS3B","sourcesContent":["import __var_0__ from '@stdlib/array/int8';\nimport __var_1__ from '@stdlib/array/uint8';\nimport __var_2__ from '@stdlib/array/uint8c';\nimport __var_3__ from '@stdlib/array/int16';\nimport __var_4__ from '@stdlib/array/uint16';\nimport __var_5__ from '@stdlib/array/int32';\nimport __var_6__ from '@stdlib/array/uint32';\nimport __var_7__ from '@stdlib/array/float32';\nimport __var_8__ from '@stdlib/array/float64';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Int8Array = __var_0__;\nvar Uint8Array = __var_1__;\nvar Uint8ClampedArray = __var_2__;\nvar Int16Array = __var_3__;\nvar Uint16Array = __var_4__;\nvar Int32Array = __var_5__;\nvar Uint32Array = __var_6__;\nvar Float32Array = __var_7__;\nvar Float64Array = __var_8__;\n\n\n// MAIN //\n\nvar CTORS = [\n\t[ Float64Array, 'Float64Array' ],\n\t[ Float32Array, 'Float32Array' ],\n\t[ Int32Array, 'Int32Array' ],\n\t[ Uint32Array, 'Uint32Array' ],\n\t[ Int16Array, 'Int16Array' ],\n\t[ Uint16Array, 'Uint16Array' ],\n\t[ Int8Array, 'Int8Array' ],\n\t[ Uint8Array, 'Uint8Array' ],\n\t[ Uint8ClampedArray, 'Uint8ClampedArray' ]\n];\n\n\n// EXPORTS //\nexport default CTORS;\n","import __var_0__ from '@stdlib/assert/instance-of';\nimport __var_1__ from '@stdlib/utils/constructor-name';\nimport __var_2__ from '@stdlib/utils/get-prototype-of';\nimport __var_3__ from './ctors.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar instanceOf = __var_0__;\nvar ctorName = __var_1__;\nvar getPrototypeOf = __var_2__;\nvar CTORS = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns the typed array type.\n*\n* @private\n* @param {TypedArray} arr - typed array\n* @returns {(string|void)} typed array type\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var arr = new Float64Array( 5 );\n* var str = typeName( arr );\n* // returns 'Float64Array'\n*/\nfunction typeName( arr ) {\n\tvar v;\n\tvar i;\n\n\t// Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...\n\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\tif ( instanceOf( arr, CTORS[ i ][ 0 ] ) ) {\n\t\t\treturn CTORS[ i ][ 1 ];\n\t\t}\n\t}\n\t// Walk the prototype tree until we find an object having a desired native class...\n\twhile ( arr ) {\n\t\tv = ctorName( arr );\n\t\tfor ( i = 0; i < CTORS.length; i++ ) {\n\t\t\tif ( v === CTORS[ i ][ 1 ] ) {\n\t\t\t\treturn CTORS[ i ][ 1 ];\n\t\t\t}\n\t\t}\n\t\tarr = getPrototypeOf( arr );\n\t}\n}\n\n\n// EXPORTS //\nexport default typeName;\n","import __var_0__ from '@stdlib/assert/is-typed-array';\nimport __var_1__ from './type.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isTypedArray = __var_0__;\nvar typeName = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of a typed array.\n*\n* ## Notes\n*\n* -   We build a JSON object representing a typed array similar to how Node.js `Buffer` objects are represented. See [Buffer][1].\n*\n* [1]: https://nodejs.org/api/buffer.html#buffer_buf_tojson\n*\n* @param {TypedArray} arr - typed array to serialize\n* @throws {TypeError} first argument must be a typed array\n* @returns {Object} JSON representation\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var arr = new Float64Array( [ 5.0, 3.0 ] );\n* var json = toJSON( arr );\n* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }\n*/\nfunction toJSON( arr ) {\n\tvar out;\n\tvar i;\n\tif ( !isTypedArray( arr ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a typed array. Value: `' + arr + '`.' );\n\t}\n\tout = {};\n\tout.type = typeName( arr );\n\tout.data = [];\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tout.data.push( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default toJSON;\n","import __var_0__ from './to_json.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a JSON representation of a typed array.\n*\n* @module @stdlib/array/to-json\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var toJSON = require( '@stdlib/array/to-json' );\n*\n* var arr = new Float64Array( [ 5.0, 3.0 ] );\n* var json = toJSON( arr );\n* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }\n*/\n\n// MODULES //\nvar toJSON = __var_0__;\n\n\n// EXPORTS //\nexport default toJSON;\n"]}