{"version":3,"sources":["@stdlib/array/to-strided-iterator/lib/main.js","@stdlib/array/to-strided-iterator/lib/index.js"],"names":["setReadOnly","__var_0__","isFunction","__var_1__","isArrayLikeObject","__var_2__","isNonNegativeInteger","__var_3__","isPrimitive","isInteger","__var_4__","iteratorSymbol","__var_5__","stridedarray2iterator","N","src","stride","offset","thisArg","iter","FLG","fcn","idx","i","TypeError","arguments","length","next1","next2","end","factory","v","done","call","value","iterator"],"mappings":"uSA2BA,IAAIA,EAAcC,EACdC,EAAaC,EACbC,EAAoBC,EACpBC,EAAuBC,EAAUC,YACjCC,EAAYC,EAAUF,YACtBG,EAAiBC,EAyCrB,SAASC,EAAuBC,EAAGC,EAAKC,EAAQC,GAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMjB,EAAsBQ,GAC3B,MAAM,IAAIU,UAAW,2EAA6EV,EAAI,MAEvG,IAAMV,EAAmBW,GACxB,MAAM,IAAIS,UAAW,2EAA6ET,EAAM,MAEzG,IAAMN,EAAWO,GAChB,MAAM,IAAIQ,UAAW,gEAAkER,EAAS,MAEjG,IAAMV,EAAsBW,GAC3B,MAAM,IAAIO,UAAW,4EAA8EP,EAAS,MAE7G,GAAKQ,UAAUC,OAAS,EAAI,CAE3B,IAAMxB,EADNmB,EAAMI,UAAW,IAEhB,MAAM,IAAID,UAAW,gEAAkEH,EAAM,MAE9FH,EAAUO,UAAW,GAkBtB,OAhBAH,EAAML,EACNM,GAAK,EAKJvB,EAFDmB,EAAO,GAEa,OADfE,EACuBM,EAEAC,GAE5B5B,EAAamB,EAAM,SAAUU,GAGxBlB,GACJX,EAAamB,EAAMR,EAAgBmB,GAE7BX,EAQP,SAASQ,IACR,IAAII,EAEJ,OADAR,GAAK,EACAH,GAAOG,GAAKT,EACT,CACNkB,MAAQ,IAGVD,EAAIV,EAAIY,KAAMf,EAASH,EAAKO,GAAOA,EAAKC,EAAGR,GAC3CO,GAAON,EACA,CACNkB,MAASH,EACTC,MAAQ,IAUV,SAASJ,IACR,IAAIG,EAEJ,OADAR,GAAK,EACAH,GAAOG,GAAKT,EACT,CACNkB,MAAQ,IAGVD,EAAIhB,EAAKO,GACTA,GAAON,EACA,CACNkB,MAASH,EACTC,MAAQ,IAWV,SAASH,EAAKK,GAEb,OADAd,GAAM,EACDK,UAAUC,OACP,CACNQ,MAASA,EACTF,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASF,IACR,OAAKT,EACGR,EAAuBC,EAAGC,EAAKC,EAAQC,EAAQI,EAAKH,GAErDL,EAAuBC,EAAGC,EAAKC,EAAQC,IC7I7C,IAACkB,EAAWlC","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-function';\nimport __var_2__ from '@stdlib/assert/is-array-like-object';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/assert/is-integer';\nimport __var_5__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isFunction = __var_1__;\nvar isArrayLikeObject = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar isInteger = __var_4__.isPrimitive;\nvar iteratorSymbol = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over elements in an array-like object according to specified stride parameters.\n*\n* @param {NonNegativeInteger} N - number of values to iterate\n* @param {ArrayLikeObject} src - input value\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {TypeError} fifth argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var values = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n*\n* var N = 4;\n* var stride = -2;\n* var offset = 6;\n*\n* var iter = stridedarray2iterator( N, values, stride, offset );\n*\n* var v = iter.next().value;\n* // returns 7\n*\n* v = iter.next().value;\n* // returns 5\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\nfunction stridedarray2iterator( N, src, stride, offset ) {\n\tvar thisArg;\n\tvar iter;\n\tvar FLG;\n\tvar fcn;\n\tvar idx;\n\tvar i;\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + N + '`.' );\n\t}\n\tif ( !isArrayLikeObject( src ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + src + '`.' );\n\t}\n\tif ( !isInteger( stride ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + stride + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `' + offset + '`.' );\n\t}\n\tif ( arguments.length > 4 ) {\n\t\tfcn = arguments[ 4 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Fifth argument must be a function. Value: `' + fcn + '`.' );\n\t\t}\n\t\tthisArg = arguments[ 5 ];\n\t}\n\tidx = offset;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tif ( fcn ) {\n\t\tsetReadOnly( iter, 'next', next1 );\n\t} else {\n\t\tsetReadOnly( iter, 'next', next2 );\n\t}\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = fcn.call( thisArg, src[ idx ], idx, i, src );\n\t\tidx += stride;\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = src[ idx ];\n\t\tidx += stride;\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tif ( fcn ) {\n\t\t\treturn stridedarray2iterator( N, src, stride, offset, fcn, thisArg ); // eslint-disable-line max-len\n\t\t}\n\t\treturn stridedarray2iterator( N, src, stride, offset );\n\t}\n}\n\n\n// EXPORTS //\nexport default stridedarray2iterator;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator from a strided array-like value.\n*\n* @module @stdlib/array/to-strided-iterator\n*\n* @example\n* var stridedarray2iterator = require( '@stdlib/array/to-strided-iterator' );\n*\n* var values = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n*\n* var N = 4;\n* var stride = -2;\n* var offset = 6;\n*\n* var iter = stridedarray2iterator( N, values, stride, offset );\n*\n* var v = iter.next().value;\n* // returns 7\n*\n* v = iter.next().value;\n* // returns 5\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}