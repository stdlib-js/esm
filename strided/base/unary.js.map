{"version":3,"sources":["@stdlib/strided/base/unary/lib/main.js","@stdlib/strided/base/unary/lib/ndarray.js","@stdlib/strided/base/unary/lib/index.js"],"names":["unary","arrays","shape","strides","fcn","sx","sy","ix","iy","x","y","N","i","offsets","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAkDA,SAASA,EAAOC,EAAQC,EAAOC,EAASC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,MADAD,EAAIT,EAAO,KACD,GAiBV,IAXCK,GAHDF,EAAKF,EAAS,IAEJ,GACH,EAAEQ,GAAKN,EAER,EAGLG,GAPDF,EAAKH,EAAS,IAMJ,GACH,EAAEQ,GAAKL,EAER,EAENG,EAAIR,EAAQ,GACZS,EAAIT,EAAQ,GACNW,EAAI,EAAGA,EAAID,EAAGC,IACnBF,EAAGF,GAAOJ,EAAKK,EAAGF,IAClBA,GAAMF,EACNG,GAAMF,EC7BR,SAASN,EAAOC,EAAQC,EAAOC,EAASU,EAAST,GAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,MADAD,EAAIT,EAAO,KACD,GASV,IANAK,EAAKM,EAAS,GACdL,EAAKK,EAAS,GACdR,EAAKF,EAAS,GACdG,EAAKH,EAAS,GACdM,EAAIR,EAAQ,GACZS,EAAIT,EAAQ,GACNW,EAAI,EAAGA,EAAID,EAAGC,IACnBF,EAAGF,GAAOJ,EAAKK,EAAGF,IAClBA,GAAMF,EACNG,GAAMF,ECNR,IAAIQ,EAAcC,EACdf,EAAQgB,EACRC,EAAUC,EAKdJ,EAAad,EAAO,UAAWiB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<ArrayLikeObject>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\nexport default unary;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<ArrayLikeObject>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary( [ x, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\nexport default unary;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary callback to elements in a strided input array and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/unary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var unary = require( '@stdlib/strided/base/unary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var unary = require( '@stdlib/strided/base/unary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary.ndarray( [ x, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar unary = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( unary, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default unary;\n"]}