{"version":3,"sources":["@stdlib/nlp/lda/lib/matrix.js","@stdlib/nlp/lda/lib/get_thetas.js","@stdlib/nlp/lda/lib/validate.js","@stdlib/nlp/lda/lib/get_phis.js","@stdlib/nlp/lda/lib/init.js","@stdlib/nlp/lda/lib/avg_matrix.js","@stdlib/nlp/lda/lib/fit.js","@stdlib/nlp/lda/lib/lda.js","@stdlib/nlp/lda/lib/index.js"],"names":["Int32Array","__var_0__","Float64Array","__var_1__","setReadOnly","__var_2__","matrix","dtype","ndims","shape","data","len","mat","i","arguments","length","strides","offset","nbytes","byteLength","get","set","j","idx","this","v","getThetas","Theta","val","d","k","D","K","nd","alpha","ndSum","isPositive","isPrimitive","isObject","hasOwnProp","validate","opts","options","TypeError","beta","getPhis","Phi","w","W","nw","nwSum","randu","floor","init","topic","newz","wt","z","Array","push","avgMatrix","A","B","weight","propA","propB","nrow","ncol","C","isPositiveInteger","fit","iter","burnin","thin","kalpha","wbeta","theta","prob","word","phi","nt","u","phiList","thetaList","avgPhi","avgTheta","isNonNegativeInteger","isStringArray","__var_3__","contains","__var_4__","tokenize","__var_5__","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","findIndex","vocab","searchVal","lda","documents","target","model","err","pos","it","wd","getTerms","no","skip","ret","max","mid"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/array/int32';\nimport __var_1__ from '@stdlib/array/float64';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Int32Array = __var_0__;\nvar Float64Array = __var_1__;\nvar setReadOnly = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a Matrix instance.\n*\n* @private\n* @constructor\n* @param {NumberArray} shape - matrix dimensions/shape\n* @param {string} [dtype=\"float64\"] - matrix data type\n* @returns {Matrix} Matrix instance\n*/\nfunction matrix() {\n\tvar dtype;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar len;\n\tvar mat;\n\tvar i;\n\n\tif ( arguments.length === 1 ) {\n\t\tshape = arguments[ 0 ];\n\t}\n\telse if ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tdtype = arguments[ 1 ];\n\t}\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Initialize a zero-filled typed array...\n\tif ( dtype === 'int32' ) {\n\t\tdata = new Int32Array( len );\n\t}\n\telse {\n\t\tdata = new Float64Array( len );\n\t}\n\n\t// Return a new Matrix instance:\n\tmat = {};\n\tmat.dtype = dtype;\n\tmat.shape = shape;\n\tmat.strides = [ shape[1], 1 ];\n\tmat.offset = 0;\n\tmat.ndims = shape.length;\n\tmat.length = data.length;\n\tmat.nbytes = data.byteLength;\n\tmat.data = data;\n\n\tsetReadOnly( mat, 'get', get );\n\tsetReadOnly( mat, 'set', set );\n\treturn mat;\n\n\t/**\n\t* Returns a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @returns {(number|undefined)} matrix element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\treturn this.data[ idx ];\n\t}\n\n\t/**\n\t* Sets a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @param {number} v - value to set\n\t* @returns {Matrix} Matrix instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\ti = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\tif ( i >= 0 ) {\n\t\t\tthis.data[ i ] = v;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\nexport default matrix;\n","import __var_0__ from './matrix.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar matrix = __var_0__;\n\n\n// MAIN //\n\n/**\n* Get theta matrix. Its rows correspond to document distributions over topics.\n*\n* @private\n* @returns {Matrix} theta parameter matrix\n*/\nfunction getThetas() {\n\t/* eslint-disable no-invalid-this */\n\tvar Theta;\n\tvar val;\n\tvar d;\n\tvar k;\n\n\tTheta = matrix( [ this.D, this.K ] );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tfor ( k = 0; k < this.K; k++ ) {\n\t\t\tval = ( this.nd.get( d, k ) + this.alpha ) /\n\t\t\t\t( this.ndSum[ d ] + ( this.K*this.alpha ) );\n\t\t\tTheta.set( d, k, val );\n\t\t}\n\t}\n\treturn Theta;\n}\n\n\n// EXPORTS //\nexport default getThetas;\n","import __var_0__ from '@stdlib/assert/is-positive-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositive = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi\n* @returns {(Error|null)} null or an error object\n*\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isPositive( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a positive number. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'beta' ) ) {\n\t\topts.beta = options.beta;\n\t\tif ( !isPositive( opts.beta ) ) {\n\t\t\treturn new TypeError( 'invalid option. `beta` option must be a positive number. Option: `' + opts.beta + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from './matrix.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar matrix = __var_0__;\n\n\n// MAIN //\n\n/**\n* Get the phi matrix. Each row is a topic distribution over words.\n*\n* @private\n* @returns {Matrix} phi parameter matrix\n*/\nfunction getPhis() {\n\t/* eslint-disable no-invalid-this */\n\tvar Phi;\n\tvar val;\n\tvar k;\n\tvar w;\n\n\tPhi = matrix( [ this.K, this.W ] );\n\tfor ( k = 0; k < this.K; k++ ) {\n\t\tfor ( w = 0; w < this.W; w++ ) {\n\t\t\tval = ( this.nw.get( w, k ) + this.beta ) /\n\t\t\t\t( this.nwSum[ k ] + ( this.W*this.beta ) );\n\t\t\tPhi.set( k, w, val );\n\t\t}\n\t}\n\treturn Phi;\n}\n\n\n// EXPORTS //\nexport default getPhis;\n","import __var_0__ from '@stdlib/random/base/randu';\nimport __var_1__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar randu = __var_0__;\nvar floor = __var_1__;\n\n\n// MAIN //\n\n/**\n* Randomly assign topics to words and keep track of the counts.\n*\n* @private\n*/\nfunction init() {\n\t/* eslint-disable no-invalid-this */\n\tvar topic;\n\tvar newz;\n\tvar len;\n\tvar wt;\n\tvar d;\n\tvar i;\n\n\tthis.z = new Array( this.D );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tthis.z[ d ] = [];\n\t\tlen = this.w[ d ].length;\n\n\t\t// Initialize random topics...\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tnewz = floor( randu() * this.K );\n\t\t\tthis.z[ d ].push( newz );\n\t\t}\n\t\tthis.ndSum[ d ] = len;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\twt = this.w[ d ][ i ];\n\t\t\ttopic = this.z[ d ][ i ];\n\n\t\t\t// Number of instances of word i assigned to topic j:\n\t\t\tthis.nw.set( wt, topic, this.nw.get( wt, topic ) + 1 );\n\n\t\t\t// Number of words in document i assigned to topic j:\n\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\n\t\t\t// Total number of words assigned to topic j:\n\t\t\tthis.nwSum[ topic ] = this.nwSum[ topic ] + 1;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default init;\n","import __var_0__ from './matrix.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar matrix = __var_0__;\n\n\n// MAIN //\n\n/**\n* Calculate weighted average of two matrices.\n*\n* @private\n* @param {Matrix} A - first matrix\n* @param {Matrix} B - second matrix\n* @param {PositiveInteger} weight - relative weight of matrix A\n* @returns {Matrix} averaged matrix\n*/\nfunction avgMatrix( A, B, weight ) {\n\tvar propA;\n\tvar propB;\n\tvar nrow;\n\tvar ncol;\n\tvar val;\n\tvar C;\n\tvar i;\n\tvar j;\n\n\tnrow = A.shape[ 0 ];\n\tncol = A.shape[ 1 ];\n\tC = matrix( [ nrow, ncol ] );\n\tpropA = ( weight - 1.0 ) / weight;\n\tpropB = 1.0 / weight;\n\n\tfor ( i = 0; i < nrow; i++ ) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\tval = (propA * A.get(i, j)) + (propB * B.get(i, j));\n\t\t\tC.set( i, j, val );\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\nexport default avgMatrix;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/random/base/randu';\nimport __var_2__ from './avg_matrix.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar randu = __var_1__;\nvar avgMatrix = __var_2__;\n\n\n// MAIN //\n\n/**\n* Fit model using collapsed Gibbs sampling.\n*\n* @private\n* @param {PositiveInteger} iter - number of sampling iterations\n* @param {PositiveInteger} burnin - number of estimates to be thrown away at beginning\n* @param {PositiveInteger} thin - number of discarded in-between iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a positive integer\n*/\nfunction fit( iter, burnin, thin ) {\n\t/* eslint-disable no-invalid-this */\n\tvar kalpha;\n\tvar wbeta;\n\tvar topic;\n\tvar theta;\n\tvar prob;\n\tvar word;\n\tvar phi;\n\tvar len;\n\tvar nt;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar u;\n\tvar w;\n\n\tif ( !isPositiveInteger( iter ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + iter + '`.' );\n\t}\n\tif ( !isPositiveInteger( burnin ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + burnin + '`.' );\n\t}\n\tif ( !isPositiveInteger( thin ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument must be a positive integer. Value: `' + thin + '`.' );\n\t}\n\n\twbeta = this.W * this.beta;\n\tkalpha = this.K * this.alpha;\n\n\tfor ( i = 0; i < iter; i++ ) {\n\t\tfor ( d = 0; d < this.D; d++ ) {\n\t\t\tfor ( w = 0; w < this.ndSum[ d ]; w++ ) {\n\t\t\t\tword = this.w[ d ][ w ];\n\t\t\t\ttopic = this.z[ d ][ w ];\n\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) - 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) - 1 );\n\t\t\t\tthis.ndSum[ d ] -= 1;\n\t\t\t\tthis.nwSum[ topic ] -= 1;\n\n\t\t\t\tprob = new Array( this.K );\n\t\t\t\tfor ( j = 0; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] = ( this.nw.get( word, j ) + this.beta ) /\n\t\t\t\t\t\t( this.nwSum[ j ] + wbeta ) *\n\t\t\t\t\t\t( this.nd.get( d, j ) + this.alpha ) /\n\t\t\t\t\t\t( this.ndSum[ d ] + kalpha );\n\t\t\t\t}\n\t\t\t\tfor ( j = 1; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] += prob[ j - 1 ];\n\t\t\t\t}\n\t\t\t\tu = prob[ this.K - 1 ] * randu();\n\t\t\t\ttopic = 0;\n\t\t\t\tfor ( nt = 0; nt < this.K; nt++ ) {\n\t\t\t\t\tif ( prob[ nt ] > u ) {\n\t\t\t\t\t\ttopic = nt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Assign new z_i to counts...\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) + 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\t\t\t\tthis.nwSum[ topic ] += 1;\n\t\t\t\tthis.ndSum[ d ] += 1;\n\n\t\t\t\tthis.z[ d ][ w ] = topic;\n\t\t\t}\n\t\t}\n\n\t\tif ( i % thin === 0 && i > burnin ) {\n\t\t\tphi = this.getPhis();\n\t\t\ttheta = this.getThetas();\n\n\t\t\tthis.phiList.push( phi );\n\t\t\tthis.thetaList.push( theta );\n\n\t\t\tlen = this.phiList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgPhi = phi;\n\t\t\t} else {\n\t\t\t\tthis.avgPhi = avgMatrix( this.avgPhi, phi, len );\n\t\t\t}\n\t\t\tlen = this.thetaList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgTheta = theta;\n\t\t\t} else {\n\t\t\t\tthis.avgTheta = avgMatrix( this.avgTheta, theta, len );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default fit;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-positive-integer';\nimport __var_2__ from '@stdlib/assert/is-string-array';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/assert/contains';\nimport __var_5__ from '@stdlib/nlp/tokenize';\nimport __var_6__ from '@stdlib/array/int32';\nimport __var_7__ from './matrix.js';\nimport __var_8__ from './get_thetas.js';\nimport __var_9__ from './validate.js';\nimport __var_10__ from './get_phis.js';\nimport __var_11__ from './init.js';\nimport __var_12__ from './fit.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isPositiveInteger = __var_1__;\nvar isStringArray = __var_2__;\nvar setReadOnly = __var_3__;\nvar contains = __var_4__;\nvar tokenize = __var_5__;\nvar Int32Array = __var_6__;\nvar matrix = __var_7__;\nvar getThetas = __var_8__;\nvar validate = __var_9__;\nvar getPhis = __var_10__;\nvar init = __var_11__;\nvar fit = __var_12__;\n\n\n// FUNCTIONS //\n\n/**\n* Find index of the value in vocabulary equal to the supplied search value.\n*\n* @private\n* @param {Array} vocab - vocabulary\n* @param {string} searchVal - search value\n* @returns {integer} index in vocab if search value is found, -1 otherwise\n*/\nfunction findIndex( vocab, searchVal ) {\n\tvar i;\n\tfor ( i = 0; i < vocab.length; i++ ) {\n\t\tif ( vocab[ i ] === searchVal ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @param {StringArray} documents - document corpus\n* @param {PositiveInteger} K - number of topics\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.alpha=50/K] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta=0.1] - Dirichlet hyper-parameter for word vector phi\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} must provide valid options\n* @returns {Object} model object\n*/\nfunction lda( documents, K, options ) {\n\tvar target;\n\tvar vocab;\n\tvar model;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar err;\n\tvar pos;\n\tvar nd;\n\tvar it;\n\tvar wd;\n\tvar D;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar W;\n\tvar w;\n\n\tif ( !isStringArray( documents ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string array. Value: `' + documents + '`.' );\n\t}\n\tif ( !isPositiveInteger( K ) ) {\n\t\tthrow new TypeError( 'invalid argument. Number of topics `K` must be a positive integer. Value: `' + K + '`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Number of documents:\n\tD = documents.length;\n\n\t// Hyper-parameter for Dirichlet distribution of topic vector theta:\n\talpha = opts.alpha || 50 / K;\n\n\t// Hyper-parameter of Dirichlet distribution of phi:\n\tbeta = opts.beta || 0.1;\n\n\t// Extract words & construct vocabulary:s\n\tvocab = [];\n\tw = new Array( D );\n\tpos = 0;\n\tfor ( d = 0; d < D; d++ ) {\n\t\tw[ d ] = [];\n\t\twd = tokenize( documents[ d ] );\n\t\tnd = wd.length;\n\t\tfor ( i = 0; i < nd; i++ ) {\n\t\t\ttarget = wd[ i ];\n\t\t\tit = findIndex( vocab, target );\n\t\t\tif ( it === -1 ) {\n\t\t\t\tvocab.push( target );\n\t\t\t\tw[ d ].push( pos );\n\t\t\t\tpos += 1;\n\t\t\t} else {\n\t\t\t\tw[ d ].push( it );\n\t\t\t}\n\t\t}\n\t}\n\t// Size of vocabulary:\n\tW = vocab.length;\n\n\tmodel = {};\n\n\t// Attach read-only properties:\n\tsetReadOnly( model, 'K', K );\n\tsetReadOnly( model, 'D', D );\n\tsetReadOnly( model, 'W', W );\n\tsetReadOnly( model, 'alpha', alpha );\n\tsetReadOnly( model, 'beta', beta );\n\n\t// Attach methods:\n\tsetReadOnly( model, 'init', init );\n\tsetReadOnly( model, 'fit', fit );\n\tsetReadOnly( model, 'getPhis', getPhis );\n\tsetReadOnly( model, 'getThetas', getThetas );\n\tsetReadOnly( model, 'getTerms', getTerms );\n\n\tmodel.nwSum = new Int32Array( K );\n\tmodel.ndSum = new Int32Array( D );\n\tmodel.nw = matrix( [ W, K ], 'int32' );\n\tmodel.nd = matrix( [ D, K ], 'int32' );\n\n\tmodel.phiList = [];\n\tmodel.thetaList = [];\n\n\tmodel.w = w;\n\tmodel.init();\n\n\treturn model;\n\n\t/**\n\t* Get top terms for the specified topic.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} k - topic\n\t* @param {PositiveInteger} [no=10] - number of terms\n\t* @throws {TypeError} first argument must be a nonnegative integer smaller than the total number of topics\n\t* @throws {TypeError} second argument must be a positive integer\n\t* @returns {Array} word probability array\n\t*/\n\tfunction getTerms( k, no ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar skip;\n\t\tvar phi;\n\t\tvar ret;\n\t\tvar max;\n\t\tvar mid;\n\t\tvar i;\n\n\t\tif ( !isNonNegativeInteger( k ) || k >= K ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a nonnegative integer smaller than the total number of topics. Value: `' + k + '`.' );\n\t\t}\n\t\tif ( no ) {\n\t\t\tif ( !isPositiveInteger( no ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + no + '`.' );\n\t\t\t}\n\t\t} else {\n\t\t\tno = 10;\n\t\t}\n\n\t\tret = new Array( no );\n\t\tskip = [];\n\t\tfor ( i = 0; i < no; i++ ) {\n\t\t\tmax = 0;\n\t\t\tfor ( j = 0; j < this.W; j++ ) {\n\t\t\t\tphi = this.avgPhi.get( k, j );\n\t\t\t\tif ( phi > max && !contains( skip, j ) ) {\n\t\t\t\t\tmax = phi;\n\t\t\t\t\tmid = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tskip.push( mid );\n\t\t\tret[ i ] = {\n\t\t\t\t'word': vocab[ mid ],\n\t\t\t\t'prob': max\n\t\t\t};\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\nexport default lda;\n","import __var_0__ from './lda.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @module @stdlib/nlp/lda\n*\n* @example\n* var lda = require( '@stdlib/nlp/lda' );\n*\n* var words;\n* var model;\n* var docs;\n*\n* docs = [\n*     'I loved you first',\n*     'For one is both and both are one in love',\n*     'You never see my pain',\n*     'My love is such that rivers cannot quench',\n*     'See a lot of pain, a lot of tears'\n* ];\n*\n* model = lda( docs, 2 );\n* // returns {}\n*\n* model.fit( 1000, 100, 10 );\n*\n* words = getTerms( 0, 3 );\n* // e.g., returns [ { word: 'both', prob: ~0.0632 }, { word: 'pain', prob: ~0.0552 }, ... ]\n*/\n\n// MODULES //\nvar lda = __var_0__;\n\n\n// EXPORTS //\nexport default lda;\n"]}