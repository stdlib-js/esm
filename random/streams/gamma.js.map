{"version":3,"sources":["@stdlib/random/streams/gamma/lib/validate.js","@stdlib/random/streams/gamma/lib/debug.js","@stdlib/random/streams/gamma/lib/main.js","@stdlib/random/streams/gamma/lib/object_mode.js","@stdlib/random/streams/gamma/lib/factory.js","@stdlib/random/streams/gamma/lib/index.js"],"names":["isObject","__var_0__","hasOwnProp","__var_1__","isBoolean","__var_2__","isPrimitive","isNonNegative","__var_3__","isString","__var_4__","isPositiveInteger","__var_5__","isNonNegativeInteger","__var_6__","validate","opts","options","sep","TypeError","objectMode","encoding","highWaterMark","iter","siter","prng","seed","state","copy","logger","debug","Readable","isPositiveNumber","isError","inherit","setNonEnumerable","setNonEnumerableReadOnly","setReadOnlyAccessor","__var_7__","setReadWriteAccessor","__var_8__","rgamma","__var_9__","factory","string2buffer","__var_10__","DEFAULTS","__var_11__","__var_12__","__var_13__","getSeed","this","_prng","getSeedLength","seedLength","getStateLength","stateLength","getStateSize","byteLength","getState","setState","s","read","FLG","r","_destroyed","_i","_iter","push","_objectMode","toString","_sep","_siter","emit","destroy","error","self","process","nextTick","message","JSON","stringify","RandomStream","alpha","beta","err","arguments","length","call","PRNG","prototype","nargs","createStream1","createStream2","setReadOnly","stream"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/assert/is-positive-integer';\nimport __var_6__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNonNegative = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\nvar isPositiveInteger = __var_5__.isPrimitive;\nvar isNonNegativeInteger = __var_6__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err= validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sep` option must be a primitive string. Option: `' + opts.sep + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( 'invalid option. `encoding` option must be a primitive string or null. Option: `' + opts.encoding + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + opts.iter + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `siter` option must be a positive integer. Option: `' + opts.siter + '`.' );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/vendor/debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logger = __var_0__;\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:gamma' );\n\n\n// EXPORTS //\nexport default debug;\n","import process from '@stdlib/vendor/process.js';\nimport __var_0__ from '@stdlib/vendor/readable-stream.js';\nimport __var_1__ from '@stdlib/assert/is-positive-number';\nimport __var_2__ from '@stdlib/assert/is-error';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from '@stdlib/utils/inherit';\nimport __var_5__ from '@stdlib/utils/define-nonenumerable-property';\nimport __var_6__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_7__ from '@stdlib/utils/define-read-only-accessor';\nimport __var_8__ from '@stdlib/utils/define-read-write-accessor';\nimport __var_9__ from '@stdlib/random/base/gamma';\nimport __var_10__ from '@stdlib/buffer/from-string';\nimport __var_11__ from './defaults.json';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './debug.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Readable = __var_0__.Readable;\nvar isPositiveNumber = __var_1__.isPrimitive;\nvar isError = __var_2__;\nvar copy = __var_3__;\nvar inherit = __var_4__;\nvar setNonEnumerable = __var_5__;\nvar setNonEnumerableReadOnly = __var_6__;\nvar setReadOnlyAccessor = __var_7__;\nvar setReadWriteAccessor = __var_8__;\nvar rgamma = __var_9__.factory;\nvar string2buffer = __var_10__;\nvar DEFAULTS = __var_11__;\nvar validate = __var_12__;\nvar debug = __var_13__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\t// TODO: replace with polyfill\n\tprocess.nextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a gamma distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rgamma( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\nexport default RandomStream;\n","import __var_0__ from '@stdlib/assert/is-plain-object';\nimport __var_1__ from '@stdlib/utils/copy';\nimport __var_2__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isObject = __var_0__;\nvar copy = __var_1__;\nvar RandomStream = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\nexport default objectMode;\n","import __var_0__ from '@stdlib/utils/copy';\nimport __var_1__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar copy = __var_0__;\nvar RandomStream = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\topts = copy( alpha, 1 );\n\t} else if ( nargs > 2 ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - rate parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './object_mode.js';\nimport __var_3__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @module @stdlib/random/streams/gamma\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stream = __var_1__;\nvar objectMode = __var_2__;\nvar factory = __var_3__;\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\nexport default stream;\n"]}