{"version":3,"sources":["@stdlib/random/base/beta/lib/validate.js","@stdlib/random/base/beta/lib/sample1.js","@stdlib/random/base/beta/lib/sample2.js","@stdlib/random/base/beta/lib/sample3.js","@stdlib/random/base/beta/lib/beta.js","@stdlib/random/base/beta/lib/factory.js","@stdlib/random/base/beta/lib/main.js","@stdlib/random/base/beta/lib/index.js"],"names":["isPositive","__var_0__","isPrimitive","validate","alpha","beta","TypeError","pow","ln","__var_1__","sample","randu","randn","flg","s4","A","s","t","u","x","y","sigma","mu","B","C","L","exp","__var_2__","rand","lx","ly","xy","v","sample1","sample2","sample3","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","__var_3__","isBoolean","__var_4__","isFunction","__var_5__","hasOwnProp","__var_6__","constantFunction","__var_7__","noop","__var_8__","__var_9__","factory","__var_10__","isnan","__var_11__","gcopy","__var_12__","Uint32Array","__var_13__","isUint32Array","__var_14__","copy","__var_15__","typedarray2json","__var_16__","__var_17__","beta0","__var_18__","STATE","rnorm","opts","prng","FLG","err","arguments","length","state","beta2","beta1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-number';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositive = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/math/base/special/pow';\nimport __var_1__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\nvar ln = __var_1__;\n\n\n// MAIN //\n\n/**\n* Handles case where `alpha` and `beta` are equal and greater than `1.5`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha ) {\n\tvar flg;\n\tvar s4;\n\tvar A;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tt = pow( A+A, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = 0.5 * ( 1.0+(s/t) );\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ts4 = pow( s, 4.0 );\n\t\t\ty = (8.0*alpha) - 12.0;\n\t\t\ty = 1.0 - (s4 / y);\n\t\t\tif ( u <= y ) {\n\t\t\t\tflg = false;\n\t\t\t} else {\n\t\t\t\ty += 0.5 * pow( s4/((8.0*alpha)-8.0), 2.0 );\n\t\t\t\tif ( u < y ) {\n\t\t\t\t\ty = A * ln( 4.0*x*(1.0-x) );\n\t\t\t\t\ty += s*s / 2.0;\n\t\t\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\t\t\tflg = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/math/base/special/pow';\nimport __var_1__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\nvar ln = __var_1__;\n\n\n// MAIN //\n\n/**\n* Handles case where both `alpha` and `beta` are greater than `1.0`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar sigma;\n\tvar flg;\n\tvar mu;\n\tvar A;\n\tvar B;\n\tvar C;\n\tvar L;\n\tvar s;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tB = beta - 1.0;\n\tC = A + B;\n\tL = C * ln( C );\n\tmu = A / C;\n\tsigma = 0.5 / pow( C, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = mu + (s*sigma);\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ty = A * ln( x/A );\n\t\t\ty += B * ln((1.0-x) / B);\n\t\t\ty += L + (0.5*s*s);\n\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\tflg = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/math/base/special/exp';\nimport __var_1__ from '@stdlib/math/base/special/pow';\nimport __var_2__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar exp = __var_0__;\nvar pow = __var_1__;\nvar ln = __var_2__;\n\n\n// MAIN //\n\n/**\n* Handles general case.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( rand, alpha, beta ) {\n\tvar lx;\n\tvar ly;\n\tvar xy;\n\tvar u;\n\tvar v;\n\tvar x;\n\tvar y;\n\twhile ( true ) {\n\t\tu = rand();\n\t\tv = rand();\n\t\tx = pow( u, 1.0/alpha );\n\t\ty = pow( v, 1.0/beta );\n\t\txy = x + y;\n\t\tif ( xy <= 1.0 ) {\n\t\t\tif ( xy > 0.0 ) {\n\t\t\t\treturn x / ( xy );\n\t\t\t}\n\t\t\tlx = ln( u ) / alpha;\n\t\t\tly = ln( v ) / beta;\n\t\t\tif ( lx > ly ) {\n\t\t\t\tly -= lx;\n\t\t\t\tlx = 0.0;\n\t\t\t} else {\n\t\t\t\tlx -= ly;\n\t\t\t\tly = 0.0;\n\t\t\t}\n\t\t\treturn exp( lx - ln( exp(lx) + exp(ly) ) );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from './sample1.js';\nimport __var_1__ from './sample2.js';\nimport __var_2__ from './sample3.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sample1 = __var_0__;\nvar sample2 = __var_1__;\nvar sample3 = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from a beta distribution.\n*\n* @private\n* @param {PRNG} randu - pseudorandom number generator for uniformly distributed numbers\n* @param {PRNG} randn - pseudorandom number generator for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tif ( alpha === beta && alpha > 1.5 ) {\n\t\treturn sample1( randu, randn, alpha );\n\t}\n\tif ( alpha > 1.0 && beta > 1.0 ) {\n\t\treturn sample2( randu, randn, alpha, beta );\n\t}\n\treturn sample3( randu, alpha, beta );\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-boolean';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/utils/constant-function';\nimport __var_8__ from '@stdlib/utils/noop';\nimport __var_9__ from '@stdlib/random/base/improved-ziggurat';\nimport __var_10__ from '@stdlib/random/base/mt19937';\nimport __var_11__ from '@stdlib/math/base/assert/is-nan';\nimport __var_12__ from '@stdlib/blas/base/gcopy';\nimport __var_13__ from '@stdlib/array/uint32';\nimport __var_14__ from '@stdlib/assert/is-uint32array';\nimport __var_15__ from '@stdlib/utils/copy';\nimport __var_16__ from '@stdlib/array/to-json';\nimport __var_17__ from './validate.js';\nimport __var_18__ from './beta.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isBoolean = __var_4__.isPrimitive;\nvar isFunction = __var_5__;\nvar hasOwnProp = __var_6__;\nvar constantFunction = __var_7__;\nvar noop = __var_8__;\nvar randn = __var_9__.factory;\nvar randu = __var_10__.factory;\nvar isnan = __var_11__;\nvar gcopy = __var_12__;\nvar Uint32Array = __var_13__;\nvar isUint32Array = __var_14__;\nvar copy = __var_15__;\nvar typedarray2json = __var_16__;\nvar validate = __var_17__;\nvar beta0 = __var_18__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating beta distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var beta = factory( 2.0, 1.0 );\n* var v = beta();\n* // returns <number>\n*\n* @example\n* var beta = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = beta();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar rnorm;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = beta2;\n\t} else {\n\t\tprng = beta1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'beta' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta1();\n\t* // returns <number>\n\t*/\n\tfunction beta1() {\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction beta2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Generates a beta distributed random number.\n*\n* ## References\n*\n* -   Ahrens, J.H., and U. Dieter. 1974. \"Computer methods for sampling from gamma, beta, poisson and bionomial distributions.\" _Computing_ 12 (3): 223–46. doi:[10.1007/BF02293108](http://dx.doi.org/10.1007/BF02293108).\n* -   Jöhnk, M.D. 1964. \"Erzeugung von Betaverteilten Und Gammaverteilten Zufallszahlen.\" _Metrika_ 8: 5–15. <http://eudml.org/doc/175224>.\n*\n* @name beta\n* @type {PRNG}\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*\n* @example\n* var r = beta( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = beta( -2.0, 5.0 );\n* // returns NaN\n*/\nvar beta = factory();\n\n\n// EXPORTS //\nexport default beta;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/beta\n*\n* @example\n* var beta = require( '@stdlib/random/base/beta' );\n*\n* var v = beta( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/beta' ).factory;\n*\n* var beta = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = beta();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar beta = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( beta, 'factory', factory );\n\n\n// EXPORTS //\nexport default beta;\n"]}