{"version":3,"sources":["@stdlib/random/base/poisson/lib/knuth.js","@stdlib/random/base/poisson/lib/rejection.js","@stdlib/random/base/poisson/lib/poisson.js","@stdlib/random/base/poisson/lib/factory.js","@stdlib/random/base/poisson/lib/main.js","@stdlib/random/base/poisson/lib/index.js"],"names":["exp","__var_0__","poisson","rand","lambda","p","k","factorialln","floor","__var_1__","sign","__var_2__","sqrt","__var_3__","abs","__var_4__","ln","__var_5__","LN_SQRT_TWO_PI","__var_6__","ONE_12","ONE_360","slambda","ainv","urvr","us","vr","a","b","u","v","knuth","rejection","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isPositive","isPrimitive","isObject","isFunction","hasOwnProp","constantFunction","__var_7__","noop","__var_8__","randu","__var_9__","factory","isnan","__var_10__","typedarray2json","__var_11__","poisson0","__var_12__","opts","prng","arguments","length","TypeError","poisson2","poisson1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/exp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar exp = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution.\n*\n* ## Notes\n*\n* -   Appropriate for \\\\(lambda < 30\\\\).\n*\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n*\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tvar p = rand();\n\tvar k = 1;\n\twhile ( p > exp( -lambda ) ) {\n\t\tk += 1;\n\t\tp *= rand();\n\t}\n\treturn k - 1;\n}\n\n\n// EXPORTS //\nexport default poisson;\n","import __var_0__ from '@stdlib/math/base/special/factorialln';\nimport __var_1__ from '@stdlib/math/base/special/floor';\nimport __var_2__ from '@stdlib/math/base/special/signum';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\nimport __var_4__ from '@stdlib/math/base/special/abs';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-ln-sqrt-two-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factorialln = __var_0__;\nvar floor = __var_1__;\nvar sign = __var_2__;\nvar sqrt = __var_3__;\nvar abs = __var_4__;\nvar ln = __var_5__;\nvar LN_SQRT_TWO_PI = __var_6__;\n\n\n// VARIABLES //\n\nvar ONE_12 = 1.0 / 12.0;\nvar ONE_360 = 1.0 / 360.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* ## References\n*\n* -   Hörmann, W. 1993. \"The transformed rejection method for generating Poisson random variables.\" _Insurance: Mathematics and Economics_ 12 (1): 39–45. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].\n*\n* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4\n*\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tvar slambda;\n\tvar ainv;\n\tvar urvr;\n\tvar us;\n\tvar vr;\n\tvar a;\n\tvar b;\n\tvar k;\n\tvar u;\n\tvar v;\n\n\tslambda = sqrt( lambda );\n\n\tb = (2.53*slambda) + 0.931;\n\ta = (0.02483*b) - 0.059;\n\n\tainv = (1.1328/(b-3.4)) + 1.1239;\n\tvr = (-3.6224/(b-2.0)) + 0.9277;\n\turvr = 0.86 * vr;\n\n\twhile ( true ) {\n\t\tv = rand();\n\t\tif ( v <= urvr ) {\n\t\t\tu = (v / vr) - 0.43;\n\t\t\tu *= (2.0*a / (0.5-abs(u))) + b;\n\t\t\tu += lambda + 0.445;\n\t\t\treturn floor( u );\n\t\t}\n\t\tif ( v >= vr ) {\n\t\t\tu = rand() - 0.5;\n\t\t} else {\n\t\t\tu = (v / vr) - 0.93;\n\t\t\tu = (sign( u )*0.5) - u;\n\t\t\tv = vr * rand();\n\t\t}\n\t\tus = 0.5 - abs( u );\n\t\tif (\n\t\t\tus >= 0.013 ||\n\t\t\tus >= v\n\t\t) {\n\t\t\tk = floor( (((2.0*a/us) + b)*u) + lambda + 0.445 );\n\t\t\tv *= ainv / ( (a/(us*us)) + b );\n\t\t\tu = (k+0.5) * ln( lambda/k );\n\t\t\tu += -lambda - LN_SQRT_TWO_PI + k;\n\t\t\tu -= ( ONE_12 - (ONE_360/(k*k)) ) / k;\n\t\t\tif (\n\t\t\t\tk >= 10 &&\n\t\t\t\tu >= ln( v*slambda )\n\t\t\t) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\tu = (k*ln( lambda )) - lambda - factorialln( k );\n\t\t\tif (\n\t\t\t\tk >= 0 &&\n\t\t\t\tk <= 9 &&\n\t\t\t\tu >= ln( v )\n\t\t\t) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default poisson;\n","import __var_0__ from './knuth.js';\nimport __var_1__ from './rejection.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar knuth = __var_0__;\nvar rejection = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tif ( lambda < 30.0 ) {\n\t\treturn knuth( rand, lambda );\n\t}\n\treturn rejection( rand, lambda );\n}\n\n\n// EXPORTS //\nexport default poisson;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/utils/constant-function';\nimport __var_8__ from '@stdlib/utils/noop';\nimport __var_9__ from '@stdlib/random/base/mt19937';\nimport __var_10__ from '@stdlib/math/base/assert/is-nan';\nimport __var_11__ from '@stdlib/array/to-json';\nimport __var_12__ from './poisson.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isObject = __var_4__;\nvar isFunction = __var_5__;\nvar hasOwnProp = __var_6__;\nvar constantFunction = __var_7__;\nvar noop = __var_8__;\nvar randu = __var_9__.factory;\nvar isnan = __var_10__;\nvar typedarray2json = __var_11__;\nvar poisson0 = __var_12__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Poisson distributed random numbers.\n*\n* @param {PositiveNumber} [lambda] - mean\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var poisson = factory( 5.0 );\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var poisson = factory( 8.0, {\n*     'seed': 297\n* });\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var poisson = factory();\n* var v = poisson( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + lambda + '`.' );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( lambda === void 0 ) {\n\t\tprng = poisson2;\n\t} else {\n\t\tprng = poisson1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'poisson' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( lambda === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = poisson1();\n\t* // returns <number>\n\t*/\n\tfunction poisson1() {\n\t\treturn poisson0( rand, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} lambda - mean\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = poisson2( 0.5 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = poisson2( NaN );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = poisson2( -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction poisson2( lambda ) {\n\t\tif (\n\t\t\tisnan( lambda ) ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn poisson0( rand, lambda );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* ## Method\n*\n* -   When \\\\(\\lambda < 30\\\\), use Knuth's method.\n* -   When \\\\(lambda \\geq 30\\\\), use transformed rejection method as Knuth's method does not scale well with \\\\(\\lambda\\\\).\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n* -   Hörmann, W. 1993. \"The transformed rejection method for generating Poisson random variables.\" _Insurance: Mathematics and Economics_ 12 (1): 39–45. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].\n*\n* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4\n*\n*\n* @name poisson\n* @type {PRNG}\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = poisson( 0.5 );\n* // returns <number>\n*\n* @example\n* var v = poisson( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = poisson( NaN );\n* // returns NaN\n*/\nvar poisson = factory();\n\n\n// EXPORTS //\nexport default poisson;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/poisson\n*\n* @example\n* var poisson = require( '@stdlib/random/base/poisson' );\n*\n* var v = poisson( 4.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/poisson' ).factory;\n* var poisson = factory( 4.0, {\n*     'seed': 297\n* });\n*\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/poisson' ).factory;\n* var poisson = factory({\n*     'seed': 297\n* });\n*\n* var v = poisson( 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar poisson = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( poisson, 'factory', factory );\n\n\n// EXPORTS //\nexport default poisson;\n"]}