{"version":3,"sources":["@stdlib/random/base/logistic/lib/validate.js","@stdlib/random/base/logistic/lib/logistic.js","@stdlib/random/base/logistic/lib/factory.js","@stdlib/random/base/logistic/lib/main.js","@stdlib/random/base/logistic/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isPositive","__var_1__","isnan","__var_2__","validate","mu","s","TypeError","ln","logistic","rand","u","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","__var_3__","isFunction","__var_4__","hasOwnProp","__var_5__","constantFunction","__var_6__","noop","__var_7__","randu","__var_8__","factory","__var_9__","typedarray2json","__var_10__","__var_11__","logistic0","__var_12__","opts","prng","err","arguments","length","logistic2","logistic1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-positive-number';\nimport __var_2__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isPositive = __var_1__.isPrimitive;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, s ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );\n\t}\n\tif ( !isPositive( s ) ) {\n\t\treturn new TypeError( 'invalid argument. `s` must be a positive number. Value: `' + s + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ln = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a logistic distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction logistic( rand, mu, s ) {\n\tvar u = rand();\n\treturn mu + ( s*ln( u / (1.0-u) ) );\n}\n\n\n// EXPORTS //\nexport default logistic;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/random/base/mt19937';\nimport __var_9__ from '@stdlib/math/base/assert/is-nan';\nimport __var_10__ from '@stdlib/array/to-json';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './logistic.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar randu = __var_8__.factory;\nvar isnan = __var_9__;\nvar typedarray2json = __var_10__;\nvar validate = __var_11__;\nvar logistic0 = __var_12__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a logistic distribution.\n*\n* @param {number} [mu] - mean parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var logistic = factory( 0.0, 1.0 );\n*\n* var v = logistic();\n* // returns <number>\n*\n* @example\n* var logistic = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = logistic();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\tvar s;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\terr = validate( mu, s );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = logistic2;\n\t} else {\n\t\tprng = logistic1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'logistic' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, s ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a logistic distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = logistic1();\n\t* // returns <number>\n\t*/\n\tfunction logistic1() {\n\t\treturn logistic0( rand, mu, s );\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} s - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = logistic2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = logistic2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction logistic2( mu, s ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( s ) ||\n\t\t\ts <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn logistic0( rand, mu, s );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a logistic distribution.\n*\n* @name logistic\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = logistic( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = logistic( 0.0, -1.0 );\n* // returns NaN\n*/\nvar logistic = factory();\n\n\n// EXPORTS //\nexport default logistic;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/logistic\n*\n* @example\n* var logistic = require( '@stdlib/random/base/logistic' );\n*\n* var v = logistic( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/logistic' ).factory;\n* var logistic = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = logistic();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/logistic' ).factory;\n* var logistic = factory({\n*     'seed': 297\n* });\n*\n* var v = logistic( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logistic = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logistic, 'factory', factory );\n\n\n// EXPORTS //\nexport default logistic;\n"]}