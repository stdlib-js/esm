{"version":3,"sources":["@stdlib/random/base/geometric/lib/geometric.js","@stdlib/random/base/geometric/lib/factory.js","@stdlib/random/base/geometric/lib/main.js","@stdlib/random/base/geometric/lib/index.js"],"names":["floor","__var_0__","ln","__var_1__","geometric","rand","p","u","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","__var_2__","isObject","__var_3__","isProbability","__var_4__","isPrimitive","isFunction","__var_5__","hasOwnProp","__var_6__","constantFunction","__var_7__","noop","__var_8__","randu","__var_9__","factory","isnan","__var_10__","typedarray2json","__var_11__","geometric0","__var_12__","opts","prng","arguments","length","TypeError","geometric2","geometric1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN"],"mappings":"usBAuBA,IAAIA,EAAQC,EACRC,EAAKC,EAgDT,SAASC,EAAWC,EAAMC,GACzB,IAAIC,EAAIF,IAKR,OAJW,IAANE,IAEJA,EAAIF,KAEEL,EAAOE,EAAIK,GAAML,EAAI,EAAII,IC5CjC,IAAIE,EAAcP,EACdQ,EAAsBN,EACtBO,EAAuBC,EACvBC,EAAWC,EACXC,EAAgBC,EAAUC,YAC1BC,EAAaC,EACbC,EAAaC,EACbC,EAAmBC,EACnBC,EAAOC,EACPC,EAAQC,EAAUC,QAClBC,EAAQC,EACRC,EAAkBC,EAClBC,EAAaC,EAqCjB,SAASN,IACR,IAAIO,EACA7B,EACA8B,EACA7B,EAEJ,GAA0B,IAArB8B,UAAUC,OACdhC,EAAOoB,SACD,GACe,IAArBW,UAAUC,QACVzB,EAAUwB,UAAW,IAGrB,GAAKjB,EADLe,EAAOE,UAAW,GACK,QAAW,CACjC,IAAMnB,EAAYiB,EAAKC,MACtB,MAAM,IAAIG,UAAW,4FAA8FJ,EAAKC,KAAO,MAEhI9B,EAAO6B,EAAKC,UAEZ9B,EAAOoB,EAAOS,OAET,CAEN,IAAMpB,EADNR,EAAI8B,UAAW,IAEd,MAAM,IAAIE,UAAW,mEAAqEhC,EAAI,MAE/F,GAAK8B,UAAUC,OAAS,EAAI,CAE3B,IAAMzB,EADNsB,EAAOE,UAAW,IAEjB,MAAM,IAAIE,UAAW,iEAAmEJ,EAAO,MAEhG,GAAKf,EAAYe,EAAM,QAAW,CACjC,IAAMjB,EAAYiB,EAAKC,MACtB,MAAM,IAAIG,UAAW,4FAA8FJ,EAAKC,KAAO,MAEhI9B,EAAO6B,EAAKC,UAEZ9B,EAAOoB,EAAOS,QAGf7B,EAAOoB,IA6BT,OArBAjB,EAJC2B,OADU,IAAN7B,EACGiC,EAEAC,EAEW,OAAQ,aAGtBN,GAAQA,EAAKC,MACjB3B,EAAa2B,EAAM,OAAQ,MAC3B3B,EAAa2B,EAAM,aAAc,MACjCzB,EAAsByB,EAAM,QAASd,EAAkB,MAAQE,GAC/Df,EAAa2B,EAAM,cAAe,MAClC3B,EAAa2B,EAAM,aAAc,MACjC3B,EAAa2B,EAAM,SAAUd,EAAkB,OAC/Cb,EAAa2B,EAAM,OAAQ9B,KAE3BI,EAAqB0B,EAAM,OAAQM,GACnChC,EAAqB0B,EAAM,aAAcO,GACzChC,EAAsByB,EAAM,QAASQ,EAAUC,GAC/CnC,EAAqB0B,EAAM,cAAeU,GAC1CpC,EAAqB0B,EAAM,aAAcW,GACzCtC,EAAa2B,EAAM,SAAUY,GAC7BvC,EAAa2B,EAAM,OAAQ9B,GAC3BA,EAAOA,EAAK2C,YAENb,EAQP,SAASM,IACR,OAAOpC,EAAK4C,KASb,SAASP,IACR,OAAOrC,EAAK6C,WASb,SAASL,IACR,OAAOxC,EAAK8C,YASb,SAASL,IACR,OAAOzC,EAAK+C,WASb,SAAST,IACR,OAAOtC,EAAKgD,MAUb,SAAST,EAAUU,GAClBjD,EAAKgD,MAAQC,EAad,SAASP,IACR,IAAIQ,EAAM,CACVC,KAAW,QAQX,OAPAD,EAAIE,KAAOtB,EAAKuB,KAChBH,EAAIF,MAAQvB,EAAiBzB,EAAKgD,OAEjCE,EAAII,YADM,IAANrD,EACS,GAEA,CAAEA,GAETiD,EAaR,SAASf,IACR,OAAOR,EAAY3B,EAAMC,GAc1B,SAASiC,EAAYjC,GACpB,OACCsB,EAAOtB,IACPA,EAAI,GACJA,EAAI,EAEGsD,IAED5B,EAAY3B,EAAMC,ICzP3B,IAAIqB,EAAU1B,EA6BVG,EAAYuB,ICKZnB,EAAcP,EACdG,EAAYD,EACZwB,EAAUhB,EAKdH,EAAaJ,EAAW,UAAWuB","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\nimport __var_1__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\nvar ln = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a geometric distribution.\n*\n* ## Proof\n*\n* Consider\n*\n* ```tex\n* N = \\left \\lfloor \\ln (U) / \\ln (1-p) \\right \\rfloor\n* ```\n*\n* where \\\\( U \\\\) is uniform on the interval \\\\((0,1)\\\\). Accordingly, \\\\(N\\\\) must be a nonnegative integer, and, for every \\\\( n \\geq 0\\\\), the event \\\\(A_n = \\left \\{ N = n \\right \\}\\\\) is\n*\n* ```tex\n* A_n = \\left \\{(n+1) \\ln (1-p) < \\ln (U) \\leq n \\ln (1-p) \\right \\}\n* ```\n*\n* where \\\\(\\ln (1-p) < 0\\\\). Thus,\n*\n* ```tex\n* A_n = \\left \\{(1-p)^{n+1} < U \\leq (1-p)^n \\right \\}\n* ```\n*\n* For every \\\\(u < v\\\\) on the interval \\\\((0,1)\\\\),\n*\n* ```tex\n* P\\left \\[u < U \\leq v\\right \\] = v - u\n* ```\n*\n* Hence,\n*\n* ```tex\n* P\\left \\[N = n \\right \\] = P\\left \\[A_n\\right \\] = (1-p)^n - (1-p)^{n+1} = (1-p)^n(1-(1-p)) = p(1-p)^n\n* ```\n*\n* which proves that \\\\(N\\\\) is a geometric random variable.\n*\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction geometric( rand, p ) {\n\tvar u = rand();\n\tif ( u === 0.0 ) {\n\t\t// Drawing random variates from a PRNG (with period > 1) is effectively sampling without replacement. Thus, should not be possible to draw `0` twice in a row.\n\t\tu = rand();\n\t}\n\treturn floor( ln( u ) / ln( 1.0-p ) );\n}\n\n\n// EXPORTS //\nexport default geometric;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-probability';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/utils/constant-function';\nimport __var_8__ from '@stdlib/utils/noop';\nimport __var_9__ from '@stdlib/random/base/mt19937';\nimport __var_10__ from '@stdlib/math/base/assert/is-nan';\nimport __var_11__ from '@stdlib/array/to-json';\nimport __var_12__ from './geometric.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isProbability = __var_4__.isPrimitive;\nvar isFunction = __var_5__;\nvar hasOwnProp = __var_6__;\nvar constantFunction = __var_7__;\nvar noop = __var_8__;\nvar randu = __var_9__.factory;\nvar isnan = __var_10__;\nvar typedarray2json = __var_11__;\nvar geometric0 = __var_12__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating geometric distributed random numbers.\n*\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var geometric = factory( 0.5 );\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var geometric = factory( 0.8, {\n*     'seed': 297\n* });\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var geometric = factory();\n* var v = geometric( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar p;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a probability. Value: `' + p + '`.' );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( p === void 0 ) {\n\t\tprng = geometric2;\n\t} else {\n\t\tprng = geometric1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'geometric' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( p === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a geometric distribution with bound parameter `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = geometric1();\n\t* // returns <number>\n\t*/\n\tfunction geometric1() {\n\t\treturn geometric0( rand, p );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a geometric distribution with parameter `p`.\n\t*\n\t* @private\n\t* @param {Probability} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = geometric2( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction geometric2( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn geometric0( rand, p );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom random number drawn from a geometric distribution with parameter `p`.\n*\n* @name geometric\n* @type {PRNG}\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = geometric( 0.5 );\n* // returns <number>\n*\n* @example\n* var v = geometric( 3.14 );\n* // returns NaN\n*\n* @example\n* var v = geometric( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = geometric( NaN );\n* // returns NaN\n*/\nvar geometric = factory();\n\n\n// EXPORTS //\nexport default geometric;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/geometric\n*\n* @example\n* var geometric = require( '@stdlib/random/base/geometric' );\n*\n* var v = geometric( 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/geometric' ).factory;\n*\n* var geometric = factory( 0.3, {\n*     'seed': 297\n* });\n*\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/geometric' ).factory;\n*\n* var geometric = factory({\n*     'seed': 297\n* });\n*\n* var v = geometric( 0.5 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar geometric = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( geometric, 'factory', factory );\n\n\n// EXPORTS //\nexport default geometric;\n"]}