{"version":3,"sources":["@stdlib/random/base/t/lib/factory.js","@stdlib/random/base/t/lib/main.js","@stdlib/random/base/t/lib/index.js"],"names":["setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","hasOwnProp","__var_3__","isPositive","__var_4__","isPrimitive","isObject","__var_5__","isUint32Array","__var_6__","isBoolean","__var_7__","isnan","__var_8__","isFunction","__var_9__","constantFunction","__var_10__","noop","__var_11__","chisquare","__var_12__","factory","randn","__var_13__","gcopy","__var_14__","Uint32Array","__var_15__","copy","__var_16__","typedarray2json","__var_17__","sqrt","__var_18__","rchisq","STATE","rnorm","rand","opts","prng","FLG","v","arguments","length","TypeError","state","t2","t1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","s","out","type","name","NAME","params","NaN","t"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/assert/is-positive-number';\nimport __var_5__ from '@stdlib/assert/is-plain-object';\nimport __var_6__ from '@stdlib/assert/is-uint32array';\nimport __var_7__ from '@stdlib/assert/is-boolean';\nimport __var_8__ from '@stdlib/math/base/assert/is-nan';\nimport __var_9__ from '@stdlib/assert/is-function';\nimport __var_10__ from '@stdlib/utils/constant-function';\nimport __var_11__ from '@stdlib/utils/noop';\nimport __var_12__ from '@stdlib/random/base/chisquare';\nimport __var_13__ from '@stdlib/random/base/improved-ziggurat';\nimport __var_14__ from '@stdlib/blas/base/gcopy';\nimport __var_15__ from '@stdlib/array/uint32';\nimport __var_16__ from '@stdlib/utils/copy';\nimport __var_17__ from '@stdlib/array/to-json';\nimport __var_18__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar hasOwnProp = __var_3__;\nvar isPositive = __var_4__.isPrimitive;\nvar isObject = __var_5__;\nvar isUint32Array = __var_6__;\nvar isBoolean = __var_7__.isPrimitive;\nvar isnan = __var_8__;\nvar isFunction = __var_9__;\nvar constantFunction = __var_10__;\nvar noop = __var_11__;\nvar chisquare = __var_12__.factory;\nvar randn = __var_13__.factory;\nvar gcopy = __var_14__;\nvar Uint32Array = __var_15__;\nvar copy = __var_16__;\nvar typedarray2json = __var_17__;\nvar sqrt = __var_18__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating t-distributed random numbers.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var t = factory( 1.0 );\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory();\n* var v = t( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar STATE;\n\tvar rnorm;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar FLG;\n\tvar v;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trnorm = randn( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isObject( arguments[ 0 ] ) ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\tv = arguments[ 0 ];\n\t\t\tif ( !isPositive( v ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number or an options object. Value: `' + v + '`.' );\n\t\t\t}\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + v + '`.' );\n\t\t}\n\t\topts = arguments[ 1 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trnorm = randn( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rnorm.state;\n\t\t\trnorm.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( v === void 0 ) {\n\t\tprng = t2;\n\t} else {\n\t\tprng = t1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 't' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( v === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ v ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t1();\n\t* // returns <number>\n\t*/\n\tfunction t1() {\n\t\treturn rnorm() / sqrt( rchisq() / v );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t2( 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = t2( 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = t2( -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction t2( v ) {\n\t\tif (\n\t\t\tisnan( v ) ||\n\t\t\tv <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rnorm() / sqrt( rchisq( v ) / v );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n*\n* @name t\n* @type {PRNG}\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = t( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = t( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = t( NaN );\n* // returns NaN\n*/\nvar t = factory();\n\n\n// EXPORTS //\nexport default t;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t-distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/t\n*\n* @example\n* var t = require( '@stdlib/random/base/t' );\n*\n* var v = t( 2.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/t' ).factory;\n* var t = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/t' ).factory;\n* var t = factory({\n*     'seed': 297\n* });\n*\n* var v = t( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar t = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( t, 'factory', factory );\n\n\n// EXPORTS //\nexport default t;\n"]}