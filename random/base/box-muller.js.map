{"version":3,"sources":["@stdlib/random/base/box-muller/lib/randn.js","@stdlib/random/base/box-muller/lib/min.js","@stdlib/random/base/box-muller/lib/max.js","@stdlib/random/base/box-muller/lib/factory.js","@stdlib/random/base/box-muller/lib/main.js","@stdlib/random/base/box-muller/lib/index.js"],"names":["sqrt","__var_0__","ln","__var_1__","sin","__var_2__","cos","__var_3__","TWO_PI","__var_4__","wrap","rand","flg","r","u1","u2","a","b","PI","COS_PI","getMin","min","getMax","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","isFunction","isBoolean","__var_5__","isPrimitive","hasOwnProp","__var_6__","isUint32Array","__var_7__","mt19937","__var_8__","factory","constantFunction","__var_9__","noop","__var_10__","typedarray2json","__var_11__","randn0","__var_12__","__var_13__","__var_14__","options","randu","randn","opts","copy","arguments","length","TypeError","prng","state","seed","normalized","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","MIN","seedLength","stateLength","byteLength","s","out","type","name","NAME","params"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from '@stdlib/math/base/special/sin';\nimport __var_3__ from '@stdlib/math/base/special/cos';\nimport __var_4__ from '@stdlib/constants/math/float64-two-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar ln = __var_1__;\nvar sin = __var_2__;\nvar cos = __var_3__;\nvar TWO_PI = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for generating standard normally distributed pseudorandom numbers using the Box-Muller algorithm.\n*\n* @private\n* @param {PRNG} rand - PRNG which returns standard uniformly distributed numbers\n* @returns {PRNG} PRNG\n*/\nfunction wrap( rand ) {\n\tvar flg;\n\tvar r;\n\n\t// Flag indicating whether to generate new normal random variates or return a cached normal random variate:\n\tflg = true;\n\n\treturn randn;\n\n\t/**\n\t* Generates a standard normally distributed pseudorandom number.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var r = randn();\n\t* // returns <number>\n\t*/\n\tfunction randn() {\n\t\tvar u1;\n\t\tvar u2;\n\t\tvar a;\n\t\tvar b;\n\t\tif ( flg ) {\n\t\t\t// Note: if `u1` is `0`, the natural log blows up, so we keep trying until we get a non-zero rand. Rarely should we need more than one iteration.\n\t\t\tdo {\n\t\t\t\tu1 = rand();\n\t\t\t\tu2 = rand();\n\t\t\t} while (\n\t\t\t\tu1 === 0.0\n\t\t\t);\n\t\t\ta = sqrt( -2.0 * ln(u1) );\n\t\t\tb = TWO_PI * u2;\n\t\t\tr = a * cos( b ); // cache for next call\n\t\t\tflg = false;\n\t\t\treturn a * sin( b );\n\t\t}\n\t\tflg = true;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from '@stdlib/math/base/special/cos';\nimport __var_3__ from '@stdlib/constants/math/float64-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar ln = __var_1__;\nvar cos = __var_2__;\nvar PI = __var_3__;\n\n\n// VARIABLES //\n\nvar COS_PI = cos( PI ); // -1\n\n\n// MAIN //\n\n/**\n* Returns the minimum possible normally distributed pseudorandom number.\n*\n* @private\n* @param {number} min - minimum possible uniformly distributed pseudorandom number\n* @returns {number} minimum possible number\n*/\nfunction getMin( min ) {\n\tvar a = sqrt( -2.0 * ln( min ) );\n\treturn a * COS_PI;\n}\n\n\n// EXPORTS //\nexport default getMin;\n","import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from '@stdlib/math/base/special/cos';\nimport __var_3__ from '@stdlib/constants/math/float64-two-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar ln = __var_1__;\nvar cos = __var_2__;\nvar TWO_PI = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns the maximum possible normally distributed pseudorandom number.\n*\n* @private\n* @param {number} min - minimum possible uniformly distributed pseudorandom number\n* @returns {number} maximum possible number\n*/\nfunction getMax( min ) {\n\tvar a = sqrt( -2.0 * ln( min ) );\n\tvar b = TWO_PI * min;\n\treturn a * cos( b );\n}\n\n\n// EXPORTS //\nexport default getMax;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/is-boolean';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/assert/is-uint32array';\nimport __var_8__ from '@stdlib/random/base/mt19937';\nimport __var_9__ from '@stdlib/utils/constant-function';\nimport __var_10__ from '@stdlib/utils/noop';\nimport __var_11__ from '@stdlib/array/to-json';\nimport __var_12__ from './randn.js';\nimport __var_13__ from './min.js';\nimport __var_14__ from './max.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar isBoolean = __var_5__.isPrimitive;\nvar hasOwnProp = __var_6__;\nvar isUint32Array = __var_7__;\nvar mt19937 = __var_8__.factory;\nvar constantFunction = __var_9__;\nvar noop = __var_10__;\nvar typedarray2json = __var_11__;\nvar randn0 = __var_12__;\nvar getMin = __var_13__;\nvar getMax = __var_14__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the Box-Muller transform to generate standard normally distributed pseudorandom numbers.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* // Return a seeded PRNG:\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar randu;\n\tvar randn;\n\tvar rand;\n\tvar opts;\n\n\topts = {\n\t\t'copy': true\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );\n\t\t\t}\n\t\t\trandu = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( randu === void 0 ) {\n\t\t\trand = mt19937( opts );\n\t\t\trandu = rand.normalized;\n\t\t} else {\n\t\t\topts.seed = null;\n\t\t}\n\t} else {\n\t\trand = mt19937( opts );\n\t\trandu = rand.normalized;\n\t}\n\trandn = randn0( randu );\n\n\tsetReadOnly( randn, 'NAME', 'box-muller' );\n\tif ( opts.seed === null ) {\n\t\tsetReadOnly( randn, 'seed', null );\n\t\tsetReadOnly( randn, 'seedLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( randn, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( randn, 'seedLength', getSeedLength );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadWriteAccessor( randn, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( randn, 'stateLength', null );\n\t\tsetReadOnly( randn, 'byteLength', null );\n\t\tsetReadOnly( randn, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadWriteAccessor( randn, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( randn, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( randn, 'byteLength', getStateSize );\n\t\tsetReadOnly( randn, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( randn, 'PRNG', randu );\n\n\tif ( hasOwnProp( randu, 'MIN' ) ) {\n\t\tsetReadOnly( randn, 'MIN', getMin( randu.MIN ) );\n\t\tsetReadOnly( randn, 'MAX', getMax( randu.MIN ) );\n\t} else {\n\t\tsetReadOnly( randn, 'MIN', null );\n\t\tsetReadOnly( randn, 'MAX', null );\n\t}\n\n\treturn randn;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randn.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Generates a standard normally distributed random number.\n*\n* ## Method\n*\n* -   Given two independent uniformly distributed random variables \\\\( U_1 \\\\) and \\\\( U_2 \\\\) in the interval \\\\( [0,1) \\\\), let\n*\n*     ``` tex\n*     \\begin{align*}\n*     Z_1 &= R \\cos(\\theta) = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) \\\\\n*     Z_2 &= R \\sin(\\theta) = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2)\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( Z_1 \\\\) and \\\\( Z_2 \\\\) are independent random variables with a standard normal distribution.\n*\n* -   As two uniform random variates are mapped to two standard normal random variates, one of the random variates is cached and returned upon the following invocation.\n*\n*\n* ## Notes\n*\n* -   The minimum and maximum pseudorandom numbers which can be generated are dependent on the number of bits an underlying uniform pseudorandom number generator (PRNG) uses. For instance, if a PRNG uses \\\\( 32 \\\\) bits, the smallest non-zero number that can be generated is \\\\( 2^{-32}). When \\\\( U_1 \\\\) equals this value and \\\\( U_2 \\\\) equals \\\\( 0 \\\\),\n*\n*     ``` tex\n*     r = \\sqrt{-2\\ln(2^{-32})} \\cos(2\\pi) \\approx 6.66\n*     ```\n*\n*     which means that the algorithm cannot produce random variates more than \\\\( 6.66 \\\\) standard deviations from the mean.\n*\n*     <!-- <note> -->\n*\n*     This corresponds to a \\\\( 2.74 \\times 10^{-11} \\\\) loss due to tail truncation.\n*\n*     <!-- </note> -->\n*\n*\n* ## References\n*\n* -   Box, G. E. P., and Mervin E. Muller. 1958. \"A Note on the Generation of Random Normal Deviates.\" _The Annals of Mathematical Statistics_ 29 (2). The Institute of Mathematical Statistics: 610–11. doi:[10.1214/aoms/1177706645](http://dx.doi.org/10.1214/aoms/1177706645).\n* -   Bell, James R. 1968. \"Algorithm 334: Normal Random Deviates.\" _Communications of the ACM_ 11 (7). New York, NY, USA: ACM: 498. doi:[10.1145/363397.363547](http://dx.doi.org/10.1145/363397.363547).\n* -   Knop, R. 1969. \"Remark on Algorithm 334 \\[G5]: Normal Random Deviates.\" _Communications of the ACM_ 12 (5). New York, NY, USA: ACM: 281. doi:[10.1145/362946.362996](http://dx.doi.org/10.1145/362946.362996).\n* -   Marsaglia, G., and T. A. Bray. 1964. \"A Convenient Method for Generating Normal Variables.\" _SIAM Review_ 6 (3). Society for Industrial; Applied Mathematics: 260–64. doi:[10.1137/1006063](http://dx.doi.org/10.1137/1006063).\n* -   Thomas, David B., Wayne Luk, Philip H.W. Leong, and John D. Villasenor. 2007. \"Gaussian Random Number Generators.\" _ACM Computing Surveys_ 39 (4). New York, NY, USA: ACM. doi:[10.1145/1287620.1287622](http://dx.doi.org/10.1145/1287620.1287622).\n*\n*\n* @name randn\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var r = randn();\n* // returns <number>\n*/\nvar randn = factory();\n\n\n// EXPORTS //\nexport default randn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers using the Box-Muller transform.\n*\n* @module @stdlib/random/base/box-muller\n*\n* @example\n* var randn = require( '@stdlib/random/base/box-muller' );\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/box-muller' ).factory;\n*\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar randn = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( randn, 'factory', factory );\n\n\n// EXPORTS //\nexport default randn;\n"]}