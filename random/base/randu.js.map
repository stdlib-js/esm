{"version":3,"sources":["@stdlib/random/base/randu/lib/prngs.js","@stdlib/random/base/randu/lib/factory.js","@stdlib/random/base/randu/lib/main.js","@stdlib/random/base/randu/lib/index.js"],"names":["prngs","__var_0__","__var_1__","__var_2__","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","__var_3__","isBoolean","__var_4__","isPrimitive","hasOwnProp","__var_5__","typedarray2json","__var_6__","defaults","__var_7__","PRNGS","__var_8__","factory","options","opts","rand","prng","name","copy","arguments","length","TypeError","state","seed","Error","uniform","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","MIN","MAX","seedLength","stateLength","byteLength","s","out","type","NAME","params","randu"],"mappings":"ihBAyBIA,EAAQ,GAEZA,EAAe,OAAKC,EACpBD,EAAO,kBAAqBE,EAC5BF,EAAgB,QAAKG,ECCrB,IAAIC,EAAcH,EACdI,EAAsBH,EACtBI,EAAuBH,EACvBI,EAAWC,EACXC,EAAYC,EAAUC,YACtBC,EAAaC,EACbC,EAAkBC,EAClBC,EAAWC,EACXC,EAAQC,EA6CZ,SAASC,EAASC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQT,EAASS,KACjBC,KAAQV,EAASU,MAEbC,UAAUC,OAAS,CACvB,IAAMrB,EAAUc,GACf,MAAM,IAAIQ,UAAW,qDAAuDR,EAAU,MAKvF,GAHKT,EAAYS,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBb,EAAYS,EAAS,UAEzB,GADAC,EAAKQ,MAAQT,EAAQS,WACD,IAAfR,EAAKQ,MACT,MAAM,IAAID,UAAW,gEAAkEP,EAAKQ,MAAQ,WAE/F,GAAKlB,EAAYS,EAAS,UAChCC,EAAKS,KAAOV,EAAQU,UACD,IAAdT,EAAKS,MACT,MAAM,IAAIF,UAAW,+DAAiEP,EAAKS,KAAO,MAGpG,GAAKnB,EAAYS,EAAS,UACzBC,EAAKI,KAAOL,EAAQK,MACdjB,EAAWa,EAAKI,OACrB,MAAM,IAAIG,UAAW,6DAA+DP,EAAKI,KAAO,MAKnG,QAAc,KADdF,EAAON,EAAOI,EAAKG,OAElB,MAAM,IAAIO,MAAO,2DAA6DV,EAAKG,KAAO,MA2B3F,OAvBEF,OAFkB,IAAfD,EAAKQ,WACU,IAAdR,EAAKS,KACFP,EAAKJ,UAELI,EAAKJ,QAAQ,CACnBW,KAAQT,EAAKS,OAIRP,EAAKJ,QAAQ,CACnBU,MAASR,EAAKQ,MACdJ,KAAQJ,EAAKI,OAGftB,EAAa6B,EAAS,OAAQ,SAC9B5B,EAAqB4B,EAAS,OAAQC,GACtC7B,EAAqB4B,EAAS,aAAcE,GAC5C7B,EAAsB2B,EAAS,QAASG,EAAUC,GAClDhC,EAAqB4B,EAAS,cAAeK,GAC7CjC,EAAqB4B,EAAS,aAAcM,GAC5CnC,EAAa6B,EAAS,SAAUO,GAChCpC,EAAa6B,EAAS,OAAQV,GAC9BnB,EAAa6B,EAAS,MAAOV,EAAKkB,WAAWC,KAC7CtC,EAAa6B,EAAS,MAAOV,EAAKkB,WAAWE,KAEtCV,EAQP,SAASC,IACR,OAAOX,EAAKQ,KASb,SAASI,IACR,OAAOZ,EAAKqB,WASb,SAASN,IACR,OAAOf,EAAKsB,YASb,SAASN,IACR,OAAOhB,EAAKuB,WASb,SAASV,IACR,OAAOb,EAAKO,MAUb,SAASO,EAAUU,GAClBxB,EAAKO,MAAQiB,EAad,SAASP,IACR,IAAIQ,EAAM,CACVC,KAAW,QAIX,OAHAD,EAAIvB,KAAOQ,EAAQiB,KAAO,IAAM3B,EAAK2B,KACrCF,EAAIlB,MAAQhB,EAAiBS,EAAKO,OAClCkB,EAAIG,OAAS,GACNH,EAaR,SAASf,IACR,OAAOV,EAAKkB,cCzNd,IAAIrB,EAAUnB,EAgBVmD,EAAQhC,ICSRhB,EAAcH,EACdmD,EAAQlD,EACRkB,EAAUjB,EAKdC,EAAagD,EAAO,UAAWhC","sourcesContent":["import __var_0__ from '@stdlib/random/base/minstd';\nimport __var_1__ from '@stdlib/random/base/minstd-shuffle';\nimport __var_2__ from '@stdlib/random/base/mt19937';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = __var_0__;\nprngs[ 'minstd-shuffle' ] = __var_1__;\nprngs[ 'mt19937' ] = __var_2__;\n\n\n// EXPORTS //\nexport default prngs;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-boolean';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/array/to-json';\nimport __var_7__ from './defaults.json';\nimport __var_8__ from './prngs.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isBoolean = __var_4__.isPrimitive;\nvar hasOwnProp = __var_5__;\nvar typedarray2json = __var_6__;\nvar defaults = __var_7__;\nvar PRNGS = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating uniformly distributed random numbers on the interval \\\\( [0,1) \\\\).\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var uniform = factory();\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'name': 'minstd'\n* });\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'seed': 12345\n* });\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = uniform();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( uniform, 'NAME', 'randu' );\n\tsetReadOnlyAccessor( uniform, 'seed', getSeed );\n\tsetReadOnlyAccessor( uniform, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( uniform, 'state', getState, setState );\n\tsetReadOnlyAccessor( uniform, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( uniform, 'byteLength', getStateSize );\n\tsetReadOnly( uniform, 'toJSON', toJSON );\n\tsetReadOnly( uniform, 'PRNG', rand );\n\tsetReadOnly( uniform, 'MIN', rand.normalized.MIN );\n\tsetReadOnly( uniform, 'MAX', rand.normalized.MAX );\n\n\treturn uniform;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = uniform.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number on the interval \\\\( [0,1) \\\\).\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform();\n\t* // returns <number>\n\t*/\n\tfunction uniform() {\n\t\treturn rand.normalized();\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a uniformly distributed random number on the interval \\\\( [0,1) \\\\).\n*\n* @name randu\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = randu();\n* // returns <number>\n*/\nvar randu = factory();\n\n\n// EXPORTS //\nexport default randu;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniformly distributed pseudorandom numbers on the interval \\\\( [0,1) \\\\).\n*\n* @module @stdlib/random/base/randu\n*\n* @example\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var v = randu();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/randu' ).factory;\n*\n* var randu = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n*\n* var v = randu();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar randu = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( randu, 'factory', factory );\n\n\n// EXPORTS //\nexport default randu;\n"]}