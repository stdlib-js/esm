{"version":3,"sources":["@stdlib/random/base/chisquare/lib/factory.js","@stdlib/random/base/chisquare/lib/main.js","@stdlib/random/base/chisquare/lib/index.js"],"names":["setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","isPositive","__var_3__","isPrimitive","isObject","__var_4__","isFunction","__var_5__","hasOwnProp","__var_6__","constantFunction","__var_7__","noop","__var_8__","isnan","__var_9__","gamma","__var_10__","factory","typedarray2json","__var_11__","rgamma","rand","opts","prng","k","arguments","length","TypeError","chisquare2","chisquare1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN","chisquare"],"mappings":"wmBAiCA,IAAIA,EAAcC,EACdC,EAAsBC,EACtBC,EAAuBC,EACvBC,EAAaC,EAAUC,YACvBC,EAAWC,EACXC,EAAaC,EACbC,EAAaC,EACbC,EAAmBC,EACnBC,EAAOC,EACPC,EAAQC,EACRC,EAAQC,EAAWC,QACnBC,EAAkBC,EAgCtB,SAASF,IACR,IAAIG,EACAC,EACAC,EACAC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACdN,EAASL,SACH,GACe,IAArBU,UAAUC,QACVvB,EAAUsB,UAAW,IAGrB,GAAKlB,EADLe,EAAOG,UAAW,GACK,QAAW,CACjC,IAAMpB,EAAYiB,EAAKC,MACtB,MAAM,IAAII,UAAW,4FAA8FL,EAAKC,KAAO,MAEhIH,EAASL,EAAM,CACdQ,KAAQD,EAAKC,YAGdH,EAASL,EAAOO,OAEX,CAEN,IAAMtB,EADNwB,EAAIC,UAAW,IAEd,MAAM,IAAIE,UAAW,uEAAyEH,EAAI,MAEnG,GAAKC,UAAUC,OAAS,EAAI,CAE3B,IAAMvB,EADNmB,EAAOG,UAAW,IAEjB,MAAM,IAAIE,UAAW,iEAAmEL,EAAO,MAEhG,GAAKf,EAAYe,EAAM,QAAW,CACjC,IAAMjB,EAAYiB,EAAKC,MACtB,MAAM,IAAII,UAAW,4FAA8FL,EAAKC,KAAO,MAEhIH,EAASL,EAAOS,EAAE,EAAK,GAAK,CAC3BD,KAAQD,EAAKC,YAGdH,EAASL,EAAOS,EAAE,EAAK,GAAKF,QAG7BF,EAASL,EAAOS,EAAE,EAAK,IA6BzB,OAzBCD,OADU,IAANC,EACGI,EAEAC,EAERR,EAAOD,EAAOU,KAEdpC,EAAa6B,EAAM,OAAQ,aAGtBD,GAAQA,EAAKC,MACjB7B,EAAa6B,EAAM,OAAQ,MAC3B7B,EAAa6B,EAAM,aAAc,MACjCzB,EAAsByB,EAAM,QAASd,EAAkB,MAAQE,GAC/DjB,EAAa6B,EAAM,cAAe,MAClC7B,EAAa6B,EAAM,aAAc,MACjC7B,EAAa6B,EAAM,SAAUd,EAAkB,SAE/Cb,EAAqB2B,EAAM,OAAQQ,GACnCnC,EAAqB2B,EAAM,aAAcS,GACzClC,EAAsByB,EAAM,QAASU,EAAUC,GAC/CtC,EAAqB2B,EAAM,cAAeY,GAC1CvC,EAAqB2B,EAAM,aAAca,GACzC1C,EAAa6B,EAAM,SAAUc,IAE9B3C,EAAa6B,EAAM,OAAQF,GACpBE,EAQP,SAASQ,IACR,OAAOV,EAAKiB,KASb,SAASN,IACR,OAAOX,EAAKkB,WASb,SAASJ,IACR,OAAOd,EAAKmB,YASb,SAASJ,IACR,OAAOf,EAAKoB,WASb,SAASR,IACR,OAAOZ,EAAKqB,MAUb,SAASR,EAAUS,GAClBtB,EAAKqB,MAAQC,EAad,SAASN,IACR,IAAIO,EAAM,CACVC,KAAW,QAQX,OAPAD,EAAIE,KAAOvB,EAAKwB,KAChBH,EAAIF,MAAQxB,EAAiBG,EAAKqB,OAEjCE,EAAII,YADM,IAANxB,EACS,GAEA,CAAEA,GAEToB,EAaR,SAASf,IACR,OAAOT,IAcR,SAASQ,EAAYJ,GACpB,OACCX,EAAOW,IACPA,GAAK,EAEEyB,IAED7B,EAAQI,EAAE,EAAK,KCrPxB,IAAIP,EAAUtB,EAyBVuD,EAAYjC,ICDZvB,EAAcC,EACduD,EAAYrD,EACZoB,EAAUlB,EAKdL,EAAawD,EAAW,UAAWjC","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/utils/constant-function';\nimport __var_8__ from '@stdlib/utils/noop';\nimport __var_9__ from '@stdlib/math/base/assert/is-nan';\nimport __var_10__ from '@stdlib/random/base/gamma';\nimport __var_11__ from '@stdlib/array/to-json';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isObject = __var_4__;\nvar isFunction = __var_5__;\nvar hasOwnProp = __var_6__;\nvar constantFunction = __var_7__;\nvar noop = __var_8__;\nvar isnan = __var_9__;\nvar gamma = __var_10__.factory;\nvar typedarray2json = __var_11__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating chi-square distributed random numbers.\n*\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var chisquare = factory( 2 );\n* var v = chisquare();\n* // returns <number>\n*\n* @example\n* var chisquare = factory( 2, {\n*     'seed': 297\n* });\n* var v = chisquare();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar k;\n\tif ( arguments.length === 0 ) {\n\t\trgamma = gamma();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + k + '`.' );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trgamma = gamma( k/2.0, 0.5, {\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trgamma = gamma( k/2.0, 0.5, opts );\n\t\t\t}\n\t\t} else {\n\t\t\trgamma = gamma( k/2.0, 0.5 );\n\t\t}\n\t}\n\tif ( k === void 0 ) {\n\t\tprng = chisquare2;\n\t} else {\n\t\tprng = chisquare1;\n\t}\n\trand = rgamma.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'chisquare' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi-square distribution with bound `k`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chisquare1();\n\t* // returns <number>\n\t*/\n\tfunction chisquare1() {\n\t\treturn rgamma();\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi-square distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chisquare2( 2 );\n\t* // returns <number>\n\t*/\n\tfunction chisquare2( k ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tk <= 0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rgamma( k/2.0, 0.5 );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a chi-square distribution with degrees of freedom `k`.\n*\n* @function chisquare\n* @type {PRNG}\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = chisquare( 2 );\n* // returns <number>\n*\n* @example\n* var v = chisquare( 0 );\n* // returns NaN\n*\n* @example\n* var v = chisquare( NaN );\n* // returns NaN\n*/\nvar chisquare = factory();\n\n\n// EXPORTS //\nexport default chisquare;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/chisquare\n*\n* @example\n* var chisquare = require( '@stdlib/random/base/chisquare' );\n*\n* var v = chisquare( 6 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/chisquare' ).factory;\n*\n* var chisquare = factory( 3, {\n*     'seed': 297\n* });\n*\n* var v = chisquare();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar chisquare = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( chisquare, 'factory', factory );\n\n\n// EXPORTS //\nexport default chisquare;\n"]}