{"version":3,"sources":["@stdlib/random/base/f/lib/validate.js","@stdlib/random/base/f/lib/f.js","@stdlib/random/base/f/lib/factory.js","@stdlib/random/base/f/lib/main.js","@stdlib/random/base/f/lib/index.js"],"names":["isPositive","__var_0__","isPrimitive","validate","d1","d2","TypeError","f","rchisq","setReadOnly","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","isObject","__var_3__","isFunction","__var_4__","hasOwnProp","__var_5__","constantFunction","__var_6__","noop","__var_7__","chisquare","__var_8__","factory","isnan","__var_9__","typedarray2json","__var_10__","__var_11__","f0","__var_12__","opts","rand","prng","err","arguments","length","f2","f1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-number';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositive = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( d1, d2 ) {\n\tif ( !isPositive( d1 ) ) {\n\t\treturn new TypeError( 'invalid argument. `d1` must be a positive number. Value: `' + d1 + '`.' );\n\t}\n\tif ( !isPositive( d2 ) ) {\n\t\treturn new TypeError( 'invalid argument. `d2` must be a positive number. Value: `' + d2 + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n*\n* @private\n* @param {PRNG} rchisq - PRNG for chi-square distributed numbers\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction f( rchisq, d1, d2 ) {\n\tvar x1 = rchisq( d1 ) / d1;\n\tvar x2 = rchisq( d2 ) / d2;\n\treturn x1 / x2;\n}\n\n\n// EXPORTS //\nexport default f;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/random/base/chisquare';\nimport __var_9__ from '@stdlib/math/base/assert/is-nan';\nimport __var_10__ from '@stdlib/array/to-json';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './f.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar chisquare = __var_8__.factory;\nvar isnan = __var_9__;\nvar typedarray2json = __var_10__;\nvar validate = __var_11__;\nvar f0 = __var_12__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating F distributed random numbers.\n*\n* @param {PositiveNumber} [d1] - degrees of freedom\n* @param {PositiveNumber} [d2] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var f = factory( 1.0, 2.0 );\n* var v = f();\n* // returns <number>\n*\n* @example\n* var f = factory( 0.5, 3.0, {\n*     'seed': 297\n* });\n* var v = f();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar d1;\n\tvar d2;\n\n\tif ( arguments.length === 0 ) {\n\t\trchisq = chisquare();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( opts );\n\t\t}\n\t} else {\n\t\td1 = arguments[ 0 ];\n\t\td2 = arguments[ 1 ];\n\t\terr = validate( d1, d2 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trchisq = chisquare({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trchisq = chisquare( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trchisq = chisquare();\n\t\t}\n\t}\n\tif ( d1 === void 0 ) {\n\t\tprng = f2;\n\t} else {\n\t\tprng = f1;\n\t}\n\trand = rchisq.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'f' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( d1 === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ d1, d2 ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from an F distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = f1();\n\t* // returns <number>\n\t*/\n\tfunction f1() {\n\t\treturn f0( rchisq, d1, d2 );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} d1 - degrees of freedom\n\t* @param {PositiveNumber} d2 - degrees of freedom\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = f2( 3.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = f2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = f2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = f2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction f2( d1, d2 ) {\n\t\tif (\n\t\t\tisnan( d1 ) ||\n\t\t\tisnan( d2 ) ||\n\t\t\td1 <= 0.0 ||\n\t\t\td2 <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn f0( rchisq, d1, d2 );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n*\n* @name f\n* @type {PRNG}\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = f( 3.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var r = f( -2.0, 5.0 );\n* // returns NaN\n*/\nvar f = factory();\n\n\n// EXPORTS //\nexport default f;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* F distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/f\n*\n* @example\n* var f = require( '@stdlib/random/base/f' );\n*\n* var v = f( 5.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/f' ).factory;\n*\n* var f = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = f();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar f = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( f, 'factory', factory );\n\n\n// EXPORTS //\nexport default f;\n"]}