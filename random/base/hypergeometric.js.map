{"version":3,"sources":["@stdlib/random/base/hypergeometric/lib/validate.js","@stdlib/random/base/hypergeometric/lib/hin.js","@stdlib/random/base/hypergeometric/lib/hypergeometric.js","@stdlib/random/base/hypergeometric/lib/factory.js","@stdlib/random/base/hypergeometric/lib/main.js","@stdlib/random/base/hypergeometric/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isPrimitive","validate","N","K","n","RangeError","TypeError","factorial","hin","rand","n1","n2","k","p","u","x","hypergeometric","setReadOnly","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","isObject","__var_3__","isFunction","__var_4__","hasOwnProp","__var_5__","constantFunction","__var_6__","noop","__var_7__","randu","__var_8__","factory","__var_9__","PINF","__var_10__","typedarray2json","__var_11__","__var_12__","hypergeometric0","__var_13__","opts","prng","err","arguments","length","hypergeometric2","hypergeometric1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1, 2, 3 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( N, K, n ) {\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\treturn new TypeError( 'invalid argument. `N` must be a nonnegative integer. Value: `' + N + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\treturn new TypeError( 'invalid argument. `K` must be a nonnegative integer. Value: `' + K + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\treturn new TypeError( 'invalid argument. `n` must be a nonnegative integer. Value: `' + n + '`.' );\n\t}\n\tif ( n > N ) {\n\t\treturn new RangeError( 'invalid argument. `n` must be less than or equal to `N`. Value: `' + n + '`.' );\n\t}\n\tif ( K > N ) {\n\t\treturn new RangeError( 'invalid argument. `K` must be less than or equal to `N`. Value: `' + K + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/math/base/special/factorial';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factorial = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution using the HIN algorithm, which is based on an inverse transformation method.\n*\n* ## References\n*\n* -   Fishman, George S. 1973. _Concepts and methods in discrete event digital simulation_. A Wiley-Interscience Publication. New York, NY, USA: Wiley.\n* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. \"Computer generation of hypergeometric random variates.\" _Journal of Statistical Computation and Simulation_ 22 (2): 127–45. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].\n*\n* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839\n*\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {NonNegativeInteger} n1 - number of successes in population\n* @param {NonNegativeInteger} n2 - number of failures in population\n* @param {NonNegativeInteger} k - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction hin( rand, n1, n2, k ) {\n\tvar p;\n\tvar u;\n\tvar x;\n\tif ( k < n2 ) {\n\t\tp = ( factorial( n2 ) * factorial( n1 + n2 - k ) ) /\n\t\t\t( factorial( n1 + n2 ) * factorial( n2 - k ) );\n\t\tx = 0;\n\t} else {\n\t\tp = ( factorial( n1 ) * factorial( k ) ) /\n\t\t\t( factorial( k - n2 ) * factorial( n1 + n2 ) );\n\t\tx = k - n2;\n\t}\n\tu = rand();\n\twhile ( u > p ) {\n\t\tu -= p;\n\t\tp *= ( n1 - x ) * ( k - x ) / ( ( x + 1 ) * ( n2 - k + 1 + x ) );\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default hin;\n","import __var_0__ from './hin.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hin = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution.\n*\n* ## References\n*\n* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. \"Computer generation of hypergeometric random variates.\" _Journal of Statistical Computation and Simulation_ 22 (2): 127–45. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].\n*\n* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839\n*\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction hypergeometric( rand, N, K, n ) {\n\tvar n1;\n\tvar n2;\n\tvar k;\n\tvar x;\n\n\tif ( n > N/2 ) {\n\t\tk = N - n;\n\t\tif ( 2*K <= N ) {\n\t\t\tn1 = K;\n\t\t\tn2 = N - K;\n\t\t\tx = hin( rand, n1, n2, k );\n\t\t\treturn K - x;\n\t\t}\n\t\tn2 = K;\n\t\tn1 = N - K;\n\t\tx = hin( rand, n1, n2, k );\n\t\treturn n - N + K + x;\n\t}\n\tk = n;\n\tif ( 2*K <= N ) {\n\t\tn1 = K;\n\t\tn2 = N - K;\n\t\tx = hin( rand, n1, n2, k );\n\t\treturn x;\n\t}\n\tn1 = N - K;\n\tn2 = K;\n\tx = hin( rand, n1, n2, k );\n\treturn n - x;\n}\n\n\n// EXPORTS //\nexport default hypergeometric;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/random/base/mt19937';\nimport __var_9__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_10__ from '@stdlib/constants/math/float64-pinf';\nimport __var_11__ from '@stdlib/array/to-json';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './hypergeometric.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar randu = __var_8__.factory;\nvar isNonNegativeInteger = __var_9__;\nvar PINF = __var_10__;\nvar typedarray2json = __var_11__;\nvar validate = __var_12__;\nvar hypergeometric0 = __var_13__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating hypergeometric distributed random numbers.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var hypergeometric = factory( 5, 3, 2 );\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var hypergeometric = factory( 10, 10, 10, {\n*     'seed': 297\n* });\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var hypergeometric = factory();\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar N;\n\tvar K;\n\tvar n;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tN = arguments[ 0 ];\n\t\tK = arguments[ 1 ];\n\t\tn = arguments[ 2 ];\n\t\terr = validate( N, K, n );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 3 ) {\n\t\t\topts = arguments[ 3 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( N === void 0 ) {\n\t\tprng = hypergeometric2;\n\t} else {\n\t\tprng = hypergeometric1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'hypergeometric' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( N === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ N, K, n ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a hypergeometric distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = hypergeometric1();\n\t* // returns <number>\n\t*/\n\tfunction hypergeometric1() {\n\t\treturn hypergeometric0( rand, N, K, n );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - population size\n\t* @param {NonNegativeInteger} K - subpopulation size\n\t* @param {NonNegativeInteger} n - number of draws\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = hypergeometric2( 5, 3, 2 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = hypergeometric2( NaN, NaN, NaN );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = hypergeometric2( 5.21, 3.14, 2.76 );\n\t* // returns NaN\n\t*/\n\tfunction hypergeometric2( N, K, n ) {\n\t\tif (\n\t\t\tN === PINF ||\n\t\t\tK === PINF ||\n\t\t\t!isNonNegativeInteger( N ) ||\n\t\t\t!isNonNegativeInteger( K ) ||\n\t\t\t!isNonNegativeInteger( n ) ||\n\t\t\tn > N\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn hypergeometric0( rand, N, K, n );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution.\n*\n* @name hypergeometric\n* @type {PRNG}\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*\n* @example\n* var v = hypergeometric( -5, 3, 2 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( 5, 3.14, 2 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( 5, 3, 1.5 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( NaN, NaN, NaN );\n* // returns NaN\n*/\nvar hypergeometric = factory();\n\n\n// EXPORTS //\nexport default hypergeometric;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/hypergeometric\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/base/hypergeometric' );\n*\n* var v = hypergeometric( 10, 10, 10 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory( 5, 3, 2, {\n*     'seed': 297\n* });\n*\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory();\n*\n* var v = hypergeometric( 10, 2, 2 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory({\n*     'seed': 297\n* });\n*\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar hypergeometric = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( hypergeometric, 'factory', factory );\n\n\n// EXPORTS //\nexport default hypergeometric;\n"]}