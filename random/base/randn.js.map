{"version":3,"sources":["@stdlib/random/base/randn/lib/prngs.js","@stdlib/random/base/randn/lib/factory.js","@stdlib/random/base/randn/lib/main.js","@stdlib/random/base/randn/lib/index.js"],"names":["prngs","__var_0__","__var_1__","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","__var_2__","isObject","__var_3__","isBoolean","__var_4__","isPrimitive","hasOwnProp","__var_5__","constantFunction","__var_6__","noop","__var_7__","typedarray2json","__var_8__","defaults","__var_9__","PRNGS","__var_10__","factory","options","opts","rand","prng","name","copy","arguments","length","TypeError","state","seed","Error","normal","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","PRNG","seedLength","stateLength","byteLength","s","out","type","NAME","params","randn"],"mappings":"6lBAwBIA,EAAQ,GAEZA,EAAO,cAAiBC,EACxBD,EAAO,qBAAwBE,ECK/B,IAAIC,EAAcF,EACdG,EAAsBF,EACtBG,EAAuBC,EACvBC,EAAWC,EACXC,EAAYC,EAAUC,YACtBC,EAAaC,EACbC,EAAmBC,EACnBC,EAAOC,EACPC,EAAkBC,EAClBC,EAAWC,EACXC,EAAQC,EA+CZ,SAASC,EAASC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQT,EAASS,KACjBC,KAAQV,EAASU,MAEbC,UAAUC,OAAS,CACvB,IAAMzB,EAAUkB,GACf,MAAM,IAAIQ,UAAW,qDAAuDR,EAAU,MAKvF,GAHKb,EAAYa,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBjB,EAAYa,EAAS,SAEzB,GADAC,EAAKE,KAAOH,EAAQG,UACD,IAAdF,EAAKE,KACT,MAAM,IAAIK,UAAW,+DAAiEP,EAAKE,KAAO,WAE7F,GAAKhB,EAAYa,EAAS,UAEhC,GADAC,EAAKQ,MAAQT,EAAQS,WACD,IAAfR,EAAKQ,MACT,MAAM,IAAID,UAAW,gEAAkEP,EAAKQ,MAAQ,WAE/F,GAAKtB,EAAYa,EAAS,UAChCC,EAAKS,KAAOV,EAAQU,UACD,IAAdT,EAAKS,MACT,MAAM,IAAIF,UAAW,+DAAiEP,EAAKS,KAAO,MAGpG,GAAKvB,EAAYa,EAAS,UACzBC,EAAKI,KAAOL,EAAQK,MACdrB,EAAWiB,EAAKI,OACrB,MAAM,IAAIG,UAAW,6DAA+DP,EAAKI,KAAO,MAKnG,QAAc,KADdF,EAAON,EAAOI,EAAKG,OAElB,MAAM,IAAIO,MAAO,2DAA6DV,EAAKG,KAAO,MAyC3F,OApCGF,OAHgB,IAAdD,EAAKE,UACW,IAAfF,EAAKQ,WACU,IAAdR,EAAKS,KACFP,EAAKJ,UAELI,EAAKJ,QAAQ,CACnBW,KAAQT,EAAKS,OAIRP,EAAKJ,QAAQ,CACnBU,MAASR,EAAKQ,MACdJ,KAAQJ,EAAKI,OAIRF,EAAKJ,QAAQ,CACnBI,KAAQF,EAAKE,OAGfzB,EAAakC,EAAQ,OAAQ,SAGxBX,EAAKE,MACTzB,EAAakC,EAAQ,OAAQ,MAC7BlC,EAAakC,EAAQ,aAAc,MACnChC,EAAsBgC,EAAQ,QAASvB,EAAkB,MAAQE,GACjEb,EAAakC,EAAQ,cAAe,MACpClC,EAAakC,EAAQ,aAAc,MACnClC,EAAakC,EAAQ,SAAUvB,EAAkB,SAEjDV,EAAqBiC,EAAQ,OAAQC,GACrClC,EAAqBiC,EAAQ,aAAcE,GAC3ClC,EAAsBgC,EAAQ,QAASG,EAAUC,GACjDrC,EAAqBiC,EAAQ,cAAeK,GAC5CtC,EAAqBiC,EAAQ,aAAcM,GAC3CxC,EAAakC,EAAQ,SAAUO,IAEhCzC,EAAakC,EAAQ,OAAQV,EAAKkB,MAC3BR,EAQP,SAASC,IACR,OAAOX,EAAKQ,KASb,SAASI,IACR,OAAOZ,EAAKmB,WASb,SAASJ,IACR,OAAOf,EAAKoB,YASb,SAASJ,IACR,OAAOhB,EAAKqB,WASb,SAASR,IACR,OAAOb,EAAKO,MAUb,SAASO,EAAUQ,GAClBtB,EAAKO,MAAQe,EAad,SAASL,IACR,IAAIM,EAAM,CACVC,KAAW,QAIX,OAHAD,EAAIrB,KAAOQ,EAAOe,KAAO,IAAMzB,EAAKyB,KACpCF,EAAIhB,MAAQhB,EAAiBS,EAAKO,OAClCgB,EAAIG,OAAS,GACNH,EAaR,SAASb,IACR,OAAOV,KClPT,IAAIH,EAAUvB,EAgBVoC,EAASb,ICSTrB,EAAcF,EACdqD,EAAQpD,EACRsB,EAAUlB,EAKdH,EAAamD,EAAO,UAAW9B","sourcesContent":["import __var_0__ from '@stdlib/random/base/box-muller';\nimport __var_1__ from '@stdlib/random/base/improved-ziggurat';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'box-muller' ] = __var_0__;\nprngs[ 'improved-ziggurat' ] = __var_1__;\n\n\n// EXPORTS //\nexport default prngs;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-boolean';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/array/to-json';\nimport __var_9__ from './defaults.json';\nimport __var_10__ from './prngs.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isBoolean = __var_4__.isPrimitive;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar typedarray2json = __var_8__;\nvar defaults = __var_9__;\nvar PRNGS = __var_10__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for numbers from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller'\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\topts.prng = options.prng;\n\t\t\tif ( opts.prng === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option cannot be undefined. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );\n\t}\n\tif ( opts.prng === void 0 ) {\n\t\tif ( opts.state === void 0 ) {\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\trand = prng.factory();\n\t\t\t} else {\n\t\t\t\trand = prng.factory({\n\t\t\t\t\t'seed': opts.seed\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'state': opts.state,\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'prng': opts.prng\n\t\t});\n\t}\n\tsetReadOnly( normal, 'NAME', 'randn' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts.prng ) {\n\t\tsetReadOnly( normal, 'seed', null );\n\t\tsetReadOnly( normal, 'seedLength', null );\n\t\tsetReadWriteAccessor( normal, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( normal, 'stateLength', null );\n\t\tsetReadOnly( normal, 'byteLength', null );\n\t\tsetReadOnly( normal, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( normal, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( normal, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( normal, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( normal, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( normal, 'byteLength', getStateSize );\n\t\tsetReadOnly( normal, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( normal, 'PRNG', rand.PRNG );\n\treturn normal;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = normal.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal();\n\t* // returns <number>\n\t*/\n\tfunction normal() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a standard normal random number.\n*\n* @name normal\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal();\n* // returns <number>\n*/\nvar normal = factory();\n\n\n// EXPORTS //\nexport default normal;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard normal pseudorandom numbers.\n*\n* @module @stdlib/random/base/randn\n*\n* @example\n* var randn = require( '@stdlib/random/base/randn' );\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/randn' ).factory;\n*\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n*\n* var v = randn();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar randn = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( randn, 'factory', factory );\n\n\n// EXPORTS //\nexport default randn;\n"]}