{"version":3,"sources":["@stdlib/random/base/improved-ziggurat/lib/coords_array.js","@stdlib/random/base/improved-ziggurat/lib/ratio_array.js","@stdlib/random/base/improved-ziggurat/lib/sample_tail.js","@stdlib/random/base/improved-ziggurat/lib/improved_ziggurat.js","@stdlib/random/base/improved-ziggurat/lib/factory.js","@stdlib/random/base/improved-ziggurat/lib/main.js","@stdlib/random/base/improved-ziggurat/lib/index.js"],"names":["sqrt","__var_0__","exp","__var_1__","ln","__var_2__","V","coordsArray","N","rTail","X","f","i","Array","ratioArray","R","length","push","sampleTail","rand","isNegative","x","y","abs","__var_3__","__var_4__","NUM_BLOCKS","START_RIGHT_TAIL","LAST_7_BITS_MASK","wrap","randu","randi","f0","f1","x2","u","j","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isFunction","isObject","isBoolean","__var_5__","isPrimitive","hasOwnProp","__var_6__","isUint32Array","__var_7__","mt19937","__var_8__","factory","constantFunction","__var_9__","noop","__var_10__","floor","__var_11__","UINT32_MAX","__var_12__","typedarray2json","__var_13__","improvedZiggurat","__var_14__","options","randn","opts","copy","arguments","TypeError","prng","state","seed","normalized","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seedLength","stateLength","byteLength","s","out","type","name","NAME","params"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/math/base/special/exp';\nimport __var_2__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar exp = __var_1__;\nvar ln = __var_2__;\n\n\n// VARIABLES //\n\n// (R*phi(R) + Pr(X>=R))*sqrt(2\\pi)\nvar V = 9.91256303526217e-3;\n\n\n// MAIN //\n\n/**\n* Returns an array containing coordinates such that each rectangle has the same area.\n*\n* @private\n* @param {PositiveInteger} N - number of rectangles\n* @param {number} rTail - start of right tail\n* @returns {NumberArray} coordinate array\n*\n* @example\n* var X = coordsArray( 128, 3.44 );\n* // returns <Array>\n*/\nfunction coordsArray( N, rTail ) {\n\tvar X;\n\tvar f;\n\tvar i;\n\n\tX = new Array( N+1 );\n\tf = exp( -0.5 * rTail * rTail );\n\tX[ 0 ] = V / f; // [0] is bottom block: V / f(R)\n\tX[ 1 ] = rTail;\n\tX[ N ] = 0.0;\n\tfor ( i = 2; i < N; i++ ) {\n\t\tX[ i ] = sqrt( -2.0 * ln( (V / X[i-1]) + f ) );\n\t\tf = exp( -0.5 * X[ i ] * X[ i ] );\n\t}\n\treturn X;\n}\n\n\n// EXPORTS //\nexport default coordsArray;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array containing the ratio of each pair of consecutive elements in order: `X[ i+1 ] / X[ i ]`.\n*\n* @private\n* @param {NumberArray} X - input array\n* @returns {NumberArray} ratio array\n*\n* @example\n* var R = ratioArray( [ 1.0, 2.0, 5.0 ] );\n* // returns [ 2.0, 2.5 ]\n*/\nfunction ratioArray( X ) {\n\tvar R;\n\tvar i;\n\n\tR = [];\n\tfor ( i = 0; i < X.length-1; i++ ) {\n\t\tR.push( X[ i+1 ] / X[ i ] );\n\t}\n\treturn R;\n}\n\n\n// EXPORTS //\nexport default ratioArray;\n","import __var_0__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ln = __var_0__;\n\n\n// MAIN //\n\n/**\n* Transforms the tail of the normal distribution to the unit interval and then uses rejection technique to generate standard normal variable.\n*\n* ## References\n*\n* -   Marsaglia, George. 1964. \"Generating a Variable from the Tail of the Normal Distribution.\" _Technometrics_ 6 (1): 101â€“2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} rTail - start value of the right tail\n* @param {boolean} isNegative - boolean indicating which side to evaluate\n* @returns {number} standard normal variable\n*/\nfunction sampleTail( rand, rTail, isNegative ) {\n\tvar x;\n\tvar y;\n\tdo {\n\t\tx = ln( rand() ) / rTail;\n\t\ty = ln( rand() );\n\t} while ( -2.0*y < x*x );\n\treturn ( isNegative ) ? x-rTail : rTail-x;\n}\n\n\n// EXPORTS //\nexport default sampleTail;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/math/base/special/exp';\nimport __var_2__ from './coords_array.js';\nimport __var_3__ from './ratio_array.js';\nimport __var_4__ from './sample_tail.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar exp = __var_1__;\nvar coordsArray = __var_2__;\nvar ratioArray = __var_3__;\nvar sampleTail = __var_4__;\n\n\n// VARIABLES //\n\n// Number of blocks:\nvar NUM_BLOCKS = 128;\n\n// Start of right tail (R):\nvar START_RIGHT_TAIL = 3.442619855899;\n\n// `X` holds coordinates, such that each rectangle has same area:\nvar X = coordsArray( NUM_BLOCKS, START_RIGHT_TAIL );\n\n// `R` holds `X[ i+1 ] / X[ i ]`:\nvar R = ratioArray( X );\n\n// 127 => 0x7F => 00000000000000000000000001111111\nvar LAST_7_BITS_MASK = 127|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the improved Ziggurat algorithm for generating normally distributed pseudorandom numbers.\n*\n* @private\n* @param {PRNG} randu - PRNG for generating uniformly distributed numbers\n* @param {PRNG} randi - PRNG for generating uniformly distributed integers\n* @returns {number} pseudorandom number\n*/\nfunction wrap( randu, randi ) {\n\treturn randn;\n\n\t/**\n\t* Generates a normally distributed pseudorandom number.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var r = randn();\n\t* // returns <number>\n\t*/\n\tfunction randn() {\n\t\tvar f0;\n\t\tvar f1;\n\t\tvar x2;\n\t\tvar x;\n\t\tvar u;\n\t\tvar i;\n\t\tvar j;\n\t\twhile ( true ) {\n\t\t\tu = ( 2.0*randu() ) - 1.0;\n\t\t\ti = randi() & LAST_7_BITS_MASK;\n\n\t\t\t// First try the rectangular boxes...\n\t\t\tif ( abs( u ) < R[ i ] ) {\n\t\t\t\treturn u * X[ i ];\n\t\t\t}\n\t\t\t// If bottom box, sample from the tail...\n\t\t\tif ( i === 0 ) {\n\t\t\t\treturn sampleTail( randu, START_RIGHT_TAIL, u < 0.0 );\n\t\t\t}\n\t\t\t// Is this a sample from the wedges?\n\t\t\tx = u * X[ i ];\n\t\t\tx2 = x * x;\n\t\t\tj = i + 1;\n\t\t\tf0 = exp( -0.5 * ( (X[ i ]*X[ i ]) - x2 ) );\n\t\t\tf1 = exp( -0.5 * ( (X[ j ]*X[ j ]) - x2 ) );\n\t\t\tif ( f1 + (randu()*(f0-f1)) < 1.0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default wrap;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-function';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-boolean';\nimport __var_6__ from '@stdlib/assert/has-own-property';\nimport __var_7__ from '@stdlib/assert/is-uint32array';\nimport __var_8__ from '@stdlib/random/base/mt19937';\nimport __var_9__ from '@stdlib/utils/constant-function';\nimport __var_10__ from '@stdlib/utils/noop';\nimport __var_11__ from '@stdlib/math/base/special/floor';\nimport __var_12__ from '@stdlib/constants/math/uint32-max';\nimport __var_13__ from '@stdlib/array/to-json';\nimport __var_14__ from './improved_ziggurat.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isFunction = __var_3__;\nvar isObject = __var_4__;\nvar isBoolean = __var_5__.isPrimitive;\nvar hasOwnProp = __var_6__;\nvar isUint32Array = __var_7__;\nvar mt19937 = __var_8__.factory;\nvar constantFunction = __var_9__;\nvar noop = __var_10__;\nvar floor = __var_11__;\nvar UINT32_MAX = __var_12__;\nvar typedarray2json = __var_13__;\nvar improvedZiggurat = __var_14__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* // Return a seeded PRNG:\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar randu;\n\tvar randi;\n\tvar randn;\n\tvar opts;\n\n\topts = {\n\t\t'copy': true\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );\n\t\t\t}\n\t\t\trandu = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( randu === void 0 ) {\n\t\t\trandi = mt19937( opts );\n\t\t\trandu = randi.normalized;\n\t\t} else {\n\t\t\trandi = mt19937({\n\t\t\t\t'seed': floor( 1.0 + ( UINT32_MAX*randu() ) ), // allows seeding via an externally seeded PRNG\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t\topts.seed = null;\n\t\t}\n\t} else {\n\t\trandi = mt19937( opts );\n\t\trandu = randi.normalized;\n\t}\n\trandn = improvedZiggurat( randu, randi );\n\n\tsetReadOnly( randn, 'NAME', 'improved-ziggurat' );\n\tif ( opts.seed === null ) {\n\t\tsetReadOnly( randn, 'seed', null );\n\t\tsetReadOnly( randn, 'seedLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( randn, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( randn, 'seedLength', getSeedLength );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadWriteAccessor( randn, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( randn, 'stateLength', null );\n\t\tsetReadOnly( randn, 'byteLength', null );\n\t\tsetReadOnly( randn, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadWriteAccessor( randn, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( randn, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( randn, 'byteLength', getStateSize );\n\t\tsetReadOnly( randn, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( randn, 'PRNG', randu );\n\n\treturn randn;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn randi.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn randi.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn randi.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn randi.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn randi.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trandi.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randn.NAME;\n\t\tout.state = typedarray2json( randi.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Generates a standard normally distributed random number.\n*\n* ## Method\n*\n* The basic Ziggurat method works as follows:\n*\n*\n*     ```tex\n*     x_{C-1}(r) \\left[ f(0) - f\\left( x_{C-1}(r) \\right) \\right] - V(r) = 0\n*     ```\n*\n*     where\n*\n*     ```tex\n*     V(r) = r \\; f(r) + \\int_r^\\infty \\; f(x) \\; dx\n*     ```\n*\n*     and \\\\( r \\\\) denotes the right-most \\\\( x_1 \\\\).\n*\n* -   We then use the following rejection algorithm:\n*\n*     -   Draw a box \\\\( B_i \\\\) at random with probability \\\\( \\tfrac{1}{C} \\\\).\n*     -   Draw a random number from the box as \\\\( z = U_0 x_i \\\\) for \\\\( i > 0 \\\\) and \\\\( z = U_0 V / f(x_1) \\\\).\n*     -   If \\\\( z < x_{i+1} \\\\), accept \\\\( z \\\\).\n*     -   If \\\\( i = 0 \\\\), accept a \\\\( v \\\\) by transforming the tail of the normal distribution to the unit interval and then use rejection technique by Marsaglia, G. (1964) to generate a standard normal variable. Otherwise, if \\\\( i > 0 \\\\) and \\\\( U_1 \\left[ f(x_i) - f(x_{i+1})\\right] < f(z) - f(x_{i+1}) \\\\) accept \\\\( z \\\\).\n*     -   Go back to the first step.\n*\n* -   The improved version by Doornik (2005) changes step four in order to correct a deficiency of the original Ziggurat algorithm. The updated version requires the generation of two random numbers, a uniform variable drawn from \\\\( U(-1,1) \\\\) and the last seven bits of a random integer.\n*\n* ## References\n*\n* -   Doornik, Jurgen A. 2005. \"An Improved Ziggurat Method to Generate Normal Random Samples.\" <https://www.doornik.com/research/ziggurat.pdf>.\n* -   Marsaglia, George, and Wai Wan Tsang. 2000. \"The Ziggurat Method for Generating Random Variables.\" _Journal of Statistical Software_ 5 (1): 1â€“7. doi:[10.18637/jss.v005.i08](http://dx.doi.org/10.18637/jss.v005.i08).\n* -   Marsaglia, George. 1964. \"Generating a Variable from the Tail of the Normal Distribution.\" _Technometrics_ 6 (1): 101â€“2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).\n*\n*\n* @name randn\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var r = randn();\n* // returns <number>\n*/\nvar randn = factory();\n\n\n// EXPORTS //\nexport default randn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers using the improved Ziggurat method.\n*\n* @module @stdlib/random/base/improved-ziggurat\n*\n* @example\n* var randn = require( '@stdlib/random/base/improved-ziggurat' );\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/improved-ziggurat' ).factory;\n*\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar randn = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( randn, 'factory', factory );\n\n\n// EXPORTS //\nexport default randn;\n"]}