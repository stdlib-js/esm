{"version":3,"sources":["@stdlib/random/base/binomial/lib/validate.js","@stdlib/random/base/binomial/lib/sample1.js","@stdlib/random/base/binomial/lib/correction.js","@stdlib/random/base/binomial/lib/sample2.js","@stdlib/random/base/binomial/lib/binomial.js","@stdlib/random/base/binomial/lib/factory.js","@stdlib/random/base/binomial/lib/main.js","@stdlib/random/base/binomial/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isProbability","__var_1__","validate","n","p","TypeError","sample","rand","i","sum","pow","ONE_12","ONE_360","ONE_1260","correction","k","v","floor","sign","sqrt","__var_2__","abs","__var_3__","ln","__var_4__","__var_5__","ONE_SIXTH","alpha","urvr","snpq","npq","rho","tmp","nm","nr","us","km","nk","vr","a","b","c","f","h","m","q","r","t","u","x","sample1","sample2","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","isFunction","hasOwnProp","constantFunction","__var_6__","noop","__var_7__","isnan","__var_8__","__var_9__","__var_10__","randu","__var_11__","factory","typedarray2json","__var_12__","__var_13__","binomial0","__var_14__","opts","prng","err","arguments","length","binomial2","binomial1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN","binomial"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-probability';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isProbability = __var_1__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( n, p ) {\n\tif ( !isPositiveInteger( n ) ) {\n\t\treturn new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + p + '`.' );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\treturn new TypeError( 'invalid argument. Second argument must be a probability. Value: `' + p + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generates a binomially distributed pseudorandom number by computing the sum of Bernoulli random variables.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tif ( rand() <= p ) {\n\t\t\tsum += 1;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\n\n\n// VARIABLES //\n\nvar ONE_12 = 1.0 / 12.0;\nvar ONE_360 = 1.0 / 360.0;\nvar ONE_1260 = 1.0 / 1260.0;\n\n\n// MAIN //\n\n/**\n* Returns a correction for Stirling's approximation.\n*\n* @private\n* @param {NonNegativeInteger} k - input argument\n* @returns {number} correction term\n*\n* @example\n* var c = correction( 0 );\n* // returns 0.08106146679532726\n*/\nfunction correction( k ) {\n\tvar v;\n\tswitch ( k ) {\n\tcase 0:\n\t\treturn 0.08106146679532726;\n\tcase 1:\n\t\treturn 0.04134069595540929;\n\tcase 2:\n\t\treturn 0.02767792568499834;\n\tcase 3:\n\t\treturn 0.02079067210376509;\n\tcase 4:\n\t\treturn 0.01664469118982119;\n\tcase 5:\n\t\treturn 0.01387612882307075;\n\tcase 6:\n\t\treturn 0.01189670994589177;\n\tcase 7:\n\t\treturn 0.01041126526197209;\n\tcase 8:\n\t\treturn 0.009255462182712733;\n\tcase 9:\n\t\treturn 0.008330563433362871;\n\tdefault:\n\t\tk += 1;\n\t\tv = pow( k, 2 );\n\t\treturn (ONE_12 - ((ONE_360 - (ONE_1260/v)) / v)) / k;\n\t}\n}\n\n\n// EXPORTS //\nexport default correction;\n","import __var_0__ from '@stdlib/math/base/special/floor';\nimport __var_1__ from '@stdlib/math/base/special/signum';\nimport __var_2__ from '@stdlib/math/base/special/sqrt';\nimport __var_3__ from '@stdlib/math/base/special/abs';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from './correction.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\nvar sign = __var_1__;\nvar sqrt = __var_2__;\nvar abs = __var_3__;\nvar ln = __var_4__;\nvar correction = __var_5__;\n\n\n// VARIABLES //\n\nvar ONE_SIXTH = 1.0 / 6.0;\n\n\n// MAIN //\n\n/**\n* Generates a binomially distributed pseudorandom number.\n*\n* ## References\n*\n* -   Hörmann, Wolfgang. 1993. \"The generation of binomial random variates.\" _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].\n*\n* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tvar alpha;\n\tvar urvr;\n\tvar snpq;\n\tvar npq;\n\tvar rho;\n\tvar tmp;\n\tvar nm;\n\tvar nr;\n\tvar us;\n\tvar km;\n\tvar nk;\n\tvar vr;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar f;\n\tvar h;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar q;\n\tvar r;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar x;\n\n\tm = floor( (n + 1) * p );\n\tnm = n - m + 1;\n\n\tq = 1.0 - p;\n\n\tr = p / q;\n\tnr = (n + 1) * r;\n\n\tnpq = n * p * q;\n\tsnpq = sqrt( npq );\n\n\tb = 1.15 + (2.53 * snpq);\n\ta = -0.0873 + (0.0248*b) + (0.01*p);\n\tc = (n*p) + 0.5;\n\n\talpha = (2.83 + (5.1/b)) * snpq;\n\n\tvr = 0.92 - (4.2/b);\n\turvr = 0.86 * vr;\n\n\th = (m + 0.5) * ln( (m+1) / (r*nm) );\n\th += correction( m ) + correction( n-m );\n\n\twhile ( true ) {\n\t\tv = rand();\n\t\tif ( v <= urvr ) {\n\t\t\tu = (v/vr) - 0.43;\n\t\t\tr = (u * ( (2.0*a / (0.5 - abs(u))) + b )) + c;\n\t\t\treturn floor( r );\n\t\t}\n\t\tif ( v >= vr ) {\n\t\t\tu = rand() - 0.5;\n\t\t} else {\n\t\t\tu = (v/vr) - 0.93;\n\t\t\tu = (sign( u ) * 0.5) - u;\n\t\t\tv = vr * rand();\n\t\t}\n\t\tus = 0.5 - abs(u);\n\t\tk = floor( (u * ( (2.0*a/us) + b )) + c );\n\t\tif ( k < 0 || k > n ) {\n\t\t\t// Try again...\n\t\t\tcontinue;\n\t\t}\n\t\tv = v * alpha / ( (a/(us*us)) + b );\n\t\tkm = abs( k - m );\n\t\tif ( km > 15 ) {\n\t\t\tv = ln( v );\n\t\t\trho = km / npq;\n\t\t\ttmp = ( (km/3) + 0.625 ) * km;\n\t\t\ttmp += ONE_SIXTH;\n\t\t\ttmp /= npq;\n\t\t\trho *= tmp + 0.5;\n\t\t\tt = -(km * km) / (2.0 * npq);\n\t\t\tif ( v < t - rho ) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\tif ( v <= t + rho ) {\n\t\t\t\tnk = n - k + 1;\n\t\t\t\tx = h + ( (n+1)*ln( nm/nk ) );\n\t\t\t\tx += (k+0.5) * ln( nk*r/(k+1) );\n\t\t\t\tx += -(correction( k ) + correction( n-k ));\n\t\t\t\tif ( v <= x ) {\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tf = 1.0;\n\t\t\tif ( m < k ) {\n\t\t\t\tfor ( i = m; i <= k; i++ ) {\n\t\t\t\t\tf *= (nr/i) - r;\n\t\t\t\t}\n\t\t\t} else if ( m > k ) {\n\t\t\t\tfor ( i = k; i <= m; i++ ) {\n\t\t\t\t\tv *= (nr/i) - r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( v <= f ) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from './sample1.js';\nimport __var_1__ from './sample2.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sample1 = __var_0__;\nvar sample2 = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a binomial distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - probability of success\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tif ( p > 0.5 ) {\n\t\treturn n - sample( rand, n, 1.0-p );\n\t}\n\tif ( n*p < 10.0 ) {\n\t\treturn sample1( rand, n, p );\n\t}\n\treturn sample2( rand, n, p );\n}\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/math/base/assert/is-nan';\nimport __var_9__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_10__ from '@stdlib/math/base/assert/is-probability';\nimport __var_11__ from '@stdlib/random/base/mt19937';\nimport __var_12__ from '@stdlib/array/to-json';\nimport __var_13__ from './validate.js';\nimport __var_14__ from './binomial.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar isnan = __var_8__;\nvar isPositiveInteger = __var_9__;\nvar isProbability = __var_10__;\nvar randu = __var_11__.factory;\nvar typedarray2json = __var_12__;\nvar validate = __var_13__;\nvar binomial0 = __var_14__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating binomially distributed random numbers.\n*\n* @param {PositiveInteger} [n] - number of trials\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var binomial = factory( 17, 0.5 );\n* var v = binomial();\n* // returns <number>\n*\n* @example\n* var binomial = factory( 8, 0.8, {\n*     'seed': 297\n* });\n* var v = binomial();\n* // returns <number>\n*\n* @example\n* var binomial = factory();\n* var v = binomial( 20, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar n;\n\tvar p;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tn = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( n, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( n === void 0 ) {\n\t\tprng = binomial2;\n\t}\n\telse {\n\t\tprng = binomial1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( n === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ n, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a binomial distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var r = binomial1();\n\t* // returns <number>\n\t*/\n\tfunction binomial1() {\n\t\treturn binomial0( rand, n, p );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a binomial distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} n - number of trials\n\t* @param {Probability} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var r = binomial2( 20, 0.8 );\n\t* // returns <number>\n\t*/\n\tfunction binomial2( n, p ) {\n\t\tif (\n\t\t\tisnan( n ) ||\n\t\t\tisnan( p ) ||\n\t\t\t!isPositiveInteger( n ) ||\n\t\t\t!isProbability( p )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn binomial0( rand, n, p );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Generates a binomially distributed random number.\n*\n* ## Method\n*\n* -   For \\\\(np < 10\\\\), the function generates Bernoulli random variates and returns their sum.\n* -   For \\\\(np \\geq 10\\\\), the function uses the [BTRD algorithm][@hormann:1993a].\n*\n* ## References\n*\n* -   Hörmann, Wolfgang. 1993. \"The generation of binomial random variates.\" _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].\n*\n* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496\n*\n* @name binomial\n* @type {PRNG}\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var r = binomial( 20, 0.8 );\n* // returns <number>\n*/\nvar binomial = factory();\n\n\n// EXPORTS //\nexport default binomial;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/binomial\n*\n* @example\n* var binomial = require( '@stdlib/random/base/binomial' );\n*\n* var v = binomial( 20, 0.4 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/binomial' ).factory;\n*\n* var binomial = factory( 90, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = binomial();\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar binomial = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( binomial, 'factory', factory );\n\n\n// EXPORTS //\nexport default binomial;\n"]}