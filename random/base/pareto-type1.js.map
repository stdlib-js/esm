{"version":3,"sources":["@stdlib/random/base/pareto-type1/lib/validate.js","@stdlib/random/base/pareto-type1/lib/pareto.js","@stdlib/random/base/pareto-type1/lib/factory.js","@stdlib/random/base/pareto-type1/lib/main.js","@stdlib/random/base/pareto-type1/lib/index.js"],"names":["isPositive","__var_0__","isPrimitive","validate","alpha","beta","TypeError","pow","pareto","rand","setReadOnly","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","isObject","__var_3__","isFunction","__var_4__","hasOwnProp","__var_5__","constantFunction","__var_6__","noop","__var_7__","randu","__var_8__","factory","isnan","__var_9__","typedarray2json","__var_10__","__var_11__","pareto0","__var_12__","opts","prng","err","arguments","length","pareto2","pareto1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","type","name","NAME","params","NaN"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-number';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositive = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction pareto( rand, alpha, beta ) {\n\treturn beta / pow( rand(), 1.0/alpha );\n}\n\n\n// EXPORTS //\nexport default pareto;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/has-own-property';\nimport __var_6__ from '@stdlib/utils/constant-function';\nimport __var_7__ from '@stdlib/utils/noop';\nimport __var_8__ from '@stdlib/random/base/mt19937';\nimport __var_9__ from '@stdlib/math/base/assert/is-nan';\nimport __var_10__ from '@stdlib/array/to-json';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './pareto.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar isObject = __var_3__;\nvar isFunction = __var_4__;\nvar hasOwnProp = __var_5__;\nvar constantFunction = __var_6__;\nvar noop = __var_7__;\nvar randu = __var_8__.factory;\nvar isnan = __var_9__;\nvar typedarray2json = __var_10__;\nvar validate = __var_11__;\nvar pareto0 = __var_12__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Pareto (Type I) distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var pareto1 = factory( 2.0, 1.0 );\n*\n* var v = pareto1();\n* // returns <number>\n*\n* @example\n* var pareto1 = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = pareto1();\n* // returns <number>\n*/\nfunction factory() {\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = pareto2;\n\t} else {\n\t\tprng = pareto1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'pareto-type1' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Pareto (Type I) distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = pareto1();\n\t* // returns <number>\n\t*/\n\tfunction pareto1() {\n\t\treturn pareto0( rand, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = pareto2( 2.0, 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = pareto2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = pareto2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = pareto2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction pareto2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pareto0( rand, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n*\n* @name pareto1\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = pareto1( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var v = pareto1( -2.0, 3.0 );\n* // returns NaN\n*/\nvar pareto1 = factory();\n\n\n// EXPORTS //\nexport default pareto1;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/pareto-type1\n*\n* @example\n* var pareto1 = require( '@stdlib/random/base/pareto-type1' );\n*\n* var v = pareto1( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;\n* var pareto1 = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = pareto1();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;\n* var pareto1 = factory({\n*     'seed': 297\n* });\n*\n* var v = pareto1( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pareto1 = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pareto1, 'factory', factory );\n\n\n// EXPORTS //\nexport default pareto1;\n"]}