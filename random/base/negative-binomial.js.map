{"version":3,"sources":["@stdlib/random/base/negative-binomial/lib/validate.js","@stdlib/random/base/negative-binomial/lib/factory.js","@stdlib/random/base/negative-binomial/lib/main.js","@stdlib/random/base/negative-binomial/lib/index.js"],"names":["isPositive","__var_0__","isPrimitive","isNumber","__var_1__","isnan","__var_2__","validate","r","p","TypeError","RangeError","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","hasOwnProp","__var_3__","isObject","__var_4__","isUint32Array","__var_5__","isBoolean","__var_6__","isFunction","__var_7__","constantFunction","__var_8__","noop","__var_9__","__var_10__","poisson","__var_11__","factory","gamma","__var_12__","gcopy","__var_13__","Uint32Array","__var_14__","copy","__var_15__","typedarray2json","__var_16__","__var_17__","rgamma","STATE","rpois","opts","prng","rand","FLG","err","arguments","length","state","negativeBinomial2","negativeBinomial1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","s","out","type","name","NAME","params","NaN","negativeBinomial"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-number';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositive = __var_0__.isPrimitive;\nvar isNumber = __var_1__.isPrimitive;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( r, p ) {\n\tif ( !isPositive( r ) ) {\n\t\treturn new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + r + '`.' );\n\t}\n\tif ( !isNumber( p ) || isnan( p ) ) {\n\t\treturn new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `' + p + '`.' );\n\t}\n\tif ( p <= 0.0 || p >= 1.0 ) {\n\t\treturn new RangeError( 'invalid argument. Second argument must be on the interval `(0,1)`. Value: `' + p + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-uint32array';\nimport __var_6__ from '@stdlib/assert/is-boolean';\nimport __var_7__ from '@stdlib/assert/is-function';\nimport __var_8__ from '@stdlib/utils/constant-function';\nimport __var_9__ from '@stdlib/utils/noop';\nimport __var_10__ from '@stdlib/math/base/assert/is-nan';\nimport __var_11__ from '@stdlib/random/base/poisson';\nimport __var_12__ from '@stdlib/random/base/gamma';\nimport __var_13__ from '@stdlib/blas/base/gcopy';\nimport __var_14__ from '@stdlib/array/uint32';\nimport __var_15__ from '@stdlib/utils/copy';\nimport __var_16__ from '@stdlib/array/to-json';\nimport __var_17__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar hasOwnProp = __var_3__;\nvar isObject = __var_4__;\nvar isUint32Array = __var_5__;\nvar isBoolean = __var_6__.isPrimitive;\nvar isFunction = __var_7__;\nvar constantFunction = __var_8__;\nvar noop = __var_9__;\nvar isnan = __var_10__;\nvar poisson = __var_11__.factory;\nvar gamma = __var_12__.factory;\nvar gcopy = __var_13__;\nvar Uint32Array = __var_14__;\nvar copy = __var_15__;\nvar typedarray2json = __var_16__;\nvar validate = __var_17__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {number} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be number\n* @throws {RangeError} `p` must be a number on the interval `(0,1)`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory();\n*\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar STATE;\n\tvar rpois;\n\tvar opts;\n\tvar prng;\n\tvar rand;\n\tvar FLG;\n\tvar err;\n\tvar p;\n\tvar r;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trpois = poisson( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trpois = poisson({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trpois = poisson( opts );\n\t\t}\n\t} else {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( r, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trpois = poisson({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trpois = poisson( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trpois = poisson( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rpois.state;\n\t\t\trpois.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( r === void 0 ) {\n\t\tprng = negativeBinomial2;\n\t} else {\n\t\tprng = negativeBinomial1;\n\t}\n\trand = rpois.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'negative-binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( r === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ r, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial1();\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial1() {\n\t\treturn rpois( rgamma() );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of successes until experiment is stopped\n\t* @param {number} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial2( 10, 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial2( r, p ) {\n\t\tif (\n\t\t\tisnan( r ) ||\n\t\t\tisnan( p ) ||\n\t\t\tp <= 0.0 ||\n\t\t\tp >= 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rpois( rgamma( r, p/(1-p) ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {PRNG}\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\nexport default negativeBinomial;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/negative-binomial\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/base/negative-binomial' );\n*\n* var v = negativeBinomial( 20, 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;\n* var negativeBinomial = factory( 10, 0.3, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;\n* var negativeBinomial = factory({\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial( 10, 0.67 );\n* // returns <number>\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar negativeBinomial = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( negativeBinomial, 'factory', factory );\n\n\n// EXPORTS //\nexport default negativeBinomial;\n"]}