{"version":3,"sources":["@stdlib/random/shuffle/lib/validate.js","@stdlib/random/shuffle/lib/factory.js","@stdlib/random/shuffle/lib/shuffle.js","@stdlib/random/shuffle/lib/index.js"],"names":["hasOwnProp","__var_0__","isString","__var_1__","isPrimitive","isObject","__var_2__","validate","opts","options","TypeError","copy","setReadOnly","isArrayLike","deepCopy","__var_3__","floor","__var_4__","randu","__var_5__","factory","defaults","__var_6__","__var_7__","config","conf","rand","err","arguments","length","seed","shuffle","normalized","arr","strflg","level","out","tmp","N","i","j","split","join"],"mappings":"mYAwBIA,EAAaC,EACbC,EAAWC,EAAUC,YACrBC,EAAWC,EAwBf,SAASC,EAAUC,EAAMC,GACxB,IAAMJ,EAAUI,GACf,OAAO,IAAIC,UAAW,iEAAmED,EAAU,MAEpG,GAAKT,EAAYS,EAAS,QAAW,CAEpC,GADAD,EAAKG,KAAOF,EAAQE,MACdT,EAAUM,EAAKG,MACpB,OAAO,IAAID,UAAW,sEAAwEF,EAAKG,KAAO,MAE3G,GACe,SAAdH,EAAKG,MACS,YAAdH,EAAKG,MACS,SAAdH,EAAKG,KAEL,OAAO,IAAID,UAAW,8EAAgFF,EAAKG,KAAO,MAGpH,OAAO,KCtCR,IAAIC,EAAcX,EACdY,EAAcV,EACdD,EAAWI,EAAUF,YACrBU,EAAWC,EACXC,EAAQC,EACRC,EAAQC,EAAUC,QAClBC,EAAWC,EACXf,EAAWgB,EAsBf,SAASH,EAASI,GACjB,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAOX,EAAUO,GACZO,UAAUC,SACdF,EAAMpB,EAAUkB,EAAMD,IAErB,MAAMG,EAeR,OAXCD,EADIF,GAAUA,EAAOM,KACdZ,EAAM,CACZY,KAAQN,EAAOM,OAGTZ,IAERN,EAAamB,EAAS,OAAQL,EAAKI,MACnClB,EAAamB,EAAS,OAAQL,GAE9BA,EAAOA,EAAKM,WAELD,EA2BP,SAASA,EAASE,EAAKxB,GACtB,IAAIyB,EACAC,EACAxB,EACAH,EACAmB,EACAS,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAM3B,EAAaoB,GAClB,MAAM,IAAIvB,UAAW,gEAAkEuB,EAAM,MAE9F,GAAKL,UAAUC,OAAS,IAEvBF,EAAMpB,EADNC,EAAO,GACeC,IAErB,MAAMkB,EAqBR,IAlBAhB,EAASH,GAAQA,EAAKG,KAASH,EAAKG,KAAOc,EAAKd,MAEhDuB,EAAShC,EAAU+B,MAElBA,EAAMA,EAAIQ,MAAO,IACjB9B,EAAO,QAGRwB,EAAQ,EACM,YAATxB,EACJwB,GAAS,EACW,SAATxB,IACXwB,GAAS,GAEVG,EAAIL,EAAIJ,OACRO,EAAMtB,EAAUmB,EAAKE,GAGfI,EAAID,EAAI,EAAGC,EAAI,EAAGA,IAEvBC,EAAIxB,EAAOU,KAAUa,EAAE,IAGvBF,EAAMD,EAAKG,GACXH,EAAKG,GAAMH,EAAKI,GAChBJ,EAAKI,GAAMH,EAMZ,OAHKH,IACJE,EAAMH,EAAIS,KAAM,KAEVN,GC5IT,IAAIhB,EAAUnB,EA8BV8B,EAAUX,ICRVR,EAAcX,EACd8B,EAAU5B,EACViB,EAAUd,EAKdM,EAAamB,EAAS,UAAWX","sourcesContent":["import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-string';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isString = __var_1__.isPrimitive;\nvar isObject = __var_2__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {string} [options.copy] - string denoting whether to return a copy (`deep`, `shallow` or `none`)\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'copy': 'shallow'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isString( opts.copy ) ) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be a string primitive. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif (\n\t\t\topts.copy !== 'deep' &&\n\t\t\topts.copy !== 'shallow' &&\n\t\t\topts.copy !== 'none'\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `copy` option must be `deep`, `shallow` or `none`. Value: `' + opts.copy + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-array-like';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from '@stdlib/math/base/special/floor';\nimport __var_5__ from '@stdlib/random/base/mt19937';\nimport __var_6__ from './defaults.json';\nimport __var_7__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isArrayLike = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar deepCopy = __var_3__;\nvar floor = __var_4__;\nvar randu = __var_5__.factory;\nvar defaults = __var_6__;\nvar validate = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function to create a random permutation of elements from an array-like object.\n*\n* @param {Options} [config] - function options\n* @param {PositiveInteger} [config.seed] - integer-valued seed\n* @param {string} [config.copy=\"shallow\"] - default copy option (`deep`, `shallow` or `none`)\n* @throws {TypeError} options argument must be an object\n* @returns {Function} shuffle function\n*\n* @example\n* var shuffle = factory({\n*     'seed': 249\n* });\n* var data = [ 3, 8, 4, 8 ];\n* var out = shuffle( data );\n* // e.g., returns [ 4, 3, 8, 8 ]\n*/\nfunction factory( config ) {\n\tvar conf;\n\tvar rand;\n\tvar err;\n\n\tconf = deepCopy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( conf, config );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tsetReadOnly( shuffle, 'seed', rand.seed );\n\tsetReadOnly( shuffle, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn shuffle;\n\n\t/**\n\t* Returns a random permutation of elements in `arr`.\n\t*\n\t* @private\n\t* @param {ArrayLike} arr - array-like object to shuffle\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.copy] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} `options` must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ArrayLike} the shuffled array-like object\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data );\n\t* // e.g., returns [ 3, 1, 2 ]\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data, {\n\t*     'copy': 'none'\n\t* });\n\t* var bool = ( data === out );\n\t* // returns true\n\t*/\n\tfunction shuffle( arr, options ) {\n\t\tvar strflg;\n\t\tvar level;\n\t\tvar copy;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar N;\n\t\tvar i;\n\t\tvar j;\n\n\t\tif ( !isArrayLike( arr ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be array-like. Value: `' + arr + '`.' );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = {};\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tcopy = ( opts && opts.copy ) ? opts.copy : conf.copy;\n\n\t\tstrflg = isString( arr );\n\t\tif ( strflg ) {\n\t\t\tarr = arr.split( '' );\n\t\t\tcopy = 'none';\n\t\t}\n\n\t\tlevel = 0;\n\t\tif ( copy === 'shallow' ) {\n\t\t\tlevel += 1;\n\t\t} else if ( copy === 'deep' ) {\n\t\t\tlevel += 2;\n\t\t}\n\t\tN = arr.length;\n\t\tout = deepCopy( arr, level );\n\n\t\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\t\tfor ( i = N - 1; i > 0; i-- ) {\n\t\t\t// Generate an integer index on the interval [0,i]:\n\t\t\tj = floor( rand() * (i+1.0) );\n\n\t\t\t// Swap elements:\n\t\t\ttmp = out[ i ];\n\t\t\tout[ i ] = out[ j ];\n\t\t\tout[ j ] = tmp;\n\t\t}\n\n\t\tif ( strflg ) {\n\t\t\tout = arr.join( '' );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns a random permutation of elements in `arr`.\n*\n* @name shuffle\n* @type {Function}\n* @param {ArrayLike} arr - array-like object to shuffle\n* @param {Options} [options] - function options\n* @param {string} [options.copy=\"shallow\"] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n* @throws {TypeError} `options` must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ArrayLike} the shuffled array-like object\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data, {\n*     'copy': 'none'\n* });\n* var bool = ( data === out );\n* // returns true\n*/\nvar shuffle = factory();\n\n\n// EXPORTS //\nexport default shuffle;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './shuffle.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a random permutation of elements from an array-like object.\n*\n* @module @stdlib/random/shuffle\n*\n* @example\n* var shuffle = require( '@stdlib/random/shuffle' );\n*\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* out = shuffle( data, {\n*     'copy': 'none'\n* });\n*\n* var bool = ( data === out );\n* // returns true\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar shuffle = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( shuffle, 'factory', factory );\n\n\n// EXPORTS //\nexport default shuffle;\n"]}