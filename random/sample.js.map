{"version":3,"sources":["@stdlib/random/sample/lib/discrete_uniform.js","@stdlib/random/sample/lib/renormalizing.js","@stdlib/random/sample/lib/fisher_yates.js","@stdlib/random/sample/lib/vose.js","@stdlib/random/sample/lib/validate.js","@stdlib/random/sample/lib/factory.js","@stdlib/random/sample/lib/sample.js","@stdlib/random/sample/lib/index.js"],"names":["floor","__var_0__","discreteUniform","x","size","rand","pos","out","N","i","length","Array","renormalizing","probabilities","probs","psum","j","k","u","slice","prototype","fisherYates","tmp","call","vose","small","large","alias","p","g","l","push","shift","isNonNegativeInteger","isUnityProbabilityArray","__var_1__","hasOwnProp","__var_2__","isBoolean","__var_3__","isPrimitive","isObject","__var_4__","validate","opts","options","TypeError","mutate","replace","setReadOnly","isArrayLike","isString","randu","factory","copy","__var_5__","__var_6__","__var_7__","__var_8__","defaults","__var_9__","__var_10__","config","pool","conf","err","fcn","arguments","seed","sample1","split","sample2","normalized","xcopy","RangeError","sample"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// MAIN //\n\n/**\n* Samples from a discrete uniform distribution (equal probabilities and with replacement).\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction discreteUniform( x, size, rand ) {\n\tvar pos;\n\tvar out;\n\tvar N;\n\tvar i;\n\n\tN = x.length;\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tpos = floor( N * rand() );\n\t\tout[ i ] = x[ pos ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default discreteUniform;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Samples without replacement from a discrete set using custom probabilities.\n*\n* ## Notes\n*\n* -   After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.\n*\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction renormalizing( x, size, rand, probabilities ) {\n\tvar probs;\n\tvar psum;\n\tvar out;\n\tvar N;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar u;\n\n\tN = x.length;\n\tprobs = new Array( N );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] = probabilities[ i ];\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tu = rand();\n\t\tpsum = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tpsum += probs[ j ];\n\t\t\tif ( u < psum ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tif ( k === j ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprobs[ k ] /= 1.0 - probs[ j ];\n\t\t}\n\t\tprobs[ j ] = 0.0;\n\t\tout[ i ] = x[ j ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default renormalizing;\n","import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Samples uniformly without replacement using the Fisher-Yates shuffle.\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction fisherYates( x, size, rand ) {\n\tvar tmp;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tN = x.length;\n\n\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\tfor ( i = N-1; i > 0; i-- ) {\n\t\t// Generate an integer index on the interval: [0,i]\n\t\tj = floor( rand()*(i+1) );\n\n\t\t// Swap elements:\n\t\ttmp = x[ i ];\n\t\tx[ i ] = x[ j ];\n\t\tx[ j ] = tmp;\n\t}\n\treturn slice.call( x, 0, size );\n}\n\n\n// EXPORTS //\nexport default fisherYates;\n","import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// MAIN //\n\n/**\n* Samples with replacement and non-uniform probabilities using Vose's [alias method][alias-method].\n*\n* ## References\n*\n* -   Vose, Michael D. 1991. \"A linear algorithm for generating random numbers with a given distribution.\" _IEEE Transactions on Software Engineering_ 17 (9): 972–75. doi:[10.1109/32.92917][@vose:1991].\n*\n* [alias-method]: http://keithschwarz.com/darts-dice-coins/\n* [@vose:1991]: https://doi.org/10.1109/32.92917\n*\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction vose( x, size, rand, probabilities ) {\n\tvar small;\n\tvar large;\n\tvar probs;\n\tvar alias;\n\tvar out;\n\tvar N;\n\tvar p;\n\tvar g;\n\tvar i;\n\tvar l;\n\n\tprobs = probabilities.slice();\n\tN = x.length;\n\n\tsmall = [];\n\tlarge = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] *= N;\n\t\tif ( probs[ i ] < 1.0 ) {\n\t\t\tsmall.push( i );\n\t\t} else {\n\t\t\tlarge.push( i );\n\t\t}\n\t}\n\talias = new Array( N );\n\tp = new Array( N );\n\twhile ( small.length !== 0 && large.length !== 0 ) {\n\t\tl = small.shift();\n\t\tg = large.shift();\n\t\tp[ l ] = probs[ l ];\n\t\talias[ l ] = g;\n\t\tprobs[ g ] = probs[ g ] + probs[ l ] - 1.0;\n\t\tif ( probs[ g ] < 1.0 ) {\n\t\t\tsmall.push( g );\n\t\t} else {\n\t\t\tlarge.push( g );\n\t\t}\n\t}\n\tfor ( i = 0; i < large.length; i++ ) {\n\t\tp[ large[ i ] ] = 1.0;\n\t}\n\tfor ( i = 0; i < small.length; i++ ) {\n\t\tp[ small[ i ] ] = 1.0;\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tl = floor( N*rand() );\n\t\tif ( rand() < p[ l ] ) {\n\t\t\tout[ i ] = x[ l ];\n\t\t} else {\n\t\t\tout[ i ] = x[ alias[ l ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default vose;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-unity-probability-array';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isUnityProbabilityArray = __var_1__;\nvar hasOwnProp = __var_2__;\nvar isBoolean = __var_3__.isPrimitive;\nvar isObject = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'size': 10,\n*     'replace': false,\n*     'mutate': true,\n*     'probs': [ 0.7, 0.3 ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'size' ) ) {\n\t\topts.size = options.size;\n\t\tif ( !isNonNegativeInteger( opts.size ) ) {\n\t\t\treturn new TypeError( 'invalid option. `size` option must be a nonnegative integer. Option: `' + opts.size + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'probs' ) ) {\n\t\topts.probs = options.probs;\n\t\tif ( !isUnityProbabilityArray( opts.probs ) ) {\n\t\t\treturn new TypeError( 'invalid option. `probs` option must be an array of probabilities that sum to one. Option: `' + opts.probs + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mutate' ) ) {\n\t\topts.mutate = options.mutate;\n\t\tif ( !isBoolean( opts.mutate ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mutate` option must be a boolean primitive. Option: `' + opts.mutate + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'replace' ) ) {\n\t\topts.replace = options.replace;\n\t\tif ( !isBoolean( opts.replace ) ) {\n\t\t\treturn new TypeError( 'invalid option. `replace` option must be a boolean primitive. Option: `' + opts.replace + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-array-like';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/random/base/mt19937';\nimport __var_4__ from '@stdlib/utils/copy';\nimport __var_5__ from './discrete_uniform.js';\nimport __var_6__ from './renormalizing.js';\nimport __var_7__ from './fisher_yates.js';\nimport __var_8__ from './vose.js';\nimport __var_9__ from './defaults.json';\nimport __var_10__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isArrayLike = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar randu = __var_3__.factory;\nvar copy = __var_4__;\nvar discreteUniform = __var_5__;\nvar renormalizing = __var_6__;\nvar fisherYates = __var_7__;\nvar vose = __var_8__;\nvar defaults = __var_9__;\nvar validate = __var_10__;\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns a function to sample elements from an array-like object.\n*\n* @param {ArrayLike} [pool] - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.seed] - integer-valued seed\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @throws {TypeError} `pool` must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function to sample elements from an array-like object\n*\n* @example\n* var sample = factory({\n*     'seed': 232\n* });\n* var out = sample( 'abcdefg' );\n* // e.g., returns [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 232,\n*     'size': 2\n* });\n* var out = sample();\n* // e.g., returns [ 6, 4 ]\n*\n* out = sample();\n* // e.g., returns [ 6, 5 ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 474,\n*     'size': 3,\n*     'mutate': true,\n*     'replace': false\n* });\n* var out = sample();\n* // e.g., returns [ 4, 3, 6 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 5, 2 ]\n*\n* out = sample();\n* // returns null\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'size': 10\n* });\n* // e.g., returns [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2,\n*     'mutate': true\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // returns null\n*/\nfunction factory() {\n\tvar config;\n\tvar pool;\n\tvar conf;\n\tvar rand;\n\tvar err;\n\tvar fcn;\n\n\tconf = copy( defaults );\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLike( arguments[ 0 ] ) ) {\n\t\t\tpool = arguments[ 0 ];\n\t\t} else {\n\t\t\tconfig = arguments[ 0 ];\n\t\t\terr = validate( conf, config );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\tpool = arguments[ 0 ];\n\t\tconfig = arguments[ 1 ];\n\t\tif ( !isArrayLike( pool ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `pool` argument must be array-like. Value: `' + pool + '`.' );\n\t\t}\n\t\terr = validate( conf, config );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tif ( pool === void 0 ) {\n\t\tfcn = sample1;\n\t} else {\n\t\tif ( isString( pool ) ) {\n\t\t\tpool = pool.split( '' );\n\t\t} else {\n\t\t\tpool = copy( pool );\n\t\t}\n\t\tfcn = sample2;\n\t}\n\tsetReadOnly( fcn, 'seed', rand.seed );\n\tsetReadOnly( fcn, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn fcn;\n\n\t/**\n\t* Samples elements from an array-like object.\n\t*\n\t* @private\n\t* @param {ArrayLike} x - array-like object from which to sample elements\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {ProbabilityArray} [options.probs] - element probabilities\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample1( x, options ) {\n\t\tvar replace;\n\t\tvar xcopy;\n\t\tvar probs;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\n\t\tif ( !isArrayLike( x ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be array-like. Value: `' + x + '`.' );\n\t\t}\n\t\tif ( isString( x ) ) {\n\t\t\tx = x.split( '' );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.probs !== void 0 ) {\n\t\t\tprobs = opts.probs;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = x.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > x.length\n\t\t) {\n\t\t\tthrow new RangeError( 'invalid input option. `size` option must be less than or equal to the length of `x` when `replace` is `false`. Option: `' + size + '`.' );\n\t\t}\n\t\t// Custom probabilities...\n\t\tif ( probs ) {\n\t\t\tif ( replace ) {\n\t\t\t\treturn vose( x, size, rand, probs );\n\t\t\t}\n\t\t\treturn renormalizing( x, size, rand, probs );\n\t\t}\n\t\t// All elements equally likely...\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( x, size, rand );\n\t\t}\n\t\txcopy = slice.call( x );\n\t\treturn fisherYates( xcopy, size, rand );\n\t}\n\n\t/**\n\t* Samples elements from a population.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the population when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample2( options ) {\n\t\tvar replace;\n\t\tvar mutate;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\t\tvar out;\n\n\t\tif ( pool.length === 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.mutate === void 0 ) {\n\t\t\tmutate = conf.mutate;\n\t\t} else {\n\t\t\tmutate = opts.mutate;\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = pool.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > pool.length\n\t\t) {\n\t\t\tthrow new RangeError( 'invalid input option. `size` option must be less than or equal to the population size when `replace` is `false`. Option: `' + size + '`.' );\n\t\t}\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( pool, size, rand );\n\t\t}\n\t\tout = fisherYates( pool, size, rand );\n\t\tif ( mutate ) {\n\t\t\t// Remove the sample observations:\n\t\t\tpool = pool.slice( size, pool.length );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar factory = __var_0__;\n\n\n// MAIN //\n\n/**\n* Samples elements from an array-like object.\n*\n* @name sample\n* @type {Function}\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @throws {TypeError} first argument must be array-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n* @returns {Array} sample\n*\n* @example\n* var out = sample( [ 3, null, NaN, 'abc', function(){} ] );\n* // e.g., returns [ 3, 'abc', null, 3, null ]\n*/\nvar sample = factory();\n\n\n// EXPORTS //\nexport default sample;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './sample.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sample elements from an array-like object.\n*\n* @module @stdlib/random/sample\n*\n* @example\n* var sample = require( '@stdlib/random/sample' );\n*\n* var out = sample( 'abc' );\n* // e.g., returns [ 'a', 'a', 'b' ]\n*\n* out = sample( [ 3, 6, 9 ] );\n* // e.g., returns [ 3, 9, 6 ]\n*\n* var bool = ( out.length === 3 );\n* // returns true\n*\n* @example\n* var sample = require( '@stdlib/random/sample' );\n*\n* var mysample = sample.factory({\n*     'seed': 323\n* });\n* var out = mysample( [ 3, 6, 9 ], {\n*     'size': 10\n* });\n* // e.g., returns [ 3, 9, 3, 3, 3, 6, 3, 3, 3, 6 ]\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar sample = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( sample, 'factory', factory );\n\n\n// EXPORTS //\nexport default sample;\n"]}