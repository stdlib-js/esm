{"version":3,"sources":["@stdlib/random/iter/improved-ziggurat/lib/main.js","@stdlib/random/iter/improved-ziggurat/lib/index.js"],"names":["setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","constantFunction","__var_3__","noop","__var_4__","copy","__var_5__","isObject","__var_6__","isNonNegativeInteger","__var_7__","isPrimitive","hasOwnProp","__var_8__","MAX_VALUE","__var_9__","rnorm","__var_10__","factory","iteratorSymbol","__var_11__","iterator","options","opts","iter","rand","FLG","i","arguments","length","TypeError","prng","state","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","done","value","seed","seedLength","stateLength","byteLength","s"],"mappings":"6nBAiCA,IAAIA,EAAcC,EACdC,EAAsBC,EACtBC,EAAuBC,EACvBC,EAAmBC,EACnBC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAuBC,EAAUC,YACjCC,EAAaC,EACbC,EAAYC,EACZC,EAAQC,EAAWC,QACnBC,EAAiBC,EAiCrB,SAASC,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EAAI,CAC3B,IAAMtB,EAAUe,GACf,MAAM,IAAIQ,UAAW,iEAAiER,EAAQ,MAG/F,GADAC,EAAOlB,EAAMiB,EAAS,GACjBV,EAAYW,EAAM,SACtB,IAAMd,EAAsBc,EAAKC,MAChC,MAAM,IAAIM,UAAW,yEAAyEP,EAAKC,KAAK,WAGzGD,EAAKC,KAAOV,EAEbW,EAAOT,EAAOO,QACK,IAAdA,EAAKQ,OAAiC,IAAdR,EAAKlB,OACjCkB,EAAKS,MAAQP,EAAKO,YAGnBP,EAAOT,IACPO,EAAO,CACNC,KAAQV,EACRkB,MAASP,EAAKO,OA6BhB,OA1BAL,EAAI,EAIJhC,EADA6B,EAAO,GACY,OAAQS,GAC3BtC,EAAa6B,EAAM,SAAUU,GAExBX,GAAQA,EAAKQ,MACjBpC,EAAa6B,EAAM,OAAQ,MAC3B7B,EAAa6B,EAAM,aAAc,MACjCzB,EAAsByB,EAAM,QAASvB,EAAkB,MAAQE,GAC/DR,EAAa6B,EAAM,cAAe,MAClC7B,EAAa6B,EAAM,aAAc,QAEjC3B,EAAqB2B,EAAM,OAAQW,GACnCtC,EAAqB2B,EAAM,aAAcY,GACzCrC,EAAsByB,EAAM,QAASa,EAAUC,GAC/CzC,EAAqB2B,EAAM,cAAee,GAC1C1C,EAAqB2B,EAAM,aAAcgB,IAE1C7C,EAAa6B,EAAM,OAAQC,EAAKgB,MAG3BtB,GACJxB,EAAa6B,EAAML,EAAgBD,GAE7BM,EAQP,SAASS,IAER,OADAN,GAAK,EACAD,GAAOC,EAAIJ,EAAKC,KACb,CACNkB,MAAQ,GAGH,CACNC,MAASlB,IACTiB,MAAQ,GAWV,SAASR,EAAKS,GAEb,OADAjB,GAAM,EACDE,UAAUC,OACP,CACNc,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASxB,IACR,OAAOG,EAAUE,GASlB,SAASY,IACR,OAAOV,EAAKgB,KAAKG,KASlB,SAASR,IACR,OAAOX,EAAKgB,KAAKI,WASlB,SAASN,IACR,OAAOd,EAAKgB,KAAKK,YASlB,SAASN,IACR,OAAOf,EAAKgB,KAAKM,WASlB,SAASV,IACR,OAAOZ,EAAKgB,KAAKT,MAUlB,SAASM,EAAUU,GAClBvB,EAAKgB,KAAKT,MAAQgB,GCrMjB,IAAC3B,EAAWzB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/utils/constant-function';\nimport __var_4__ from '@stdlib/utils/noop';\nimport __var_5__ from '@stdlib/utils/copy';\nimport __var_6__ from '@stdlib/assert/is-plain-object';\nimport __var_7__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_8__ from '@stdlib/assert/has-own-property';\nimport __var_9__ from '@stdlib/constants/math/float64-max';\nimport __var_10__ from '@stdlib/random/base/improved-ziggurat';\nimport __var_11__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar constantFunction = __var_3__;\nvar noop = __var_4__;\nvar copy = __var_5__;\nvar isObject = __var_6__;\nvar isNonNegativeInteger = __var_7__.isPrimitive;\nvar hasOwnProp = __var_8__;\nvar MAX_VALUE = __var_9__;\nvar rnorm = __var_10__.factory;\nvar iteratorSymbol = __var_11__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );\n\t\t}\n\t\topts = copy( options, 1 );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnorm( opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnorm();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\nexport default iterator;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @module @stdlib/random/iter/improved-ziggurat\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/improved-ziggurat' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}