{"version":3,"sources":["@stdlib/random/iter/minstd-shuffle/lib/main.js","@stdlib/random/iter/minstd-shuffle/lib/index.js"],"names":["setReadOnly","__var_0__","setReadOnlyAccessor","__var_1__","setReadWriteAccessor","__var_2__","copy","__var_3__","isObject","__var_4__","isBoolean","__var_5__","isPrimitive","isNonNegativeInteger","__var_6__","hasOwnProp","__var_7__","MAX_VALUE","__var_8__","minstd","__var_9__","factory","iteratorSymbol","__var_10__","iterator","options","opts","iter","rand","FLG","i","arguments","length","TypeError","normalized","state","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","done","value","seed","seedLength","stateLength","byteLength","s"],"mappings":"+kBAgCA,IAAIA,EAAcC,EACdC,EAAsBC,EACtBC,EAAuBC,EACvBC,EAAOC,EACPC,EAAWC,EACXC,EAAYC,EAAUC,YACtBC,EAAuBC,EAAUF,YACjCG,EAAaC,EACbC,EAAYC,EACZC,EAASC,EAAUC,QACnBC,EAAiBC,EAiCrB,SAASC,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EAAI,CAC3B,IAAMxB,EAAUiB,GACf,MAAM,IAAIQ,UAAW,iEAAiER,EAAQ,MAG/F,GADAC,EAAOpB,EAAMmB,EAAS,GACjBV,EAAYW,EAAM,gBAChBhB,EAAWgB,EAAKQ,YACrB,MAAM,IAAID,UAAW,6EAA6EP,EAAKQ,WAAW,MAGpH,GAAKnB,EAAYW,EAAM,SACtB,IAAMb,EAAsBa,EAAKC,MAChC,MAAM,IAAIM,UAAW,yEAAyEP,EAAKC,KAAK,WAGzGD,EAAKC,KAAOV,EAEbW,EAAOT,EAAQO,IACI,IAAdA,EAAKpB,OACToB,EAAKS,MAAQP,EAAKO,YAGnBP,EAAOT,IACPO,EAAO,CACNC,KAAQV,EACRkB,MAASP,EAAKO,OAsBhB,OAnBKT,EAAKQ,aACTN,EAAOA,EAAKM,YAEbJ,EAAI,EAIJ9B,EADA2B,EAAO,GACY,OAAQS,GAC3BpC,EAAa2B,EAAM,SAAUU,GAC7BnC,EAAqByB,EAAM,OAAQW,GACnCpC,EAAqByB,EAAM,aAAcY,GACzCnC,EAAsBuB,EAAM,QAASa,EAAUC,GAC/CvC,EAAqByB,EAAM,cAAee,GAC1CxC,EAAqByB,EAAM,aAAcgB,GAGpCrB,GACJtB,EAAa2B,EAAML,EAAgBD,GAE7BM,EAQP,SAASS,IAER,OADAN,GAAK,EACAD,GAAOC,EAAIJ,EAAKC,KACb,CACNiB,MAAQ,GAGH,CACNC,MAASjB,IACTgB,MAAQ,GAWV,SAASP,EAAKQ,GAEb,OADAhB,GAAM,EACDE,UAAUC,OACP,CACNa,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASvB,IACR,OAAOG,EAAUE,GASlB,SAASY,IACR,OAAOV,EAAKkB,KASb,SAASP,IACR,OAAOX,EAAKmB,WASb,SAASL,IACR,OAAOd,EAAKoB,YASb,SAASL,IACR,OAAOf,EAAKqB,WASb,SAAST,IACR,OAAOZ,EAAKO,MAUb,SAASM,EAAUS,GAClBtB,EAAKO,MAAQe,GCjMZ,IAAC1B,EAAWvB","sourcesContent":["import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport __var_3__ from '@stdlib/utils/copy';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-boolean';\nimport __var_6__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_7__ from '@stdlib/assert/has-own-property';\nimport __var_8__ from '@stdlib/constants/math/float64-max';\nimport __var_9__ from '@stdlib/random/base/minstd-shuffle';\nimport __var_10__ from '@stdlib/symbol/iterator';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar setReadOnlyAccessor = __var_1__;\nvar setReadWriteAccessor = __var_2__;\nvar copy = __var_3__;\nvar isObject = __var_4__;\nvar isBoolean = __var_5__.isPrimitive;\nvar isNonNegativeInteger = __var_6__.isPrimitive;\nvar hasOwnProp = __var_7__;\nvar MAX_VALUE = __var_8__;\nvar minstd = __var_9__.factory;\nvar iteratorSymbol = __var_10__;\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - function options\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );\n\t\t}\n\t\topts = copy( options, 1 );\n\t\tif ( hasOwnProp( opts, 'normalized' ) ) {\n\t\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `normalized` option must be a boolean primitive. Option: `'+opts.normalized+'`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = minstd( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = minstd();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\tif ( opts.normalized ) {\n\t\trand = rand.normalized;\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMINSTD} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMINSTD} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMINSTD} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n}\n\n\n// EXPORTS //\nexport default iterator;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/iter/minstd-shuffle\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/minstd-shuffle' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\nvar iterator = __var_0__;\n\n\n// EXPORTS //\nexport default iterator;\n"]}