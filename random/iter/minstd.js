// This file is a part of stdlib. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
import e from"./../../utils/define-nonenumerable-read-only-property.js";import t from"./../../utils/define-nonenumerable-read-only-accessor.js";import r from"./../../utils/define-nonenumerable-read-write-accessor.js";import n from"./../../utils/copy.js";import o from"./../../assert/is-plain-object.js";import i from"./../../assert/is-boolean.js";import s from"./../../assert/is-nonnegative-integer.js";import a from"./../../assert/has-own-property.js";import m from"./../../constants/math/float64-max.js";import u from"./../base/minstd.js";import f from"./../../symbol/iterator.js";var l=e,p=t,d=r,c=n,b=o,g=i.isPrimitive,h=s.isPrimitive,j=a,v=m,y=u.factory,w=f;function z(e){var t,r,n,o,i;if(arguments.length>0){if(!b(e))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+e+"`.");if(t=c(e,1),j(t,"normalized")&&!g(t.normalized))throw new TypeError("invalid option. `normalized` option must be a boolean primitive. Option: `"+t.normalized+"`.");if(j(t,"iter")){if(!h(t.iter))throw new TypeError("invalid option. `iter` option must be a nonnegative integer. Option: `"+t.iter+"`.")}else t.iter=v;n=y(t),!1!==t.copy&&(t.state=n.state)}else n=y(),t={iter:v,state:n.state};return t.normalized&&(n=n.normalized),i=0,l(r={},"next",s),l(r,"return",a),p(r,"seed",u),p(r,"seedLength",f),d(r,"state",E,O),p(r,"stateLength",L),p(r,"byteLength",x),w&&l(r,w,m),r;function s(){return i+=1,o||i>t.iter?{done:!0}:{value:n(),done:!1}}function a(e){return o=!0,arguments.length?{value:e,done:!0}:{done:!0}}function m(){return z(t)}function u(){return n.seed}function f(){return n.seedLength}function L(){return n.stateLength}function x(){return n.byteLength}function E(){return n.state}function O(e){n.state=e}}var L=z;export default L;
//# sourceMappingURL=minstd.js.map