{"version":3,"sources":["@stdlib/stats/ranks/lib/sum.js","@stdlib/stats/ranks/lib/order.js","@stdlib/stats/ranks/lib/is_missing.js","@stdlib/stats/ranks/lib/validate.js","@stdlib/stats/ranks/lib/main.js","@stdlib/stats/ranks/lib/index.js"],"names":["sum","arr","len","out","i","length","compareFunction","a","b","order","x","Array","sort","contains","__var_0__","isMissing","encoding","isArray","__var_1__","isObject","__var_2__","isString","__var_3__","isPrimitive","hasOwnProp","__var_4__","METHODS","MISSING","validate","opts","options","TypeError","method","missing","isCollection","__var_5__","ranks","missingIndices","noDuplicates","countMissing","totalNoTies","finalRanks","iPlusOne","ordered","tieRank","xnew","err","n","j","arguments","NaN","push","shift"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the sum of elements of an numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} sum\n*\n* @example\n* var arr = [ 2.0, 6.0, 10.0 ];\n* var out = sum( arr );\n* // returns 18.0\n*/\nfunction sum( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout += arr[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default sum;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction compareFunction( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a > b ) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\n// MAIN //\n\n/**\n* Returns a permutation which rearranges input array.\n*\n* @private\n* @param {ArrayLike} x - input array-like object\n* @returns {Array} permutation array\n*/\nfunction order( x ) {\n\tvar arr;\n\tvar i;\n\n\tarr = new Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tarr[ i ] = i;\n\t}\n\treturn arr.sort( compare );\n\n\t/**\n\t* Compare the elements of the input array.\n\t*\n\t* @private\n\t* @param {number} a - first number\n\t* @param {number} b - second number\n\t* @returns {boolean} comparison result\n\t*/\n\tfunction compare( a, b ) {\n\t\treturn compareFunction( x[a], x[b] );\n\t}\n}\n\n\n// EXPORTS //\nexport default order;\n","import __var_0__ from '@stdlib/assert/contains';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\nvar contains = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes for each array element whether it is a missing value.\n*\n* @private\n* @param {Array} arr - input array\n* @param {Array} encoding - array whose elements encode missing values\n* @returns {BooleanArray} output array\n*/\nfunction isMissing( arr, encoding ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = contains( encoding, arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default isMissing;\n","import __var_0__ from '@stdlib/assert/contains';\nimport __var_1__ from '@stdlib/assert/is-array';\nimport __var_2__ from '@stdlib/assert/is-object';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar contains = __var_0__;\nvar isArray = __var_1__;\nvar isObject = __var_2__;\nvar isString = __var_3__.isPrimitive;\nvar hasOwnProp = __var_4__;\n\n\n// VARIABLES //\n\nvar METHODS = [ 'min', 'max', 'average', 'dense', 'ordinal' ];\nvar MISSING = [ 'last', 'first', 'remove' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Object} options - function options\n* @param {string} [options.method] - method determining how ties are treated\n* @param {string} [opts.missing] - determines where missing values go (`first`,`last`, or `remove`)\n* @param {Array} [opts.encoding] - array of values encoding missing values\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isArray( opts.encoding ) ) {\n\t\t\treturn new TypeError( 'invalid option. `encoding` option must be an array. Option: `' + opts.encoding + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'method' ) ) {\n\t\topts.method = options.method;\n\t\tif ( !isString( opts.method ) || !contains( METHODS, opts.method ) ) {\n\t\t\treturn new TypeError( 'invalid option. `method` must be one of the following values: `average`, `min`, `max`, `dense`, or `ordinal`. Option: `' + opts.method + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'missing' ) ) {\n\t\topts.missing = options.missing;\n\t\tif ( !isString( opts.missing ) || !contains( MISSING, opts.missing ) ) {\n\t\t\treturn new TypeError( 'invalid option. `missing` must be one of the following values: `last`, `first`, or `remove`. Option: `' + opts.missing + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-collection';\nimport __var_1__ from '@stdlib/assert/contains';\nimport __var_2__ from './sum.js';\nimport __var_3__ from './order.js';\nimport __var_4__ from './is_missing.js';\nimport __var_5__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isCollection = __var_0__;\nvar contains = __var_1__;\nvar sum = __var_2__;\nvar order = __var_3__;\nvar isMissing = __var_4__;\nvar validate = __var_5__;\n\n\n// MAIN //\n\n/**\n* Computes the sample ranks for the values of an array-like object.\n*\n* @param {Collection} x - data array\n* @param {Object} [options] - options object\n* @param {string} [options.method='average'] - method name determining how ties are treated\n* @param {string} [options.missing='last'] - determines where missing values go (`first`,`last`, or `remove`)\n* @param {Array} [options.encoding=[null,NaN]] - array of values encoding missing values\n* @throws {TypeError} first argument has to be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} array containing the computed ranks for the elements of x\n*\n* @example\n* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];\n* var out = ranks( arr );\n* // returns [ 2, 3, 5, 1, 4 ]\n*\n* @example\n* // Ties are averaged:\n* arr = [ 2, 2, 1, 4, 3 ];\n* out = ranks( arr );\n* // returns [ 2.5, 2.5, 1, 5, 4 ]\n*\n* @example\n* // Missing values are placed last:\n* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\n* out = ranks( arr );\n* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]\n*/\nfunction ranks( x, options ) {\n\tvar missingIndices;\n\tvar noDuplicates;\n\tvar countMissing;\n\tvar totalNoTies;\n\tvar finalRanks;\n\tvar encoding;\n\tvar iPlusOne;\n\tvar ordered;\n\tvar missing;\n\tvar tieRank;\n\tvar method;\n\tvar ranks;\n\tvar opts;\n\tvar xnew;\n\tvar err;\n\tvar n;\n\tvar i;\n\tvar j;\n\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be an array-like object. Value: `' + x + '`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmethod = opts.method || 'average';\n\tencoding = opts.encoding || [ null, NaN ];\n\tmissing = opts.missing || 'last';\n\n\tn = x.length;\n\txnew = [];\n\tfor ( i = 0; i < n; i++ ) {\n\t\tif ( !contains( encoding, x[ i ] ) ) {\n\t\t\txnew.push( x[ i ] );\n\t\t}\n\t}\n\tmissingIndices = isMissing( x, encoding );\n\tn = xnew.length;\n\ttotalNoTies = 0;\n\tranks = new Array( n );\n\tordered = order( xnew );\n\n\tif ( method === 'ordinal' ) {\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tranks[ ordered[ i ] ] = i + 1;\n\t\t}\n\t} else {\n\t\tnoDuplicates = 0;\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tiPlusOne = i + 1;\n\t\t\tif (\n\t\t\t\t( i === n - 1 ) ||\n\t\t\t\t( xnew[ ordered[i] ] !== xnew[ ordered[ iPlusOne ] ] )\n\t\t\t) {\n\t\t\t\tswitch ( method ) {\n\t\t\t\tcase 'average':\n\t\t\t\tdefault:\n\t\t\t\t\ttieRank = iPlusOne - ( 0.5 * noDuplicates );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'min':\n\t\t\t\t\ttieRank = iPlusOne - noDuplicates;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'max':\n\t\t\t\t\ttieRank = iPlusOne;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dense':\n\t\t\t\t\ttieRank = iPlusOne - noDuplicates - totalNoTies;\n\t\t\t\t\ttotalNoTies += noDuplicates;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfor ( j = i - noDuplicates; j < iPlusOne; j++ ) {\n\t\t\t\t\tranks[ ordered[ j ] ] = tieRank;\n\t\t\t\t}\n\t\t\t\tnoDuplicates = 0;\n\t\t\t} else {\n\t\t\t\tnoDuplicates += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( missing === 'first' ) {\n\t\tcountMissing = sum( missingIndices );\n\t\tj = 1;\n\t\tfinalRanks = new Array( missingIndices.length );\n\t\tfor ( i = 0; i < missingIndices.length; i++ ) {\n\t\t\tif ( missingIndices[ i ] ) {\n\t\t\t\tfinalRanks[ i ] = j;\n\t\t\t\tj += 1;\n\t\t\t} else {\n\t\t\t\tfinalRanks[ i ] = ranks.shift() + countMissing;\n\t\t\t}\n\t\t}\n\t\treturn finalRanks;\n\t}\n\tif ( missing === 'last' ) {\n\t\tfinalRanks = new Array( missingIndices.length );\n\t\tfor ( i = 0; i < missingIndices.length; i++ ) {\n\t\t\tif ( missingIndices[ i ] ) {\n\t\t\t\tfinalRanks[ i ] = i + ranks.length + 1;\n\t\t\t} else {\n\t\t\t\tfinalRanks[ i ] = ranks.shift();\n\t\t\t}\n\t\t}\n\t\treturn finalRanks;\n\t}\n\t// Case: missing = 'remove'\n\treturn ranks;\n}\n\n\n// EXPORTS //\nexport default ranks;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute ranks for the values of an array-like object.\n*\n* @module @stdlib/stats/ranks\n*\n* @example\n* var ranks = require( '@stdlib/stats/ranks' );\n*\n* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];\n* var out = ranks( arr );\n* // returns [ 2, 3, 5, 1, 4 ]\n*\n* // Ties are averaged:\n* arr = [ 2, 2, 1, 4, 3 ];\n* out = ranks ( arr );\n* // returns [ 2.5, 2.5, 1, 5, 4 ];\n*\n* // Missing values are placed last:\n* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\n* out = ranks( arr );\n* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]\n*/\n\n// MODULES //\nvar ranks = __var_0__;\n\n\n// EXPORTS //\nexport default ranks;\n"]}