{"version":3,"sources":["@stdlib/stats/vartest/lib/validate.js","@stdlib/stats/vartest/lib/print.js","@stdlib/stats/vartest/lib/main.js","@stdlib/stats/vartest/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isPositiveNumber","__var_1__","isObject","__var_2__","isString","__var_3__","isnan","__var_4__","hasOwnProp","__var_5__","validate","opts","options","alpha","TypeError","alternative","ratio","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","xvar","dfX","yvar","dfY","ci","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","fCDF","fQuantile","variance","min","__var_6__","PINF","__var_7__","__var_8__","__var_9__","vartest","x","y","estimate","beta","cint","pval","stat","alt","err","out","RangeError","Error"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-positive-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/is-nan';\nimport __var_5__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isPositiveNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isString = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar hasOwnProp = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {PositiveNumber} [options.ratio] - ratio of population variances under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ratio' ) ) {\n\t\topts.ratio = options.ratio;\n\t\tif ( !isPositiveNumber( opts.ratio ) || isnan( opts.ratio ) ) {\n\t\t\treturn new TypeError( 'invalid option. `ratio` option must be a positive number. Option: `' + opts.ratio + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True ratio in variances is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    variance of x: ' + roundn( this.xvar, -dgts );\n\tstr += ' (df of x: ' + roundn( this.dfX, -dgts ) + ')\\n';\n\tstr += '    variance of y: ' + roundn( this.yvar, -dgts );\n\tstr += ' (df of y: ' + roundn( this.dfY, -dgts ) + ')\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/stats/base/dists/f/cdf';\nimport __var_4__ from '@stdlib/stats/base/dists/f/quantile';\nimport __var_5__ from '@stdlib/stats/base/variance';\nimport __var_6__ from '@stdlib/math/base/special/min';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\nimport __var_8__ from './validate.js';\nimport __var_9__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar setReadOnly = __var_2__;\nvar fCDF = __var_3__;\nvar fQuantile = __var_4__;\nvar variance = __var_5__;\nvar min = __var_6__;\nvar PINF = __var_7__;\nvar validate = __var_8__;\nvar print = __var_9__;\n\n\n// MAIN //\n\n/**\n* Computes a two-sample F-test for equal variances.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {PositiveNumber} [options.ratio=1] - ratio of population variances under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number primitive\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string primitive\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} ratio option has to be a number primitive\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 610, 610, 550, 590, 565, 570 ];\n* var y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\n*\n* var out = vartest( x, y );\n*/\nfunction vartest( x, y, options ) {\n\tvar estimate;\n\tvar alpha;\n\tvar ratio;\n\tvar beta;\n\tvar cint;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar xvar;\n\tvar yvar;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar dfX;\n\tvar dfY;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tratio = opts.ratio || 1.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\tdfX = x.length - 1;\n\tdfY = y.length - 1;\n\n\txvar = variance( x.length, 1, x, 1 );\n\tyvar = variance( y.length, 1, y, 1 );\n\n\testimate = xvar / yvar;\n\tstat = estimate / ratio;\n\tpval = fCDF( stat, dfX, dfY );\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * min( pval, 1.0 - pval );\n\t\tbeta = alpha / 2.0;\n\t\tcint = [\n\t\t\testimate / fQuantile( 1.0 - beta, dfX, dfY ),\n\t\t\testimate / fQuantile( beta, dfX, dfY )\n\t\t];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - pval;\n\t\tcint = [\n\t\t\testimate / fQuantile( 1.0 - alpha, dfX, dfY ),\n\t\t\tPINF\n\t\t];\n\t\tbreak;\n\tcase 'less':\n\t\tcint = [\n\t\t\t0.0,\n\t\t\testimate / fQuantile( alpha, dfX, dfY )\n\t\t];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'xvar', xvar );\n\tsetReadOnly( out, 'yvar', yvar );\n\tsetReadOnly( out, 'dfX', dfX );\n\tsetReadOnly( out, 'dfY', dfY );\n\tsetReadOnly( out, 'method', 'F test for comparing two variances' );\n\tsetReadOnly( out, 'nullValue', ratio );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default vartest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample F-test for equal variances.\n*\n* @module @stdlib/stats/vartest\n*\n* @example\n* var vartest = require( '@stdlib/stats/vartest' );\n*\n* var x = [ 610, 610, 550, 590, 565, 570 ];\n* var y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\n*\n* var out = vartest( x, y );\n*/\n\n// MODULES //\nvar vartest = __var_0__;\n\n\n// EXPORTS //\nexport default vartest;\n"]}