{"version":3,"sources":["@stdlib/stats/incr/mmax/lib/main.js","@stdlib/stats/incr/mmax/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isnan","__var_1__","isPositiveZero","__var_2__","NINF","__var_3__","incrmmax","W","buf","max","N","i","TypeError","Array","x","v","k","arguments","length"],"mappings":"yNAyBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAQC,EACRC,EAAiBC,EACjBC,EAAOC,EAiCX,SAASC,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMd,EAAmBU,GACxB,MAAM,IAAIK,UAAW,8DAAgEL,EAAI,MAO1F,OALAC,EAAM,IAAIK,MAAON,GACjBE,EAAML,EACNO,GAAK,EACLD,EAAI,EAWJ,SAAsBI,GACrB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANR,EACG,KAEDD,EAMR,GAHAE,GAAKA,EAAE,GAAKJ,EAGPG,EAAIH,EACRG,GAAK,GAEJV,EAAOc,IACPA,EAAIL,GACFK,IAAML,GAAOP,EAAgBY,MAE/BL,EAAMK,QAIH,GAAKd,EAAOc,IAAOA,EAAIL,EAC3BA,EAAMK,OAGF,GAAON,EAAKG,KAAQF,GAAOK,EAAIL,GAAST,EAAOQ,EAAKG,KAExD,IADAF,EAAMK,EACAE,EAAI,EAAGA,EAAIT,EAAGS,IACnB,GAAKA,IAAML,EAAI,CAEd,GADAI,EAAIP,EAAKQ,GACJhB,EAAOe,GAAM,CACjBN,EAAMM,EACN,OAEIA,EAAIN,GAASM,IAAMN,GAAOP,EAAgBa,MAC9CN,EAAMM,SAML,GAAKP,EAAKG,KAAQF,GAAOK,IAAML,GAAa,IAANK,EAC1C,GAAKZ,EAAgBY,GACpBL,EAAMK,OACA,GAAKZ,EAAgBM,EAAKG,IAGhC,IADAF,EAAMK,EACAE,EAAI,EAAGA,EAAIT,EAAGS,IACnB,GAAKA,IAAML,GAAKT,EAAgBM,EAAKQ,IAAQ,CAC5CP,EAAMD,EAAKQ,GACX,MASJ,OADAR,EAAKG,GAAMG,EACJL,GC9FN,IAACH,EAAWR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/assert/is-positive-zero';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isnan = __var_1__;\nvar isPositiveZero = __var_2__;\nvar NINF = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmax( W ) {\n\tvar buf;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Array( W );\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx > max ||\n\t\t\t\t( x === max && isPositiveZero( x ) )\n\t\t\t) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or greater than current maximum value...\n\t\telse if ( isnan( x ) || x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...\n\t\telse if ( ( buf[ i ] === max && x < max ) || isnan( buf[ i ] ) ) {\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === max && x === max && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\tmax = x;\n\t\t\t} else if ( isPositiveZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\tmax = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both negative zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmmax;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving maximum incrementally.\n*\n* @module @stdlib/stats/incr/mmax\n*\n* @example\n* var incrmmax = require( '@stdlib/stats/incr/mmax' );\n*\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\nvar incrmmax = __var_0__;\n\n\n// EXPORTS //\nexport default incrmmax;\n"]}