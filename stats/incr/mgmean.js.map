{"version":3,"sources":["@stdlib/stats/incr/mgmean/lib/main.js","@stdlib/stats/incr/mgmean/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isnan","__var_1__","ln","__var_2__","exp","__var_3__","incrmgmean","W","buf","sum","gm","N","i","TypeError","Array","x","lnx","k","arguments","length","NaN"],"mappings":"sMAyBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAQC,EACRC,EAAKC,EACLC,EAAMC,EAiCV,SAASC,EAAYC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMf,EAAmBU,GACxB,MAAM,IAAIM,UAAW,8DAAgEN,EAAI,MAO1F,OALAC,EAAM,IAAIM,MAAOP,GACjBE,EAAM,EACNG,GAAK,EACLD,EAAI,EAWJ,SAAsBI,GACrB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANR,EACG,KAEDD,EASR,GANAE,GAAKA,EAAE,GAAKL,EAGZS,EAAMd,EAAIa,GAGLf,EAAOe,GACXJ,EAAIJ,EACJE,EAAMW,SAGF,GAAKT,EAAIJ,EACbI,GAAK,EACLF,GAAOO,OAGH,GAAKhB,EAAOQ,EAAKI,KAGrB,IAFAD,EAAI,EACJF,EAAMO,EACAC,EAAI,EAAGA,EAAIV,EAAGU,IACnB,GAAKA,IAAML,EAAI,CACd,GAAKZ,EAAOQ,EAAKS,IAAQ,CACxBN,EAAIJ,EACJE,EAAMW,IACN,MAEDT,GAAK,EACLF,GAAOD,EAAKS,SAKY,IAAjBjB,EAAOS,KAChBA,GAAOO,EAAMR,EAAKI,IAMnB,OAHAJ,EAAKI,GAAMI,EAEXN,EAAKN,EAAKK,EAAIE,ICjFb,IAACL,EAAaR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/math/base/special/exp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isnan = __var_1__;\nvar ln = __var_2__;\nvar exp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving geometric mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmgmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator( 3.0 );\n* // returns ~3.11\n*\n* v = accumulator( 5.0 );\n* // returns ~4.22\n*\n* v = accumulator();\n* // returns ~4.22\n*/\nfunction incrmgmean( W ) {\n\tvar buf;\n\tvar sum;\n\tvar gm;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar lnx;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn gm;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Compute the natural log:\n\t\tlnx = ln( x );\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += lnx;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = lnx;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += lnx - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = lnx;\n\n\t\tgm = exp( sum/N );\n\t\treturn gm;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmgmean;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving geometric mean incrementally.\n*\n* @module @stdlib/stats/incr/mgmean\n*\n* @example\n* var incrmgmean = require( '@stdlib/stats/incr/mgmean' );\n*\n* var accumulator = incrmgmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator( 3.0 );\n* // returns ~3.11\n*\n* v = accumulator( 5.0 );\n* // returns ~4.22\n*\n* v = accumulator();\n* // returns ~4.22\n*/\n\n// MODULES //\nvar incrmgmean = __var_0__;\n\n\n// EXPORTS //\nexport default incrmgmean;\n"]}