{"version":3,"sources":["@stdlib/stats/incr/range/lib/main.js","@stdlib/stats/incr/range/lib/index.js"],"names":["PINF","__var_0__","NINF","__var_1__","isnan","__var_2__","incrrange","range","max","min","x","arguments","length"],"mappings":"8JAwBA,IAAIA,EAAOC,EACPC,EAAOC,EACPC,EAAQC,EA4BZ,SAASC,IACR,IAAIC,EACAC,EAAMN,EACNO,EAAMT,EAEV,OASA,SAAsBU,GACrB,GAA0B,IAArBC,UAAUC,OACd,YAAmB,IAAVL,EAAqB,KAAOA,EAEjCH,EAAOM,KACXD,EAAMC,EACNF,EAAME,GAEFA,EAAIF,IACRA,EAAME,GAEFA,EAAID,IACRA,EAAMC,GAGP,OADAH,EAAQC,EAAMC,GClCb,IAACH,EAAYL","sourcesContent":["import __var_0__ from '@stdlib/constants/math/float64-pinf';\nimport __var_1__ from '@stdlib/constants/math/float64-ninf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar PINF = __var_0__;\nvar NINF = __var_1__;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\nfunction incrrange() {\n\tvar range;\n\tvar max = NINF;\n\tvar min = PINF;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( range === void 0 ) ? null : range;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\trange = max - min;\n\t\treturn range;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrrange;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a range incrementally.\n*\n* @module @stdlib/stats/incr/range\n*\n* @example\n* var incrrange = require( '@stdlib/stats/incr/range' );\n*\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\n\n// MODULES //\nvar incrrange = __var_0__;\n\n\n// EXPORTS //\nexport default incrrange;\n"]}