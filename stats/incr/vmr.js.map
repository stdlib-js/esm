{"version":3,"sources":["@stdlib/stats/incr/vmr/lib/main.js","@stdlib/stats/incr/vmr/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isnan","__var_1__","incrvmr","mean","delta","mu","M2","N","arguments","length","TypeError","accumulator2","accumulator1","x","NaN"],"mappings":"6FAuBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAQC,EAkEZ,SAASC,EAASC,GACjB,IAAIC,EACAC,EACAC,EACAC,EAIJ,GAFAD,EAAK,EACLC,EAAI,EACCC,UAAUC,OAAS,CACvB,IAAMZ,EAAUM,GACf,MAAM,IAAIO,UAAW,8DAAgEP,EAAO,MAG7F,OADAE,EAAKF,EACEQ,EAGR,OADAN,EAAK,EACEO,EASP,SAASA,EAAcC,GACtB,OAA0B,IAArBL,UAAUC,OACH,IAANF,EACG,KAEG,IAANA,EACKP,EAAOM,GAASQ,IAAM,EAAIT,EAE3BC,GAAIC,EAAE,GAAOF,GAKvBC,IAFAF,EAAQS,EAAIR,IAEIQ,GADhBR,GAAMD,GAFNG,GAAK,KAIAA,EAAI,EACCP,EAAOM,GAASQ,IAAM,EAAIT,EAE3BC,GAAIC,EAAE,GAAOF,GAUvB,SAASM,EAAcE,GACtB,OAA0B,IAArBL,UAAUC,OACH,IAANF,EACG,KAECD,EAAGC,EAAMF,GAInBC,IADAF,EAAQS,EAAIR,GACED,IAFdG,GAAK,GAGaF,GC3GjB,IAACH,EAAUJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a variance-to-mean ratio (VMR).\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrvmr();\n*\n* var D = accumulator();\n* // returns null\n*\n* D = accumulator( 2.0 );\n* // returns 0.0\n*\n* D = accumulator( 1.0 );\n* // returns ~0.33\n*\n* D = accumulator();\n* // returns ~0.33\n*\n* @example\n* var accumulator = incrvmr( 3.14 );\n*/\nfunction incrvmr( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t\t}\n\t\t\treturn ( M2/(N-1) ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t}\n\t\treturn ( M2/(N-1) ) / mu;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( M2/N ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn ( M2/N ) / mu;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrvmr;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a variance-to-mean ratio (VMR) incrementally.\n*\n* @module @stdlib/stats/incr/vmr\n*\n* @example\n* var incrvmr = require( '@stdlib/stats/incr/vmr' );\n*\n* var accumulator = incrvmr();\n*\n* var D = accumulator();\n* // returns null\n*\n* D = accumulator( 2.0 );\n* // returns 0.0\n*\n* D = accumulator( 1.0 );\n* // returns ~0.33\n*\n* D = accumulator();\n* // returns ~0.33\n*/\n\n// MODULES //\nvar incrvmr = __var_0__;\n\n\n// EXPORTS //\nexport default incrvmr;\n"]}