{"version":3,"sources":["@stdlib/stats/incr/mgrubbs/lib/validate.js","@stdlib/stats/incr/mgrubbs/lib/minmax.js","@stdlib/stats/incr/mgrubbs/lib/meanstdev.js","@stdlib/stats/incr/mgrubbs/lib/main.js","@stdlib/stats/incr/mgrubbs/lib/index.js"],"names":["hasOwnProp","__var_0__","isObject","__var_1__","isNumber","__var_2__","isPrimitive","isString","__var_3__","isnan","__var_4__","validate","opts","options","TypeError","alpha","RangeError","alternative","isPositiveZero","isNegativeZero","PINF","NINF","incrmminmax","out","W","buf","min","max","N","x","i","sgn","v","k","sqrt","incrmmeanstdev","delta","tmp","M2","mu","n","NaN","isPositiveInteger","isBoolean","copy","setReadOnly","__var_5__","setReadOnlyAccessor","__var_6__","__var_7__","__var_8__","roundn","__var_9__","tQuantile","__var_10__","__var_11__","defaults","__var_12__","__var_13__","__var_14__","incrmgrubbs","meanstdev","results","minmax","err","sig","mm","ms","tc","gc","df","G","arguments","length","Array","getRejected","getStatistic","getMean","getStDev","getMin","getMax","print","accumulator","md","decision","digits","str","method","main"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isObject = __var_1__;\nvar isNumber = __var_2__.isPrimitive;\nvar isString = __var_3__.isPrimitive;\nvar isnan = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n*\n* var options = {\n*     'alpha': 0.05,\n*     'alernative': 'two-sided'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` option must be on the interval [0,1]. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/math/base/assert/is-positive-zero';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\nimport __var_4__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveZero = __var_0__;\nvar isNegativeZero = __var_1__;\nvar isnan = __var_2__;\nvar PINF = __var_3__;\nvar NINF = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum values.\n*\n* @private\n* @param {ArrayLikeObject} out - output array\n* @param {PositiveInteger} W - window size\n* @param {ArrayLikeObject} buf - data buffer\n* @returns {Function} accumulator function\n*\n* @example\n* var buf = [ 0.0, 0.0, 0.0 ];\n*\n* var accumulator = incrmminmax( [ 0.0, 0.0 ], 3, buf );\n*\n* var mm = accumulator( 2.0, 0 );\n* // returns [ 2.0, 2.0 ]\n*\n* buf[ 0 ] = 2.0;\n*\n* mm = accumulator( -5.0, 1 );\n* // returns [ -5.0, 2.0 ]\n*\n* buf[ 1 ] = -5.0;\n*\n* mm = accumulator( 3.0, 2 );\n* // returns [ -5.0, 3.0 ]\n*\n* buf[ 2 ] = 3.0;\n*\n* mm = accumulator( 5.0, 0 );\n* // returns [ -5.0, 5.0 ]\n*\n* buf[ 0 ] = 5.0;\n*/\nfunction incrmminmax( out, W, buf ) {\n\tvar min;\n\tvar max;\n\tvar N;\n\n\tmin = PINF;\n\tmax = NINF;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* Updates accumulator state.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @param {NonNegativeInteger} i - buffer index\n\t* @returns {ArrayLikeObject} output array\n\t*/\n\tfunction accumulator( x, i ) {\n\t\tvar sgn;\n\t\tvar v;\n\t\tvar k;\n\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: incoming value is zero, which means we need to be careful and correctly handle signed zeros...\n\t\telse if ( x === 0.0 ) {\n\t\t\tsgn = isNegativeZero( x );\n\t\t\tif ( x === min ) {\n\t\t\t\t// Case: outgoing value is the current minimum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === min &&\n\t\t\t\t\tisNegativeZero( buf[ i ] ) &&\n\t\t\t\t\tsgn === false\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\t\tmin = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn ) {\n\t\t\t\t\t// Ensure minimum value has the correct sign:\n\t\t\t\t\tmin = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( x === max ) {\n\t\t\t\t// Case: outgoing value is the current maximum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === max &&\n\t\t\t\t\tisPositiveZero( buf[ i ] ) &&\n\t\t\t\t\tsgn\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\t\tmax = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn === false ) {\n\t\t\t\t\t// Ensure maximum value has the correct sign:\n\t\t\t\t\tmax = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do...\n\n\t\tout[ 0 ] = min;\n\t\tout[ 1 ] = max;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmminmax;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean and corrected sample standard deviation.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute a corrected sample standard deviation.\n*\n* -   We first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {ArrayLikeObject} out - output array\n* @param {PositiveInteger} W - window size\n* @param {ArrayLikeObject} buf - data buffer\n* @returns {Function} accumulator function\n*\n* @example\n* var buf = [ 0.0, 0.0, 0.0 ];\n* var accumulator = incrmmeanstdev( [ 0.0, 0.0 ], 3, buf );\n*\n* var v = accumulator( 2.0, 0 );\n* // returns [ 2.0, 0.0 ]\n*\n* buf[ 0 ] = 2.0;\n*\n* v = accumulator( -5.0, 1 );\n* // returns [ -1.5, ~4.95 ]\n*\n* buf[ 1 ] = -5.0;\n*\n* v = accumulator( 3.0, 2 );\n* // returns [ 0.0, ~4.36 ]\n*\n* buf[ 2 ] = 3.0;\n*\n* v = accumulator( 5.0, 0 );\n* // returns [ 1.0, ~5.29 ]\n*\n* buf[ 0 ] = 5.0;\n*/\nfunction incrmmeanstdev( out, W, buf ) {\n\tvar delta;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\n\tn = W - 1;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* Updates accumulator state.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @param {NonNegativeInteger} i - buffer index\n\t* @returns {ArrayLike} output array\n\t*/\n\tfunction accumulator( x, i ) {\n\t\tvar k;\n\t\tvar v;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\n\t\t\tout[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tout[ 1 ] = 0.0;\n\t\t\t} else {\n\t\t\t\tout[ 1 ] = sqrt( M2/(N-1) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tout[ 0 ] = mu;\n\t\tout[ 1 ] = sqrt( M2/n );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmmeanstdev;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-positive-integer';\nimport __var_3__ from '@stdlib/assert/is-boolean';\nimport __var_4__ from '@stdlib/utils/copy';\nimport __var_5__ from '@stdlib/utils/define-read-only-property';\nimport __var_6__ from '@stdlib/utils/define-read-only-accessor';\nimport __var_7__ from '@stdlib/math/base/special/max';\nimport __var_8__ from '@stdlib/math/base/special/sqrt';\nimport __var_9__ from '@stdlib/math/base/special/roundn';\nimport __var_10__ from '@stdlib/stats/base/dists/t/quantile';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './defaults.json';\nimport __var_13__ from './minmax.js';\nimport __var_14__ from './meanstdev.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isObject = __var_1__;\nvar isPositiveInteger = __var_2__.isPrimitive;\nvar isBoolean = __var_3__.isPrimitive;\nvar copy = __var_4__;\nvar setReadOnly = __var_5__;\nvar setReadOnlyAccessor = __var_6__;\nvar max = __var_7__;\nvar sqrt = __var_8__;\nvar roundn = __var_9__;\nvar tQuantile = __var_10__;\nvar validate = __var_11__;\nvar defaults = __var_12__;\nvar incrmminmax = __var_13__;\nvar incrmmeanstdev = __var_14__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs a moving Grubbs' test for detecting outliers.\n*\n* @param {PositiveInteger} W - window size\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis ('two-sided', 'min', 'max')\n* @throws {TypeError} first argument must be a positive integer\n* @throws {RangeError} first argument must be greater than or equal to 3\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `alpha` option must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n*\n* var accumulator;\n* var opts;\n* var i;\n*\n* accumulator = incrmgrubbs( 20, opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\nfunction incrmgrubbs( W ) {\n\tvar meanstdev;\n\tvar results;\n\tvar minmax;\n\tvar opts;\n\tvar err;\n\tvar buf;\n\tvar sig;\n\tvar mm;\n\tvar ms;\n\tvar tc;\n\tvar gc;\n\tvar df;\n\tvar N;\n\tvar G;\n\tvar i;\n\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Window size must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tif ( W < 3 ) {\n\t\tthrow new RangeError( 'invalid argument. Window size must be greater than or equal to 3. Value: `' + W + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, arguments[ 1 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tbuf = new Array( W );\n\tdf = W - 2;\n\tgc = 0.0;\n\tG = 0.0;\n\tN = 0;\n\ti = -1;\n\n\t// Compute the critical values:\n\tif ( opts.alternative === 'min' ) {\n\t\tsig = opts.alpha / W;\n\t} else if ( opts.alternative === 'max' ) {\n\t\tsig = opts.alpha / W;\n\t} else { // two-sided\n\t\tsig = opts.alpha / (2*W);\n\t}\n\ttc = tQuantile( 1.0-sig, df );\n\tgc = (W-1)*tc / sqrt( W*(df+(tc*tc)) );\n\n\t// Initialize statistics accumulators:\n\tmm = [ 0.0, 0.0 ];\n\tminmax = incrmminmax( mm, W, buf );\n\n\tms = [ 0.0, 0.0 ];\n\tmeanstdev = incrmmeanstdev( ms, W, buf );\n\n\t// Initialize the results object:\n\tresults = {};\n\tsetReadOnlyAccessor( results, 'rejected', getRejected );\n\tsetReadOnly( results, 'alpha', opts.alpha );\n\tsetReadOnly( results, 'criticalValue', gc );\n\tsetReadOnlyAccessor( results, 'statistic', getStatistic );\n\tsetReadOnly( results, 'df', df );\n\tsetReadOnlyAccessor( results, 'mean', getMean );\n\tsetReadOnlyAccessor( results, 'sd', getStDev );\n\tsetReadOnlyAccessor( results, 'min', getMin );\n\tsetReadOnlyAccessor( results, 'max', getMax );\n\tsetReadOnly( results, 'alt', opts.alternative );\n\tsetReadOnly( results, 'method', 'Grubbs\\' Test' );\n\tsetReadOnly( results, 'print', print );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated Grubbs' test results. If not provided a value, the accumulator function returns the current Grubbs' test results.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(Object|null)} test results or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar md;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < W ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tN += 1;\n\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Update model statistics:\n\t\tmeanstdev( x, i );\n\t\tminmax( x, i );\n\n\t\t// Insert the value into the buffer:\n\t\tbuf[ i ] = x;\n\n\t\tif ( N < W ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Compute the test statistic...\n\t\tif ( opts.alternative === 'min' ) {\n\t\t\tG = ( ms[0]-mm[0] ) / ms[ 1 ];\n\t\t} else if ( opts.alternative === 'max' ) {\n\t\t\tG = ( mm[1]-ms[0] ) / ms[ 1 ];\n\t\t} else { // two-sided\n\t\t\tmd = max( ms[0]-mm[0], mm[1]-ms[0] ); // maximum absolute deviation\n\t\t\tG = md / ms[ 1 ];\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t* Returns a `boolean` indicating whether the null hypothesis should be rejected.\n\t*\n\t* @private\n\t* @returns {boolean} boolean indicating whether the null hypothesis should be rejected\n\t*/\n\tfunction getRejected() {\n\t\treturn ( G > gc );\n\t}\n\n\t/**\n\t* Returns the test statistic.\n\t*\n\t* @private\n\t* @returns {number} test statistic\n\t*/\n\tfunction getStatistic() {\n\t\treturn G;\n\t}\n\n\t/**\n\t* Returns the sample mean.\n\t*\n\t* @private\n\t* @returns {number} sample mean\n\t*/\n\tfunction getMean() {\n\t\treturn ms[ 0 ];\n\t}\n\n\t/**\n\t* Returns the corrected sample standard deviation.\n\t*\n\t* @private\n\t* @returns {number} corrected sample standard deviation\n\t*/\n\tfunction getStDev() {\n\t\treturn ms[ 1 ];\n\t}\n\n\t/**\n\t* Returns the sample minimum.\n\t*\n\t* @private\n\t* @returns {number} sample minimum\n\t*/\n\tfunction getMin() {\n\t\treturn mm[ 0 ];\n\t}\n\n\t/**\n\t* Returns the sample maximum.\n\t*\n\t* @private\n\t* @returns {number} sample maximum\n\t*/\n\tfunction getMax() {\n\t\treturn mm[ 1 ];\n\t}\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Object} [options] - options object\n\t* @param {PositiveInteger} [options.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [options.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted output\n\t*/\n\tfunction print( options ) {\n\t\tvar decision;\n\t\tvar digits;\n\t\tvar str;\n\n\t\tdigits = opts.digits;\n\t\tdecision = opts.decision;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( options.digits ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + options.digits + '`.' );\n\t\t\t\t}\n\t\t\t\tdigits = options.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( options.decision ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be boolean. Option: `' + options.decision + '`.' );\n\t\t\t\t}\n\t\t\t\tdecision = options.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Alternative hypothesis: ';\n\t\tif ( opts.alternative === 'max' ) {\n\t\t\tstr += 'The maximum value (' + mm[ 1 ] + ') is an outlier';\n\t\t} else if ( opts.alternative === 'min' ) {\n\t\t\tstr += 'The minimum value (' + mm[ 0 ] + ') is an outlier';\n\t\t} else { // two-sided\n\t\t\tstr += 'The ';\n\t\t\tif ( ms[0]-mm[0] > mm[1]-ms[0] ) {\n\t\t\t\tstr += 'minimum value (' + mm[ 0 ] + ')';\n\t\t\t} else {\n\t\t\t\tstr += 'maximum value (' + mm[ 1 ] + ')';\n\t\t\t}\n\t\t\tstr += ' is an outlier';\n\t\t}\n\t\tstr += '\\n\\n';\n\t\tstr += '    criticalValue: ' + roundn( gc, -digits ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( G, -digits ) + '\\n';\n\t\tstr += '    df: ' + df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( G > gc ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmgrubbs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Moving Grubbs' test for outliers.\n*\n* @module @stdlib/stats/incr/mgrubbs\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n* var incrmgrubbs = require( '@stdlib/stats/incr/mgrubbs' );\n*\n* var accumulator;\n* var res;\n* var i;\n*\n* accumulator = incrmgrubbs( 20 );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\n\n// MODULES //\nvar main = __var_0__;\n\n\n// EXPORTS //\nexport default main;\n"]}