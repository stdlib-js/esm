{"version":3,"sources":["@stdlib/stats/incr/mapcorr/lib/main.js","@stdlib/stats/incr/mapcorr/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isNumber","__var_1__","incrmpcorr","__var_2__","abs","__var_3__","incrmapcorr","W","meanx","meany","acc","TypeError","arguments","length","accumulator","x","y","r"],"mappings":"2KAyBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAWC,EAAUF,YACrBG,EAAaC,EACbC,EAAMC,EAwCV,SAASC,EAAaC,EAAGC,EAAOC,GAC/B,IAAIC,EACJ,IAAMb,EAAmBU,GACxB,MAAM,IAAII,UAAW,wEAA0EJ,EAAI,MAEpG,GAAKK,UAAUC,OAAS,EAAI,CAC3B,IAAMb,EAAUQ,GACf,MAAM,IAAIG,UAAW,yEAA2EH,EAAQ,MAEzG,IAAMR,EAAUS,GACf,MAAM,IAAIE,UAAW,wEAA0EF,EAAQ,MAExGC,EAAMR,EAAYK,EAAGC,EAAOC,QAE5BC,EAAMR,EAAYK,GAEnB,OAAOO,EAUP,SAASA,EAAaC,EAAGC,GACxB,IAAIC,EACJ,OAA0B,IAArBL,UAAUC,OAEH,QADXI,EAAIP,KAEIO,EAEDb,EAAKa,GAENb,EAAKM,EAAKK,EAAGC,KCpDnB,IAACV,EAAcR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/stats/incr/mpcorr';\nimport __var_3__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isNumber = __var_1__.isPrimitive;\nvar incrmpcorr = __var_2__;\nvar abs = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number primitive\n* @throws {TypeError} third argument must be a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmapcorr( 3 );\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator( 3.0, -1.0 );\n* // returns ~0.925\n*\n* ar = accumulator( 5.0, -9.5 );\n* // returns ~0.863\n*\n* ar = accumulator();\n* // returns ~0.863\n*\n* @example\n* var accumulator = incrmapcorr( 3, -2.0, 10.0 );\n*/\nfunction incrmapcorr( W, meanx, meany ) {\n\tvar acc;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + meanx + '`.' );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Third argument must be a number primitive. Value: `' + meany + '`.' );\n\t\t}\n\t\tacc = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tacc = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn abs( r );\n\t\t}\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmapcorr;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/mapcorr\n*\n* @example\n* var incrmapcorr = require( '@stdlib/stats/incr/mapcorr' );\n*\n* var accumulator = incrmapcorr( 3 );\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator( 3.0, -1.0 );\n* // returns ~0.925\n*\n* ar = accumulator( 5.0, -9.5 );\n* // returns ~0.863\n*\n* ar = accumulator();\n* // returns ~0.863\n*/\n\n// MODULES //\nvar incrmapcorr = __var_0__;\n\n\n// EXPORTS //\nexport default incrmapcorr;\n"]}