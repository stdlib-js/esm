{"version":3,"sources":["@stdlib/stats/incr/minmax/lib/main.js","@stdlib/stats/incr/minmax/lib/index.js"],"names":["isArrayLike","__var_0__","isPositiveZero","__var_1__","isNegativeZero","__var_2__","isnan","__var_3__","PINF","__var_4__","NINF","__var_5__","incrminmax","out","minmax","min","max","FLG","arguments","length","TypeError","accumulator","x"],"mappings":"4UA2BA,IAAIA,EAAcC,EACdC,EAAiBC,EACjBC,EAAiBC,EACjBC,EAAQC,EACRC,EAAOC,EACPC,EAAOC,EAiCX,SAASC,EAAYC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACdL,EAAS,CAAE,EAAK,OACV,CACN,IAAMd,EAAaa,GAClB,MAAM,IAAIO,UAAW,2EAA6EP,EAAM,MAEzGC,EAASD,EAKV,OAHAE,EAAMP,EACNQ,EAAMN,EACNO,GAAM,EACCI,EASP,SAASA,EAAaC,GACrB,OAA0B,IAArBJ,UAAUC,QACD,IAARF,EACG,MAERH,EAAQ,GAAMC,EACdD,EAAQ,GAAME,EACPF,IAERG,GAAM,EACDX,EAAOgB,IACXP,EAAMO,EACNN,EAAMM,KAEDA,EAAIP,GAASO,IAAMP,GAAOX,EAAgBkB,MAC9CP,EAAMO,IAEFA,EAAIN,GAASM,IAAMN,GAAOd,EAAgBoB,MAC9CN,EAAMM,IAGRR,EAAQ,GAAMC,EACdD,EAAQ,GAAME,EACPF,IC9DN,IAACF,EAAaX","sourcesContent":["import __var_0__ from '@stdlib/assert/is-array-like-object';\nimport __var_1__ from '@stdlib/math/base/assert/is-positive-zero';\nimport __var_2__ from '@stdlib/math/base/assert/is-negative-zero';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLike = __var_0__;\nvar isPositiveZero = __var_1__;\nvar isNegativeZero = __var_2__;\nvar isnan = __var_3__;\nvar PINF = __var_4__;\nvar NINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes minimum and maximum values.\n*\n* @param {ArrayLikeObject} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\nfunction incrminmax( out ) {\n\tvar minmax;\n\tvar min;\n\tvar max;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Output argument must be an array-like object. Value: `' + out + '`.' );\n\t\t}\n\t\tminmax = out;\n\t}\n\tmin = PINF;\n\tmax = NINF;\n\tFLG = false;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum values. If not provided a value, the accumulator function returns the current minimum and maximum values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tminmax[ 0 ] = min; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tminmax[ 1 ] = max;\n\t\t\treturn minmax;\n\t\t}\n\t\tFLG = true;\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t} else {\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrminmax;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum and maximum incrementally.\n*\n* @module @stdlib/stats/incr/minmax\n*\n* @example\n* var incrminmax = require( '@stdlib/stats/incr/minmax' );\n*\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\n\n// MODULES //\nvar incrminmax = __var_0__;\n\n\n// EXPORTS //\nexport default incrminmax;\n"]}