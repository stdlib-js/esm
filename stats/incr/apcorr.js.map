{"version":3,"sources":["@stdlib/stats/incr/apcorr/lib/main.js","@stdlib/stats/incr/apcorr/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","incrpcorr","__var_1__","abs","__var_2__","incrapcorr","meanx","meany","acc","arguments","length","TypeError","accumulator","x","y"],"mappings":"qHAwBA,IAAIA,EAAWC,EAAUC,YACrBC,EAAYC,EACZC,EAAMC,EAgCV,SAASC,EAAYC,EAAOC,GAC3B,IAAIC,EACJ,GAAKC,UAAUC,OAAS,CACvB,IAAMZ,EAAUQ,GACf,MAAM,IAAIK,UAAW,wEAA0EL,EAAQ,MAExG,IAAMR,EAAUS,GACf,MAAM,IAAII,UAAW,yEAA2EJ,EAAQ,MAEzGC,EAAMP,EAAWK,EAAOC,QAExBC,EAAMP,IAEP,OAAOW,EAUP,SAASA,EAAaC,EAAGC,GACxB,OACQX,EADkB,IAArBM,UAAUC,OACFF,IAEDA,EAAKK,EAAGC,KCxCnB,IAACT,EAAaN","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/stats/incr/pcorr';\nimport __var_2__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar incrpcorr = __var_1__;\nvar abs = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number primitive\n* @throws {TypeError} second argument must be a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*\n* @example\n* var accumulator = incrapcorr( 2.0, -3.0 );\n*/\nfunction incrapcorr( meanx, meany ) {\n\tvar acc;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a number primitive. Value: `' + meanx + '`.' );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + meany + '`.' );\n\t\t}\n\t\tacc = incrpcorr( meanx, meany );\n\t} else {\n\t\tacc = incrpcorr();\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn abs( acc() );\n\t\t}\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrapcorr;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/apcorr\n*\n* @example\n* var incrapcorr = require( '@stdlib/stats/incr/apcorr' );\n*\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*/\n\n// MODULES //\nvar incrapcorr = __var_0__;\n\n\n// EXPORTS //\nexport default incrapcorr;\n"]}