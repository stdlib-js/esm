{"version":3,"sources":["@stdlib/stats/incr/ewstdev/lib/main.js","@stdlib/stats/incr/ewstdev/lib/index.js"],"names":["isNonNegativeNumber","__var_0__","isPrimitive","sqrt","__var_1__","increwstdev","alpha","incr","s2","s","r","m","c","TypeError","RangeError","x","arguments","length"],"mappings":"wGAuBA,IAAIA,EAAsBC,EAAUC,YAChCC,EAAOC,EA4BX,SAASC,EAAaC,GACrB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMZ,EAAqBM,GAC1B,MAAM,IAAIO,UAAW,gEAAkEP,EAAQ,MAEhG,GAAKA,EAAQ,GAAOA,EAAQ,EAC3B,MAAM,IAAIQ,WAAY,sFAAwFR,EAAQ,MAGvH,OADAM,EAAI,EAAMN,EAUV,SAAsBS,GACrB,GAA0B,IAArBC,UAAUC,OACd,YAAe,IAANR,EAAiB,KAAOA,OAEvB,IAANA,GACJE,EAAII,EACJP,EAAK,IAILG,GADAJ,EAAOD,GADPI,EAAIK,EAAIJ,GAGRH,EAAKI,GAAMJ,EAAIE,EAAEH,IAGlB,OADAE,EAAIN,EAAMK,IC3CT,IAACH,EAAcJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeNumber = __var_0__.isPrimitive;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted standard deviation.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwstdev( 0.5 );\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns 3.5\n*\n* s = accumulator();\n* // returns 3.5\n*/\nfunction increwstdev( alpha ) {\n\tvar incr;\n\tvar s2;\n\tvar s;\n\tvar r;\n\tvar m;\n\tvar c;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative number. Value: `' + alpha + '`.' );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `' + alpha + '`.' );\n\t}\n\tc = 1.0 - alpha;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated standard deviation. If not provided a value, the accumulator function returns the current standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} standard deviation or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( s === void 0 ) ? null : s;\n\t\t}\n\t\tif ( s === void 0 ) {\n\t\t\tm = x;\n\t\t\ts2 = 0.0;\n\t\t} else {\n\t\t\tr = x - m;\n\t\t\tincr = alpha * r;\n\t\t\tm += incr;\n\t\t\ts2 = c * ( s2+(r*incr) );\n\t\t}\n\t\ts = sqrt( s2 );\n\t\treturn s;\n\t}\n}\n\n\n// EXPORTS //\nexport default increwstdev;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/ewstdev\n*\n* @example\n* var increwstdev = require( '@stdlib/stats/incr/ewstdev' );\n*\n* var accumulator = increwstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns 3.5\n*\n* s = accumulator();\n* // returns 3.5\n*/\n\n// MODULES //\nvar increwstdev = __var_0__;\n\n\n// EXPORTS //\nexport default increwstdev;\n"]}