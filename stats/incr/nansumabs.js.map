{"version":3,"sources":["@stdlib/stats/incr/nansumabs/lib/main.js","@stdlib/stats/incr/nansumabs/lib/index.js"],"names":["isnan","__var_0__","incrsumabs","__var_1__","incrnansumabs","sum","x","arguments","length"],"mappings":"6EAuBA,IAAIA,EAAQC,EACRC,EAAaC,EA4BjB,SAASC,IACR,IAAIC,EAAMH,IACV,OASA,SAAsBI,GACrB,GAA0B,IAArBC,UAAUC,QAAgBR,EAAOM,GACrC,OAAOD,IAER,OAAOA,EAAKC,ICnBX,IAACF,EAAgBH","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/stats/incr/sumabs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar incrsumabs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of absolute values, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnansumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\nfunction incrnansumabs() {\n\tvar sum = incrsumabs();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 || isnan( x ) ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrnansumabs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of absolute values incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nansumabs\n*\n* @example\n* var incrnansumabs = require( '@stdlib/stats/incr/nansumabs' );\n*\n* var accumulator = incrnansumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\n\n// MODULES //\nvar incrnansumabs = __var_0__;\n\n\n// EXPORTS //\nexport default incrnansumabs;\n"]}