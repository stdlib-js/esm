{"version":3,"sources":["@stdlib/stats/incr/mminmaxabs/lib/main.js","@stdlib/stats/incr/mminmaxabs/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isArrayLike","__var_1__","incrmminmax","__var_2__","abs","__var_3__","incrmminmaxabs","out","window","minmax","o","W","arguments","length","TypeError","accumulator","x"],"mappings":"uLAyBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAcC,EACdC,EAAcC,EACdC,EAAMC,EAmCV,SAASC,EAAgBC,EAAKC,GAC7B,IAAIC,EACAC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACdH,EAAI,CAAE,EAAK,GACXC,EAAIJ,MACE,CACN,IAAMP,EAAaO,GAClB,MAAM,IAAIO,UAAW,2EAA6EP,EAAM,MAEzGG,EAAIH,EACJI,EAAIH,EAEL,IAAMX,EAAmBc,GACxB,MAAM,IAAIG,UAAW,qEAAuEH,EAAI,MAGjG,OADAF,EAASP,EAAaQ,EAAGC,GAClBI,EASP,SAASA,EAAaC,GACrB,OAA0B,IAArBJ,UAAUC,OACPJ,IAEDA,EAAQL,EAAKY,KC3CnB,IAACV,EAAiBR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/stats/incr/mminmax';\nimport __var_3__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isArrayLike = __var_1__;\nvar incrmminmax = __var_2__;\nvar abs = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum absolute values.\n*\n* @param {ArrayLikeObject} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminmaxabs( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 3.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 3.0, 5.0 ]\n*/\nfunction incrmminmaxabs( out, window ) {\n\tvar minmax;\n\tvar o;\n\tvar W;\n\tif ( arguments.length === 1 ) {\n\t\to = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Output argument must be an array-like object. Value: `' + out + '`.' );\n\t\t}\n\t\to = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Window size must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tminmax = incrmminmax( o, W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum absolute values. If not provided a value, the accumulator function returns the current minimum and maximum absolute values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn minmax();\n\t\t}\n\t\treturn minmax( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmminmaxabs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute moving minimum and maximum absolute values incrementally.\n*\n* @module @stdlib/stats/incr/mminmaxabs\n*\n* @example\n* var incrmminmaxabs = require( '@stdlib/stats/incr/mminmaxabs' );\n*\n* var accumulator = incrmminmaxabs( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 3.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 3.0, 5.0 ]\n*/\n\n// MODULES //\nvar incrmminmaxabs = __var_0__;\n\n\n// EXPORTS //\nexport default incrmminmaxabs;\n"]}