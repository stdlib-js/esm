{"version":3,"sources":["@stdlib/stats/incr/mape/lib/main.js","@stdlib/stats/incr/mape/lib/index.js"],"names":["incrmean","__var_0__","abs","__var_1__","incrmape","mean","f","a","arguments","length"],"mappings":"yEAuBA,IAAIA,EAAWC,EACXC,EAAMC,EAyBV,SAASC,IACR,IAAIC,EAAOL,IACX,OAUA,SAAsBM,EAAGC,GACxB,GAA0B,IAArBC,UAAUC,OACd,OAAOJ,IAER,OAAOA,EAAM,IAAQH,GAAMK,EAAED,GAAGC,KCpB/B,IAACH,EAAWH","sourcesContent":["import __var_0__ from '@stdlib/stats/incr/mean';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar incrmean = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean absolute percentage error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator();\n* // returns ~91.67\n*/\nfunction incrmape() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute percentage error. If not provided input values, the accumulator function returns the current mean absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( 100.0 * abs( (a-f)/a ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmape;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean absolute percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mape\n*\n* @example\n* var incrmape = require( '@stdlib/stats/incr/mape' );\n*\n* var accumulator = incrmape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator();\n* // returns ~91.67\n*/\n\n// MODULES //\nvar incrmape = __var_0__;\n\n\n// EXPORTS //\nexport default incrmape;\n"]}