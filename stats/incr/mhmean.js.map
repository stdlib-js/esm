{"version":3,"sources":["@stdlib/stats/incr/mhmean/lib/main.js","@stdlib/stats/incr/mhmean/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","incrmmean","__var_1__","incrmhmean","W","mmean","TypeError","x","v","arguments","length"],"mappings":"+EAuBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAYC,EAoDhB,SAASC,EAAYC,GACpB,IAAIC,EACJ,IAAMP,EAAmBM,GACxB,MAAM,IAAIE,UAAW,8DAAgEF,EAAI,MAG1F,OADAC,EAAQJ,EAAWG,GAUnB,SAAsBG,GACrB,IAAIC,EACJ,GAA0B,IAArBC,UAAUC,OAEd,OAAW,QADXF,EAAIH,KAEIG,EAED,EAAMA,EAEd,OAAO,EAAMH,EAAO,EAAIE,ICjDvB,IAACJ,EAAaJ","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/stats/incr/mmean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar incrmmean = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving harmonic mean.\n*\n* ## Method\n*\n* -   The harmonic mean of positive real numbers \\\\(x_0, x_1, \\ldots, x_{n-1}\\\\) is defined as\n*\n*     ```tex\n*     \\begin{align*}\n*     H &= \\frac{n}{\\frac{1}{x_0} + \\frac{1}{x_1} + \\cdots + \\frac{1}{x_{n-1}}} \\\\\n*       &= \\frac{n}{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}\n*     \\end{align*}\n*     ```\n*\n*     which may be expressed\n*\n*     ```tex\n*     H = \\biggl( \\frac{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}{n} \\biggr)^{-1}\n*     ```\n*\n* -   Accordingly, to compute the harmonic mean for each window incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmhmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator( 3.0 );\n* // returns ~2.90\n*\n* v = accumulator( 5.0 );\n* // returns ~4.09\n*\n* v = accumulator();\n* // returns ~4.09\n*/\nfunction incrmhmean( W ) {\n\tvar mmean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} harmonic mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tv = mmean();\n\t\t\tif ( v === null ) {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\treturn 1.0 / v;\n\t\t}\n\t\treturn 1.0 / mmean( 1.0/x );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmhmean;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving harmonic mean incrementally.\n*\n* @module @stdlib/stats/incr/mhmean\n*\n* @example\n* var incrmhmean = require( '@stdlib/stats/incr/mhmean' );\n*\n* var accumulator = incrmhmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator( 3.0 );\n* // returns ~2.90\n*\n* v = accumulator( 5.0 );\n* // returns ~4.09\n*\n* v = accumulator();\n* // returns ~4.09\n*/\n\n// MODULES //\nvar incrmhmean = __var_0__;\n\n\n// EXPORTS //\nexport default incrmhmean;\n"]}