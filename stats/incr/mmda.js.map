{"version":3,"sources":["@stdlib/stats/incr/mmda/lib/main.js","@stdlib/stats/incr/mmda/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","incrmmean","__var_1__","signum","__var_2__","kroneckerDelta","__var_3__","incrmmda","W","mean","FLG","f0","a0","TypeError","f","a","sf","sa","arguments","length"],"mappings":"8LAyBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAYC,EACZC,EAASC,EACTC,EAAiBC,EAiCrB,SAASC,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMd,EAAmBU,GACxB,MAAM,IAAIK,UAAW,8DAAgEL,EAAI,MAG1F,OADAC,EAAOR,EAAWO,GAWlB,SAAsBM,EAAGC,GACxB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAOV,SAEK,IAARC,IACJA,GAAM,EACNC,EAAKG,EACLF,EAAKG,GAMN,OAJAC,EAAKb,EAAQW,EAAEH,GACfM,EAAKd,EAAQY,EAAEH,GACfD,EAAKG,EACLF,EAAKG,EACEN,EAAMJ,EAAgBW,EAAIC,KC5ChC,IAACV,EAAWR","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/stats/incr/mmean';\nimport __var_2__ from '@stdlib/math/base/special/signum';\nimport __var_3__ from '@stdlib/math/base/special/kronecker-delta';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar incrmmean = __var_1__;\nvar signum = __var_2__;\nvar kroneckerDelta = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean directional accuracy.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\nfunction incrmmda( W ) {\n\tvar mean;\n\tvar FLG;\n\tvar f0;\n\tvar a0;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean directional accuracy. If not provided input values, the accumulator function returns the current mean directional.\n\t*\n\t* @private\n\t* @param {number} [f] - forecast value\n\t* @param {number} [a] - actual value\n\t* @returns {(number|null)} mean directional accuracy or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tvar sf;\n\t\tvar sa;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tif ( FLG === void 0 ) {\n\t\t\tFLG = true;\n\t\t\tf0 = f;\n\t\t\ta0 = a;\n\t\t}\n\t\tsf = signum( f-f0 );\n\t\tsa = signum( a-a0 );\n\t\tf0 = f;\n\t\ta0 = a;\n\t\treturn mean( kroneckerDelta( sf, sa ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmmda;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean directional accuracy incrementally.\n*\n* @module @stdlib/stats/incr/mmda\n*\n* @example\n* var incrmmda = require( '@stdlib/stats/incr/mmda' );\n*\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\n\n// MODULES //\nvar incrmmda = __var_0__;\n\n\n// EXPORTS //\nexport default incrmmda;\n"]}