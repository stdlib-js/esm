{"version":3,"sources":["@stdlib/stats/incr/minmaxabs/lib/main.js","@stdlib/stats/incr/minmaxabs/lib/index.js"],"names":["isArrayLike","__var_0__","isnan","__var_1__","PINF","__var_2__","abs","__var_3__","incrminmaxabs","out","minmax","min","max","FLG","arguments","length","TypeError","accumulator","x","ax"],"mappings":"8MAyBA,IAAIA,EAAcC,EACdC,EAAQC,EACRC,EAAOC,EACPC,EAAMC,EAiCV,SAASC,EAAeC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACdL,EAAS,CAAE,EAAK,OACV,CACN,IAAMV,EAAaS,GAClB,MAAM,IAAIO,UAAW,2EAA6EP,EAAM,MAEzGC,EAASD,EAKV,OAHAE,EAAMP,EACNQ,EAAM,EACNC,GAAM,EACCI,EASP,SAASA,EAAaC,GACrB,IAAIC,EACJ,OAA0B,IAArBL,UAAUC,QACD,IAARF,EACG,MAERH,EAAQ,GAAMC,EACdD,EAAQ,GAAME,EACPF,IAERG,GAAM,EACDX,EAAOgB,IACXP,EAAMO,EACNN,EAAMM,KAENC,EAAKb,EAAKY,IACAP,IACTA,EAAMQ,GAEFA,EAAKP,IACTA,EAAMO,IAGRT,EAAQ,GAAMC,EACdD,EAAQ,GAAME,EACPF,IC5DN,IAACF,EAAgBP","sourcesContent":["import __var_0__ from '@stdlib/assert/is-array-like-object';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLike = __var_0__;\nvar isnan = __var_1__;\nvar PINF = __var_2__;\nvar abs = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes minimum and maximum absolute values.\n*\n* @param {ArrayLikeObject} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminmaxabs();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 2.0, 5.0 ]\n*/\nfunction incrminmaxabs( out ) {\n\tvar minmax;\n\tvar min;\n\tvar max;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Output argument must be an array-like object. Value: `' + out + '`.' );\n\t\t}\n\t\tminmax = out;\n\t}\n\tmin = PINF;\n\tmax = 0.0;\n\tFLG = false;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum absolute values. If not provided a value, the accumulator function returns the current minimum and maximum absolute values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar ax;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tminmax[ 0 ] = min; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tminmax[ 1 ] = max;\n\t\t\treturn minmax;\n\t\t}\n\t\tFLG = true;\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t} else {\n\t\t\tax = abs( x );\n\t\t\tif ( ax < min ) {\n\t\t\t\tmin = ax;\n\t\t\t}\n\t\t\tif ( ax > max ) {\n\t\t\t\tmax = ax;\n\t\t\t}\n\t\t}\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrminmaxabs;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute minimum and maximum absolute values incrementally.\n*\n* @module @stdlib/stats/incr/minmaxabs\n*\n* @example\n* var incrminmaxabs = require( '@stdlib/stats/incr/minmaxabs' );\n*\n* var accumulator = incrminmaxabs();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 2.0, 5.0 ]\n*/\n\n// MODULES //\nvar incrminmaxabs = __var_0__;\n\n\n// EXPORTS //\nexport default incrminmaxabs;\n"]}