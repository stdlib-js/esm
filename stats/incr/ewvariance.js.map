{"version":3,"sources":["@stdlib/stats/incr/ewvariance/lib/main.js","@stdlib/stats/incr/ewvariance/lib/index.js"],"names":["isNonNegativeNumber","__var_0__","isPrimitive","increwvariance","alpha","incr","s2","r","m","c","TypeError","RangeError","x","arguments","length"],"mappings":"uDAsBA,IAAIA,EAAsBC,EAAUC,YA4BpC,SAASC,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMT,EAAqBI,GAC1B,MAAM,IAAIM,UAAW,gEAAkEN,EAAQ,MAEhG,GAAKA,EAAQ,GAAOA,EAAQ,EAC3B,MAAM,IAAIO,WAAY,sFAAwFP,EAAQ,MAGvH,OADAK,EAAI,EAAML,EAUV,SAAsBQ,GACrB,GAA0B,IAArBC,UAAUC,OACd,YAAgB,IAAPR,EAAkB,KAAOA,OAEvB,IAAPA,GACJE,EAAII,EACJN,EAAK,IAILE,GADAH,EAAOD,GADPG,EAAIK,EAAIJ,GAGRF,EAAKG,GAAMH,EAAIC,EAAEF,IAElB,OAAOC,GCxCN,IAACH,EAAiBF","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-number';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeNumber = __var_0__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted variance.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwvariance( 0.5 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0 );\n* // returns 12.25\n*\n* v = accumulator();\n* // returns 12.25\n*/\nfunction increwvariance( alpha ) {\n\tvar incr;\n\tvar s2;\n\tvar r;\n\tvar m;\n\tvar c;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative number. Value: `' + alpha + '`.' );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `' + alpha + '`.' );\n\t}\n\tc = 1.0 - alpha;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated variance. If not provided a value, the accumulator function returns the current variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} variance or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( s2 === void 0 ) ? null : s2;\n\t\t}\n\t\tif ( s2 === void 0 ) {\n\t\t\tm = x;\n\t\t\ts2 = 0.0;\n\t\t} else {\n\t\t\tr = x - m;\n\t\t\tincr = alpha * r;\n\t\t\tm += incr;\n\t\t\ts2 = c * ( s2+(r*incr) );\n\t\t}\n\t\treturn s2;\n\t}\n}\n\n\n// EXPORTS //\nexport default increwvariance;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted variance incrementally.\n*\n* @module @stdlib/stats/incr/ewvariance\n*\n* @example\n* var increwvariance = require( '@stdlib/stats/incr/ewvariance' );\n*\n* var accumulator = increwvariance();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0 );\n* // returns 12.25\n*\n* v = accumulator();\n* // returns 12.25\n*/\n\n// MODULES //\nvar increwvariance = __var_0__;\n\n\n// EXPORTS //\nexport default increwvariance;\n"]}