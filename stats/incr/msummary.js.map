{"version":3,"sources":["@stdlib/stats/incr/msummary/lib/main.js","@stdlib/stats/incr/msummary/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","incrmsum","__var_1__","incrmmean","__var_2__","incrmvariance","__var_3__","incrmstdev","__var_4__","incrmmin","__var_5__","incrmmax","__var_6__","incrmrange","__var_7__","incrmmidrange","__var_8__","incrmsummary","W","mvariance","mmidrange","summary","mrange","mstdev","mmean","msum","mmax","mmin","TypeError","x","arguments","length","window","sum","mean","variance","stdev","min","max","range","midrange"],"mappings":"4QA8BA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAWC,EACXC,EAAYC,EACZC,EAAgBC,EAChBC,EAAaC,EACbC,EAAWC,EACXC,EAAWC,EACXC,EAAaC,EACbC,EAAgBC,EA2BpB,SAASC,EAAcC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAM7B,EAAmBoB,GACxB,MAAM,IAAIU,UAAW,8DAAgEV,EAAI,MAY1F,OAVAC,EAAYd,EAAea,GAC3BE,EAAYL,EAAeG,GAC3BI,EAAST,EAAYK,GACrBK,EAAShB,EAAYW,GACrBM,EAAQrB,EAAWe,GACnBO,EAAOxB,EAAUiB,GACjBS,EAAOlB,EAAUS,GACjBQ,EAAOf,EAAUO,GACjBG,EAAU,GAWV,SAAsBQ,GACrB,GAA0B,IAArBC,UAAUC,OACd,OAAOV,EAWR,OATAA,EAAQW,OAASd,EACjBG,EAAQY,IAAMR,EAAMI,GACpBR,EAAQa,KAAOV,EAAOK,GACtBR,EAAQc,SAAWhB,EAAWU,GAC9BR,EAAQe,MAAQb,EAAQM,GACxBR,EAAQgB,IAAMV,EAAME,GACpBR,EAAQiB,IAAMZ,EAAMG,GACpBR,EAAQkB,MAAQjB,EAAQO,GACxBR,EAAQmB,SAAWpB,EAAWS,GACvBR,GCjEN,IAACJ,EAAelB","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/stats/incr/msum';\nimport __var_2__ from '@stdlib/stats/incr/mmean';\nimport __var_3__ from '@stdlib/stats/incr/mvariance';\nimport __var_4__ from '@stdlib/stats/incr/mstdev';\nimport __var_5__ from '@stdlib/stats/incr/mmin';\nimport __var_6__ from '@stdlib/stats/incr/mmax';\nimport __var_7__ from '@stdlib/stats/incr/mrange';\nimport __var_8__ from '@stdlib/stats/incr/mmidrange';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar incrmsum = __var_1__;\nvar incrmmean = __var_2__;\nvar incrmvariance = __var_3__;\nvar incrmstdev = __var_4__;\nvar incrmmin = __var_5__;\nvar incrmmax = __var_6__;\nvar incrmrange = __var_7__;\nvar incrmmidrange = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving statistical summary.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrmsummary( W ) {\n\tvar mvariance;\n\tvar mmidrange;\n\tvar summary;\n\tvar mrange;\n\tvar mstdev;\n\tvar mmean;\n\tvar msum;\n\tvar mmax;\n\tvar mmin;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmvariance = incrmvariance( W );\n\tmmidrange = incrmmidrange( W );\n\tmrange = incrmrange( W );\n\tmstdev = incrmstdev( W );\n\tmmean = incrmmean( W );\n\tmsum = incrmsum( W );\n\tmmin = incrmmin( W );\n\tmmax = incrmmax( W );\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.window = W;\n\t\tsummary.sum = msum( x );\n\t\tsummary.mean = mmean( x );\n\t\tsummary.variance = mvariance( x );\n\t\tsummary.stdev = mstdev( x );\n\t\tsummary.min = mmin( x );\n\t\tsummary.max = mmax( x );\n\t\tsummary.range = mrange( x );\n\t\tsummary.midrange = mmidrange( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmsummary;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving statistical summary incrementally.\n*\n* @module @stdlib/stats/incr/msummary\n*\n* @example\n* var incrmsummary = require( '@stdlib/stats/incr/msummary' );\n*\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\n\n// MODULES //\nvar incrmsummary = __var_0__;\n\n\n// EXPORTS //\nexport default incrmsummary;\n"]}