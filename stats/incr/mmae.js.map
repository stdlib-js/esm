{"version":3,"sources":["@stdlib/stats/incr/mmae/lib/main.js","@stdlib/stats/incr/mmae/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","abs","__var_1__","incrmmean","__var_2__","incrmmae","W","mean","TypeError","x","y","arguments","length"],"mappings":"+HAwBA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAMC,EACNC,EAAYC,EAiChB,SAASC,EAAUC,GAClB,IAAIC,EACJ,IAAMT,EAAmBQ,GACxB,MAAM,IAAIE,UAAW,8DAAgEF,EAAI,MAG1F,OADAC,EAAOJ,EAAWG,GAWlB,SAAsBG,EAAGC,GACxB,GAA0B,IAArBC,UAAUC,OACd,OAAOL,IAER,OAAOA,EAAMN,EAAKS,EAAED,KC5BnB,IAACJ,EAAWN","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/special/abs';\nimport __var_2__ from '@stdlib/stats/incr/mmean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar abs = __var_1__;\nvar incrmmean = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean absolute error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmae( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmae( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute error. If not provided input values, the accumulator function returns the current mean absolute error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean absolute error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( y-x ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default incrmmae;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean absolute error incrementally.\n*\n* @module @stdlib/stats/incr/mmae\n*\n* @example\n* var incrmmae = require( '@stdlib/stats/incr/mmae' );\n*\n* var accumulator = incrmmae( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\nvar incrmmae = __var_0__;\n\n\n// EXPORTS //\nexport default incrmmae;\n"]}