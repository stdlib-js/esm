{"version":3,"sources":["@stdlib/stats/incr/nancount/lib/main.js","@stdlib/stats/incr/nancount/lib/index.js"],"names":["isnan","__var_0__","incrnancount","count","x","arguments","length"],"mappings":"kDAsBA,IAAIA,EAAQC,EAyBZ,SAASC,IACR,IAAIC,EAAQ,EACZ,OASA,SAAsBC,GACrB,GAA0B,IAArBC,UAAUC,OACd,OAAOH,GAEY,IAAfH,EAAOI,KACXD,GAAS,GAEV,OAAOA,GCpBN,IAACD,EAAeD","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally updates a count, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnancount();\n*\n* var count = accumulator();\n* // returns 0\n*\n* count = accumulator( 2.0 );\n* // returns 1\n*\n* count = accumulator( -5.0 );\n* // returns 2\n*\n* count = accumulator();\n* // returns 2\n*/\nfunction incrnancount() {\n\tvar count = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated count. If not provided a value, the accumulator function returns the current count.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} count\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn count;\n\t\t}\n\t\tif ( isnan( x ) === false ) {\n\t\t\tcount += 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n\n\n// EXPORTS //\nexport default incrnancount;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a count incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nancount\n*\n* @example\n* var incrnancount = require( '@stdlib/stats/incr/nancount' );\n*\n* var accumulator = incrnancount();\n*\n* var nancount = accumulator();\n* // returns 0\n*\n* nancount = accumulator( 2.0 );\n* // returns 1\n*\n* nancount = accumulator( -5.0 );\n* // returns 2\n*\n* nancount = accumulator();\n* // returns 2\n*/\n\n// MODULES //\nvar incrnancount = __var_0__;\n\n\n// EXPORTS //\nexport default incrnancount;\n"]}