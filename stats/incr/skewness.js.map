{"version":3,"sources":["@stdlib/stats/incr/skewness/lib/main.js","@stdlib/stats/incr/skewness/lib/index.js"],"names":["isnan","__var_0__","sqrt","__var_1__","pow","__var_2__","incrskewness","deltaN","delta","term1","mean","tmp","g1","M2","M3","N","x","arguments","length","NaN"],"mappings":"mJAwBA,IAAIA,EAAQC,EACRC,EAAOC,EACPC,EAAMC,EAuCV,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,OARAR,EAAS,EACTC,EAAQ,EACRC,EAAQ,EACRC,EAAO,EACPG,EAAK,EACLC,EAAK,EACLC,EAAI,EAWJ,SAAsBC,GACrB,GAA0B,IAArBC,UAAUC,OACd,OAAKH,EAAI,EACCf,EAAOc,GAASK,IAAM,MAGhCP,EAAKV,EAAMa,GAAID,EAAKV,EAAKS,EAAI,KAGtBX,EAAMa,GAAGA,EAAE,IAAKH,GAAMG,EAAE,IAahC,GANAJ,GAFAF,GAFAD,EAAQQ,EAAIN,IACZH,EAASC,GAFTO,GAAK,KAGqBA,EAAE,IAEdR,GAAUQ,EAAE,GAE1BD,GADAH,GAAO,EAAMJ,EAASM,EAGtBA,GAAMJ,EACNC,GAAQH,EACHQ,EAAI,EACR,OAASf,EAAOc,GAASK,IAAM,KAMhC,OAHAP,EAAKV,EAAMa,GAAID,EAAKV,EAAKS,EAAI,KAGtBX,EAAMa,GAAGA,EAAE,IAAKH,GAAMG,EAAE,IC1E9B,IAACT,EAAeL","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar sqrt = __var_1__;\nvar pow = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample skewness.\n*\n* ## Method\n*\n* The algorithm computes the corrected sample skewness using the formula for `G_1` in [Joanes and Gill 1998][@joanes:1998].\n*\n* ## References\n*\n* -   Joanes, D. N., and C. A. Gill. 1998. \"Comparing measures of sample skewness and kurtosis.\" _Journal of the Royal Statistical Society: Series D (The Statistician)_ 47 (1). Blackwell Publishers Ltd: 183â€“89. doi:[10.1111/1467-9884.00122][@joanes:1998].\n*\n* [@joanes:1998]: http://dx.doi.org/10.1111/1467-9884.00122\n*\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrskewness();\n*\n* var skewness = accumulator();\n* // returns null\n*\n* skewness = accumulator( 2.0 );\n* // returns null\n*\n* skewness = accumulator( -5.0 );\n* // returns null\n*\n* skewness = accumulator( -10.0 );\n* // returns ~0.492\n*\n* skewness = accumulator();\n* // returns ~0.492\n*/\nfunction incrskewness() {\n\tvar deltaN;\n\tvar delta;\n\tvar term1;\n\tvar mean;\n\tvar tmp;\n\tvar g1;\n\tvar M2;\n\tvar M3;\n\tvar N;\n\n\tdeltaN = 0.0;\n\tdelta = 0.0;\n\tterm1 = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tM3 = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample skewness. If not provided a value, the accumulator function returns the current corrected sample skewness.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample skewness or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < 3 ) {\n\t\t\t\treturn ( isnan( M3 ) ) ? NaN : null;\n\t\t\t}\n\t\t\t// Calculate the population skewness:\n\t\t\tg1 = sqrt( N )*M3 / pow( M2, 1.5 );\n\n\t\t\t// Return the corrected sample skewness:\n\t\t\treturn sqrt( N*(N-1) )*g1 / (N-2);\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mean;\n\t\tdeltaN = delta / N;\n\t\tterm1 = delta * deltaN * (N-1);\n\n\t\ttmp = term1 * deltaN * (N-2);\n\t\ttmp -= 3.0 * deltaN * M2;\n\t\tM3 += tmp;\n\n\t\tM2 += term1;\n\t\tmean += deltaN;\n\t\tif ( N < 3 ) {\n\t\t\treturn ( isnan( M3 ) ) ? NaN : null;\n\t\t}\n\t\t// Calculate the population skewness:\n\t\tg1 = sqrt( N )*M3 / pow( M2, 1.5 );\n\n\t\t// Return the corrected sample skewness:\n\t\treturn sqrt( N*(N-1) )*g1 / (N-2);\n\t}\n}\n\n\n// EXPORTS //\nexport default incrskewness;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a corrected sample skewness incrementally.\n*\n* @module @stdlib/stats/incr/skewness\n*\n* @example\n* var incrskewness = require( '@stdlib/stats/incr/skewness' );\n*\n* var accumulator = incrskewness();\n*\n* var skewness = accumulator();\n* // returns null\n*\n* skewness = accumulator( 2.0 );\n* // returns null\n*\n* skewness = accumulator( -5.0 );\n* // returns null\n*\n* skewness = accumulator( -10.0 );\n* // returns ~0.492\n*\n* skewness = accumulator();\n* // returns ~0.492\n*/\n\n// MODULES //\nvar incrskewness = __var_0__;\n\n\n// EXPORTS //\nexport default incrskewness;\n"]}