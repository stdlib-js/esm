{"version":3,"sources":["@stdlib/stats/kde2d/lib/stdev.js","@stdlib/stats/kde2d/lib/iqr.js","@stdlib/stats/kde2d/lib/pick_bandwidth.js","@stdlib/stats/kde2d/lib/gaussian.js","@stdlib/stats/kde2d/lib/epanechnikov.js","@stdlib/stats/kde2d/lib/cosine.js","@stdlib/stats/kde2d/lib/quartic.js","@stdlib/stats/kde2d/lib/triangular.js","@stdlib/stats/kde2d/lib/tricube.js","@stdlib/stats/kde2d/lib/triweight.js","@stdlib/stats/kde2d/lib/uniform.js","@stdlib/stats/kde2d/lib/kernels.js","@stdlib/stats/kde2d/lib/get_kernel.js","@stdlib/stats/kde2d/lib/validate.js","@stdlib/stats/kde2d/lib/ndarray_like.js","@stdlib/stats/kde2d/lib/min.js","@stdlib/stats/kde2d/lib/max.js","@stdlib/stats/kde2d/lib/kde2d.js","@stdlib/stats/kde2d/lib/index.js"],"names":["sqrt","__var_0__","stdev","arr","j","delta","mean","M2","i","x","shape","get","floor","ascending","a","b","quantile","p","id","h","len","length","iqr","data","Array","sort","pow","min","__var_1__","EPSILON","__var_2__","__var_3__","__var_4__","pickBandwidth","minElement","sigmaHat","iqrVal","out","isnan","SQRT_TWO_PI","exp","INV_SQRT_TWO_PI","gaussian","u","NaN","abs","epanechnikov","FOURTH_PI","HALF_PI","cos","cosine","quartic","triangular","absU","LEADING_TERM","tricube","triweight","uniform","kernels","__var_5__","__var_6__","__var_7__","getKernel","name","kernel","Error","isString","hasOwnProp","isObject","isPositiveInteger","isPositiveNumberArray","isFunction","isError","isNumber","isPrimitive","__var_8__","__var_9__","validate","opts","options","TypeError","n","xMax","xMin","yMax","yMin","isNumericArray","ndarrayLike","y","minObs","max","ndarray","linspace","setReadOnly","isMatrixLike","__var_10__","kde2d","kernelFunction","maxArgs","zScoreY","gridX","gridY","xVal","err","ans","gx","gy","hX","hY","ix","iy","z","arguments","RangeError","set"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the unbiased standard deviation.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column for which to calculate the standard deviation\n* @returns {number} standard deviation\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = stdev( arr, 1 );\n* // returns ~2.568\n*/\nfunction stdev( arr, j ) {\n\tvar delta;\n\tvar mean;\n\tvar M2;\n\tvar i;\n\tvar x;\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\n\tfor ( i = 0; i < arr.shape[0]; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tdelta = x - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn sqrt( M2 / ( i - 1 ) );\n}\n\n\n// EXPORTS //\nexport default stdev;\n","import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Computes a quantile of the values in a numeric array.\n*\n* @private\n* @param {NumericArray} arr - sorted 1d array\n* @param {Probability} p - quantile prob [0,1]\n* @returns {number} quantile\n*/\nfunction quantile( arr, p ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar h;\n\th = ( ( len - 1.0 ) * p ) + 1.0;\n\tid = floor( h ) - 1.0;\n\treturn arr[ id ] + ( ( h - floor( h ) ) * ( arr[ id + 1 ] - arr[ id ] ) );\n}\n\n\n// MAIN //\n\n/**\n* Computes the inter-quartile range for a numeric array.\n*\n* @private\n* @param {NumericArray} data - ndarray like data\n* @param {number} j - column index for which to get the IQR\n* @returns {number} inter-quartile range\n*/\nfunction iqr( data, j ) {\n\t// Copy and sort data --> build X\n\tvar arr;\n\tvar i;\n\tarr = new Array( data.shape[0] );\n\tfor ( i = 0; i < data.shape[0]; i++ ) {\n\t\tarr[ i ] = data.get( i, j );\n\t}\n\tarr.sort( ascending );\n\treturn quantile( arr, 0.75 ) - quantile( arr, 0.25 );\n}\n\n\n// EXPORTS //\nexport default iqr;\n","import __var_0__ from '@stdlib/math/base/special/pow';\nimport __var_1__ from '@stdlib/math/base/special/min';\nimport __var_2__ from '@stdlib/constants/math/float64-eps';\nimport __var_3__ from './stdev.js';\nimport __var_4__ from './iqr.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar pow = __var_0__;\nvar min = __var_1__;\nvar EPSILON = __var_2__;\nvar stdev = __var_3__;\nvar iqr = __var_4__;\n\n\n// MAIN //\n\n/**\n* Computes the rule-of-thumb bandwidth for the values in a column of `x`.\n*\n* @private\n* @param {ndarrayLike} arr - input ndarray\n* @param {number} j - index of the column from which to obtain the values\n* @returns {NumericArray} array with bandwidth values\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = pickBandwidth( arr, 1 );\n* // returns ~1.717\n*/\nfunction pickBandwidth( arr, j ) {\n\tvar minElement;\n\tvar sigmaHat;\n\tvar powTerm;\n\tvar iqrVal;\n\tvar out;\n\n\tiqrVal = iqr( arr, j ) / 1.34;\n\tsigmaHat = stdev( arr, j );\n\tminElement = min( iqrVal, sigmaHat );\n\tpowTerm = pow( arr.shape[ 0 ], -1/5 );\n\tout = 1.06 * powTerm * minElement;\n\tif ( out === 0 ) {\n\t\tout = EPSILON;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default pickBandwidth;\n","import __var_0__ from '@stdlib/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/pow';\nimport __var_2__ from '@stdlib/constants/math/float64-sqrt-two-pi';\nimport __var_3__ from '@stdlib/math/base/special/exp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar pow = __var_1__;\nvar SQRT_TWO_PI = __var_2__;\nvar exp = __var_3__;\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO_PI = 1.0 / SQRT_TWO_PI;\n\n\n// MAIN //\n\n/**\n* Computes the Gaussian kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} the value for the Gaussian kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = gaussian( u );\n* // returns ~0.0\n*/\nfunction gaussian( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\treturn INV_SQRT_TWO_PI * exp( -0.5 * pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\nexport default gaussian;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\nvar pow = __var_2__;\n\n\n// MAIN //\n\n/**\n* Computes the Epanechnikov kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Epanechnikov kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = epanechnikov( u );\n* // returns 0.0\n*/\nfunction epanechnikov(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.75 * ( 1.0 - pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\nexport default epanechnikov;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\nimport __var_2__ from '@stdlib/constants/math/float64-fourth-pi';\nimport __var_3__ from '@stdlib/constants/math/float64-half-pi';\nimport __var_4__ from '@stdlib/math/base/special/cos';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\nvar FOURTH_PI = __var_2__;\nvar HALF_PI = __var_3__;\nvar cos = __var_4__;\n\n\n// MAIN //\n\n/**\n* Computes the cosine kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the cosine kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* var out = cosine( u );\n* // returns 0\n*/\nfunction cosine(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn FOURTH_PI * cos( HALF_PI * u );\n}\n\n\n// EXPORTS //\nexport default cosine;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\nvar pow = __var_2__;\n\n\n// MAIN //\n\n/**\n* Computes the quartic kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 5;\n* var out = quartic(u);\n* // returns 0\n*/\nfunction quartic( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( 15.0 / 16.0 ) * pow( 1.0 - pow( u, 2.0 ), 2.0 );\n}\n\n\n// EXPORTS //\nexport default quartic;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the triangular kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = triangular( u );\n* // returns 0.8\n*/\nfunction triangular( u ) {\n\tvar absU;\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - absU;\n}\n\n\n// EXPORTS //\nexport default triangular;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\nvar pow = __var_2__;\n\n\n// VARIABLES //\n\nvar LEADING_TERM = ( 70.0 / 81.0 );\n\n\n// MAIN //\n\n/**\n* Computes the tricube kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the tricube kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = tricube(u);\n* // returns 0\n*/\nfunction tricube(u) {\n\tvar absU;\n\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn LEADING_TERM * pow( 1.0 - pow( absU, 3.0 ), 3.0 );\n}\n\n\n// EXPORTS //\nexport default tricube;\n","import __var_0__ from '@stdlib/math/base/special/abs';\nimport __var_1__ from '@stdlib/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar abs = __var_0__;\nvar isnan = __var_1__;\nvar pow = __var_2__;\n\n\n// MAIN //\n\n/**\n* Computes the Triweight kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Triweight kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = triweight(u); // returns 0\n*/\nfunction triweight(u) {\n\tvar absU;\n\n\tif (isnan(u)) {\n\t\treturn NaN;\n\t}\n\n\tabsU = abs(u);\n\tif (absU > 1) {\n\t\treturn 0;\n\t}\n\treturn (35 / 32) * pow(1.0 - pow(u, 2.0), 3.0);\n}\n\n\n// EXPORTS //\nexport default triweight;\n","import __var_0__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the uniform kernel.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = uniform( u );\n* // returns 0.5\n*/\nfunction uniform(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( u < 0.0 || u > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.5;\n}\n\n\n// EXPORTS //\nexport default uniform;\n","import __var_0__ from './gaussian.js';\nimport __var_1__ from './epanechnikov.js';\nimport __var_2__ from './cosine.js';\nimport __var_3__ from './quartic.js';\nimport __var_4__ from './triangular.js';\nimport __var_5__ from './tricube.js';\nimport __var_6__ from './triweight.js';\nimport __var_7__ from './uniform.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar kernels = {};\n\n// Make a stdlib/stats/base/kernels package\nkernels[ 'gaussian' ] = __var_0__;\nkernels[ 'epanechnikov' ] = __var_1__;\nkernels[ 'cosine' ] = __var_2__;\nkernels[ 'quartic' ] = __var_3__;\nkernels[ 'triangular' ] = __var_4__;\nkernels[ 'tricube' ] = __var_5__;\nkernels[ 'triweight' ] = __var_6__;\nkernels[ 'uniform' ] = __var_7__;\n\n\n// EXPORTS //\nexport default kernels;\n","import __var_0__ from './kernels.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar kernels = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns the specified kernel function.\n*\n* @private\n* @param {string} name - kernel name\n* @returns {(Function|Error)} kernel function or corresponding error\n*/\nfunction getKernel( name ) {\n\tvar kernel = kernels[ name ];\n\tif ( kernel === void 0 ) {\n\t\treturn new Error( 'invalid argument. Unsupported/unrecognized kernel. Value: `' + name + '`.' );\n\t}\n\treturn kernel;\n}\n\n\n// EXPORTS //\nexport default getKernel;\n","import __var_0__ from '@stdlib/assert/is-string';\nimport __var_1__ from '@stdlib/assert/has-own-property';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-positive-integer';\nimport __var_4__ from '@stdlib/assert/is-positive-number-array';\nimport __var_5__ from '@stdlib/assert/is-function';\nimport __var_6__ from '@stdlib/assert/is-error';\nimport __var_7__ from '@stdlib/assert/is-number';\nimport __var_8__ from '@stdlib/assert/is-nan';\nimport __var_9__ from './get_kernel.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isString = __var_0__;\nvar hasOwnProp = __var_1__;\nvar isObject = __var_2__;\nvar isPositiveInteger = __var_3__;\nvar isPositiveNumberArray = __var_4__;\nvar isFunction = __var_5__;\nvar isError = __var_6__;\nvar isNumber = __var_7__.isPrimitive;\nvar isnan = __var_8__;\nvar getKernel = __var_9__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.n] - number of splits in the generated grid\n* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.xMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'xMin': 3.14,\n*     'kernel': 'gaussian'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'h' ) ) {\n\t\topts.h = options.h;\n\t\tif ( !isPositiveNumberArray( opts.h) ) {\n\t\t\treturn new TypeError( 'invalid option. `h` must be an array of positive values. Option: `' + opts.n + '`.');\n\t\t}\n\t\tif ( opts.h.length !== 2 ) {\n\t\t\treturn new TypeError( 'invalid option. `h` must be an array of length two. Option: `' + opts.n + '`.');\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'n' ) ) {\n\t\topts.n = options.n;\n\t\tif ( !isPositiveInteger( opts.n ) ) {\n\t\t\treturn new TypeError( 'invalid option. `n` option must be a positive integer. Option: `' + opts.n + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMax' ) ) {\n\t\topts.xMax = options.xMax;\n\t\tif ( !isNumber( opts.xMax ) || isnan( opts.xMax ) ) {\n\t\t\treturn new TypeError( 'invalid option. `xMax` must be a number. Option: `' + opts.xMax + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMin' ) ) {\n\t\topts.xMin = options.xMin;\n\t\tif ( !isNumber( opts.xMin ) || isnan( opts.xMin ) ) {\n\t\t\treturn new TypeError( 'invalid option. `xMin` must be a number. Option: `' + opts.xMin + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMax' ) ) {\n\t\topts.yMax = options.yMax;\n\t\tif ( !isNumber( opts.yMax ) || isnan( opts.yMax ) ) {\n\t\t\treturn new TypeError( 'invalid option. `yMax` must be a number. Option: `' + opts.yMax + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMin' ) ) {\n\t\topts.yMin = options.yMin;\n\t\tif ( !isNumber( opts.yMin ) || isnan( opts.yMin ) ) {\n\t\t\treturn new TypeError( 'invalid option. `yMin` must be a number. Option: `' + opts.yMin + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kernel' ) ) {\n\t\topts.kernel = options.kernel;\n\t\tif ( isString( opts.kernel ) ) {\n\t\t\topts.kernel = getKernel( opts.kernel );\n\t\t\tif ( isError( opts.kernel ) ) {\n\t\t\t\treturn opts.kernel;\n\t\t\t}\n\t\t} else if ( !isFunction( opts.kernel ) ) {\n\t\t\treturn new TypeError( 'Kernel is not a function from getKernel' );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-numeric-array';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumericArray = __var_0__;\n\n\n// MAIN //\n\n/**\n* Converts two arrays .\n*\n* @private\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {Error} first and second arguments must be of the same length\n* @returns {Object} object that mirrors an `ndarray`\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = ndarrayLike( x, y );\n*/\nfunction ndarrayLike( x, y ) {\n\tif ( !isNumericArray(x) ) {\n\t\tthrow new TypeError( 'First argument must be a numeric array' );\n\t}\n\n\tif ( !isNumericArray(y) ) {\n\t\tthrow new TypeError( 'Second argument must be a numeric array' );\n\t}\n\n\tif ( x.length !== y.length ) {\n\t\tthrow new Error( 'First and second argument must be of same length' );\n\t}\n\n\treturn {\n\t\t'get': get,\n\t\t'shape': [ x.length, 2 ]\n\t};\n\n\t/**\n\t* Gets an element of an nd-array-like object .\n\t*\n\t* @private\n\t* @param {number} i - row index\n\t* @param {number} j - column index\n\t* @returns {number} number stored in row i and column j\n\t*/\n\tfunction get( i, j ) {\n\t\tif ( j === 0 ) {\n\t\t\treturn x[ i ];\n\t\t}\n\t\treturn y[ i ];\n\t}\n}\n\n\n// EXPORTS //\nexport default ndarrayLike;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the range\n* @param {number} len - number of rows in arr\n* @returns {number} minimum value\n*/\nfunction min( arr, j, len ) {\n\tvar minObs;\n\tvar x;\n\tvar i;\n\n\tminObs = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x < minObs ) {\n\t\t\tminObs = x;\n\t\t}\n\t}\n\treturn minObs;\n}\n\n\n// EXPORTS //\nexport default min;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the maximum\n* @param {number} len - number of rows in arr\n* @returns {number} maximum value\n*/\nfunction max( arr, j, len ) {\n\tvar max;\n\tvar x;\n\tvar i;\n\n\tmax = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\nexport default max;\n","import __var_0__ from '@stdlib/ndarray/array';\nimport __var_1__ from '@stdlib/math/utils/linspace';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/assert/is-numeric-array';\nimport __var_4__ from '@stdlib/assert/is-matrix-like';\nimport __var_5__ from './pick_bandwidth.js';\nimport __var_6__ from './validate.js';\nimport __var_7__ from './ndarray_like.js';\nimport __var_8__ from './min.js';\nimport __var_9__ from './max.js';\nimport __var_10__ from './gaussian.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ndarray = __var_0__;\nvar linspace = __var_1__;\nvar setReadOnly = __var_2__;\nvar isNumericArray = __var_3__;\nvar isMatrixLike = __var_4__;\nvar pickBandwidth = __var_5__;\nvar validate = __var_6__;\nvar ndarrayLike = __var_7__;\nvar min = __var_8__;\nvar max = __var_9__;\nvar gaussian = __var_10__;\n\n\n// MAIN //\n\n/**\n* Computes two-dimensional kernel density estimates.\n*\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @param {Options} [options] - function options\n* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y\n* @param {number} [options.n=25] - number of partitions on the x- and y-axes\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.yMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function\n* @throws {TypeError} first argument must be an array or matrix-like\n* @throws {TypeError} second argument must be an array\n* @throws {Error} first and second arguments must be of the same length\n* @throws {RangeError} `xMin` must be smaller than `xMax`\n* @throws {RangeError} `yMin` must be smaller than `yMax`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = kde2d( x, y );\n*/\nfunction kde2d() {\n\tvar kernelFunction;\n\tvar maxArgs;\n\tvar zScoreX;\n\tvar zScoreY;\n\tvar gridX;\n\tvar gridY;\n\tvar xMin;\n\tvar xMax;\n\tvar yMin;\n\tvar yMax;\n\tvar xVal; // For gridspace loop\n\tvar yVal; // For gridspace loop\n\tvar subX;\n\tvar subY;\n\tvar opts;\n\tvar arr;\n\tvar err;\n\tvar ans;\n\tvar out;\n\tvar gx;\n\tvar gy;\n\tvar hX;\n\tvar hY;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\topts = {};\n\n\tif ( isMatrixLike( arguments[0] ) ) {\n\t\t// Case of ndarray, opts\n\t\tarr = arguments[ 0 ];\n\t\tmaxArgs = 1;\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\ty = arguments[ 1 ];\n\t\tif ( !isNumericArray( x ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t\t}\n\t\tif ( !isNumericArray( y ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t\t}\n\t\tif ( x.length !== y.length ) {\n\t\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must be arrays of the same length' );\n\t\t}\n\t\tarr = ndarrayLike( x, y );\n\t\tmaxArgs = 2;\n\t}\n\n\tif ( arguments.length > maxArgs ) {\n\t\terr = validate( opts, arguments[ maxArgs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif ( opts.h ) {\n\t\thX = opts.h[0];\n\t\thY = opts.h[1];\n\t} else {\n\t\thX = pickBandwidth(arr, 0);\n\t\thY = pickBandwidth(arr, 1);\n\t}\n\n\tn = opts.n || 25;\n\txMin = opts.xMin || min( arr, 0, arr.shape[0] );\n\txMax = opts.xMax || max( arr, 0, arr.shape[0] );\n\tyMin = opts.yMin || min( arr, 1, arr.shape[0] );\n\tyMax = opts.yMax || max( arr, 1, arr.shape[0] );\n\n\tif ( xMin >= xMax ) {\n\t\tthrow new RangeError( '`x` min must be strictly less than max' );\n\t}\n\tif ( yMin >= yMax ) {\n\t\tthrow new RangeError( '`y` min must be strictly less than max' );\n\t}\n\n\tkernelFunction = opts.kernel || gaussian;\n\n\t// Create the `ndarray` to hold the density values:\n\tz = ndarray({\n\t\t'shape': [n, n]\n\t} );\n\n\t// Make the grid:\n\tgridX = linspace(xMin, xMax, n);\n\tgridY = linspace(yMin, yMax, n);\n\n\t// Loop through x and y indices:\n\tfor ( ix = 0; ix < gridX.length; ix++ ) {\n\t\tgx = gridX[ ix ];\n\t\tfor ( iy = 0; iy < gridY.length; iy++ ) {\n\t\t\tgy = gridY[ iy ];\n\t\t\tans = 0.0;\n\t\t\tfor ( i = 0; i < arr.shape[ 0 ]; i++ ) {\n\t\t\t\txVal = arr.get( i, 0 );\n\t\t\t\tyVal = arr.get( i, 1 );\n\n\t\t\t\tzScoreX = ( (xVal - gx) / hX );\n\t\t\t\tzScoreY = ( (yVal - gy) / hY );\n\n\t\t\t\tsubX = ( 1.0 / hX ) * kernelFunction( zScoreX );\n\t\t\t\tsubY = ( 1.0 / hY ) * kernelFunction( zScoreY );\n\t\t\t\tans += ( subX * subY );\n\t\t\t}\n\t\t\tz.set( ix, iy, ans / arr.shape[0] );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'x', gridX );\n\tsetReadOnly( out, 'y', gridY );\n\tsetReadOnly( out, 'z', z );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default kde2d;\n","import __var_0__ from './kde2d.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Two-dimensional kernel density estimation.\n*\n* @module @stdlib/stats/kde2d\n*\n* @example\n* var kde2d = require( '@stdlib/stats/kde2d' );\n* var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];\n* var y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];\n*\n* var out = kde2d( x, y );\n* // returns { 'x': [1, 1.91, ... ], 'y': [0.05, 0.08125, ...], 'z': ndarray {Float64Array[ 0.031, ...] }\n*/\n\n// MODULES //\nvar kde2d = __var_0__;\n\n\n// EXPORTS //\nexport default kde2d;\n"]}