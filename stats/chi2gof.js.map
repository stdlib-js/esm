{"version":3,"sources":["@stdlib/stats/chi2gof/lib/defaults.js","@stdlib/stats/chi2gof/lib/validate.js","@stdlib/stats/chi2gof/lib/pmf.js","@stdlib/stats/chi2gof/lib/get_pmf.js","@stdlib/stats/chi2gof/lib/statistic.js","@stdlib/stats/chi2gof/lib/tabulate.js","@stdlib/stats/chi2gof/lib/simulate.js","@stdlib/stats/chi2gof/lib/results.js","@stdlib/stats/chi2gof/lib/main.js","@stdlib/stats/chi2gof/lib/index.js"],"names":["DEFAULTS","__var_0__","defaults","alpha","ddof","simulate","iterations","isNonNegativeInteger","isPrimitive","isPositiveInteger","__var_1__","isBoolean","__var_2__","isNumber","__var_3__","isObject","__var_4__","isnan","__var_5__","hasOwnProp","__var_6__","validate","opts","options","TypeError","RangeError","bernoulli","binomial","discreteUniform","geometric","hypergeometric","negativeBinomial","poisson","PMF","discrete-uniform","negative-binomial","getPMF","name","Error","PINF","testStatistic","N","x","strideX","y","strideY","stat","v1","v2","d","i","tabulate","incrspace","sample","Float64Array","dfill","expected","p","nobs","niter","pool","freq","cnt","v","size","probs","roundn","setReadOnly","setReadOnlyAccessor","Results","pValue","statistic","df","this","_pValue","_alpha","_statistic","_df","prototype","decision","dgts","out","arguments","length","digits","method","push","join","rejected","isArrayLikeObject","isndarrayLike","isString","absdiff","FLOAT64_SQRT_EPS","__var_7__","chisqCDF","__var_8__","__var_9__","daxpy","__var_10__","dscal","__var_11__","dsumpw","__var_12__","__var_13__","__var_14__","__var_15__","__var_16__","__var_17__","__var_18__","__var_19__","chi2gof","nargs","args","pval","obs","err","pmf","sum","s","o","n","ndims","strides","data","offset","apply"],"mappings":"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","sourcesContent":["import __var_0__ from './defaults.json';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar DEFAULTS = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': DEFAULTS.alpha,\n\t\t'ddof': DEFAULTS.ddof,\n\t\t'simulate': DEFAULTS.simulate,\n\t\t'iterations': DEFAULTS.iterations\n\t};\n}\n\n\n// EXPORTS //\nexport default defaults;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-positive-integer';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/assert/is-plain-object';\nimport __var_5__ from '@stdlib/assert/is-nan';\nimport __var_6__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isPositiveInteger = __var_1__.isPrimitive;\nvar isBoolean = __var_2__.isPrimitive;\nvar isNumber = __var_3__.isPrimitive;\nvar isObject = __var_4__;\nvar isnan = __var_5__;\nvar hasOwnProp = __var_6__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {NonNegativeInteger} [options.ddof] - degrees of freedom adjustment\n* @param {boolean} [options.simulate] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations] - number of Monte Carlo iterations\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'simulate': false,\n*     'ddof': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` option must be a number on the interval `[0,1]`. Value: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ddof' ) ) {\n\t\topts.ddof = options.ddof;\n\t\tif ( !isNonNegativeInteger( opts.ddof ) ) {\n\t\t\treturn new TypeError( 'invalid option. `ddof` option must be a nonnegative integer. Option: `' + opts.ddof + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iterations' ) ) {\n\t\topts.iterations = options.iterations;\n\t\tif ( !isPositiveInteger( opts.iterations ) ) {\n\t\t\treturn new TypeError( 'invalid option. `iterations` option must be a positive integer. Option: `' + opts.iterations + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'simulate' ) ) {\n\t\topts.simulate = options.simulate;\n\t\tif ( !isBoolean( opts.simulate ) ) {\n\t\t\treturn new TypeError( 'invalid option. `simulate` option must be a boolean primitive. Option: `' + opts.simulate + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/stats/base/dists/bernoulli/pmf';\nimport __var_1__ from '@stdlib/stats/base/dists/binomial/pmf';\nimport __var_2__ from '@stdlib/stats/base/dists/discrete-uniform/pmf';\nimport __var_3__ from '@stdlib/stats/base/dists/geometric/pmf';\nimport __var_4__ from '@stdlib/stats/base/dists/hypergeometric/pmf';\nimport __var_5__ from '@stdlib/stats/base/dists/negative-binomial/pmf';\nimport __var_6__ from '@stdlib/stats/base/dists/poisson/pmf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar bernoulli = __var_0__;\nvar binomial = __var_1__;\nvar discreteUniform = __var_2__;\nvar geometric = __var_3__;\nvar hypergeometric = __var_4__;\nvar negativeBinomial = __var_5__;\nvar poisson = __var_6__;\n\n\n// MAIN //\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\nvar PMF = {\n\t'bernoulli': bernoulli,\n\t'binomial': binomial,\n\t'discrete-uniform': discreteUniform,\n\t'geometric': geometric,\n\t'hypergeometric': hypergeometric,\n\t'negative-binomial': negativeBinomial,\n\t'poisson': poisson\n};\n\n\n// EXPORTS //\nexport default PMF;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from './pmf.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar PMF = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns the probability mass function (PMF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @returns {(Function|Error)} a probability mass function (PMF) or an error\n*/\nfunction getPMF( name ) {\n\tif ( !hasOwnProp( PMF, name ) ) {\n\t\treturn new Error( 'invalid argument. Unsupported/unrecognized distribution name. Value: `' + name + '`.' );\n\t}\n\treturn PMF[ name ];\n}\n\n\n// EXPORTS //\nexport default getPMF;\n","import __var_0__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar PINF = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes a chi-square test statistic.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - observation frequencies\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - expected frequencies\n* @param {integer} strideY - `y` stride length\n* @returns {number} test statistic\n*/\nfunction testStatistic( N, x, strideX, y, strideY ) {\n\tvar stat;\n\tvar v1;\n\tvar v2;\n\tvar d;\n\tvar i;\n\n\tstat = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv1 = x[ i*strideX ];\n\t\tv2 = y[ i*strideY ];\n\t\tif ( v2 === 0.0 ) {\n\t\t\tif ( v1 === 0.0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t\td = v1 - v2;\n\t\tstat += ( d * d ) / v2;\n\t}\n\treturn stat;\n}\n\n\n// EXPORTS //\nexport default testStatistic;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a frequency table from an input array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {ArrayLikeObject} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {ArrayLikeObject} output array\n*\n* @example\n* var arr = [ 0, 1, 1, 0, 0, 2, 3, 5 ];\n* var out = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var freq = tabulate( arr.length, arr, 1, out, 1 );\n* // returns [ 3, 2, 1, 1, 0, 1, 0, 0 ]\n*/\nfunction tabulate( N, x, strideX, y, strideY ) {\n\tvar i;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ x[ i*strideX ] * strideY ] += 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\nexport default tabulate;\n","import __var_0__ from '@stdlib/math/utils/incrspace';\nimport __var_1__ from '@stdlib/random/sample';\nimport __var_2__ from '@stdlib/array/float64';\nimport __var_3__ from '@stdlib/blas/ext/base/dfill';\nimport __var_4__ from './tabulate.js';\nimport __var_5__ from './statistic.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar incrspace = __var_0__;\nvar sample = __var_1__;\nvar Float64Array = __var_2__;\nvar dfill = __var_3__;\nvar tabulate = __var_4__;\nvar testStatistic = __var_5__;\n\n\n// MAIN //\n\n/**\n* Performs a Monte-Carlo simulation.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} expected - expected number of observations\n* @param {NumericArray} p - probabilities\n* @param {number} stat - test statistic\n* @param {NonNegativeInteger} nobs - total number of observations\n* @param {NonNegativeInteger} niter - number of iterations\n* @returns {number} p-value\n*/\nfunction simulate( N, expected, p, stat, nobs, niter ) {\n\tvar pool;\n\tvar opts;\n\tvar freq;\n\tvar cnt;\n\tvar v;\n\tvar i;\n\n\tpool = incrspace( 0, N, 1 ); // TODO: replace with strided interface\n\topts = {\n\t\t'size': nobs,\n\t\t'probs': p\n\t};\n\tfreq = new Float64Array( N );\n\tcnt = 1;\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tv = sample( pool, opts ); // TODO: use `sample.factory` method once sample pkg is updated\n\t\tfreq = tabulate( N, v, 1, freq, 1 );\n\t\tif ( testStatistic( N, freq, 1, expected, 1 ) >= stat ) { // TODO: consider replacing with low-level double-precision strided interface\n\t\t\tcnt += 1;\n\t\t}\n\t\tif ( i < niter-1 ) {\n\t\t\tdfill( N, 0.0, freq, 1 );\n\t\t}\n\t}\n\treturn cnt / ( niter+1 );\n}\n\n\n// EXPORTS //\nexport default simulate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\nimport __var_5__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_6__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\nvar setReadOnly = __var_5__;\nvar setReadOnlyAccessor = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {(number|null)} df - degrees of freedom\n* @returns {Results} results object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var alpha = res.alpha;\n* // returns 0.05\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {(number|null)}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var df = res.df;\n* // returns 4\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var method = res.method;\n* // returns 'Chi-square goodness-of-fit test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square goodness-of-fit test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var pval = res.pValue;\n* // returns 0.0406\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var stat = res.statistic;\n* // returns 9.9901\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square goodness-of-fit test\n*\n*     Null hypothesis: population probabilities are equal to those in p\n*\n*        pValue: 0.0406\n*        statistic: 9.9901\n*        degrees of freedom: 4\n*\n*     Test Decision: Reject null in favor of alternative at 5% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: population probabilities are equal to those in p',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var o = res.toJSON();\n* // returns {'rejected': true, 'alpha': 0.05, 'pValue': 0.0406, 'df': 4, ...}\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\nexport default Results;\n","import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/assert/is-array-like-object';\nimport __var_2__ from '@stdlib/assert/is-ndarray-like';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/math/base/utils/absolute-difference';\nimport __var_6__ from '@stdlib/constants/math/float64-sqrt-eps';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\nimport __var_8__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_9__ from '@stdlib/assert/is-nan';\nimport __var_10__ from '@stdlib/blas/base/daxpy';\nimport __var_11__ from '@stdlib/blas/base/dscal';\nimport __var_12__ from '@stdlib/blas/ext/base/dsumpw';\nimport __var_13__ from '@stdlib/array/float64';\nimport __var_14__ from './defaults.js';\nimport __var_15__ from './validate.js';\nimport __var_16__ from './get_pmf.js';\nimport __var_17__ from './statistic.js';\nimport __var_18__ from './simulate.js';\nimport __var_19__ from './results.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar isArrayLikeObject = __var_1__;\nvar isndarrayLike = __var_2__;\nvar isNumber = __var_3__.isPrimitive;\nvar isString = __var_4__.isPrimitive;\nvar absdiff = __var_5__;\nvar FLOAT64_SQRT_EPS = __var_6__;\nvar PINF = __var_7__;\nvar chisqCDF = __var_8__;\nvar isnan = __var_9__;\nvar daxpy = __var_10__;\nvar dscal = __var_11__;\nvar dsumpw = __var_12__;\nvar Float64Array = __var_13__;\nvar defaults = __var_14__;\nvar validate = __var_15__;\nvar getPMF = __var_16__;\nvar testStatistic = __var_17__;\nvar simulate = __var_18__;\nvar Results = __var_19__;\n\n\n// MAIN //\n\n/**\n* Performs a chi-square goodness-of-fit test.\n*\n* @param {(ArrayLikeObject|VectorLike)} x - observation frequencies\n* @param {(ArrayLikeObject|VectorLike|string)} y - expected frequencies or a discrete probability distribution name\n* @param {...number} [args] - probability mass function (PMF) arguments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment\n* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations\n* @throws {TypeError} first argument must be an array-like object or a 1-dimensional array containing nonnegative integers\n* @throws {TypeError} second argument must be either an array-like object (or a 1-dimensional array) of nonnegative numbers, an array-like object (or a 1-dimensional array) of probabilities summing to one, or a discrete probability distribution name\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} first and second arguments must have the same length\n* @throws {Error} first argument must contain at least one element greater than zero\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @throws {TypeError} probability mass function (PMF) arguments must be number primitives\n* @returns {Object} test results\n*\n* @example\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\nfunction chi2gof( x, y ) {\n\tvar expected;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar obs;\n\tvar err;\n\tvar pmf;\n\tvar sum;\n\tvar df;\n\tvar N;\n\tvar d;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar p;\n\tvar v;\n\tvar i;\n\n\tif ( isndarrayLike( x ) && x.ndims === 1 && x.strides.length === 1 ) { // is ndarray-like vector?\n\t\td = x.data;\n\t\ts = x.strides[ 0 ];\n\t\to = x.offset;\n\t} else if ( isArrayLikeObject( x ) ) {\n\t\td = x;\n\t\ts = 1;\n\t\to = 0;\n\t} else {\n\t\tthrow new TypeError( 'invalid argument. First argument must be either an array-like object or a 1-dimensional ndarray. Value: `' + x + '`.' );\n\t}\n\tN = x.length;\n\n\t// Initialize an array for storing a copy of the observations array:\n\tobs = new Float64Array( N+1 ); // Note: `N+1` is intentional in the event that we need to add a remaining category for all values greater than or equal to `N`\n\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = d[ o+(s*i) ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must contain nonnegative integers. Index: `' + i + '`. Value: `' + v + '`.' );\n\t\t}\n\t\tobs[ i ] = v;\n\t\tn += v;\n\t}\n\tif ( n === 0 ) {\n\t\tthrow new Error( 'invalid argument. First argument must contain at least one element greater than zero (i.e., the total number number of observations must be greater than zero).' );\n\t}\n\t// NOTE: `obs` is now a single-segment contiguous Float64Array\n\n\tnargs = 0;\n\tif ( isString( y ) ) {\n\t\tpmf = getPMF( y );\n\t\tif ( pmf instanceof Error ) {\n\t\t\tthrow pmf;\n\t\t}\n\t\tnargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity\n\t\targs = [ 0 ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i+2 ];\n\t\t\tif ( !isNumber( v ) || isnan( v ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Probability mass function (PMF) arguments must be number primitives. Argument: `' + (i+2) + '`. Value: `' + v + '`.' );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\texpected = new Float64Array( N+1 );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\targs[ 0 ] = i;\n\t\t\tif ( y === 'discrete-uniform' ) {\n\t\t\t\targs[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)\n\t\t\t}\n\t\t\tv = pmf.apply( null, args );\n\t\t\tsum += v;\n\t\t\texpected[ i ] = v * n;\n\t\t}\n\t\t// Check whether we need to add a remaining category for all values greater than or equal to `N`...\n\t\tif ( sum < 1.0 ) {\n\t\t\texpected[ N ] = (1.0-sum) * n;\n\t\t\tN += 1;\n\t\t}\n\t} else {\n\t\tif ( isndarrayLike( y ) && y.ndims === 1 && y.strides.length === 1 ) { // is ndarray-like vector?\n\t\t\td = y.data;\n\t\t\ts = y.strides[ 0 ];\n\t\t\to = y.offset;\n\t\t} else if ( isArrayLikeObject( y ) ) {\n\t\t\td = y;\n\t\t\ts = 1;\n\t\t\to = 0;\n\t\t} else {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be either an array-like object (or 1-dimensional ndarray) of probabilities summing to one, an array-like object (or 1-dimensional ndarray) of expected frequencies, or a discrete probability distribution name. Value: `' + y + '`.' );\n\t\t}\n\t\tif ( y.length !== N ) {\n\t\t\tthrow new Error( 'invalid arguments. First and second arguments must have the same length.' );\n\t\t}\n\t\texpected = new Float64Array( N );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = d[ o+(s*i) ];\n\t\t\tif ( !isNumber( v ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must only contain numbers. Index: `' + i + '`. Value: `' + v + '`.' );\n\t\t\t}\n\t\t\tif ( v < 0.0 ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must only contain nonnegative numbers. Index: `' + i + '`. Value: `' + v + '`.' );\n\t\t\t} else if ( v > 1.0 ) {\n\t\t\t\tsum += PINF;\n\t\t\t} else {\n\t\t\t\tsum += v;\n\t\t\t}\n\t\t\texpected[ i ] = v;\n\t\t}\n\t\t// Check if provided a unity probability array (otherwise, assume provided an expected frequencies array)...\n\t\tif ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS ) {\n\t\t\tp = y; // NOTE: `y` may not be a Float64Array\n\t\t\texpected = dscal( N, n, expected, 1 );\n\t\t}\n\t}\n\t// NOTE: `expected` is now a single-segment contiguous Float64Array\n\n\topts = defaults();\n\tif ( arguments.length > 2+nargs ) {\n\t\terr = validate( opts, arguments[ 2+nargs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstat = testStatistic( N, obs, 1, expected, 1 ); // TODO: consider replacing with low-level double-precision strided interface\n\tif ( opts.simulate ) {\n\t\tif ( p === void 0 ) {\n\t\t\tv = dsumpw( N, expected, 1 );\n\t\t\tp = daxpy( N, 1.0/v, expected, 1, new Float64Array( N ), 1 );\n\t\t}\n\t\tpval = simulate( N, expected, p, stat, n, opts.iterations );\n\t} else {\n\t\tdf = N - 1 - opts.ddof;\n\t\tpval = 1.0 - chisqCDF( stat, df );\n\t}\n\treturn new Results( pval, opts.alpha, stat, ( df === void 0 ) ? null : df );\n}\n\n\n// EXPORTS //\nexport default chi2gof;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square goodness-of-fit test.\n*\n* @module @stdlib/stats/chi2gof\n*\n* @example\n* var chi2gof = require( '@stdlib/stats/chi2gof' );\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*\n* var table = out.toString();\n* /*\n* Null hypothesis: population probabilities are equal to those in p\n*\n*     pValue: 0.0406\n*     statistic: 9.9901\n*     degrees of freedom: 4\n*\n* Test Decision: Reject null in favor of alternative at 5% significance level\n* /*\n*/\n\n// MODULES //\nvar chi2gof = __var_0__;\n\n\n// EXPORTS //\nexport default chi2gof;\n"]}