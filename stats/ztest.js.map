{"version":3,"sources":["@stdlib/stats/ztest/lib/validate.js","@stdlib/stats/ztest/lib/print.js","@stdlib/stats/ztest/lib/main.js","@stdlib/stats/ztest/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isObject","__var_1__","isString","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","alternative","mu","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","ci","rejected","isPositiveNumber","isNumberArray","primitives","isTypedArrayLike","setReadOnly","cdfFactory","factory","quantileFactory","__var_5__","sqrt","__var_6__","abs","__var_7__","mean","__var_8__","NINF","__var_9__","PINF","__var_10__","__var_11__","__var_12__","normalCDF","normalQuantile","ztest","x","sigma","stderr","cint","pval","stat","alt","err","out","len","RangeError","Error"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mu` option must be a number primitive. Option: `' + opts.mu + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True mean is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-positive-number';\nimport __var_1__ from '@stdlib/assert/is-number-array';\nimport __var_2__ from '@stdlib/assert/is-typed-array-like';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/stats/base/dists/normal/cdf';\nimport __var_5__ from '@stdlib/stats/base/dists/normal/quantile';\nimport __var_6__ from '@stdlib/math/base/special/sqrt';\nimport __var_7__ from '@stdlib/math/base/special/abs';\nimport __var_8__ from '@stdlib/stats/base/mean';\nimport __var_9__ from '@stdlib/constants/math/float64-ninf';\nimport __var_10__ from '@stdlib/constants/math/float64-pinf';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveNumber = __var_0__.isPrimitive;\nvar isNumberArray = __var_1__.primitives;\nvar isTypedArrayLike = __var_2__;\nvar setReadOnly = __var_3__;\nvar cdfFactory = __var_4__.factory;\nvar quantileFactory = __var_5__.factory;\nvar sqrt = __var_6__;\nvar abs = __var_7__;\nvar mean = __var_8__;\nvar NINF = __var_9__;\nvar PINF = __var_10__;\nvar validate = __var_11__;\nvar print = __var_12__;\n\n\n// VARIABLES //\n\nvar normalCDF = cdfFactory( 0.0, 1.0 );\nvar normalQuantile = quantileFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample z-test.\n*\n* @param {NumericArray} x - data array\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu=0] - mean under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} sigma argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number primitive\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string primitive\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} mu option has to be a number primitive\n* @throws {TypeError} sigma option has to be a positive number\n* @returns {Object} test result object\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'mu': 5\n* });\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'alternative': 'greater'\n* });\n*/\nfunction ztest( x, sigma, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar len;\n\tvar mu;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `sigma` must be a positive number. Value: `' + sigma + '`.' );\n\t}\n\tlen = x.length;\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( 'invalid argument. First argument `x` must contain at least two elements. Value: `' + x + '`' );\n\t}\n\tstderr = sqrt( sigma*sigma / len );\n\txmean = mean( len, x, 1 );\n\tstat = ( xmean - mu ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normalCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normalQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normalQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normalCDF( stat );\n\t\tcint = [ stat - normalQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normalCDF( stat );\n\t\tcint = [ NINF, stat + normalQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'method', 'One-sample z-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default ztest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample z-Test.\n*\n* @module @stdlib/stats/ztest\n*\n* @example\n* var ztest = require( '@stdlib/stats/ztest' );\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample z-test:\n* x = new Array( 300 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ztest( x, 2.0 );\n*/\n\n// MODULES //\nvar ztest = __var_0__;\n\n\n// EXPORTS //\nexport default ztest;\n"]}