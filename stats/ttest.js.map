{"version":3,"sources":["@stdlib/stats/ttest/lib/validate.js","@stdlib/stats/ttest/lib/print.js","@stdlib/stats/ttest/lib/main.js","@stdlib/stats/ttest/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isObject","__var_1__","isString","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","contains","__var_5__","ALTERNATIVE","validate","opts","options","TypeError","alpha","RangeError","alternative","Error","join","mu","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","df","ci","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","tCDF","tQuantile","sqrt","__var_6__","abs","__var_7__","mean","__var_8__","variance","__var_9__","gcopy","__var_10__","NINF","__var_11__","PINF","__var_12__","Float64Array","__var_13__","__var_14__","__var_15__","ttest","x","stderr","xmean","cint","pval","stat","err","len","out","tq","y","i"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/assert/contains';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\nvar contains = __var_5__;\n\n\n// VARIABLES //\n\nvar ALTERNATIVE = [\n\t'two-sided',\n\t'less',\n\t'greater'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {number} [options.mu] - mean under `H0`\n* @returns {(null|Error)} null or an error object\n*\n* @example\n* var options = {\n*     'alpha': 0.05\n* };\n* var opts = {};\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` option must be between `0` and `1` (inclusive). Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE, opts.alternative ) ) {\n\t\t\treturn new Error( 'invalid option. `alternative` option must be one of the following: `' + ALTERNATIVE.join( ', ' ) + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mu` option must be a number. Option: `' + opts.mu + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired t-test' ) {\n\t\tstr += 'True difference in means is ';\n\t} else {\n\t\tstr += 'True mean is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + this.df + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/stats/base/dists/t/cdf';\nimport __var_5__ from '@stdlib/stats/base/dists/t/quantile';\nimport __var_6__ from '@stdlib/math/base/special/sqrt';\nimport __var_7__ from '@stdlib/math/base/special/abs';\nimport __var_8__ from '@stdlib/stats/base/mean';\nimport __var_9__ from '@stdlib/stats/base/variance';\nimport __var_10__ from '@stdlib/blas/base/gcopy';\nimport __var_11__ from '@stdlib/constants/math/float64-ninf';\nimport __var_12__ from '@stdlib/constants/math/float64-pinf';\nimport __var_13__ from '@stdlib/array/float64';\nimport __var_14__ from './validate.js';\nimport __var_15__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar setReadOnly = __var_2__;\nvar isObject = __var_3__;\nvar tCDF = __var_4__;\nvar tQuantile = __var_5__;\nvar sqrt = __var_6__;\nvar abs = __var_7__;\nvar mean = __var_8__;\nvar variance = __var_9__;\nvar gcopy = __var_10__;\nvar NINF = __var_11__;\nvar PINF = __var_12__;\nvar Float64Array = __var_13__;\nvar validate = __var_14__;\nvar print = __var_15__;\n\n\n// MAIN //\n\n/**\n* Computes a one-sample or paired Student's t test.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} [y] - optional paired array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {number} [options.mu=0.0] - mean under `H0`\n* @throws {TypeError} first argument must be a numeric array\n* @throws {Error} first argument must have at least two elements\n* @throws {Error} paired array must have the same length as the first argument\n* @throws {TypeError} second argument must be either a numeric array or an options object\n* @throws {TypeError} `alpha` option must be number\n* @throws {RangeError} `alpha` option must be reside along the interval `[0,1]`\n* @throws {TypeError} `alternative` option must be a recognized option value (`two-sided`, `less`, or `greater`)\n* @throws {TypeError} `mu` option must be a number\n* @returns {Object} test results\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'mu': 5.0\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'alternative': 'greater'\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*/\nfunction ttest( x ) {\n\tvar stderr;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar err;\n\tvar len;\n\tvar out;\n\tvar df;\n\tvar tq;\n\tvar y;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tlen = x.length;\n\tif ( len < 2 ) {\n\t\tthrow new Error( 'invalid argument. First argument must have at least two elements. Value: `' + x + '`.' );\n\t}\n\topts = {\n\t\t'mu': 0.0,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be either a numeric array or an options object. Value: `' + y + '`.' );\n\t\t\t}\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\ty = arguments[ 1 ];\n\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a numeric array. Value: `' + y + '`.' );\n\t\t}\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( y ) {\n\t\tif ( y.length !== len ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same length.' );\n\t\t}\n\t\tx = gcopy( len, x, 1, new Float64Array( len ), 1 );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tx[ i ] -= y[ i ];\n\t\t}\n\t}\n\tstderr = sqrt( variance( len, 1, x, 1 ) / len );\n\txmean = mean( len, x, 1 );\n\tstat = ( xmean-opts.mu ) / stderr;\n\tdf = len - 1;\n\tif ( opts.alternative === 'two-sided' ) {\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\ttq = tQuantile( 1.0-(opts.alpha/2.0), df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t} else if ( opts.alternative === 'greater' ) {\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\tPINF\n\t\t];\n\t} else { // opts.alternative === 'less'\n\t\tpval = tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\tNINF,\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'nullValue', opts.mu );\n\tsetReadOnly( out, 'mean', xmean );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'alternative', opts.alternative );\n\tsetReadOnly( out, 'method', ( y ) ? 'Paired t-test' : 'One-sample t-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default ttest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Student's t-Test.\n*\n* @module @stdlib/stats/ttest\n*\n* @example\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ttest = require( '@stdlib/stats/ttest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample t-test:\n* x = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ttest( x );\n*\n* // Paired t-test:\n* x = new Float64Array( 100 );\n* y = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = ttest( x, y );\n*/\n\n// MODULES //\nvar ttest = __var_0__;\n\n\n// EXPORTS //\nexport default ttest;\n"]}