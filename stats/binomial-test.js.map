{"version":3,"sources":["@stdlib/stats/binomial-test/lib/validate.js","@stdlib/stats/binomial-test/lib/print.js","@stdlib/stats/binomial-test/lib/main.js","@stdlib/stats/binomial-test/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isObject","__var_1__","isString","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","alternative","p","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","ci","rejected","setReadOnly","isNumberArray","isNonNegativeInteger","betaQuantile","floor","ceil","__var_5__","binomialCDF","__var_6__","binomialPMF","__var_7__","__var_8__","__var_9__","RELATIVE_ERROR","lower","x","n","upper","binomialTest","cint","pval","stat","alt","err","out","d","m","y","i","Error","RangeError"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.p] - probability under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'p' ) ) {\n\t\topts.p = options.p;\n\t\tif ( !isNumber( opts.p ) || isnan( opts.p ) ) {\n\t\t\treturn new TypeError( 'invalid option. `p` option must be a number primitive. Option: `' + opts.p + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/utils/define-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-number-array';\nimport __var_2__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_3__ from '@stdlib/stats/base/dists/beta/quantile';\nimport __var_4__ from '@stdlib/math/base/special/floor';\nimport __var_5__ from '@stdlib/math/base/special/ceil';\nimport __var_6__ from '@stdlib/stats/base/dists/binomial/cdf';\nimport __var_7__ from '@stdlib/stats/base/dists/binomial/pmf';\nimport __var_8__ from './validate.js';\nimport __var_9__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNumberArray = __var_1__;\nvar isNonNegativeInteger = __var_2__;\nvar betaQuantile = __var_3__;\nvar floor = __var_4__;\nvar ceil = __var_5__;\nvar binomialCDF = __var_6__;\nvar binomialPMF = __var_7__;\nvar validate = __var_8__;\nvar print = __var_9__;\n\n\n// VARIABLES //\n\nvar RELATIVE_ERROR = 1+1e-07;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the lower endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} lower endpoint\n*/\nfunction lower( x, n, alpha ) {\n\treturn ( x === 0 ) ? 0 : betaQuantile( alpha, x, n - x + 1 );\n}\n\n/**\n* Calculates the upper endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} upper endpoint\n*/\nfunction upper( x, n, alpha ) {\n\treturn ( x === n ) ? 1 : betaQuantile( 1 - alpha, x + 1, n - x );\n}\n\n\n// MAIN //\n\n/**\n* Computes an exact test for the success probability in a Bernoulli experiment.\n*\n* @param {(NonNegativeInteger|Array)} x - number of successes or two-element array with successes and failures\n* @param {NonNegativeInteger} [n] - total number of observations\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {Probability} [options.p=0.5] - success probability under H0\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string primitive\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @returns {Object} test results\n*/\nfunction binomialTest() {\n\tvar alpha;\n\tvar opts;\n\tvar cint;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar d;\n\tvar m;\n\tvar n;\n\tvar p;\n\tvar x;\n\tvar y;\n\tvar i;\n\n\topts = {};\n\tif ( isNumberArray( arguments[ 0 ] ) ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== 2 ) {\n\t\t\tthrow new Error( 'invalid argument. If provided an array, it must have two elements. Value: `' + x + '`.' );\n\t\t}\n\t\tn = x[ 1 ] + x[ 0 ];\n\t\tx = x[ 0 ];\n\t\tif ( arguments[ 1 ] ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t}\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\tn = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative integer or a two-element array. Value: `' + x + '`.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + n + '`.' );\n\t\t}\n\t\tif ( x > n ) {\n\t\t\tthrow new TypeError( 'invalid arguments. `x` cannot be larger than `n`. `x:' + x + ', n:' + n + '`.' );\n\t\t}\n\t\tif ( arguments[ 2 ] ) {\n\t\t\terr = validate( opts, arguments[ 2 ] );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\tif ( opts.p === void 0 ) {\n\t\tp = 0.5;\n\t} else {\n\t\tp = opts.p;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `p` must be a probability. Value: `' + p + '`.' );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tstat = x / n;\n\tswitch ( alt ) {\n\tcase 'less':\n\t\tpval = binomialCDF( x, n, p );\n\t\tcint = [ 0.0, upper( x, n, alpha ) ];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - binomialCDF( x - 1, n, p );\n\t\tcint = [ lower( x, n, alpha ), 1.0 ];\n\t\tbreak;\n\tcase 'two-sided':\n\t\td = binomialPMF( x, n, p );\n\t\tm = n * p;\n\t\tif ( x === m ) {\n\t\t\tpval = 1;\n\t\t} else if ( x < m ) {\n\t\t\ty = 0;\n\t\t\tfor ( i = ceil( m ); i <= n; i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF(x, n, p) + ( 1 - binomialCDF(n - y, n, p ) );\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tfor ( i = 0; i <= floor( m ); i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF( y-1, n, p ) + ( 1 - binomialCDF( x-1, n, p ) );\n\t\t}\n\t\tcint = [ lower( x, n, alpha/2.0 ), upper( x, n, alpha/2.0 ) ];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'nullValue', p );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Exact binomial test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default binomialTest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exact test for the success probability in a Bernoulli experiment.\n*\n* @module @stdlib/stats/binomial-test\n*\n* @example\n* var binomialTest = require( '@stdlib/stats/binomial-test' );\n*\n* var out = binomialTest( 682, 925 );\n* // returns {...}\n*\n* out = binomialTest( 682, 925, {\n*     'p': 0.75,\n*     'alpha': 0.05\n* });\n* // returns {...}\n*/\n\n// MODULES //\nvar binomialTest = __var_0__;\n\n\n// EXPORTS //\nexport default binomialTest;\n"]}