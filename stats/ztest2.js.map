{"version":3,"sources":["@stdlib/stats/ztest2/lib/validate.js","@stdlib/stats/ztest2/lib/print.js","@stdlib/stats/ztest2/lib/main.js","@stdlib/stats/ztest2/lib/index.js"],"names":["isProbability","__var_0__","isPrimitive","isNumber","__var_1__","isObject","__var_2__","isString","__var_3__","isnan","__var_4__","hasOwnProp","__var_5__","validate","opts","options","TypeError","alpha","RangeError","alternative","difference","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","ci","rejected","isNumberArray","primitives","isTypedArrayLike","isPositiveNumber","setReadOnly","quantileFactory","factory","cdfFactory","sqrt","__var_6__","abs","__var_7__","mean","__var_8__","NINF","__var_9__","PINF","__var_10__","__var_11__","__var_12__","normQuantile","normCDF","ztest2","x","y","sigmax","sigmay","stderr","xmean","ymean","cint","diff","pval","stat","alt","err","out","nx","ny","Error"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-probability';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/is-nan';\nimport __var_5__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isProbability = __var_0__.isPrimitive;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isString = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar hasOwnProp = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( !isProbability( opts.alpha ) ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` option must be a number in the range 0 to 1. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( 'invalid option. `difference` option must be a number primitive. Option: `' + opts.difference + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/assert/is-positive-number';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/stats/base/dists/normal/quantile';\nimport __var_5__ from '@stdlib/stats/base/dists/normal/cdf';\nimport __var_6__ from '@stdlib/math/base/special/sqrt';\nimport __var_7__ from '@stdlib/math/base/special/abs';\nimport __var_8__ from '@stdlib/stats/base/mean';\nimport __var_9__ from '@stdlib/constants/math/float64-ninf';\nimport __var_10__ from '@stdlib/constants/math/float64-pinf';\nimport __var_11__ from './validate.js';\nimport __var_12__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar isPositiveNumber = __var_2__.isPrimitive;\nvar setReadOnly = __var_3__;\nvar quantileFactory = __var_4__.factory;\nvar cdfFactory = __var_5__.factory;\nvar sqrt = __var_6__;\nvar abs = __var_7__;\nvar mean = __var_8__;\nvar NINF = __var_9__;\nvar PINF = __var_10__;\nvar validate = __var_11__;\nvar print = __var_12__;\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample z-test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {PositiveNumber} sigmax - known standard deviation of first group\n* @param {PositiveNumber} sigmay - known standard deviation of second group\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} sigmax argument has to be a positive number\n* @throws {TypeError} sigmay argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`\n* @returns {Object} test result object\n*/\nfunction ztest2( x, y, sigmax, sigmay, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t}\n\tif ( !isPositiveNumber( sigmax ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument `sigmax` must be a positive number. Value: `' + sigmax + '`.' );\n\t}\n\tif ( !isPositiveNumber( sigmay ) ) {\n\t\tthrow new TypeError( 'invalid argument. Third argument `sigmay` must be a positive number. Value: `' + sigmay + '`.' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( (xvar/nx) + (yvar/ny) );\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normCDF( stat );\n\t\tcint = [ stat - normQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normCDF( stat );\n\t\tcint = [ NINF, stat + normQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Two-sample z-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default ztest2;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample z-Test.\n*\n* @module @stdlib/stats/ztest2\n*\n* @example\n* var ztest2 = require( '@stdlib/stats/ztest2' );\n* var incrspace = require( '@stdlib/math/utils/incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 7, 21, 1 );\n*\n* var out = ztest2( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\nvar ztest2 = __var_0__;\n\n\n// EXPORTS //\nexport default ztest2;\n"]}