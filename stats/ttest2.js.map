{"version":3,"sources":["@stdlib/stats/ttest2/lib/validate.js","@stdlib/stats/ttest2/lib/print.js","@stdlib/stats/ttest2/lib/main.js","@stdlib/stats/ttest2/lib/index.js"],"names":["isNumber","__var_0__","isPrimitive","isObject","__var_1__","isString","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","alternative","difference","variance","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","df","ci","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","tCDF","tQuantile","sqrt","__var_5__","abs","__var_6__","pow","__var_7__","mean","__var_8__","__var_9__","NINF","__var_10__","PINF","__var_11__","__var_12__","__var_13__","ttest2","x","y","stderr","xmean","ymean","vars","cint","diff","pval","xvar","yvar","stat","sdx","sdy","alt","err","out","nx","ny","v","RangeError","Error"],"mappings":"i3BA0BA,IAAIA,EAAWC,EAAUC,YACrBC,EAAWC,EACXC,EAAWC,EAAUJ,YACrBK,EAAQC,EACRC,EAAaC,EAiBjB,SAASC,EAAUC,EAAMC,GACxB,OAAMV,EAAUU,GAGXJ,EAAYI,EAAS,WACzBD,EAAKE,MAAQD,EAAQC,OACfd,EAAUY,EAAKE,QAAWP,EAAOK,EAAKE,QACpC,IAAIC,UAAW,uEAAyEH,EAAKE,MAAQ,MAGzGL,EAAYI,EAAS,iBACzBD,EAAKI,YAAcH,EAAQG,aACrBX,EAAUO,EAAKI,cACb,IAAID,UAAW,6EAA+EH,EAAKI,YAAc,MAGrHP,EAAYI,EAAS,gBACzBD,EAAKK,WAAaJ,EAAQI,YACpBjB,EAAUY,EAAKK,aAAgBV,EAAOK,EAAKK,aACzC,IAAIF,UAAW,4EAA8EH,EAAKK,WAAa,MAGnHR,EAAYI,EAAS,cACzBD,EAAKM,SAAWL,EAAQK,UAClBb,EAAUO,EAAKM,WACb,IAAIH,UAAW,0EAA4EH,EAAKM,SAAW,MAG7G,KA1BC,IAAIH,UAAW,iEAAmEF,EAAU,MCvBrG,IAAIM,EAAoBlB,EACpBE,EAAWC,EACXgB,EAAYd,EAAUJ,YACtBO,EAAaD,EACba,EAASX,EAeb,SAASY,EAAOV,GAEf,IAAIW,EACAC,EACAC,EAIJ,GAFAD,EAAO,EACPD,GAAW,EACNG,UAAUC,OAAS,EAAI,CAC3B,IAAMxB,EAAUS,GACf,MAAM,IAAIG,UAAW,uEAAyEH,EAAO,MAEtG,GAAKH,EAAYG,EAAM,UAAa,CACnC,IAAMO,EAAmBP,EAAKgB,QAC7B,MAAM,IAAIb,UAAW,wEAA0EH,EAAKgB,OAAS,MAE9GJ,EAAOZ,EAAKgB,OAEb,GAAKnB,EAAYG,EAAM,YAAe,CACrC,IAAMQ,EAAWR,EAAKW,UACrB,MAAM,IAAIR,UAAW,2EAA6EH,EAAKW,SAAW,MAEnHA,EAAWX,EAAKW,UASlB,OALAE,EAAM,GACNA,GAAOI,KAAKC,OACZL,GAAO,OACPA,GAAO,2BACPA,GAAO,+BACEI,KAAKb,aACd,IAAK,YACL,QACCS,GAAO,gBACP,MACD,IAAK,OACJA,GAAO,aACP,MACD,IAAK,UACJA,GAAO,gBAuBR,OApBAA,GAAOI,KAAKE,UACZN,GAAO,OACPA,GAAO,eAAiBJ,EAAQQ,KAAKG,QAASR,GAAS,KACvDC,GAAO,kBAAoBJ,EAAQQ,KAAKI,WAAYT,GAAS,KAC7DC,GAAO,WAAaJ,EAAQQ,KAAKK,IAAKV,GAAS,KAC/CC,GAAO,OAA2B,KAAhB,EAAII,KAAKf,OAAc,2BACxCO,EAAQQ,KAAKM,GAAG,IAAKX,GACrB,IACAH,EAAQQ,KAAKM,GAAG,IAAKX,GACtB,IACAC,GAAO,OACFF,IACJE,GAAO,kBACFI,KAAKO,SACTX,GAAO,0CAAwD,IAAXI,KAAKf,MAAa,uBAEtEW,GAAO,kDAAgE,IAAXI,KAAKf,MAAa,uBAE/EW,GAAO,MAEDA,ECzER,IAAIY,EAAgBpC,EAAUqC,WAC1BC,EAAmBnC,EACnBoC,EAAclC,EACdmC,EAAOjC,EACPkC,EAAYhC,EACZiC,EAAOC,EACPC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EACPhC,EAAWiC,EACXC,EAAOC,EACPC,EAAOC,EACP5C,EAAW6C,EACXlC,EAAQmC,EA2BZ,SAASC,EAAQC,EAAGC,EAAG/C,GACtB,IAAIgD,EACA/C,EACAgD,EACAC,EACAC,EACAC,EACAC,EACAtD,EACAuD,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3C,EACA4C,EAEJ,IAAMvC,EAAkBoB,KAAQtB,EAAesB,GAC9C,MAAM,IAAI5C,UAAW,yEAA2E4C,EAAI,MAErG,IAAMpB,EAAkBqB,KAAQvB,EAAeuB,GAC9C,MAAM,IAAI7C,UAAW,0EAA4E6C,EAAI,MAGtG,GADAhD,EAAO,GACFC,IACJ6D,EAAM/D,EAAUC,EAAMC,IAErB,MAAM6D,EASR,GANAR,EAAOtD,EAAKK,YAAc,GAEzBH,OADmB,IAAfF,EAAKE,MACD,IAEAF,EAAKE,OAED,GAAOA,EAAQ,EAC3B,MAAM,IAAIiE,WAAY,kFAAoFjE,EAAQ,MASnH,GAPA8D,EAAKjB,EAAEhC,OACPkD,EAAKjB,EAAEjC,OAEPyC,EAAOlD,EAAU0D,EAAI,EAAGjB,EAAG,GAC3BU,EAAOnD,EAAU2D,EAAI,EAAGjB,EAAG,GAGb,WADdI,EAAOpD,EAAKM,UAAY,WAGvB4D,GAAMF,EAAG,GAAKR,GAAUS,EAAG,GAAKR,EAEhCR,EAASlB,GADTmC,GAFA5C,EAAK0C,EAAKC,EAAK,IAGM,EAAED,EAAO,EAAEC,QAE5B,CAAA,GAAc,YAATb,EAST,MAAM,IAAIgB,MAAO,2EAA6EhB,EAAO,KARrGO,EAAM5B,EAAMyB,EAAKQ,GACjBJ,EAAM7B,EAAM0B,EAAKQ,GACjBhB,EAASlB,EAAO4B,EAAIA,EAAQC,EAAIA,GAChCM,EAAI/B,EAAKwB,EAAK,IAAQK,EAAK,GAC3BE,GAAK/B,EAAKyB,EAAK,IAAQK,EAAK,GAC5B3C,EAAKa,EAAKc,EAAQ,GAAMiB,EAWzB,OAHAR,IAFAR,EAAQb,EAAM2B,EAAIjB,EAAG,KACrBI,EAAQd,EAAM4B,EAAIjB,EAAG,IACIM,GAASL,EAElCY,EAAM7D,EAAKI,aAAe,aAE1B,IAAK,YACJmD,EAAO,EAAM1B,GAAOI,EAAIyB,GAAOpC,IAC/B+B,EAAO,CACNK,EAAO5B,EAAW,EAAK5B,EAAM,EAAMoB,GACnCoC,EAAO5B,EAAW,EAAK5B,EAAM,EAAMoB,KAE9B,GAAMgC,EAAQD,EAAM,GAAMJ,EAChCI,EAAM,GAAMC,EAAQD,EAAM,GAAMJ,EAChC,MACD,IAAK,UACJM,EAAO,EAAM1B,EAAM6B,EAAMpC,IACzB+B,EAAO,CAAEK,EAAO5B,EAAW,EAAI5B,EAAOoB,GAAMoB,IACtC,GAAMY,EAAQD,EAAM,GAAMJ,EAChC,MACD,IAAK,OACJM,EAAO1B,EAAM6B,EAAMpC,IACnB+B,EAAO,CAAEb,EAAMkB,EAAO5B,EAAW,EAAI5B,EAAOoB,KACtC,GAAMgC,EAAQD,EAAM,GAAMJ,EAChC,MACD,QACC,MAAM,IAAImB,MAAO,0FAA4FP,EAAM,KAepH,OAZAjC,EADAmC,EAAM,GACY,WAAYR,GAAQrD,GACtC0B,EAAamC,EAAK,QAAS7D,GAC3B0B,EAAamC,EAAK,SAAUR,GAC5B3B,EAAamC,EAAK,YAAaL,GAC/B9B,EAAamC,EAAK,KAAMV,GACxBzB,EAAamC,EAAK,cAAeF,GACjCjC,EAAamC,EAAK,KAAMzC,GACxBM,EAAamC,EAAK,SAAqB,UAATX,EAAqB,oBAAsB,2BACzExB,EAAamC,EAAK,YAAaT,GAC/B1B,EAAamC,EAAK,QAASb,GAC3BtB,EAAamC,EAAK,QAASZ,GAC3BvB,EAAamC,EAAK,QAASrD,GACpBqD,ECpJL,IAACjB,EAASzD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isString = __var_2__.isPrimitive;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( 'invalid option. `difference` option must be a number primitive. Option: `' + opts.difference + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'variance' ) ) {\n\t\topts.variance = options.variance;\n\t\tif ( !isString( opts.variance ) ) {\n\t\t\treturn new TypeError( 'invalid option. `variance` option must be a string primitive. Option: `' + opts.variance + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/stats/base/dists/t/cdf';\nimport __var_4__ from '@stdlib/stats/base/dists/t/quantile';\nimport __var_5__ from '@stdlib/math/base/special/sqrt';\nimport __var_6__ from '@stdlib/math/base/special/abs';\nimport __var_7__ from '@stdlib/math/base/special/pow';\nimport __var_8__ from '@stdlib/stats/base/mean';\nimport __var_9__ from '@stdlib/stats/base/variance';\nimport __var_10__ from '@stdlib/constants/math/float64-ninf';\nimport __var_11__ from '@stdlib/constants/math/float64-pinf';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar setReadOnly = __var_2__;\nvar tCDF = __var_3__;\nvar tQuantile = __var_4__;\nvar sqrt = __var_5__;\nvar abs = __var_6__;\nvar pow = __var_7__;\nvar mean = __var_8__;\nvar variance = __var_9__;\nvar NINF = __var_10__;\nvar PINF = __var_11__;\nvar validate = __var_12__;\nvar print = __var_13__;\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Student's t test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number primitive\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string primitive\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} difference option has to be a number primitive\n* @throws {TypeError} variance option has to be a string primitive\n* @throws {Error} variance option must be `equal` or `unequal`\n* @returns {Object} test result object\n*/\nfunction ttest2( x, y, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar vars;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar sdx;\n\tvar sdy;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\tvar df;\n\tvar v;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = variance( nx, 1, x, 1 );\n\tyvar = variance( ny, 1, y, 1 );\n\n\tvars = opts.variance || 'unequal';\n\tif ( vars === 'equal' ) {\n\t\tdf = nx + ny - 2;\n\t\tv = ((nx-1) * xvar) + ((ny-1) * yvar);\n\t\tv /= df;\n\t\tstderr = sqrt( v * ((1/nx) + (1/ny)) );\n\t}\n\telse if ( vars === 'unequal' ) {\n\t\tsdx = sqrt( xvar/nx );\n\t\tsdy = sqrt( yvar/ny );\n\t\tstderr = sqrt( (sdx*sdx) + (sdy*sdy) );\n\t\tv = pow( sdx, 4 ) / ( nx - 1 );\n\t\tv += pow( sdy, 4 ) / ( ny - 1 );\n\t\tdf = pow( stderr, 4 ) / v;\n\t}\n\telse {\n\t\tthrow new Error( 'Invalid option. `variance` must be either `equal` or `unequal`. Value: `' + vars + '`' );\n\t}\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\tcint = [\n\t\t\tstat - tQuantile( 1.0-(alpha/2.0), df ),\n\t\t\tstat + tQuantile( 1.0-(alpha/2.0), df )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\tcint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = tCDF( stat, df );\n\t\tcint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', ( vars === 'equal' ) ? 'Two-sample t-test' : 'Welch two-sample t-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default ttest2;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Student's t-Test.\n*\n* @module @stdlib/stats/ttest2\n*\n* @example\n* var ttest2 = require( '@stdlib/stats/ttest2' );\n* var incrspace = require( '@stdlib/math/utils/incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 7, 21, 1 );\n*\n* var out = ttest2( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\nvar ttest2 = __var_0__;\n\n\n// EXPORTS //\nexport default ttest2;\n"]}