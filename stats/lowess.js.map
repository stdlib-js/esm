{"version":3,"sources":["@stdlib/stats/lowess/lib/lowest.js","@stdlib/stats/lowess/lib/lowess.js","@stdlib/stats/lowess/lib/validate.js","@stdlib/stats/lowess/lib/main.js","@stdlib/stats/lowess/lib/index.js"],"names":["sqrt","__var_0__","abs","__var_1__","max","__var_2__","pow","__var_3__","lowest","x","y","n","i","nleft","nright","w","userw","rw","range","nrt","h1","h9","xs","ys","h","a","b","c","r","j","floor","min","__var_4__","__var_5__","ascending","lowess","f","nsteps","delta","denom","alpha","cmad","iter","last","cut","res","m1","m2","ns","c1","c9","Array","sort","hasOwnProp","isObject","isPositiveNumber","isNonNegativeInteger","isPrimitive","isNonNegativeNumber","isBoolean","validate","opts","options","TypeError","sorted","isNumberArray","primitives","isTypedArrayLike","main","err","xy","length","Error","arguments"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/sqrt';\nimport __var_1__ from '@stdlib/math/base/special/abs';\nimport __var_2__ from '@stdlib/math/base/special/max';\nimport __var_3__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sqrt = __var_0__;\nvar abs = __var_1__;\nvar max = __var_2__;\nvar pow = __var_3__;\n\n\n// MAIN //\n\n/**\n* Calculates the fitted value `ys` for a value `xs` on the horizontal axis.\n*\n* ## Method\n*\n* -   The smoothed value for the x-axis value at the current index is computed using a (robust) locally weighted regression of degree one.  The tricube weight function is used with `h` equal to the maximum of `xs - x[ nleft ]` and `x[ nright ] - xs`.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @private\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {PositiveInteger} n - number of observations\n* @param {NonNegativeInteger} i - current index\n* @param {NonNegativeInteger} nleft - index of the first point used in computing the fitted value\n* @param {NonNegativeInteger} nright - index of the last point used in computing the fitted value\n* @param {ProbabilityArray} w - weights at indices from `nleft` to `nright` to be used in the calculation of the fitted value\n* @param {boolean} userw - boolean indicating whether a robust fit is carried out using the weights in `rw`\n* @param {ProbabilityArray} rw - robustness weights\n* @returns {number} fitted value\n*/\nfunction lowest( x, y, n, i, nleft, nright, w, userw, rw ) {\n\tvar range;\n\tvar nrt;\n\tvar h1;\n\tvar h9;\n\tvar xs;\n\tvar ys;\n\tvar h;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar r;\n\tvar j;\n\n\txs = x[ i ];\n\trange = x[ n - 1 ] - x[ 0 ];\n\th = max( xs - x[ nleft ], x[ nright ] - xs );\n\th9 = 0.999 * h;\n\th1 = 0.001 * h;\n\n\t// Compute weights (pick up all ties on right):\n\ta = 0.0; // sum of weights\n\tfor ( j = nleft; j < n; j++ ) {\n\t\tw[ j ] = 0.0;\n\t\tr = abs( x[ j ] - xs );\n\t\tif ( r <= h9 ) { // small enough for non-zero weight\n\t\t\tif ( r > h1 ) {\n\t\t\t\tw[ j ] = pow( 1.0-pow( r/h, 3.0 ), 3.0 );\n\t\t\t} else {\n\t\t\t\tw[ j ] = 1.0;\n\t\t\t}\n\t\t\tif ( userw ) {\n\t\t\t\tw[ j ] *= rw[ j ];\n\t\t\t}\n\t\t\ta += w[ j ];\n\t\t}\n\t\telse if ( x[ j ] > xs ) {\n\t\t\tbreak; // get out at first zero weight on right\n\t\t}\n\t}\n\tnrt = j - 1; // rightmost point (may be greater than `nright` because of ties)\n\tif ( a <= 0.0 ) {\n\t\treturn y[ i ];\n\t}\n\n\t// Make sum of weights equal to one:\n\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\tw[ j ] /= a;\n\t}\n\n\tif ( h > 0.0 ) { // use linear fit\n\t\t// Find weighted center of x values:\n\t\ta = 0.0;\n\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\ta += w[ j ] * x[ j ];\n\t\t}\n\t\tb = xs - a;\n\t\tc = 0.0;\n\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\tc += w[ j ] * pow( x[ j ] - a, 2.0 );\n\t\t}\n\t\tif ( sqrt( c ) > 0.001 * range ) {\n\t\t\t// Points are spread out enough to compute slope:\n\t\t\tb /= c;\n\t\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\t\tw[ j ] *= ( 1.0 + ( b*(x[j]-a) ) );\n\t\t\t}\n\t\t}\n\t}\n\tys = 0.0;\n\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\tys += w[ j ] * y[ j ];\n\t}\n\treturn ys;\n}\n\n\n// EXPORTS //\nexport default lowest;\n","import __var_0__ from '@stdlib/math/base/special/floor';\nimport __var_1__ from '@stdlib/math/base/special/abs';\nimport __var_2__ from '@stdlib/math/base/special/max';\nimport __var_3__ from '@stdlib/math/base/special/min';\nimport __var_4__ from '@stdlib/math/base/special/pow';\nimport __var_5__ from './lowest.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\nvar abs = __var_1__;\nvar max = __var_2__;\nvar min = __var_3__;\nvar pow = __var_4__;\nvar lowest = __var_5__;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* ## Method\n*\n* -   Calculates fitted values using a nearest neighbor function and robust locally weighted regression of degree one with the tricube weight function.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @private\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {PositiveInteger} n - number of observations\n* @param {PositiveNumber} f - smoother span (proportion of points which influence smoothing at each value)\n* @param {NonNegativeInteger} nsteps - number of iterations in the robust fit\n* @param {PositiveNumber} delta - nonnegative parameter which may be used to reduce the number of computations\n* @returns {Object} sorted x-values and fitted values\n*/\nfunction lowess( x, y, n, f, nsteps, delta ) {\n\tvar nright;\n\tvar denom;\n\tvar nleft;\n\tvar alpha;\n\tvar cmad;\n\tvar iter;\n\tvar last;\n\tvar cut;\n\tvar res;\n\tvar m1;\n\tvar m2;\n\tvar ns;\n\tvar c1;\n\tvar c9;\n\tvar d1;\n\tvar d2;\n\tvar rw;\n\tvar ys;\n\tvar i;\n\tvar j;\n\tvar r;\n\n\tif ( n < 2 ) {\n\t\treturn y;\n\t}\n\tys = new Array( n );\n\tres = new Array( n );\n\trw = new Array( n );\n\n\t// Use at least two and at most n points:\n\tns = max( min( floor( f * n ), n ), 2 );\n\n\t// Robustness iterations:\n\tfor ( iter = 1; iter <= nsteps + 1; iter++ ) {\n\t\tnleft = 0;\n\t\tnright = ns - 1;\n\t\tlast = -1; // index of previously estimated point\n\t\ti = 0; // index of current point\n\t\tdo {\n\t\t\twhile ( nright < n - 1 ) {\n\t\t\t\t// Move nleft, nright to the right if radius decreases:\n\t\t\t\td1 = x[ i ] - x[ nleft ];\n\t\t\t\td2 = x[ nright + 1 ] - x[ i ];\n\n\t\t\t\t// If d1 <= d2 with x[nright+1] == x[nright], lowest fixes:\n\t\t\t\tif ( d1 <= d2 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Radius will not decrease by a move to the right...\n\t\t\t\tnleft += 1;\n\t\t\t\tnright += 1;\n\t\t\t}\n\t\t\t// Fitted value at x[ i ]:\n\t\t\tys[ i ] = lowest( x, y, n, i, nleft, nright, res, (iter > 1), rw );\n\n\t\t\tif ( last < i - 1 ) {\n\t\t\t\tdenom = x[ i ] - x[ last ];\n\t\t\t\tfor ( j = last + 1; j < i; j++ ) {\n\t\t\t\t\talpha = ( x[ j ] - x[ last ] ) / denom;\n\t\t\t\t\tys[ j ] = ( alpha*ys[ i ] ) + ( (1.0-alpha) * ys[ last ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tlast = i;\n\t\t\tcut = x[ last ] + delta;\n\t\t\tfor ( i = last + 1; i < n; i++ ) {\n\t\t\t\tif ( x[ i ] > cut ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( x[ i ] === x[ last ] ) {\n\t\t\t\t\tys[ i ] = ys[ last ];\n\t\t\t\t\tlast = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = max( last + 1, i - 1 );\n\t\t} while ( last < n - 1 );\n\n\t\t// Calculate Residuals:\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tres[ i ] = y[ i ] - ys[ i ];\n\t\t}\n\t\tif ( iter > nsteps ) {\n\t\t\tbreak; // Compute robustness weights except last time...\n\t\t}\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\trw[i] = abs( res[i] );\n\t\t}\n\t\trw.sort( ascending );\n\t\tm1 = floor( n / 2.0 );\n\t\tm2 = n - m1 - 1.0;\n\t\tcmad = 3.0 * ( rw[m1] + rw[m2] );\n\t\tc9 = 0.999 * cmad;\n\t\tc1 = 0.001 * cmad;\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tr = abs( res[i] );\n\t\t\tif ( r <= c1 ) {\n\t\t\t\trw[ i ] = 1.0; // near 0, avoid underflow\n\t\t\t}\n\t\t\telse if ( r > c9 ) {\n\t\t\t\trw[ i ] = 0.0;  // near 1, avoid underflow\n\t\t\t}\n\t\t\telse {\n\t\t\t\trw[ i ] = pow( 1.0 - pow( r / cmad, 2.0 ), 2.0 );\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\t'x': x,\n\t\t'y': ys\n\t};\n}\n\n\n// EXPORTS //\nexport default lowess;\n","import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-positive-number';\nimport __var_3__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_4__ from '@stdlib/assert/is-nonnegative-number';\nimport __var_5__ from '@stdlib/assert/is-boolean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isObject = __var_1__;\nvar isPositiveNumber = __var_2__;\nvar isNonNegativeInteger = __var_3__.isPrimitive;\nvar isNonNegativeNumber = __var_4__.isPrimitive;\nvar isBoolean = __var_5__.isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {Probability} [options.f] - smoother span (proportion of points which influence smoothing at each value)\n* @param {NonNegativeInteger} [options.nsteps] - number of iterations in the robust fit\n* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to save computations\n* @param {boolean} [options.sorted] - boolean indicating if the input array is in sorted order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'f': 0.75,\n*     'nsteps': 6,\n*     'delta': 0.03,\n*     'sorted': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'f' ) ) {\n\t\topts.f = options.f;\n\t\tif ( !isPositiveNumber( opts.f ) ) {\n\t\t\treturn new TypeError( 'invalid option. `f` option must be a positive number. Option: `' + opts.f + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'nsteps' ) ) {\n\t\topts.nsteps = options.nsteps;\n\t\tif ( !isNonNegativeInteger( opts.nsteps ) ) {\n\t\t\treturn new TypeError( 'invalid option. `nsteps` option must be a nonnegative integer. Option: `' + opts.nsteps + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'delta' ) ) {\n\t\topts.delta = options.delta;\n\t\tif ( !isNonNegativeNumber( opts.delta ) ) {\n\t\t\treturn new TypeError( 'invalid option. `delta` option must be a nonnegative number. Option: `' + opts.delta + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sorted` option must be a boolean primitive. Option: `' + opts.sorted + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/stats/base/range';\nimport __var_3__ from './lowess.js';\nimport __var_4__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar range = __var_2__;\nvar lowess = __var_3__;\nvar validate = __var_4__;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort (x,y)-pairs in ascending order by the first coordinate.\n*\n* @private\n* @param {Array} a - first pair\n* @param {Array} b - second pair\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a[ 0 ] - b[ 0 ];\n}\n\n\n// MAIN //\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.f=2/3] - smoother span (proportion of points which influence smoothing at each value)\n* @param {integer} [options.nsteps=3] - number of iterations in the robust fit (fewer iterations translates to faster function execution)\n* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to reduce the number of computations\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array `x` is already in sorted order\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {Error} arguments `x` and `y` must have the same length\n* @returns {Object} ordered x-values and fitted values\n*/\nfunction main( x, y, options ) {\n\tvar nsteps;\n\tvar delta;\n\tvar opts;\n\tvar err;\n\tvar xy;\n\tvar f;\n\tvar i;\n\tvar n;\n\tvar r;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t}\n\tn = x.length;\n\tif ( y.length !== n ) {\n\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must have the same length.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\t// Copy to prevent mutation and sort by x:\n\t\txy = new Array( n );\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\txy[ i ] = [ x[ i ], y[ i ] ];\n\t\t}\n\t\txy.sort( ascending ); // TODO: Revisit once we have function for sorting multiple arrays by the elements of one of the arrays\n\t\tx = new Array( n );\n\t\ty = new Array( n );\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tx[ i ] = xy[ i ][ 0 ];\n\t\t\ty[ i ] = xy[ i ][ 1 ];\n\t\t}\n\t}\n\tif ( opts.nsteps === void 0 ) {\n\t\tnsteps = 3;\n\t} else {\n\t\tnsteps = opts.nsteps;\n\t}\n\tif ( opts.f === void 0 ) {\n\t\tf = 2.0/3.0;\n\t} else {\n\t\tf = opts.f;\n\t}\n\tif ( opts.delta === void 0 ) {\n\t\tr = range( n, x, 1 );\n\t\tdelta = 0.01 * r;\n\t} else {\n\t\tdelta = opts.delta;\n\t}\n\treturn lowess( x, y, n, f, nsteps, delta );\n}\n\n\n// EXPORTS //\nexport default main;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* @module @stdlib/stats/lowess\n*\n* @example\n* var lowess = require( '@stdlib/stats/lowess' );\n*\n* var x = [\n*     4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14,\n*     14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20,\n*     20, 20, 20, 20, 22, 23, 24, 24, 24, 24, 25\n* ];\n* var y = [\n*     2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34, 34, 46,\n*     26, 36, 60, 80, 20, 26, 54, 32, 40, 32, 40, 50, 42, 56, 76, 84, 36, 46, 68,\n*     32, 48, 52, 56, 64, 66, 54, 70, 92, 93, 120, 85\n* ];\n*\n* var out = lowess( x, y );\n* /* returns\n*     {\n*         'x': [\n*             4,\n*             4,\n*             7,\n*             7,\n*             ...,\n*             24,\n*             24,\n*             24,\n*             25\n*         ],\n*         'y': [\n*             ~4.857,\n*             ~4.857,\n*             ~13.1037,\n*             ~13.1037,\n*             ...,\n*             ~79.102,\n*             ~79.102,\n*             ~79.102,\n*             ~84.825\n*         ]\n*     }\n* *\\/\n*/\n\n// MODULES //\nvar lowess = __var_0__;\n\n\n// EXPORTS //\nexport default lowess;\n"]}