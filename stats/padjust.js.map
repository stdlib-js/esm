{"version":3,"sources":["@stdlib/stats/padjust/lib/bonferroni.js","@stdlib/stats/padjust/lib/order.js","@stdlib/stats/padjust/lib/hommel.js","@stdlib/stats/padjust/lib/holm.js","@stdlib/stats/padjust/lib/bh.js","@stdlib/stats/padjust/lib/by.js","@stdlib/stats/padjust/lib/main.js","@stdlib/stats/padjust/lib/index.js"],"names":["bonferroni","pvalues","comparisons","pval","i","length","Int32Array","__var_0__","ascending","a","b","descending","order","x","invert","comparator","arr","sort","min","max","__var_1__","Float64Array","__var_2__","PINF","__var_3__","__var_4__","slice","Array","prototype","hommel","indices","diff","adj","idx","len","out","mq","j","k","q","v","call","push","cumax","holm","sorted","cumin","bh","by","isProbabilityArray","isInteger","isPrimitive","isString","__var_5__","__var_6__","__var_7__","METHODS","padjust","pvals","method","TypeError","arguments","RangeError","Error","join"],"mappings":"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","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Bonferroni method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction bonferroni( pvalues, comparisons ) {\n\tvar pval;\n\tvar i;\n\tfor ( i = 0; i < pvalues.length; i++ ) {\n\t\tpval = pvalues[ i ];\n\t\tpvalues[ i ] = ( comparisons * pval > 1 ) ? 1 : comparisons * pval;\n\t}\n\treturn pvalues;\n}\n\n\n// EXPORTS //\nexport default bonferroni;\n","import __var_0__ from '@stdlib/array/int32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Int32Array = __var_0__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction ascending( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a > b ) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction descending( a, b ) {\n\tif ( a < b ) {\n\t\treturn 1;\n\t}\n\tif ( a > b ) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\n\n// MAIN //\n\n/**\n* Returns a permutation which rearranges input array.\n*\n* @private\n* @param {ArrayLike} x - input array-like object\n* @param {boolean} invert - controls whether to permutation that sorts input array in descending order\n* @returns {Array} permutation array\n*/\nfunction order( x, invert ) {\n\tvar comparator;\n\tvar arr;\n\tvar i;\n\n\tcomparator = ( invert ) ? descending : ascending;\n\tarr = new Int32Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tarr[ i ] = i;\n\t}\n\treturn arr.sort( compare );\n\n\t/**\n\t* Compare the elements of the input array.\n\t*\n\t* @private\n\t* @param {number} a - first number\n\t* @param {number} b - second number\n\t* @returns {boolean} comparison result\n\t*/\n\tfunction compare( a, b ) {\n\t\treturn comparator( x[a], x[b] );\n\t}\n}\n\n\n// EXPORTS //\nexport default order;\n","import __var_0__ from '@stdlib/math/base/special/min';\nimport __var_1__ from '@stdlib/math/base/special/max';\nimport __var_2__ from '@stdlib/array/float64';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\nimport __var_4__ from './order.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar min = __var_0__;\nvar max = __var_1__;\nvar Float64Array = __var_2__;\nvar PINF = __var_3__;\nvar order = __var_4__;\n\n\n// VARIABLES //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via Hommel's method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction hommel( pvalues, comparisons ) {\n\tvar indices;\n\tvar diff;\n\tvar adj;\n\tvar idx;\n\tvar len;\n\tvar out;\n\tvar mq;\n\tvar m;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar q;\n\tvar v;\n\n\tlen = pvalues.length;\n\tdiff = comparisons - len;\n\tif ( diff > 0 ) {\n\t\tpvalues = slice.call( pvalues );\n\t\twhile ( diff > 0 ) {\n\t\t\tpvalues.push( 1.0 );\n\t\t\tdiff -= 1;\n\t\t}\n\t}\n\tindices = order( pvalues );\n\tm = PINF;\n\tfor ( i = 0; i < comparisons; i++ ) {\n\t\tv = comparisons * pvalues[ i ] / ( i+1 );\n\t\tif ( v < m ) {\n\t\t\tm = v;\n\t\t}\n\t}\n\tq = new Float64Array( comparisons );\n\tadj = new Float64Array( comparisons );\n\tfor ( i = comparisons - 1; i > 1; i-- ) {\n\t\tmq = PINF;\n\t\tfor ( k = comparisons - i + 1; k <= comparisons; k++ ) {\n\t\t\tv = i * pvalues[ indices[ k ] ] / ( 2 + k - comparisons + i - 1 );\n\t\t\tif ( v < mq ) {\n\t\t\t\tmq = v;\n\t\t\t}\n\t\t}\n\t\tfor ( j = 0; j < comparisons - i + 1; j++ ) {\n\t\t\tq[ j ] = min( i * pvalues[ indices[ j ] ], mq );\n\t\t}\n\t\tfor ( k = comparisons - i + 1; k <= comparisons; k++ ) {\n\t\t\tq[ k ] = q[ comparisons - i ];\n\t\t}\n\t\tfor ( j = 0; j < adj.length; j++ ) {\n\t\t\tadj[ j ] = max( q[ j ], adj[ j ] );\n\t\t}\n\t}\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tidx = indices[ i ];\n\t\tv = max( adj[ i ], pvalues[ idx ] );\n\t\tout[ idx ] = v;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default hommel;\n","import __var_0__ from '@stdlib/math/base/special/min';\nimport __var_1__ from '@stdlib/stats/base/cumax';\nimport __var_2__ from '@stdlib/array/float64';\nimport __var_3__ from './order.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar min = __var_0__;\nvar cumax = __var_1__;\nvar Float64Array = __var_2__;\nvar order = __var_3__;\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Bonferroni–Holm method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction holm( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues );\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = ( comparisons - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumax( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default holm;\n","import __var_0__ from '@stdlib/math/base/special/min';\nimport __var_1__ from '@stdlib/stats/base/cumin';\nimport __var_2__ from '@stdlib/array/float64';\nimport __var_3__ from './order.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar min = __var_0__;\nvar cumin = __var_1__;\nvar Float64Array = __var_2__;\nvar order = __var_3__;\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Benjamini-Hochberg procedure.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction bh( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues, true );\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = comparisons / ( len - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumin( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default bh;\n","import __var_0__ from '@stdlib/math/base/special/min';\nimport __var_1__ from '@stdlib/stats/base/cumin';\nimport __var_2__ from '@stdlib/array/float64';\nimport __var_3__ from './order.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar min = __var_0__;\nvar cumin = __var_1__;\nvar Float64Array = __var_2__;\nvar order = __var_3__;\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Benjamini & Yekutieli method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction by( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\tvar q;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues, true );\n\tq = 0;\n\tfor ( i = 0; i < comparisons; i++ ) {\n\t\tq += 1 / ( 1 + i );\n\t}\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = q * comparisons / ( len - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumin( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default by;\n","import __var_0__ from '@stdlib/assert/is-probability-array';\nimport __var_1__ from '@stdlib/assert/is-integer';\nimport __var_2__ from '@stdlib/assert/is-string';\nimport __var_3__ from './bonferroni.js';\nimport __var_4__ from './hommel.js';\nimport __var_5__ from './holm.js';\nimport __var_6__ from './bh.js';\nimport __var_7__ from './by.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isProbabilityArray = __var_0__;\nvar isInteger = __var_1__.isPrimitive;\nvar isString = __var_2__.isPrimitive;\nvar bonferroni = __var_3__;\nvar hommel = __var_4__;\nvar holm = __var_5__;\nvar bh = __var_6__;\nvar by = __var_7__;\n\n\n// VARIABLES //\n\nvar METHODS = [ 'bh', 'bonferroni', 'by', 'holm', 'hommel' ];\n\n\n// MAIN //\n\n/**\n* Adjusts supplied p-values for multiple comparisons via a specified method.\n*\n* @param {ProbabilityArray} pvals - p-values to be adjusted\n* @param {string} method - correction method\n* @param {PositiveInteger} [comparisons=pvals.length] - number of comparisons\n* @throws {TypeError} first argument has to be an array-like object\n* @throws {TypeError} second argument must be a string primitive\n* @throws {Error} second argument must be `bh`, `bonferroni`, `by`, `holm`, or `hommel`\n* @throws {RangeError} comparisons must be greater or equal to the number of elements in `pvals`\n* @returns {ProbabilityArray} array containing the corrected p-values\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bonferroni' );\n* // returns [ 0.04, 0.15, ..., 1, 1 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'by' );\n* // returns [ ~0.091, ~0.171, ..., 1, ~0.571 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bh' );\n* // returns [ 0.04, 0.075, ..., 0.6, 0.25 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'holm' );\n* // returns [ 0.04, 0.12, ..., 0.6, 0.4 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'hommel' );\n* // returns [ 0.032, 0.12, ..., 0.6, 0.4 ]\n*/\nfunction padjust( pvals, method, comparisons ) {\n\tif ( !isProbabilityArray( pvals ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array of probabilities. Value: `' + pvals + '`.' );\n\t}\n\tif ( !isString( method ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a string primitive. Value: `' + method + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isInteger( comparisons ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. `comparisons` must be an integer. Value: `' + comparisons + '`.' );\n\t\t}\n\t\tif ( comparisons < pvals.length ) {\n\t\t\tthrow new RangeError( 'invalid argument. When specified, `comparisons` arguments must have at least a length of '+pvals.length+'. Value: `' + comparisons + '`.' );\n\t\t}\n\t}\n\tcomparisons = comparisons || pvals.length;\n\tswitch ( method ) {\n\tcase 'bonferroni':\n\t\treturn bonferroni( pvals, comparisons );\n\tcase 'by':\n\t\treturn by( pvals, comparisons );\n\tcase 'bh':\n\t\treturn bh( pvals, comparisons );\n\tcase 'holm':\n\t\treturn holm( pvals, comparisons );\n\tcase 'hommel':\n\t\treturn hommel( pvals, comparisons );\n\tdefault:\n\t\tthrow new Error( 'invalid argument. Second argument must be one of '+METHODS.join( ', ' )+' Value: `' + method + '`.' );\n\t}\n}\n\n\n// EXPORTS //\nexport default padjust;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Adjust supplied p-values for multiple comparisons via a specified method.\n*\n* @module @stdlib/stats/padjust\n*\n* @example\n* var padjust = require( '@stdlib/stats/padjust' );\n*\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bh' );\n* // returns [ 0.04, 0.075, ~0.205, 0.6, 0.25 ]\n*/\n\n// MODULES //\nvar padjust = __var_0__;\n\n\n// EXPORTS //\nexport default padjust;\n"]}