{"version":3,"sources":["@stdlib/stats/wilcoxon/lib/validate.js","@stdlib/stats/wilcoxon/lib/unique.js","@stdlib/stats/wilcoxon/lib/print.js","@stdlib/stats/wilcoxon/lib/main.js","@stdlib/stats/wilcoxon/lib/index.js"],"names":["contains","__var_0__","isBoolean","__var_1__","isPrimitive","isNumber","__var_2__","isObject","__var_3__","isString","__var_4__","isnan","__var_5__","hasOwnProp","__var_6__","ALTERNATIVE_VALUES","ZERO_METHOD_VALUES","validate","opts","options","TypeError","alpha","RangeError","alternative","Error","join","correction","exact","mu","zeroMethod","ascending","a","b","unique","arr","len","val","i","j","slice","sort","length","isPositiveInteger","roundn","print","decision","dgts","str","arguments","digits","this","method","nullValue","pValue","statistic","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","ranks","normalCDF","factory","signrankCDF","tabulate","__var_7__","signum","__var_8__","sqrt","__var_9__","abs","__var_10__","Float64Array","__var_11__","__var_12__","__var_13__","__var_14__","pnorm","wilcoxon","hasTies","counts","repsum","rplus","nzero","rzero","pval","stat","alt","err","tmp","out","ad","mn","se","d","r","T","v","x","y","push"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/contains';\nimport __var_1__ from '@stdlib/assert/is-boolean';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/assert/is-string';\nimport __var_5__ from '@stdlib/assert/is-nan';\nimport __var_6__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar contains = __var_0__;\nvar isBoolean = __var_1__.isPrimitive;\nvar isNumber = __var_2__.isPrimitive;\nvar isObject = __var_3__;\nvar isString = __var_4__.isPrimitive;\nvar isnan = __var_5__;\nvar hasOwnProp = __var_6__;\n\n\n// VARIABLES //\n\nvar ALTERNATIVE_VALUES = [ 'two-sided', 'less', 'greater' ];\nvar ZERO_METHOD_VALUES = [ 'pratt', 'wilcox', 'zsplit' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {boolean} [options.exact] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {boolean} [options.correction] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {string} [options.zeroMethod] - method governing how zero-differences are handled (`pratt`, `wilcox` or `zsplit`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE_VALUES, opts.alternative ) ) {\n\t\t\treturn new Error( 'invalid option. `alternative` option must be one of '+ALTERNATIVE_VALUES.join( ', ' )+'. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correction' ) ) {\n\t\topts.correction = options.correction;\n\t\tif ( !isBoolean( opts.correction ) || isnan( opts.correction ) ) {\n\t\t\treturn new TypeError( 'invalid option. `correction` option must be a boolean primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'exact' ) ) {\n\t\topts.exact = options.exact;\n\t\tif (\n\t\t\t!isBoolean( opts.exact ) ||\n\t\t\tisnan( opts.exact )\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `exact` option must be a boolean primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( 'invalid option. `mu` option must be a number primitive. Option: `' + opts.mu + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'zeroMethod' ) ) {\n\t\topts.zeroMethod = options.zeroMethod;\n\t\tif ( !isString( opts.zeroMethod ) ) {\n\t\t\treturn new TypeError( 'invalid option. `zeroMethod` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t\tif ( !contains( ZERO_METHOD_VALUES, opts.zeroMethod ) ) {\n\t\t\treturn new Error( 'invalid option. `zeroMethod` option must be one of '+ZERO_METHOD_VALUES.join( ', ' )+'. Option: `' + opts.zeroMethod + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\nexport default unique;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired Wilcoxon signed rank test' ) {\n\t\tstr += 'Median of the difference `x - y` is ';\n\t} else {\n\t\tstr += 'Median of `x` is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/assert/is-plain-object';\nimport __var_4__ from '@stdlib/stats/ranks';\nimport __var_5__ from '@stdlib/stats/base/dists/normal/cdf';\nimport __var_6__ from '@stdlib/stats/base/dists/signrank/cdf';\nimport __var_7__ from '@stdlib/utils/tabulate';\nimport __var_8__ from '@stdlib/math/base/special/signum';\nimport __var_9__ from '@stdlib/math/base/special/sqrt';\nimport __var_10__ from '@stdlib/math/base/special/abs';\nimport __var_11__ from '@stdlib/array/float64';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './unique.js';\nimport __var_14__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/* eslint-disable max-statements, max-lines-per-function */\n\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar setReadOnly = __var_2__;\nvar isObject = __var_3__;\nvar ranks = __var_4__;\nvar normalCDF = __var_5__.factory;\nvar signrankCDF = __var_6__;\nvar tabulate = __var_7__;\nvar signum = __var_8__;\nvar sqrt = __var_9__;\nvar abs = __var_10__;\nvar Float64Array = __var_11__;\nvar validate = __var_12__;\nvar unique = __var_13__;\nvar print = __var_14__;\n\n\n// VARIABLES //\n\nvar pnorm = normalCDF( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Wilcoxon signed rank test.\n*\n* @param {NumericArray} x - data array\n* @param {NumericArray} [y] - optional paired data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {string} [options.zeroMethod='wilcox'] - method governing how zero-differences are handled (`pratt`, `wilcox`, or `zsplit`)\n* @param {boolean} [options.correction=true] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {boolean} [options.exact=false] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {number} [options.mu=0] - location parameter under H0\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `y` must be a numeric array\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} `alpha` option has to be a number primitive\n* @throws {RangeError} `alpha` option has to be a number in the interval `[0,1]`\n* @throws {TypeError} `alternative` option has to be a string primitive\n* @throws {Error} `alternative` option must be `two-sided`, `less`, or `greater`\n* @throws {TypeError} `zeroMethod` option has to be a string primitive\n* @throws {Error} `zeroMethod` option must be `pratt`, `wilcox`, or `zsplit`\n* @throws {TypeError} `correction` option has to be a boolean primitive\n* @throws {TypeError} `exact` option has to be a boolean primitive\n* @throws {TypeError} `mu` option has to be a number primitive\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'mu': 2\n* });\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'alternative': 'greater'\n* });\n*/\nfunction wilcoxon() {\n\tvar correction;\n\tvar zeroMethod;\n\tvar options;\n\tvar hasTies;\n\tvar counts;\n\tvar repsum;\n\tvar rplus;\n\tvar nzero;\n\tvar rzero;\n\tvar alpha;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar len;\n\tvar tmp;\n\tvar out;\n\tvar ad;\n\tvar mu;\n\tvar mn;\n\tvar se;\n\tvar d;\n\tvar i;\n\tvar r;\n\tvar T;\n\tvar v;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tlen = x.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\toptions = arguments[ 1 ];\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. `y` argument must be a numeric array. Value: `' + y + '`.' );\n\t\t\t}\n\t\t\tif ( len !== y.length ) {\n\t\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same length.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 2 ) {\n\t\t\t\toptions = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.correction === void 0 ) {\n\t\tcorrection = true;\n\t} else {\n\t\tcorrection = opts.correction;\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( 'invalid argument. First argument must contain at least two elements. Value: `' + x + '`' );\n\t}\n\talt = opts.alternative || 'two-sided';\n\tzeroMethod = opts.zeroMethod || 'wilcox';\n\n\tif ( zeroMethod === 'wilcox' ) {\n\t\t// Only keep all non-zero differences:\n\t\td = [];\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( v !== 0 ) {\n\t\t\t\t\td.push( v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( x[ i ] !== 0 ) {\n\t\t\t\t\td.push( x[ i ] - mu );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnzero = x.length - d.length;\n\t} else {\n\t\td = new Float64Array( len );\n\t\tnzero = 0;\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = x[ i ] - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( nzero === len ) {\n\t\tthrow new Error( '`x` or `x - y` cannot be zero for all elements.' );\n\t}\n\t// Update length after potentially discarding zero values:\n\tlen = d.length;\n\tad = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tad[ i ] = abs( d[ i ] );\n\t}\n\tr = ranks( ad );\n\trplus = 0;\n\trzero = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( d[ i ] > 0 ) {\n\t\t\trplus += r[ i ];\n\t\t}\n\t\telse if ( d[ i ] === 0 ) {\n\t\t\trzero += r[ i ];\n\t\t}\n\t}\n\thasTies = unique( r ).length !== r.length;\n\tif ( zeroMethod === 'zsplit' ) {\n\t\trplus += rzero / 2.0;\n\t}\n\tT = rplus;\n\tmn = len * ( len + 1.0 ) * 0.25;\n\tse = len * ( len + 1.0 ) * ( ( 2.0 * len ) + 1.0 );\n\n\tif ( zeroMethod === 'pratt' ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( d[ i ] !== 0 ) {\n\t\t\t\ttmp.push( r[ i ] );\n\t\t\t}\n\t\t}\n\t\tr = tmp;\n\t\tmn -= nzero * ( nzero + 1.0 ) * 0.25;\n\t\tse -= nzero * ( nzero + 1.0 ) * ( ( 2.0 * nzero ) + 1.0 );\n\t}\n\tcounts = tabulate( r );\n\trepsum = 0;\n\tfor ( i = 0; i < counts.length; i++ ) {\n\t\tif ( counts[ i ][ 1 ] > 1 ) {\n\t\t\tv = counts[ i ][ 1 ];\n\t\t\trepsum += v * ( (v*v) - 1 );\n\t\t}\n\t}\n\tif ( repsum > 0 ) {\n\t\t// Correction for repeated values:\n\t\tse -= 0.5 * repsum;\n\t}\n\tse = sqrt( se / 24.0 );\n\n\tif (\n\t\t( len > 50 && !opts.exact ) ||\n\t\tnzero > 0 ||\n\t\thasTies\n\t) {\n\t\td = 0.0;\n\t\tif ( correction ) {\n\t\t\tswitch ( alt ) {\n\t\t\tcase 'two-sided':\n\t\t\t\td = 0.5 * signum( T - mn );\n\t\t\t\tbreak;\n\t\t\tcase 'less':\n\t\t\t\td = -0.5;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\td = 0.5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Compute test statistic and p-value using normal approximation:\n\t\tstat = ( T - mn - d ) / se;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tpval = 2.0 * ( 1.0 - pnorm( abs( stat ) ) );\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - pnorm( stat );\n\t\t} else {\n\t\t\tpval = pnorm( stat );\n\t\t}\n\t} else {\n\t\t// Compute test statistic and p-value using exact critical values:\n\t\tstat = T;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tif ( stat > ( len * ( len+1 ) / 4 ) ) {\n\t\t\t\tpval = 2.0 * ( 1 - signrankCDF( stat - 1, len ) );\n\t\t\t} else {\n\t\t\t\tpval = 2.0 * signrankCDF( stat, len );\n\t\t\t}\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - signrankCDF( stat - 1, len );\n\t\t} else {\n\t\t\tpval = signrankCDF( stat, len );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', T );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', ( ( y ) ? 'Paired' : 'One-Sample' ) + ' Wilcoxon signed rank test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default wilcoxon;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Wilcoxon signed-rank test.\n*\n* @module @stdlib/stats/wilcoxon\n*\n* @example\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n* var wilcoxon = require( '@stdlib/stats/wilcoxon' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample Wilcoxon signed rank test:\n* x = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = wilcoxon( x );\n*\n* // Paired Wilcoxon signed rank test:\n* x = new Array( 100 );\n* y = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = wilcoxon( x, y );\n*/\n\n// MODULES //\nvar wilcoxon = __var_0__;\n\n\n// EXPORTS //\nexport default wilcoxon;\n"]}