{"version":3,"sources":["@stdlib/stats/pcorrtest/lib/print.js","@stdlib/stats/pcorrtest/lib/pcorr.js","@stdlib/stats/pcorrtest/lib/validate.js","@stdlib/stats/pcorrtest/lib/main.js","@stdlib/stats/pcorrtest/lib/index.js"],"names":["isPositiveInteger","__var_0__","isObject","__var_1__","isBoolean","__var_2__","isPrimitive","hasOwnProp","__var_3__","roundn","__var_4__","print","opts","decision","dgts","str","arguments","length","TypeError","digits","this","method","alternative","nullValue","pValue","statistic","alpha","ci","rejected","max","min","sqrt","variance","mean","pcorr","x","y","denom","num","xy","xm","ym","i","n","isNumber","isnan","indexOf","validate","options","join","rho","isNumberArray","primitives","isTypedArrayLike","setReadOnly","quantileFactory","factory","cdfFactory","atanh","__var_5__","tanh","__var_6__","tCDF","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","normQuantile","normCDF","pcorrTest","cint","pval","stat","alt","err","out","val","df","se","r","z","Error","pcorrtest"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/math/base/special/max';\nimport __var_1__ from '@stdlib/math/base/special/min';\nimport __var_2__ from '@stdlib/math/base/special/sqrt';\nimport __var_3__ from '@stdlib/stats/base/variance';\nimport __var_4__ from '@stdlib/stats/base/mean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar max = __var_0__;\nvar min = __var_1__;\nvar sqrt = __var_2__;\nvar variance = __var_3__;\nvar mean = __var_4__;\n\n\n// MAIN //\n\n/**\n* Computes the Pearson product-moment correlation coefficient between `x` and `y`.\n*\n* @private\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @returns {number} correlation coefficient\n*\n* @example\n* var x = [ 1.0, 2.0, 2.0, 1.0 ];\n* var y = [ 1.8, 2.2, 2.5, 1.4 ];\n* var r = pcorr( x, y );\n* // returns ~0.905\n*/\nfunction pcorr( x, y ) {\n\tvar denom;\n\tvar num;\n\tvar out;\n\tvar xy;\n\tvar xm;\n\tvar ym;\n\tvar i;\n\tvar n;\n\n\tn = x.length;\n\txm = mean( n, x, 1 );\n\tym = mean( n, y, 1 );\n\txy = 0.0;\n\tfor ( i = 0; i < n; i++ ) {\n\t\txy += x[ i ] * y[ i ];\n\t}\n\tnum = xy - ( n * xm * ym );\n\tdenom = ( n-1 ) * sqrt(variance(n, 1, x, 1)) * sqrt(variance(n, 1, y, 1) );\n\tout = num / denom;\n\n\t// Handle rounding errors:\n\treturn max( min( out, 1.0 ), -1.0 );\n}\n\n\n// EXPORTS //\nexport default pcorr;\n","import __var_0__ from '@stdlib/assert/is-number';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-nan';\nimport __var_3__ from '@stdlib/utils/index-of';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumber = __var_0__.isPrimitive;\nvar isObject = __var_1__;\nvar isnan = __var_2__;\nvar indexOf = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// VARIABLES //\n\nvar alternative = [ 'two-sided', 'less', 'greater' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho] - correlation coefficient unter HO\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'rho': 0.8\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif (\n\t\t\t!isNumber( opts.alpha ) ||\n\t\t\tisnan( opts.alpha ) ||\n\t\t\topts.alpha < 0.0 ||\n\t\t\topts.alpha > 1.0\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number in `[0,1]`. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( indexOf( alternative, opts.alternative ) === -1 ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be one of the following: \"' + alternative.join( '\", \"' ) + '\". Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'rho' ) ) {\n\t\topts.rho = options.rho;\n\t\tif (\n\t\t\t!isNumber( opts.rho ) ||\n\t\t\tisnan( opts.rho ) ||\n\t\t\topts.rho < -1.0 ||\n\t\t\topts.rho > 1.0\n\t\t) {\n\t\t\treturn new TypeError( 'invalid option. `rho` option must be a number in [-1,1]. Option: `' + opts.rho + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/stats/base/dists/normal/quantile';\nimport __var_4__ from '@stdlib/stats/base/dists/normal/cdf';\nimport __var_5__ from '@stdlib/math/base/special/atanh';\nimport __var_6__ from '@stdlib/math/base/special/tanh';\nimport __var_7__ from '@stdlib/stats/base/dists/t/cdf';\nimport __var_8__ from '@stdlib/math/base/special/sqrt';\nimport __var_9__ from '@stdlib/math/base/special/min';\nimport __var_10__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\nimport __var_11__ from './pcorr.js';\nimport __var_12__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar setReadOnly = __var_2__;\nvar quantileFactory = __var_3__.factory;\nvar cdfFactory = __var_4__.factory;\nvar atanh = __var_5__;\nvar tanh = __var_6__;\nvar tCDF = __var_7__;\nvar sqrt = __var_8__;\nvar min = __var_9__;\nvar print = __var_10__;\nvar pcorr = __var_11__;\nvar validate = __var_12__;\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Pearson product-moment correlation test between paired samples.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho=0.0] - correlation under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {Error} x and y must be arrays of the same length\n* @throws {Error} x and y must contain at least four elements\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 2, 4, 3, 1, 2, 3 ];\n* var y = [ 3, 2, 4, 1, 2, 4 ];\n* var out = pcorrTest( x, y );\n*/\nfunction pcorrTest( x, y, options ) {\n\tvar method;\n\tvar alpha;\n\tvar cint;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar rho;\n\tvar val;\n\tvar df;\n\tvar se;\n\tvar n;\n\tvar r;\n\tvar z;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument `y` must be a numeric array. Value: `' + y + '`.' );\n\t}\n\tn = x.length;\n\tif ( n !== y.length ) {\n\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must be arrays of the same length' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( n < 4 ) {\n\t\tthrow new Error( 'not enough observations. `x` and `y` must contain at least four observations.' );\n\t}\n\tif ( opts.rho === void 0 ) {\n\t\trho = 0.0;\n\t} else {\n\t\trho = opts.rho;\n\t}\n\tif ( opts.alternative === void 0 ) {\n\t\talt = 'two-sided';\n\t} else {\n\t\talt = opts.alternative;\n\t}\n\n\tr = pcorr( x, y );\n\tz = atanh( r );\n\tse = 1.0 / sqrt( n - 3 );\n\tif ( rho === 0.0 ) {\n\t\t// Use t-test for H0: rho = 0.0 vs H1: rho != 0.0...\n\t\tmethod = 't-test for Pearson correlation coefficient';\n\t\tdf = n - 2;\n\t\tstat = sqrt( df ) * r / sqrt( 1.0 - (r*r) );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = 1.0 - tCDF( stat, df );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = tCDF( stat, df);\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( tCDF( stat, df), 1.0 - tCDF( stat, df ));\n\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t// Use large-sample normality to calculate p-value based on Fisher's z transform...\n\t\tmethod = 'Fisher\\'s z transform test for Pearson correlation coefficient';\n\t\tstat = ( z - atanh( rho ) ) * sqrt( n - 3 );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = 1.0 - normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( normCDF( -stat ), 1.0 - normCDF( -stat ));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch ( alt ) {\n\tcase 'greater':\n\t\tcint = [ tanh( z - ( se*normQuantile( 1.0 - alpha ) ) ), 1.0 ];\n\t\tbreak;\n\tcase 'less':\n\t\tcint = [ -1.0, tanh( z + ( se*normQuantile( 1.0 - alpha ) ) ) ];\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tval = se * normQuantile( 1.0 - ( alpha/2.0 ) );\n\t\tcint = [ tanh( z - val ), tanh( z + val ) ];\n\t\tbreak;\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', method );\n\tsetReadOnly( out, 'nullValue', rho );\n\tsetReadOnly( out, 'pcorr', r );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default pcorrTest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Pearson product-moment correlation test between paired samples.\n*\n* @module @stdlib/stats/pcorrtest\n*\n* @example\n* var pcorrtest = require( '@stdlib/stats/pcorrtest' );\n* var incrspace = require( '@stdlib/math/utils/incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 11, 21, 1 );\n*\n* var out = pcorrtest( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\nvar pcorrtest = __var_0__;\n\n\n// EXPORTS //\nexport default pcorrtest;\n"]}