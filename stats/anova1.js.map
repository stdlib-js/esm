{"version":3,"sources":["@stdlib/stats/anova1/lib/validate.js","@stdlib/stats/anova1/lib/unique.js","@stdlib/stats/anova1/lib/mean_table.js","@stdlib/stats/anova1/lib/mean.js","@stdlib/stats/anova1/lib/print.js","@stdlib/stats/anova1/lib/anova1.js","@stdlib/stats/anova1/lib/index.js"],"names":["hasOwnProp","__var_0__","isObject","__var_1__","isNumber","__var_2__","isPrimitive","isnan","__var_3__","validate","opts","options","TypeError","alpha","RangeError","SORT_OPTS","numeric","ascending","a","b","String","localeCompare","unique","arr","len","out","val","i","j","Array","prototype","slice","call","length","sort","incrstdev","meanTable","x","factor","treats","tableOfMeans","factorCount","accumulator","newMean","k","mean","sampleSize","SD","mu","isPositiveInteger","roundn","repeat","__var_4__","max","__var_5__","isBoolean","__var_6__","spaces","n","prettyPrint","results","statistic","decision","treatMS","treatDF","treatSS","extra1","extra2","extra3","errMS","errDF","errSS","ndgts","dgts","str","arguments","digits","method","treatment","ss","toString","error","ms","df","pValue","rejected","isNumberArray","primitives","isTypedArrayLike","isArray","setReadOnly","cdf","copy","defaults","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","anova1","meanSumSqTreat","meanSumSqError","ssTreatment","sumSqTotal","sumSqError","grandMean","nGroups","fScore","means","numDf","denDf","nobs","pVal","err","sq"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/has-own-property';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-number';\nimport __var_3__ from '@stdlib/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar hasOwnProp = __var_0__;\nvar isObject = __var_1__;\nvar isNumber = __var_2__.isPrimitive;\nvar isnan = __var_3__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.6\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` must be a number in [0,1].' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SORT_OPTS = {\n\t'numeric': true // Use numeric collation such that \"1\" < \"2\" < \"10\"...\n};\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {*} a - first value\n* @param {*} b - second value\n* @returns {number} negative number if `a` comes before `b, positive if `a` comes after `b`, and `0` if they are equivalent\n*/\nfunction ascending( a, b ) {\n\treturn String( a ).localeCompare( String( b ), void 0, SORT_OPTS );\n}\n\n\n// MAIN //\n\n/**\n* Returns the unique elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {Array} array of unique elements\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\t// Copy the array to avoid mutation:\n\tout = Array.prototype.slice.call( arr );\n\tlen = out.length;\n\n\t// Sort array in ascending order:\n\tout.sort( ascending );\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = out[ i ];\n\t\tif ( out[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tout[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tout.length = j+1;\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default unique;\n","import __var_0__ from '@stdlib/stats/incr/stdev';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar incrstdev = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the vector of means for each treatment.\n*\n* @private\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Array} treats - unique treatments\n* @returns {Object} summary statistics for the categories.\n*/\nfunction meanTable( x, factor, treats ) {\n\tvar tableOfMeans;\n\tvar factorCount;\n\tvar accumulator;\n\tvar newMean;\n\tvar j;\n\tvar i;\n\tvar k;\n\n\tfactorCount = treats.length;\n\ttableOfMeans = {};\n\tfor ( j = 0; j < factorCount; j++ ) {\n\t\taccumulator = incrstdev();\n\t\ttableOfMeans[ treats[j] ] = {\n\t\t\t'mean': 0,\n\t\t\t'sampleSize': 0,\n\t\t\t'SD': accumulator\n\t\t};\n\t\tfor ( i = 0; i < x.length; i++ ) {\n\t\t\tif ( factor[i] === treats[j] ) {\n\t\t\t\ttableOfMeans[ treats[j] ][ 'SD' ] = accumulator( x[i] );\n\t\t\t}\n\t\t}\n\t}\n\t// Go through, add to meanTable by indexing factor[i]\n\t// X[i] is the individual continuous\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ttableOfMeans[factor[i]]['mean'] += x[i];\n\t\ttableOfMeans[factor[i]]['sampleSize'] += 1;\n\t}\n\n\t// Now make the mean by dividing by the sample size\n\t// Get the standard deviation through the helper function\n\tfor ( k = 0; k < factorCount; k++ ) {\n\t\tnewMean = tableOfMeans[treats[k]]['mean'] / tableOfMeans[treats[k]]['sampleSize'];\n\t\ttableOfMeans[treats[k]]['mean'] = newMean;\n\t}\n\treturn tableOfMeans;\n}\n\n\n// EXPORTS //\nexport default meanTable;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the arithmetic mean of a numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} arithmetic mean\n*/\nfunction mean( arr ) {\n\tvar delta;\n\tvar len;\n\tvar mu;\n\tvar i;\n\n\tmu = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdelta = arr[ i ] - mu;\n\t\tmu += delta / (i+1);\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\nexport default mean;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/has-own-property';\nimport __var_3__ from '@stdlib/math/base/special/roundn';\nimport __var_4__ from '@stdlib/string/repeat';\nimport __var_5__ from '@stdlib/math/base/special/max';\nimport __var_6__ from '@stdlib/assert/is-boolean';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar hasOwnProp = __var_2__;\nvar roundn = __var_3__;\nvar repeat = __var_4__;\nvar max = __var_5__;\nvar isBoolean = __var_6__.isPrimitive;\n\n\n// FUNCTIONS //\n\n/**\n* Returns n spaces.\n*\n* @private\n* @param {integer} n - number of spaces\n* @returns {string} n spaces\n*/\nfunction spaces( n ) {\n\tif ( n <= 0 ) {\n\t\treturn '';\n\t}\n\treturn repeat( ' ', n );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print output of ANOVA.\n\t*\n\t* @private\n\t* @param {Object} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar statistic;\n\t\tvar decision;\n\t\tvar treatMS;\n\t\tvar treatDF;\n\t\tvar treatSS;\n\t\tvar extra1;\n\t\tvar extra2;\n\t\tvar extra3;\n\t\tvar errMS;\n\t\tvar errDF;\n\t\tvar errSS;\n\t\tvar ndgts;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tndgts = -dgts;\n\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\n\t\t// Hypothesis\n\t\tstr += 'Null Hypothesis: All Means Equal';\n\t\tstr += '\\n';\n\t\tstr += 'Alternate Hypothesis: At Least one Mean not Equal';\n\t\tstr += '\\n\\n';\n\n\t\ttreatSS = roundn( results.treatment.ss, ndgts ).toString();\n\t\terrSS = roundn( results.error.ss, ndgts ).toString();\n\t\ttreatMS = roundn( results.treatment.ms, ndgts ).toString();\n\t\terrMS = roundn( results.error.ms, ndgts ).toString();\n\t\ttreatDF = results.treatment.df.toString();\n\t\terrDF = results.error.df.toString();\n\t\tstatistic = roundn( results.statistic, ndgts ).toString();\n\n\t\textra1 = max( max( treatDF.length, errDF.length ), 2 );\n\t\textra2 = max( max( treatSS.length, errSS.length ), 2 );\n\t\textra3 = max( max( treatMS.length, errMS.length ), 3 );\n\n\t\t// Formatted table\n\t\tstr += '              ';\n\t\tstr += 'df';\n\t\tstr += spaces( 1 + extra1 );\n\t\tstr += 'SS';\n\t\tstr += spaces( 2 + extra2 );\n\t\tstr += 'MS';\n\t\tstr += spaces( 1 + extra3 );\n\t\tstr += 'F Score';\n\t\tstr += spaces( max( 7, statistic.length ) - 7 + 2 );\n\t\tstr += 'P Value';\n\t\tstr += '\\n';\n\n\t\t// Now start adding in values\n\t\tstr += 'Treatment';\n\t\tstr += spaces( 5 );\n\t\tstr += results.treatment.df;\n\t\tstr += spaces( 3 + extra1 - treatDF.length );\n\n\t\tstr += treatSS;\n\t\tstr += spaces( 4 + extra2 - treatSS.length );\n\t\tstr += treatMS;\n\t\tstr += spaces( 3 + extra3 - treatMS.length );\n\t\tstr += statistic;\n\t\tstr += spaces( max( 7, statistic.length ) - statistic.length + 2 );\n\t\tstr += roundn( results.pValue, ndgts );\n\t\tstr += '\\n';\n\n\t\t// Next line\n\t\tstr += 'Errors';\n\t\tstr += '        ';\n\t\tstr += results.error.df;\n\t\tstr += spaces( 3 + extra1 - errDF.length );\n\t\tstr += errSS;\n\t\tstr += spaces( 4 + extra2 - errSS.length );\n\t\tstr += errMS;\n\n\t\tif ( decision ) {\n\t\t\tstr += '\\n\\n';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' <= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' >= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\nexport default prettyPrint;\n","import __var_0__ from '@stdlib/assert/is-number-array';\nimport __var_1__ from '@stdlib/assert/is-typed-array-like';\nimport __var_2__ from '@stdlib/assert/is-array';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/assert/has-own-property';\nimport __var_5__ from '@stdlib/stats/base/dists/f/cdf';\nimport __var_6__ from '@stdlib/utils/copy';\nimport __var_7__ from './defaults.json';\nimport __var_8__ from './validate.js';\nimport __var_9__ from './unique.js';\nimport __var_10__ from './mean_table.js';\nimport __var_11__ from './mean.js';\nimport __var_12__ from './print.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNumberArray = __var_0__.primitives;\nvar isTypedArrayLike = __var_1__;\nvar isArray = __var_2__;\nvar setReadOnly = __var_3__;\nvar hasOwnProp = __var_4__;\nvar cdf = __var_5__;\nvar copy = __var_6__;\nvar defaults = __var_7__;\nvar validate = __var_8__;\nvar unique = __var_9__;\nvar meanTable = __var_10__;\nvar mean = __var_11__;\nvar prettyPrint = __var_12__;\n\n\n// MAIN //\n\n/**\n* Perform a one-way analysis of variance (ANOVA).\n*\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `factor` must be an array\n* @throws {RangeError} `factor` must have at least two unique elements\n* @throws {RangeError} length of `x` must be greater than or equal to two\n* @throws {RangeError} `x` and `factor` must have the same length\n* @returns {Object} test results\n*/\nfunction anova1( x, factor, options ) {\n\tvar meanSumSqTreat; // Mean sum of squares\n\tvar meanSumSqError;\n\tvar ssTreatment;\n\tvar sumSqTotal;\n\tvar sumSqError;\n\tvar treatment; // Index variable\n\tvar grandMean;\n\tvar nGroups;\n\tvar fScore;\n\tvar treats;\n\tvar means;\n\tvar numDf;\n\tvar denDf;\n\tvar nobs;\n\tvar pVal;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar sq;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a numeric array. Value: `' + x + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tnobs = x.length;\n\tif ( nobs <= 1 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must have at least two elements. Value: `' + x + '`.' );\n\t}\n\tif ( !isArray( factor ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be an array. Value: `' + treats + '`.' );\n\t}\n\n\ttreats = unique( factor );\n\tnGroups = treats.length;\n\tif ( nGroups <= 1 ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument must contain at least two unique elements. Value: `' + treats + '`.' );\n\t}\n\tif ( nobs !== factor.length ) {\n\t\tthrow new RangeError( 'invalid arguments. Arguments `x` and `factor` must be arrays of the same length.' );\n\t}\n\n\tsumSqTotal = 0.0;\n\tssTreatment = 0.0;\n\tmeans = meanTable( x, factor, treats );\n\tgrandMean = mean( x );\n\n\t// Now get total ss:\n\tfor ( i = 0; i < nobs; i++ ) {\n\t\tsq = ( x[i] - grandMean ) * ( x[i] - grandMean );\n\t\tsumSqTotal += sq;\n\t}\n\n\tsq = 0.0;\n\tfor ( treatment in means ) {\n\t\tif ( hasOwnProp( means, treatment ) ) {\n\t\t\t// Already have sq defined\n\t\t\tsq = ( means[treatment].mean - grandMean ) *\n\t\t\t\t( means[treatment].mean - grandMean );\n\t\t\tssTreatment += means[treatment].sampleSize * sq;\n\t\t}\n\t}\n\tnumDf = nGroups - 1;\n\tdenDf = nobs - nGroups;\n\tsumSqError = sumSqTotal - ssTreatment;\n\tmeanSumSqTreat = ssTreatment / numDf;\n\tmeanSumSqError = sumSqError / denDf;\n\tfScore = meanSumSqTreat / meanSumSqError;\n\n\tpVal = 1.0 - cdf( fScore, numDf, denDf );\n\n\tout = {};\n\n\ttreatment = {};\n\tsetReadOnly( treatment, 'df', numDf );\n\tsetReadOnly( treatment, 'ss', ssTreatment );\n\tsetReadOnly( treatment, 'ms', meanSumSqTreat );\n\tsetReadOnly( out, 'treatment', treatment );\n\n\terr = {};\n\tsetReadOnly( err, 'df', denDf );\n\tsetReadOnly( err, 'ss', sumSqError );\n\tsetReadOnly( err, 'ms', meanSumSqError );\n\tsetReadOnly( out, 'error', err );\n\n\tsetReadOnly( out, 'statistic', fScore );\n\tsetReadOnly( out, 'pValue', pVal );\n\tsetReadOnly( out, 'means', means );\n\tsetReadOnly( out, 'method', 'One-Way ANOVA' );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'rejected', pVal <= opts.alpha );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default anova1;\n","import __var_0__ from './anova1.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One-way analysis of variance.\n*\n* @module @stdlib/stats/anova1\n*\n* @example\n* var anova1 = require( '@stdlib/stats/anova1' );\n* var x = [ 1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15 ];\n* var f = [ 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC' ];\n*\n* var out = anova1( x, f );\n* /* returns\n*     {\n*         'treatment': {\n*             'df': 3,\n*             'ss': ~20.667,\n*             'ms': ~6.889\n*          }\n*         'error': {\n*             'df': 8,\n*             'ss': ~185.333,\n*             'ms': ~23.1667,\n*         },\n*         'statistic': ~0.297,\n*         'pValue': ~0.826,\n*         'means': { 'control': { 'mean': 5.0, 'sampleSize': 3, 'SD': ~4.583 },\n*            'treatA': { 'mean': ~6.667, 'sampleSize': 3, 'SD': ~4.041 },\n*            'treatB': { 'mean': ~8.333, 'sampleSize': 3, 'SD': ~3.512 },\n*            'treatC': { 'mean': 8.0, 'sampleSize': 3, 'SD': ~6.557 }\n*         },\n*         'method': 'One-Way ANOVA'\n*     }\n* *\\/\n*\n* var table = out.print();\n* /*\n* One-Way ANOVA\n*\n* Null Hypothesis: All Means Equal\n* Alternate Hypothesis: At Least one Mean not Equal\n*\n*               df   SS          MS        F Score  P Value\n* Treatment     3    20.6667     6.8889    0.2974   0.8265\n* Errors        8    185.3333    23.1667\n*\n* Fail to Reject Null: 0.8265 >= 0.05\n*\n* *\\/\n*/\n\n// MODULES //\nvar anova1 = __var_0__;\n\n\n// EXPORTS //\nexport default anova1;\n"]}