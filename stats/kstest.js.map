{"version":3,"sources":["@stdlib/stats/kstest/lib/smirnov.js","@stdlib/stats/kstest/lib/marsaglia.js","@stdlib/stats/kstest/lib/ascending.js","@stdlib/stats/kstest/lib/subtract.js","@stdlib/stats/kstest/lib/validate.js","@stdlib/stats/kstest/lib/cdf.js","@stdlib/stats/kstest/lib/get_cdf.js","@stdlib/stats/kstest/lib/print.js","@stdlib/stats/kstest/lib/main.js","@stdlib/stats/kstest/lib/index.js"],"names":["binomcoefln","__var_0__","floor","__var_1__","exp","__var_2__","ln","__var_3__","pKolmogorov1","d","n","len","out","tmp","i","sqrt","pow","Float64Array","__var_4__","pKolmogorov","eQ","h","H","Q","g","j","k","m","s","mpow","A","eA","eB","B","mmult","x","y","z","ascending","a","b","subtract","arr","res","length","Array","isBoolean","isPrimitive","isNumber","isObject","isString","isnan","hasOwnProp","__var_5__","validate","opts","options","alpha","TypeError","alternative","sorted","CDF","__var_6__","__var_7__","__var_8__","__var_9__","__var_10__","__var_11__","__var_12__","__var_13__","__var_14__","__var_15__","__var_16__","__var_17__","__var_18__","__var_19__","__var_20__","__var_21__","__var_22__","__var_23__","__var_24__","__var_25__","getCDF","name","cdf","Error","isPositiveInteger","roundn","print","decision","dgts","str","arguments","digits","this","method","pValue","statistic","rejected","isTypedArrayLike","isNumberArray","primitives","setReadOnly","isFunction","max","slice","prototype","kstest","nDistParams","distParams","distArgs","pval","stat","yVal","alt","err","idx","val","call","RangeError","sort","concat","apply"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/binomcoefln';\nimport __var_1__ from '@stdlib/math/base/special/floor';\nimport __var_2__ from '@stdlib/math/base/special/exp';\nimport __var_3__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar binomcoefln = __var_0__;\nvar floor = __var_1__;\nvar exp = __var_2__;\nvar ln = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the CDF for the one-sided test statistics, i.e., the maximum by which the empirical CDF exceeds / is less than the hypothesized CDF.\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n^+ / D_n^-\n* @param {PositiveInteger} n - number of variates\n* @returns {number} evaluated CDF, i.e., P( D_n^+ < d )\n*/\nfunction pKolmogorov1( d, n ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\n\tif ( d <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( d >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tlen = floor( n * (1.0-d) ) + 1;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ttmp = binomcoefln( n, i );\n\t\ttmp += ( n - i ) * ln( 1.0 - d - (i/n) );\n\t\ttmp += ( i - 1.0 ) * ln( d + (i/n) );\n\t\tout += exp( tmp );\n\t}\n\treturn 1.0 - (d * out);\n}\n\n\n// EXPORTS //\nexport default pKolmogorov1;\n","import __var_0__ from '@stdlib/math/base/special/floor';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\nimport __var_2__ from '@stdlib/math/base/special/pow';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/array/float64';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\nvar sqrt = __var_1__;\nvar pow = __var_2__;\nvar exp = __var_3__;\nvar Float64Array = __var_4__;\n\n\n// MAIN //\n\n/**\n* Evaluates the Kolmogorov distribution. This function is a JavaScript implementation of a procedure developed by Marsaglia & Tsang.\n*\n* ## References\n*\n* -   Marsaglia, George, Wai Wan Tsang, and Jingbo Wang. 2003. \"Evaluating Kolmogorov's Distribution.\" _Journal of Statistical Software_ 8 (18): 1–4. doi:[10.18637/jss.v008.i18](https://doi.org/10.18637/jss.v008.i18).\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n\n* @param {number} n - number of variates\n* @returns {number} evaluated CDF, i.e. P( D_n < d )\n*/\nfunction pKolmogorov( d, n ) {\n\tvar eH;\n\tvar eQ;\n\tvar h;\n\tvar H;\n\tvar Q;\n\tvar g;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar m;\n\tvar s;\n\n\ts = d * d * n;\n\tif ( s > 7.24 || ( s > 3.76 && n > 99 ) ) {\n\t\treturn 1 - (2 * exp( -( 2.000071 + (0.331/sqrt(n)) + (1.409/n) ) * s ));\n\t}\n\tk = floor( n * d ) + 1;\n\tm = (2*k) - 1;\n\th = k - (n*d);\n\tH = new Float64Array( m * m );\n\tQ = new Float64Array( m * m );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 < 0 ) {\n\t\t\t\tH[ (i*m) + j ] = 0;\n\t\t\t} else {\n\t\t\t\tH[ (i*m) + j ] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( i = 0; i < m; i++ ) {\n\t\tH[ i * m ] -= pow( h, i+1 );\n\t\tH[ ((m-1) * m) + i ] -= pow( h, (m-i) );\n\t}\n\tH[ (m-1) * m ] += ( ( (2*h)-1 > 0 ) ? pow( (2*h)-1, m ) : 0 );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 > 0 ) {\n\t\t\t\tfor ( g = 1; g <= i - j + 1; g++ ) {\n\t\t\t\t\tH[ (i*m) + j ] /= g;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\teH = 0;\n\tmpow( H, eH, n );\n\ts = Q[ ((k-1) * m) + k - 1 ];\n\tfor ( i = 1; i <= n; i++ ) {\n\t\ts = s * i / n;\n\t\tif ( s < 1e-140 ) {\n\t\t\ts *= 1e140;\n\t\t\teQ -= 140;\n\t\t}\n\t}\n\ts *= pow( 10, eQ );\n\treturn s;\n\n\t/**\n\t* Matrix exponentiation. Mutates Q matrix.\n\t*\n\t* @private\n\t* @param {Float64Array} A - input matrix\n\t* @param {number} eA - matrix power\n\t* @param {number} n - number of variates\n\t*/\n\tfunction mpow( A, eA, n ) {\n\t\tvar eB;\n\t\tvar B;\n\t\tvar i;\n\n\t\tif ( n === 1 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = A[ i ];\n\t\t\t\teQ = eA;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tmpow( A, eA, floor( n/2 ) );\n\t\tB = mmult( Q, Q );\n\t\teB = 2 * eQ;\n\t\tif ( n % 2 === 0 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = B[ i ];\n\t\t\t}\n\t\t\teQ = eB;\n\t\t} else {\n\t\t\tQ = mmult( A, B );\n\t\t\teQ = eA + eB;\n\t\t}\n\t\tif ( Q[ (floor(m/2) * m) + floor(m/2) ] > 1e140 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] *= 1e-140;\n\t\t\t}\n\t\t\teQ += 140;\n\t\t}\n\t}\n\n\t/**\n\t* Multiply matrices x and y.\n\t*\n\t* @private\n\t* @param {Float64Array} x - first input matrix\n\t* @param {Float64Array} y - second input matrix\n\t* @returns {Float64Array} matrix product\n\t*/\n\tfunction mmult( x, y ) {\n\t\tvar i;\n\t\tvar j;\n\t\tvar k;\n\t\tvar s;\n\t\tvar z;\n\n\t\tz = new Float64Array( m * m );\n\t\tfor ( i = 0; i < m; i++) {\n\t\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\t\ts = 0;\n\t\t\t\tfor ( k = 0; k < m; k++ ) {\n\t\t\t\t\ts += x[ (i*m) + k ] * y[ (k*m) + j ];\n\t\t\t\t\tz[ (i*m) + j ] = s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\nexport default pKolmogorov;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\nexport default ascending;\n","\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @private\n* @param {number} x - scalar minuend (implicitly broadcasted to full length array)\n* @param {NumericArray} arr - array of subtrahends\n* @returns {NumericArray} output array\n*\n* @example\n* var x = 3;\n* var arr = [ 1, 2, 2, 3 ];\n*\n* var y = subtract( x, arr );\n* // returns [ 2, 1, 1, 0 ]\n*/\nfunction subtract( x, arr ) {\n\tvar len;\n\tvar res;\n\tvar i;\n\n\tlen = arr.length;\n\tres = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tres[ i ] = x - arr[ i ];\n\t}\n\n\treturn res;\n}\n\n\n// EXPORTS //\nexport default subtract;\n","import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-string';\nimport __var_4__ from '@stdlib/assert/is-nan';\nimport __var_5__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isString = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar hasOwnProp = __var_5__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.sorted] - boolean indicating if the input data is already sorted in ascending order\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alternative` option must be a string primitive. Option: `' + opts.alternative + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( 'invalid option. `sorted` flag must be a boolean primitive. Option: `' + opts.sorted + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/stats/base/dists/arcsine/cdf';\nimport __var_1__ from '@stdlib/stats/base/dists/beta/cdf';\nimport __var_2__ from '@stdlib/stats/base/dists/betaprime/cdf';\nimport __var_3__ from '@stdlib/stats/base/dists/cauchy/cdf';\nimport __var_4__ from '@stdlib/stats/base/dists/chi/cdf';\nimport __var_5__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_6__ from '@stdlib/stats/base/dists/cosine/cdf';\nimport __var_7__ from '@stdlib/stats/base/dists/erlang/cdf';\nimport __var_8__ from '@stdlib/stats/base/dists/exponential/cdf';\nimport __var_9__ from '@stdlib/stats/base/dists/f/cdf';\nimport __var_10__ from '@stdlib/stats/base/dists/frechet/cdf';\nimport __var_11__ from '@stdlib/stats/base/dists/gamma/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/gumbel/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/invgamma/cdf';\nimport __var_14__ from '@stdlib/stats/base/dists/kumaraswamy/cdf';\nimport __var_15__ from '@stdlib/stats/base/dists/laplace/cdf';\nimport __var_16__ from '@stdlib/stats/base/dists/levy/cdf';\nimport __var_17__ from '@stdlib/stats/base/dists/logistic/cdf';\nimport __var_18__ from '@stdlib/stats/base/dists/lognormal/cdf';\nimport __var_19__ from '@stdlib/stats/base/dists/normal/cdf';\nimport __var_20__ from '@stdlib/stats/base/dists/pareto-type1/cdf';\nimport __var_21__ from '@stdlib/stats/base/dists/rayleigh/cdf';\nimport __var_22__ from '@stdlib/stats/base/dists/t/cdf';\nimport __var_23__ from '@stdlib/stats/base/dists/triangular/cdf';\nimport __var_24__ from '@stdlib/stats/base/dists/uniform/cdf';\nimport __var_25__ from '@stdlib/stats/base/dists/weibull/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar CDF = {};\n\nCDF[ 'arcsine' ] = __var_0__;\nCDF[ 'beta' ] = __var_1__;\nCDF[ 'betaprime' ] = __var_2__;\nCDF[ 'cauchy' ] = __var_3__;\nCDF[ 'chi' ] = __var_4__;\nCDF[ 'chisquare' ] = __var_5__;\nCDF[ 'cosine' ] = __var_6__;\nCDF[ 'erlang' ] = __var_7__;\nCDF[ 'exponential' ] = __var_8__;\nCDF[ 'f' ] = __var_9__;\nCDF[ 'frechet' ] = __var_10__;\nCDF[ 'gamma' ] = __var_11__;\nCDF[ 'gumbel' ] = __var_12__;\nCDF[ 'invgamma' ] = __var_13__;\nCDF[ 'kumaraswamy' ] = __var_14__;\nCDF[ 'laplace' ] = __var_15__;\nCDF[ 'levy' ] = __var_16__;\nCDF[ 'logistic' ] = __var_17__;\nCDF[ 'lognormal' ] = __var_18__;\nCDF[ 'normal' ] = __var_19__;\nCDF[ 'pareto-type1' ] = __var_20__;\nCDF[ 'rayleigh' ] = __var_21__;\nCDF[ 't' ] = __var_22__;\nCDF[ 'triangular' ] = __var_23__;\nCDF[ 'uniform' ] = __var_24__;\nCDF[ 'weibull' ] = __var_25__;\n\n\n// EXPORTS //\nexport default CDF;\n","import __var_0__ from './cdf.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar CDF = __var_0__;\n\n\n// MAIN //\n\n/**\n* Returns the cumulative distribution function (CDF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @throws {Error} unsupported/unrecognized distribution name\n* @returns {Function} cumulative distribution function (CDF)\n*/\nfunction getCDF( name ) {\n\tvar cdf = CDF[ name ];\n\tif ( cdf === void 0 ) {\n\t\tthrow new Error( 'invalid argument. Unsupported/unrecognized distribution name. Value: `' + name + '`.' );\n\t}\n\treturn cdf;\n}\n\n\n// EXPORTS //\nexport default getCDF;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the CDF of `x` is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'greater than or equal to ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'less than or equal to ';\n\t\tbreak;\n\t}\n\tstr += 'the reference CDF';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-typed-array-like';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-number-array';\nimport __var_3__ from '@stdlib/utils/define-read-only-property';\nimport __var_4__ from '@stdlib/assert/is-function';\nimport __var_5__ from '@stdlib/assert/is-string';\nimport __var_6__ from '@stdlib/assert/is-nan';\nimport __var_7__ from '@stdlib/stats/base/max';\nimport __var_8__ from './smirnov.js';\nimport __var_9__ from './marsaglia.js';\nimport __var_10__ from './ascending.js';\nimport __var_11__ from './subtract.js';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './get_cdf.js';\nimport __var_14__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isTypedArrayLike = __var_0__;\nvar isNumber = __var_1__;\nvar isNumberArray = __var_2__.primitives;\nvar setReadOnly = __var_3__;\nvar isFunction = __var_4__;\nvar isString = __var_5__.isPrimitive;\nvar isnan = __var_6__;\nvar max = __var_7__;\nvar pKolmogorov1 = __var_8__;\nvar pKolmogorov = __var_9__;\nvar ascending = __var_10__;\nvar subtract = __var_11__;\nvar validate = __var_12__;\nvar getCDF = __var_13__;\nvar print = __var_14__;\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Computes a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @param {NumericArray} x - input array holding numeric values\n* @param {(Function|string)} y - either a CDF function or a string denoting the name of a distribution\n* @param {...number} [params] - distribution parameters passed to reference CDF\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array is already in sorted order\n* @param {string} [options.alternative=\"two-sided\"] - string indicating whether to conduct two-sided or one-sided hypothesis test (other options: `less`, `greater`)\n* @throws {TypeError} argument x has to be a typed array or array of numbers\n* @throws {TypeError} argument y has to be a CDF function or string\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number primitive\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string primitive\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} sorted option has to be a boolean primitive\n* @returns {Object} test result object\n*\n* @example\n* var out = kstest( [ 2.0, 1.0, 5.0, -5.0, 3.0, 0.5, 6.0 ], 'normal', 0.0, 1.0 );\n* // returns { 'pValue': ~0.015, 'statistic': ~0.556, ... }\n*/\nfunction kstest() {\n\tvar nDistParams;\n\tvar distParams;\n\tvar distArgs;\n\tvar options;\n\tvar alpha;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar yVal;\n\tvar alt;\n\tvar err;\n\tvar idx;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar n;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\ty = arguments[ 1 ];\n\tif ( !isNumberArray( x ) && !isTypedArrayLike( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a typed array or number array. Value: `' + x + '`.' );\n\t}\n\tif ( !isFunction( y ) && !isString( y ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be either a CDF function or a string primitive. Value: `' + y + '`' );\n\t}\n\tif ( isString( y ) ) {\n\t\ty = getCDF( y );\n\t}\n\tnDistParams = y.length - 1.0;\n\tn = x.length;\n\n\tdistParams = new Array( nDistParams );\n\tfor ( i = 0; i < nDistParams; i++ ) {\n\t\tidx = i + 2;\n\t\tval = arguments[ idx ];\n\t\tif ( !isNumber( val ) || isnan( val ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Distribution parameter must be a number primitive. Value: `' + val + '`.' );\n\t\t}\n\t\tdistParams[ i ] = arguments[ idx ];\n\t}\n\topts = {};\n\tif ( arguments.length > 2 + nDistParams ) {\n\t\toptions = arguments[ 2 + nDistParams ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make a copy to prevent mutation of x:\n\tx = slice.call( x );\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\tx.sort( ascending );\n\t}\n\tdistArgs = [ null ].concat( distParams );\n\tfor ( i = 0; i < n; i++ ) {\n\t\tdistArgs[ 0 ] = x[ i ];\n\t\tyVal = y.apply( null, distArgs );\n\t\tx[ i ] = yVal - ( i / n );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tstat = max( n, [ max( n, x, 1 ), max( n, subtract( 1/n, x ), 1 ) ], 1 );\n\t\tbreak;\n\tcase 'greater':\n\t\tstat = max( n, subtract( 1/n, x ), 1 );\n\t\tbreak;\n\tcase 'less':\n\t\tstat = max( n, x, 1 );\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );\n\t}\n\tif ( alt === 'two-sided' ) {\n\t\tpval = 1.0 - pKolmogorov( stat, n );\n\t} else {\n\t\tpval = 1.0 - pKolmogorov1( stat, n );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kolmogorov-Smirnov goodness-of-fit test' );\n\tsetReadOnly( out, 'print', print );\n\tsetReadOnly( out, 'alternative', alt );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default kstest;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @module @stdlib/stats/kstest\n*\n* @example\n* var generator = require( '@stdlib/random/base/normal' ).factory;\n* var kstest = require( '@stdlib/stats/kstest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n*\n* // Values drawn from a Normal(3,1) distribution\n* rnorm = generator( 3.0, 1.0, {\n*     'seed': 293\n* });\n* x = new Array( 100 );\n* for ( i = 0; i < 100; i++ ) {\n*     x[ i ] = rnorm();\n* }\n*\n* // Test against N(0,1)\n* out = kstest( x, 'normal', 0.0, 1.0 );\n* // returns { pValue: 0, statistic: ~0.901, ... }\n*\n* // Test against N(3,1)\n* out = kstest( x, 'normal', 3.0, 1.0 );\n* // returns { pValue: ~0.234, statistic: ~0.102, ... }\n*/\n\n// MODULES //\nvar kstest = __var_0__;\n\n\n// EXPORTS //\nexport default kstest;\n"]}