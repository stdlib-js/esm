{"version":3,"sources":["@stdlib/stats/base/snanmskrange/lib/snanmskrange.js","@stdlib/stats/base/snanmskrange/lib/ndarray.js","@stdlib/stats/base/snanmskrange/lib/index.js"],"names":["float64ToFloat32","__var_0__","isnanf","__var_1__","snanmskrange","N","x","strideX","mask","strideMask","max","min","ix","im","v","i","NaN","offsetX","offsetMask","setReadOnly","ndarray","__var_2__"],"mappings":"oLAuBA,IAAIA,EAAmBC,EACnBC,EAASC,EAyBb,SAASC,EAAcC,EAAGC,EAAGC,EAASC,EAAMC,GAC3C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAYR,IATCJ,EADIL,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLM,EADIJ,EAAa,GACX,EAAEJ,GAAKI,EAER,EAEAM,EAAI,EAAGA,EAAIV,KAChBS,EAAIR,EAAGM,KACIE,GAAoB,IAAfN,EAAMK,IAFHE,IAKnBH,GAAML,EACNM,GAAMJ,EAEP,GAAKM,IAAMV,EACV,OAAOW,IAGR,GAAKd,EADLS,EAAMG,GAEL,OAAOH,EAIR,IAFAD,EAAMC,EACNI,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,EAEDC,EADLK,GAAMJ,KAINK,EAAIR,EAAGM,GACFV,EAAQY,KAGRA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOd,EAAkBU,EAAMC,GChFhC,IAAIX,EAAmBC,EACnBC,EAASC,EA6Bb,SAASC,EAAcC,EAAGC,EAAGC,EAASU,EAAST,EAAMC,EAAYS,GAChE,IAAIR,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAIR,IAFAJ,EAAKK,EACLJ,EAAKK,EACCH,EAAI,EAAGA,EAAIV,KAChBS,EAAIR,EAAGM,KACIE,GAAoB,IAAfN,EAAMK,IAFHE,IAKnBH,GAAML,EACNM,GAAMJ,EAEP,GAAKM,IAAMV,EACV,OAAOW,IAGR,GAAKd,EADLS,EAAMG,GAEL,OAAOH,EAIR,IAFAD,EAAMC,EACNI,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,EAEDC,EADLK,GAAMJ,KAINK,EAAIR,EAAGM,GACFV,EAAQY,KAGRA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOd,EAAkBU,EAAMC,GC3EhC,IAAIQ,EAAclB,EACdG,EAAeD,EACfiB,EAAUC,EAKdF,EAAaf,EAAc,UAAWgB","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/assert/is-nanf';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar isnanf = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n*\n* var v = snanmskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction snanmskrange( N, x, strideX, mask, strideMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tif ( isnanf( min ) ) {\n\t\treturn min;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( max - min );\n}\n\n\n// EXPORTS //\nexport default snanmskrange;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/math/base/assert/is-nanf';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar isnanf = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanmskrange( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction snanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tif ( isnanf( min ) ) {\n\t\treturn min;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( max - min );\n}\n\n\n// EXPORTS //\nexport default snanmskrange;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './snanmskrange.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar snanmskrange = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( snanmskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default snanmskrange;\n"]}