{"version":3,"sources":["@stdlib/stats/base/dists/poisson/ctor/lib/ctor.js","@stdlib/stats/base/dists/poisson/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logpmf","__var_13__","mgf","__var_14__","pmf","__var_15__","quantile","__var_16__","poissonCDF","x","this","lambda","poissonLogPMF","poissonMGF","t","poissonPMF","poissonQuantile","p","Poisson","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"smBAwCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAYC,GACpB,OAAOX,EAAKW,EAAGC,KAAKC,QAUrB,SAASC,EAAeH,GACvB,OAAOT,EAAQS,EAAGC,KAAKC,QAUxB,SAASE,EAAYC,GACpB,OAAOZ,EAAKY,EAAGJ,KAAKC,QAUrB,SAASI,EAAYN,GACpB,OAAOL,EAAKK,EAAGC,KAAKC,QAUrB,SAASK,EAAiBC,GACzB,OAAOX,EAAUW,EAAGP,KAAKC,QAuB1B,SAASO,IACR,IAAIP,EACJ,KAAOD,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAASC,UAAW,IAEhC,GAAKA,UAAUC,QAEd,IAAMzC,EADNgC,EAASQ,UAAW,IAEnB,MAAM,IAAIE,UAAW,gFAAkFV,EAAS,UAGjHA,EAAS,EAeV,OAbAtC,EAAgBqC,KAAM,SAAU,CAC/BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM/C,EAAY+C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFf,EAASe,KAGJhB,KAiBRjC,EAAqByC,EAAQS,UAAW,WAAW,WAClD,OAAO7C,EAAS4B,KAAKC,WAiBtBlC,EAAqByC,EAAQS,UAAW,YAAY,WACnD,OAAO3C,EAAU0B,KAAKC,WAiBvBlC,EAAqByC,EAAQS,UAAW,QAAQ,WAC/C,OAAOzC,EAAMwB,KAAKC,WAiBnBlC,EAAqByC,EAAQS,UAAW,UAAU,WACjD,OAAOvC,EAAQsB,KAAKC,WAiBrBlC,EAAqByC,EAAQS,UAAW,QAAQ,WAC/C,OAAOrC,EAAMoB,KAAKC,WAiBnBlC,EAAqByC,EAAQS,UAAW,YAAY,WACnD,OAAOnC,EAAUkB,KAAKC,WAiBvBlC,EAAqByC,EAAQS,UAAW,SAAS,WAChD,OAAOjC,EAAOgB,KAAKC,WAiBpBlC,EAAqByC,EAAQS,UAAW,YAAY,WACnD,OAAO/B,EAAUc,KAAKC,WAmBvBpC,EAAa2C,EAAQS,UAAW,MAAOnB,GAqBvCjC,EAAa2C,EAAQS,UAAW,SAAUf,GAkB1CrC,EAAa2C,EAAQS,UAAW,MAAOd,GAqBvCtC,EAAa2C,EAAQS,UAAW,MAAOZ,GAkBvCxC,EAAa2C,EAAQS,UAAW,WAAYX,GC/WzC,IAACY,EAAOtD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/poisson/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/poisson/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/poisson/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/poisson/median';\nimport __var_8__ from '@stdlib/stats/base/dists/poisson/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/poisson/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/poisson/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/poisson/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/poisson/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/poisson/logpmf';\nimport __var_14__ from '@stdlib/stats/base/dists/poisson/mgf';\nimport __var_15__ from '@stdlib/stats/base/dists/poisson/pmf';\nimport __var_16__ from '@stdlib/stats/base/dists/poisson/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logpmf = __var_13__;\nvar mgf = __var_14__;\nvar pmf = __var_15__;\nvar quantile = __var_16__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction poissonCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction poissonLogPMF( x ) {\n\treturn logpmf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction poissonMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction poissonPMF( x ) {\n\treturn pmf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction poissonQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Poisson distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - mean parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Poisson} distribution instance\n*\n* @example\n* var poisson = new Poisson( 1.0 );\n*\n* var y = poisson.cdf( 0.8 );\n* // returns ~0.368\n*\n* var v = poisson.mode;\n* // returns 1.0\n*/\nfunction Poisson() {\n\tvar lambda;\n\tif ( !(this instanceof Poisson) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Poisson();\n\t\t}\n\t\treturn new Poisson( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Mean parameter `lambda` must be a positive number. Value: `' + lambda + '`' );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Poisson distribution differential entropy.\n*\n* @name entropy\n* @memberof Poisson.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.entropy;\n* // returns ~2.087\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Poisson distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Poisson.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.kurtosis;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Poisson distribution expected value.\n*\n* @name mean\n* @memberof Poisson.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Poisson distribution median.\n*\n* @name median\n* @memberof Poisson.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Poisson distribution mode.\n*\n* @name mode\n* @memberof Poisson.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Poisson distribution skewness.\n*\n* @name skewness\n* @memberof Poisson.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.skewness;\n* // returns 0.5\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Poisson distribution standard deviation.\n*\n* @name stdev\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.stdev;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Poisson distribution variance.\n*\n* @name variance\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.variance;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.cdf( 1.5 );\n* // returns ~0.406\n*/\nsetReadOnly( Poisson.prototype, 'cdf', poissonCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.logpmf( 2.0 );\n* // returns ~-1.307\n*\n* v = poisson.logpmf( 0.8 );\n* // returns -Infinity\n*/\nsetReadOnly( Poisson.prototype, 'logpmf', poissonLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.mgf( 0.5 );\n* // returns ~3.66\n*/\nsetReadOnly( Poisson.prototype, 'mgf', poissonMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.pmf( 2.0 );\n* // returns ~0.271\n*\n* v = poisson.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Poisson.prototype, 'pmf', poissonPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Poisson.prototype, 'quantile', poissonQuantile );\n\n\n// EXPORTS //\nexport default Poisson;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution constructor.\n*\n* @module @stdlib/stats/base/dists/poisson/ctor\n*\n* @example\n* var Poisson = require( '@stdlib/stats/base/dists/poisson/ctor' );\n*\n* var poisson = new Poisson( 1.0 );\n*\n* var y = poisson.cdf( 1.5 );\n* // returns ~0.736\n*\n* var mode = poisson.mode;\n* // returns 1.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}