{"version":3,"sources":["@stdlib/stats/base/dists/poisson/quantile/lib/search.js","@stdlib/stats/base/dists/poisson/quantile/lib/quantile.js","@stdlib/stats/base/dists/poisson/quantile/lib/factory.js","@stdlib/stats/base/dists/poisson/quantile/lib/index.js"],"names":["methods","cdf","__var_0__","searchLeft","x","p","lambda","searchRight","__var_9__","left","right","erfcinv","isnan","__var_1__","round","__var_2__","sqrt","__var_3__","__var_4__","SQRT2","__var_5__","PINF","__var_6__","search","__var_7__","quantile","sigmaInv","guess","sigma","NaN","constantFunction","degenerate","factory","__var_8__","setReadOnly"],"mappings":"siBAsBA,IAKIA,EALAC,EAAMC,EAmBV,SAASC,EAAYC,EAAGC,EAAGC,GAC1B,OAAe,CACd,GAAW,IAANF,GAAWH,EAAKG,EAAI,EAAKE,GAAWD,EACxC,OAAOD,EAERA,GAAK,GAaP,SAASG,EAAaH,EAAGC,EAAGC,GAC3B,OAEC,GAAKL,EADLG,GAAK,EACQE,IAAYD,EACxB,OAAOD,EAeV,IAAAI,EAPAR,EAAU,CACTS,KAAQN,EACRO,MAASH,GC5CNI,EAAUT,EACVU,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EACPhB,EAAMiB,EACNC,EAAQC,EACRC,EAAOC,EACPC,EAASC,EAwCb,SAASC,EAAUpB,EAAGC,GACrB,IAAIoB,EACAC,EACAC,EAGAxB,EACJ,OAAKQ,EAAON,IAAYA,EAAS,GAG5BM,EAAOP,IAAOA,EAAI,GAAOA,EAAI,EAF1BwB,IAKQ,IAAXvB,GAGM,IAAND,EAFG,EAKG,IAANA,EACGgB,GAIRK,EAAW,GADXE,EAAQZ,EAAMV,IAGbF,EADIC,EAAI,IACHM,EAAS,EAAMN,GAAMc,EAEtBR,EAAS,GAAQ,EAAMN,IAAQc,EAMpCQ,EAAQb,EAAOR,EAAUsB,GADlBxB,EAAKsB,GAHPtB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAK0B,EAAOrB,IAAYD,EAChCkB,EAAOd,KAAMkB,EAAOtB,EAAGC,GACvBiB,EAAOb,MAAOiB,EAAOtB,EAAGC,IClF1B,IAAIwB,EAAmB5B,EACnB6B,EAAalB,EAAUmB,QACvBrB,EAAUI,EACVH,EAAQK,EACRH,EAAQI,EACRF,EAAOI,EACPnB,EAAMqB,EACNH,EAAQK,EACRH,EAAOY,EACPV,EAASf,EAsBb,SAASwB,EAAS1B,GACjB,IAAIoB,EACAE,EAEJ,OAAKhB,EAAON,IAAYA,EAAS,EACzBwB,EAAkBD,KAEV,IAAXvB,EACGyB,EAAY,IAEpBH,EAAQZ,EAAMV,GACdoB,EAAW,EAAME,EAcjB,SAAmBvB,GAClB,IAAIsB,EAGAvB,EAEJ,GAAKQ,EAAOP,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOwB,IAER,GAAW,IAANxB,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOgB,EAIPjB,EADIC,EAAI,IACHM,EAAS,EAAMN,GAAMc,EAEtBR,EAAS,GAAQ,EAAMN,IAAQc,EAOpC,OADAQ,EAAQb,EAAOR,EAAUsB,GADlBxB,EAAKsB,GAHPtB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAK0B,EAAOrB,IAAYD,EAChCkB,EAAOd,KAAMkB,EAAOtB,EAAGC,GACvBiB,EAAOb,MAAOiB,EAAOtB,EAAGC,KC/D3B,IAAI4B,EAAchC,EACduB,EAAWZ,EACXmB,EAAUjB,EAKdmB,EAAaT,EAAU,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dists/poisson/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cdf = __var_0__;\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} p - probability\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} `p` quantile of the specified distribution\n*/\nfunction searchLeft( x, p, lambda ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, lambda ) < p ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} p - probability\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} `p` quantile of the specified distribution\n*/\nfunction searchRight( x, p, lambda ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, lambda ) >= p ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\nexport default methods;\n","import __var_0__ from '@stdlib/math/base/special/erfcinv';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/round';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\nimport __var_4__ from '@stdlib/stats/base/dists/poisson/cdf';\nimport __var_5__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\nimport __var_7__ from './search.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar erfcinv = __var_0__;\nvar isnan = __var_1__;\nvar round = __var_2__;\nvar sqrt = __var_3__;\nvar cdf = __var_4__;\nvar SQRT2 = __var_5__;\nvar PINF = __var_6__;\nvar search = __var_7__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Poisson distribution with mean parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0 );\n* // returns 2\n*\n* @example\n* var y = quantile( 0.9, 4.0 );\n* // returns 7\n*\n* @example\n* var y = quantile( 0.1, 200.0 );\n* // returns 182\n*\n* @example\n* var y = quantile( 1.1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, lambda ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar x2;\n\tvar x;\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\t// Cornish-Fisher expansion:\n\tsigma = sqrt( lambda );\n\tsigmaInv = 1.0 / sigma;\n\tif ( p < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * p ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( lambda + (sigma * corr) );\n\treturn ( cdf( guess, lambda ) >= p ) ?\n\t\tsearch.left( guess, p, lambda ) :\n\t\tsearch.right( guess, p, lambda );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/quantile';\nimport __var_2__ from '@stdlib/math/base/special/erfcinv';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/round';\nimport __var_5__ from '@stdlib/math/base/special/sqrt';\nimport __var_6__ from '@stdlib/stats/base/dists/poisson/cdf';\nimport __var_7__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_8__ from '@stdlib/constants/math/float64-pinf';\nimport __var_9__ from './search.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar erfcinv = __var_2__;\nvar isnan = __var_3__;\nvar round = __var_4__;\nvar sqrt = __var_5__;\nvar cdf = __var_6__;\nvar SQRT2 = __var_7__;\nvar PINF = __var_8__;\nvar search = __var_9__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n* var y = quantile( 0.4 );\n* // returns 4\n*\n* y = quantile( 0.8 );\n* // returns 7\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( lambda ) {\n\tvar sigmaInv;\n\tvar sigma;\n\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tsigma = sqrt( lambda );\n\tsigmaInv = 1.0 / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\t// Cornish-Fisher expansion:\n\t\tif ( p < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * p ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( lambda + (sigma * corr) );\n\t\treturn ( cdf( guess, lambda ) >= p ) ?\n\t\t\tsearch.left( guess, p, lambda ) :\n\t\t\tsearch.right( guess, p, lambda );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/poisson/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/poisson/quantile' );\n*\n* var y = quantile( 0.5, 2.0 );\n* // returns 2\n*\n* y = quantile( 0.9, 4.0 );\n* // returns 7\n*\n* y = quantile( 0.1, 200.0 );\n* // returns 182\n*\n* var myquantile = quantile.factory( 5.0 );\n* y = myquantile( 0.4 );\n* // returns 4\n*\n* y = myquantile( 0.8 );\n* // returns 7\n*\n* y = myquantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}