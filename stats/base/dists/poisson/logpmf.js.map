{"version":3,"sources":["@stdlib/stats/base/dists/poisson/logpmf/lib/logpmf.js","@stdlib/stats/base/dists/poisson/logpmf/lib/factory.js","@stdlib/stats/base/dists/poisson/logpmf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","factorialln","__var_1__","isnan","__var_2__","ln","__var_3__","NINF","__var_4__","PINF","__var_5__","logpmf","x","lambda","NaN","constantFunction","degenerate","factory","__var_6__","__var_7__","setReadOnly"],"mappings":"0hBA2BA,IAAIA,EAAuBC,EACvBC,EAAcC,EACdC,EAAQC,EACRC,EAAKC,EACLC,EAAOC,EACPC,EAAOC,EAqCX,SAASC,EAAQC,EAAGC,GACnB,OAAKV,EAAOS,IAAOT,EAAOU,IAAYA,EAAS,EACvCC,IAEQ,IAAXD,EACW,IAAND,EAAc,EAAML,EAEzBR,EAAsBa,IAAOA,IAAMH,EAC9BG,EAAIP,EAAIQ,GAAaA,EAASZ,EAAaW,GAE9CL,EClDR,IAAIR,EAAuBC,EACvBe,EAAmBb,EACnBD,EAAcG,EACdY,EAAaV,EAAUW,QACvBd,EAAQK,EACRH,EAAKK,EACLH,EAAOW,EACPT,EAAOU,EAmBX,SAASF,EAASJ,GACjB,OAAKV,EAAOU,IAAYA,EAAS,EACzBE,EAAkBD,KAEV,IAAXD,EACGG,EAAY,GAepB,SAAiBJ,GAChB,GAAKT,EAAOS,GACX,OAAOE,IAER,GAAKf,EAAsBa,IAAOA,IAAMH,EACvC,OAASG,EAAIP,EAAIQ,GAAaA,EAASZ,EAAaW,GAErD,OAAOL,GCjCT,IAAIa,EAAcpB,EACdW,EAAST,EACTe,EAAUb,EAKdgB,EAAaT,EAAQ,UAAWM","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/special/factorialln';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/ln';\nimport __var_4__ from '@stdlib/constants/math/float64-ninf';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar factorialln = __var_1__;\nvar isnan = __var_2__;\nvar ln = __var_3__;\nvar NINF = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 4.0, 3.0 );\n* // returns ~-1.784\n*\n* @example\n* var y = logpmf( 1.0, 3.0 );\n* // returns ~-1.901\n*\n* @example\n* var y = logpmf( -1.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid mean parameter:\n* var y = logpmf( 2.0, -0.5 );\n* // returns NaN\n*/\nfunction logpmf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? 0.0 : NINF;\n\t}\n\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\treturn ( x * ln( lambda ) ) - lambda - factorialln( x );\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\nexport default logpmf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/special/factorialln';\nimport __var_3__ from '@stdlib/stats/base/dists/degenerate/logpmf';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-ninf';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar factorialln = __var_2__;\nvar degenerate = __var_3__.factory;\nvar isnan = __var_4__;\nvar ln = __var_5__;\nvar NINF = __var_6__;\nvar PINF = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 1.0 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.792\n*\n* y = logpmf( 1.0 );\n* // returns ~-1.0\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\t\treturn ( x * ln( lambda ) ) - lambda - factorialln( x );\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpmf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a Poisson distribution.\n*\n* @module @stdlib/stats/base/dists/poisson/logpmf\n*\n* @example\n* var logpmf = require( '@stdlib/stats/base/dists/poisson/logpmf' );\n*\n* var y = logpmf( 4.0, 3.0 );\n* // returns ~-1.784\n*\n* y = logpmf( 1.0, 3.0 );\n* // returns ~-1.901\n*\n* y = logpmf( -1.0, 2.0 );\n* // returns -Infinity\n*\n* var mylogpmf = logpmf.factory( 1.0 );\n* y = mylogpmf( 3.0 );\n* // returns ~-2.797\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-1.0\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpmf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpmf;\n"]}