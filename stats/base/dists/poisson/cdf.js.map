{"version":3,"sources":["@stdlib/stats/base/dists/poisson/cdf/lib/cdf.js","@stdlib/stats/base/dists/poisson/cdf/lib/factory.js","@stdlib/stats/base/dists/poisson/cdf/lib/index.js"],"names":["gammainc","__var_0__","isnan","__var_1__","floor","__var_2__","PINF","__var_3__","cdf","x","lambda","NaN","constantFunction","degenerate","factory","__var_4__","__var_5__","setReadOnly"],"mappings":"mZAyBA,IAAIA,EAAWC,EACXC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EAqCX,SAASC,EAAKC,EAAGC,GAChB,OAAKR,EAAOO,IAAOP,EAAOQ,IAAYA,EAAS,EACvCC,IAEHF,EAAI,EACD,EAEQ,IAAXC,GAGAD,IAAMH,EAFH,EAKDN,EAAUU,EAAQN,EAAOK,GAAM,GAAK,GAAM,GCnDlD,IAAIG,EAAmBX,EACnBY,EAAaV,EAAUW,QACvBd,EAAWK,EACXH,EAAQK,EACRH,EAAQW,EACRT,EAAOU,EAmBX,SAASF,EAASJ,GACjB,OAAKR,EAAOQ,IAAYA,EAAS,EACzBE,EAAkBD,KAEV,IAAXD,EACGG,EAAY,GAepB,SAAcJ,GACb,GAAKP,EAAOO,GACX,OAAOE,IAER,GAAKF,EAAI,EACR,OAAO,EAER,GAAKA,IAAMH,EACV,OAAO,EAER,OAAON,EAAUU,EAAQN,EAAOK,GAAM,GAAK,GAAM,IChCnD,IAAIQ,EAAchB,EACdO,EAAML,EACNW,EAAUT,EAKdY,EAAaT,EAAK,UAAWM","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/gammainc';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/floor';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar gammainc = __var_0__;\nvar isnan = __var_1__;\nvar floor = __var_2__;\nvar PINF = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.5 );\n* // returns ~0.986\n*\n* @example\n* var y = cdf( 2.0, 10.0 );\n* // returns ~0.003\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative mean parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn gammainc( lambda, floor( x ) + 1.0, true, true );\n}\n\n\n// EXPORTS //\nexport default cdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/cdf';\nimport __var_2__ from '@stdlib/math/base/special/gammainc';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/floor';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar gammainc = __var_2__;\nvar isnan = __var_3__;\nvar floor = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 5.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.265\n*\n* y = cdf( 8.0 );\n* // returns ~0.932\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn gammainc( lambda, floor( x ) + 1.0, true, true );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './cdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/poisson/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/poisson/cdf' );\n*\n* var y = cdf( 2.0, 0.5 );\n* // returns ~0.986\n*\n* y = cdf( 2.0, 10.0 );\n* // returns ~0.003\n*\n* y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 5.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.265\n*\n* y = mycdf( 8.0 );\n* // returns ~0.932\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default cdf;\n"]}