{"version":3,"sources":["@stdlib/stats/base/dists/poisson/entropy/lib/entropy.js","@stdlib/stats/base/dists/poisson/entropy/lib/index.js"],"names":["sumSeries","__var_0__","isnan","__var_1__","factorialln","__var_2__","factorial","__var_3__","exp","__var_4__","ln","__var_5__","seriesClosure","lambda","lk","k","entropy","gen","out","NaN"],"mappings":"wVA2BA,IAAIA,EAAYC,EACZC,EAAQC,EACRC,EAAcC,EACdC,EAAYC,EACZC,EAAMC,EACNC,EAAKC,EAYT,SAASC,EAAeC,GACvB,IAAIC,EACAC,EAGJ,OAFAA,EAAI,EACJD,EAAKD,EASL,WAGC,OADAC,GAAMD,GACMT,EAFZW,GAAK,GAE0BT,EAAWS,IA6B5C,SAASC,EAASH,GACjB,IAAII,EACAC,EACJ,OAAKhB,EAAOW,IAAYA,EAAS,EACzBM,IAEQ,IAAXN,EACG,GAERI,EAAML,EAAeC,GACrBK,EAAML,GAAW,EAAIH,EAAGG,IACxBK,GAAOV,GAAMK,GAAWb,EAAWiB,IC/DjC,IAACD,EAAUf","sourcesContent":["import __var_0__ from '@stdlib/math/base/tools/sum-series';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/factorialln';\nimport __var_3__ from '@stdlib/math/base/special/factorial';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar sumSeries = __var_0__;\nvar isnan = __var_1__;\nvar factorialln = __var_2__;\nvar factorial = __var_3__;\nvar exp = __var_4__;\nvar ln = __var_5__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a function to retrieve elements of the series \\\\( \\sum_{k=0}^{\\infty} \\frac{ \\lambda^k \\log(k!) }{ k! } \\\\).\n*\n* @private\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} function to retrieve series elements\n*/\nfunction seriesClosure( lambda ) {\n\tvar lk;\n\tvar k;\n\tk = 1;\n\tlk = lambda;\n\treturn seriesElement;\n\n\t/**\n\t* Returns the current series element.\n\t*\n\t* @private\n\t* @returns {number} series element\n\t*/\n\tfunction seriesElement() {\n\t\tk += 1;\n\t\tlk *= lambda;\n\t\treturn lk * factorialln( k ) / factorial( k );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~2.508\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns ~1.305\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( lambda ) {\n\tvar gen;\n\tvar out;\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tgen = seriesClosure( lambda );\n\tout = lambda * ( 1.0-ln(lambda) );\n\tout += exp( -lambda ) * sumSeries( gen );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default entropy;\n","import __var_0__ from './entropy.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution entropy.\n*\n* @module @stdlib/stats/base/dists/poisson/entropy\n*\n* @example\n* var entropy = require( '@stdlib/stats/base/dists/poisson/entropy' );\n*\n* var v = entropy( 11.0 );\n* // returns ~2.61\n*\n* v = entropy( 4.5 );\n* // returns ~2.149\n*/\n\n// MODULES //\nvar entropy = __var_0__;\n\n\n// EXPORTS //\nexport default entropy;\n"]}