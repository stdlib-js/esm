{"version":3,"sources":["@stdlib/stats/base/dists/uniform/ctor/lib/ctor.js","@stdlib/stats/base/dists/uniform/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isNumber","__var_3__","isPrimitive","isnan","__var_4__","entropy","__var_5__","kurtosis","__var_6__","mean","__var_7__","median","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logcdf","__var_13__","logpdf","__var_14__","mgf","__var_15__","pdf","__var_16__","quantile","__var_17__","uniformCDF","x","this","a","b","uniformLogCDF","uniformLogPDF","uniformMGF","t","uniformPDF","uniformQuantile","p","Uniform","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/stats/base/dists/uniform/entropy';\nimport __var_6__ from '@stdlib/stats/base/dists/uniform/kurtosis';\nimport __var_7__ from '@stdlib/stats/base/dists/uniform/mean';\nimport __var_8__ from '@stdlib/stats/base/dists/uniform/median';\nimport __var_9__ from '@stdlib/stats/base/dists/uniform/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/uniform/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/uniform/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/uniform/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/uniform/logcdf';\nimport __var_14__ from '@stdlib/stats/base/dists/uniform/logpdf';\nimport __var_15__ from '@stdlib/stats/base/dists/uniform/mgf';\nimport __var_16__ from '@stdlib/stats/base/dists/uniform/pdf';\nimport __var_17__ from '@stdlib/stats/base/dists/uniform/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isNumber = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar entropy = __var_5__;\nvar kurtosis = __var_6__;\nvar mean = __var_7__;\nvar median = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logcdf = __var_13__;\nvar logpdf = __var_14__;\nvar mgf = __var_15__;\nvar pdf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction uniformCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated logCDF\n*/\nfunction uniformLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction uniformLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction uniformMGF( t ) {\n\treturn mgf( t, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction uniformPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction uniformQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Uniform distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @throws {TypeError} `a` must be a number primitive\n* @throws {TypeError} `b` must be a number primitive\n* @throws {RangeError} `a` must be smaller than `b`\n* @returns {Uniform} distribution instance\n*\n* @example\n* var uniform = new Uniform( 0.0, 1.0 );\n*\n* var y = uniform.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = uniform.mean;\n* // returns 0.5\n*/\nfunction Uniform() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Uniform) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Uniform();\n\t\t}\n\t\treturn new Uniform( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );\n\t\t}\n\t\tif ( a >= b ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value >= b ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( a >= value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Uniform distribution differential entropy.\n*\n* @name entropy\n* @memberof Uniform.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.entropy;\n* // returns ~2.079\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Uniform distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Uniform.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.kurtosis;\n* // returns -1.2\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Uniform distribution expected value.\n*\n* @name mean\n* @memberof Uniform.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Uniform distribution median.\n*\n* @name median\n* @memberof Uniform.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Uniform distribution skewness.\n*\n* @name skewness\n* @memberof Uniform.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Uniform distribution standard deviation.\n*\n* @name stdev\n* @memberof Uniform.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.stdev;\n* // returns ~2.309\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Uniform distribution variance.\n*\n* @name variance\n* @memberof Uniform.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.variance;\n* // returns ~5.333\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.cdf( 3.0 );\n* // returns ~0.5\n*/\nsetReadOnly( Uniform.prototype, 'cdf', uniformCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.logcdf( 2.5 );\n* // returns ~-1.386\n*/\nsetReadOnly( Uniform.prototype, 'logcdf', uniformLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.logpdf( 2.5 );\n* // returns ~-0.693\n*/\nsetReadOnly( Uniform.prototype, 'logpdf', uniformLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.mgf( 0.5 );\n* // returns ~4.671\n*/\nsetReadOnly( Uniform.prototype, 'mgf', uniformMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.pdf( 2.4 );\n* // returns 0.5\n*/\nsetReadOnly( Uniform.prototype, 'pdf', uniformPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Uniform.prototype, 'quantile', uniformQuantile );\n\n\n// EXPORTS //\nexport default Uniform;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution constructor.\n*\n* @module @stdlib/stats/base/dists/uniform/ctor\n*\n* @example\n* var Uniform = require( '@stdlib/stats/base/dists/uniform/ctor' );\n*\n* var uniform = new Uniform( 0.0, 1.0 );\n*\n* var y = uniform.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = uniform.mean;\n* // returns 0.5\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}