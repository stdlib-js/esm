{"version":3,"sources":["@stdlib/stats/base/dists/chi/logpdf/lib/logpdf.js","@stdlib/stats/base/dists/chi/logpdf/lib/factory.js","@stdlib/stats/base/dists/chi/logpdf/lib/index.js"],"names":["isnan","__var_0__","gammaln","__var_1__","ln","__var_2__","NINF","__var_3__","PINF","__var_4__","LN2","__var_5__","logpdf","x","k","out","kh","NaN","constantFunction","degenerate","factory","__var_6__","__var_7__","km1","setReadOnly"],"mappings":"4gBA2BA,IAAIA,EAAQC,EACRC,EAAUC,EACVC,EAAKC,EACLC,EAAOC,EACPC,EAAOC,EACPC,EAAMC,EAqCV,SAASC,EAAQC,EAAGC,GACnB,IAAIC,EACAC,EACJ,OACChB,EAAOa,IACPb,EAAOc,IACPA,EAAI,EAEGG,IAEG,IAANH,EAEW,IAAND,EAAcL,EAAOF,EAE1BO,EAAI,GAAOA,IAAML,EACdF,GAGRS,GAAU,GADVC,EAAKF,EAAI,IACYJ,GAAYI,EAAE,GAAQV,EAAIS,GAAWA,EAAEA,EAAK,EACjEE,GAAOb,EAASc,IC3DjB,IAAIE,EAAmBjB,EACnBkB,EAAahB,EAAUiB,QACvBpB,EAAQK,EACRH,EAAUK,EACVH,EAAKK,EACLH,EAAOK,EACPH,EAAOa,EACPX,EAAMY,EAoBV,SAASF,EAASN,GACjB,IAAIS,EACAP,EAEJ,OAAKhB,EAAOc,IAAOA,EAAI,EACfI,EAAkBD,KAEf,IAANH,EACGK,EAAY,IAGpBH,EAAKF,EAAI,EACTS,EAAMT,EAAI,EAcV,SAAiBD,GAChB,IAAIE,EACJ,GAAKf,EAAOa,GACX,OAAOI,IAER,GAAKJ,EAAI,GAAOA,IAAML,EACrB,OAAOF,EAIR,OAFAS,GAAU,EAAIC,GAAON,EAAUa,EAAMnB,EAAIS,GAAWA,EAAEA,EAAK,EAC3DE,GAAOb,EAASc,KC/ClB,IAAIQ,EAAcvB,EACdW,EAAST,EACTiB,EAAUf,EAKdmB,EAAaZ,EAAQ,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/gammaln';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\nimport __var_5__ from '@stdlib/constants/math/float64-ln-two';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar gammaln = __var_1__;\nvar ln = __var_2__;\nvar NINF = __var_3__;\nvar PINF = __var_4__;\nvar LN2 = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~-4.35\n*\n* @example\n* var y = logpdf( 0.7, 0.7 );\n* // returns ~-0.622\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k ) {\n\tvar out;\n\tvar kh;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : NINF;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn NINF;\n\t}\n\tkh = k / 2.0;\n\tout = ( ( 1.0-kh ) * LN2 ) + ( ( k-1.0 ) * ln( x ) ) - ( (x*x) / 2.0 );\n\tout -= gammaln( kh );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default logpdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/logpdf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/gammaln';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\nimport __var_7__ from '@stdlib/constants/math/float64-ln-two';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar isnan = __var_2__;\nvar gammaln = __var_3__;\nvar ln = __var_4__;\nvar NINF = __var_5__;\nvar PINF = __var_6__;\nvar LN2 = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5 );\n*\n* var y = logpdf( 2.0 );\n* // returns ~-3.115\n*\n* y = logpdf( 1.0 );\n* // returns ~-1.268\n*/\nfunction factory( k ) {\n\tvar km1;\n\tvar kh;\n\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\n\tkh = k / 2.0;\n\tkm1 = k - 1.0;\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 1.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tout = ( ( 1.0-kh ) * LN2 ) + ( km1 * ln( x ) ) - ( (x*x) / 2.0 );\n\t\tout -= gammaln( kh );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a chi distribution.\n*\n* @module @stdlib/stats/base/dists/chi/logpdf\n*\n* @example\n* var logpdf = require( '@stdlib/stats/base/dists/chi/logpdf' );\n*\n* var y = logpdf( 2.0, 1.0 );\n* // returns ~-2.226\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/chi/logpdf' ).factory;\n*\n* var logpdf = factory( 6.0 );\n*\n* var y = logpdf( 3.0 );\n* // returns ~-1.088\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpdf;\n"]}