{"version":3,"sources":["@stdlib/stats/base/dists/chi/ctor/lib/ctor.js","@stdlib/stats/base/dists/chi/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","mode","__var_7__","skewness","__var_8__","stdev","__var_9__","variance","__var_10__","cdf","__var_11__","logpdf","__var_12__","pdf","__var_13__","quantile","__var_14__","chiCDF","x","this","k","chiLogPDF","chiPDF","chiQuantile","p","Chi","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"mjBAsCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAQC,GAChB,OAAOT,EAAKS,EAAGC,KAAKC,GAUrB,SAASC,EAAWH,GACnB,OAAOP,EAAQO,EAAGC,KAAKC,GAUxB,SAASE,EAAQJ,GAChB,OAAOL,EAAKK,EAAGC,KAAKC,GAUrB,SAASG,EAAaC,GACrB,OAAOT,EAAUS,EAAGL,KAAKC,GAuB1B,SAASK,IACR,IAAIL,EACJ,KAAOD,gBAAgBM,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAKC,UAAW,IAE5B,GAAKA,UAAUC,QAEd,IAAMnC,EADN4B,EAAIM,UAAW,IAEd,MAAM,IAAIE,UAAW,2EAA6ER,EAAI,UAGvGA,EAAI,EAeL,OAbAlC,EAAgBiC,KAAM,IAAK,CAC1BU,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,GAERY,IAAO,SAAcC,GACpB,IAAMzC,EAAYyC,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFb,EAAIa,KAGCd,KAiBR7B,EAAqBmC,EAAIS,UAAW,WAAW,WAC9C,OAAOvC,EAASwB,KAAKC,MAiBtB9B,EAAqBmC,EAAIS,UAAW,YAAY,WAC/C,OAAOrC,EAAUsB,KAAKC,MAiBvB9B,EAAqBmC,EAAIS,UAAW,QAAQ,WAC3C,OAAOnC,EAAMoB,KAAKC,MAiBnB9B,EAAqBmC,EAAIS,UAAW,QAAQ,WAC3C,OAAOjC,EAAMkB,KAAKC,MAiBnB9B,EAAqBmC,EAAIS,UAAW,YAAY,WAC/C,OAAO/B,EAAUgB,KAAKC,MAiBvB9B,EAAqBmC,EAAIS,UAAW,SAAS,WAC5C,OAAO7B,EAAOc,KAAKC,MAiBpB9B,EAAqBmC,EAAIS,UAAW,YAAY,WAC/C,OAAO3B,EAAUY,KAAKC,MAmBvBhC,EAAaqC,EAAIS,UAAW,MAAOjB,GAkBnC7B,EAAaqC,EAAIS,UAAW,SAAUb,GAkBtCjC,EAAaqC,EAAIS,UAAW,MAAOZ,GAkBnClC,EAAaqC,EAAIS,UAAW,WAAYX,GCtTrC,IAACY,EAAOhD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/chi/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/chi/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/chi/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/chi/mode';\nimport __var_8__ from '@stdlib/stats/base/dists/chi/skewness';\nimport __var_9__ from '@stdlib/stats/base/dists/chi/stdev';\nimport __var_10__ from '@stdlib/stats/base/dists/chi/variance';\nimport __var_11__ from '@stdlib/stats/base/dists/chi/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/chi/logpdf';\nimport __var_13__ from '@stdlib/stats/base/dists/chi/pdf';\nimport __var_14__ from '@stdlib/stats/base/dists/chi/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar mode = __var_7__;\nvar skewness = __var_8__;\nvar stdev = __var_9__;\nvar variance = __var_10__;\nvar cdf = __var_11__;\nvar logpdf = __var_12__;\nvar pdf = __var_13__;\nvar quantile = __var_14__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction chiCDF( x ) {\n\treturn cdf( x, this.k );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction chiLogPDF( x ) {\n\treturn logpdf( x, this.k );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction chiPDF( x ) {\n\treturn pdf( x, this.k );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction chiQuantile( p ) {\n\treturn quantile( p, this.k );\n}\n\n\n// MAIN //\n\n/**\n* Chi distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [k=1.0] - degrees of freedom\n* @throws {TypeError} `k` must be a positive number\n* @returns {Chi} distribution instance\n*\n* @example\n* var chi = new Chi( 1.0 );\n*\n* var y = chi.cdf( 0.8 );\n* // returns ~0.576\n*\n* var v = chi.mode;\n* // returns 0.0\n*/\nfunction Chi() {\n\tvar k;\n\tif ( !(this instanceof Chi) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Chi();\n\t\t}\n\t\treturn new Chi( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Chi distribution differential entropy.\n*\n* @name entropy\n* @memberof Chi.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.entropy;\n* // returns ~1.019\n*/\nsetReadOnlyAccessor( Chi.prototype, 'entropy', function get() {\n\treturn entropy( this.k );\n});\n\n/**\n* Chi distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Chi.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.kurtosis;\n* // returns ~0.059\n*/\nsetReadOnlyAccessor( Chi.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k );\n});\n\n/**\n* Chi distribution expected value.\n*\n* @name mean\n* @memberof Chi.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.mean;\n* // returns ~1.88\n*/\nsetReadOnlyAccessor( Chi.prototype, 'mean', function get() {\n\treturn mean( this.k );\n});\n\n/**\n* Chi distribution mode.\n*\n* @name mode\n* @memberof Chi.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.mode;\n* // returns ~1.732\n*/\nsetReadOnlyAccessor( Chi.prototype, 'mode', function get() {\n\treturn mode( this.k );\n});\n\n/**\n* Chi distribution skewness.\n*\n* @name skewness\n* @memberof Chi.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.skewness;\n* // returns ~0.406\n*/\nsetReadOnlyAccessor( Chi.prototype, 'skewness', function get() {\n\treturn skewness( this.k );\n});\n\n/**\n* Chi distribution standard deviation.\n*\n* @name stdev\n* @memberof Chi.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.stdev;\n* // returns ~0.682\n*/\nsetReadOnlyAccessor( Chi.prototype, 'stdev', function get() {\n\treturn stdev( this.k );\n});\n\n/**\n* Chi distribution variance.\n*\n* @name variance\n* @memberof Chi.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.variance;\n* // returns ~0.466\n*/\nsetReadOnlyAccessor( Chi.prototype, 'variance', function get() {\n\treturn variance( this.k );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.cdf( 0.5 );\n* // returns ~0.118\n*/\nsetReadOnly( Chi.prototype, 'cdf', chiCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.logpdf( 0.8 );\n* // returns ~-0.543\n*/\nsetReadOnly( Chi.prototype, 'logpdf', chiLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.pdf( 0.8 );\n* // returns ~0.581\n*/\nsetReadOnly( Chi.prototype, 'pdf', chiPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Chi.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.quantile( 0.5 );\n* // returns ~1.177\n*/\nsetReadOnly( Chi.prototype, 'quantile', chiQuantile );\n\n\n// EXPORTS //\nexport default Chi;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution constructor.\n*\n* @module @stdlib/stats/base/dists/chi/ctor\n*\n* @example\n* var Chi = require( '@stdlib/stats/base/dists/chi/ctor' );\n*\n* var chi = new Chi( 1.0 );\n*\n* var y = chi.cdf( 0.8 );\n* // returns ~0.576\n*\n* var mode = chi.mode;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}