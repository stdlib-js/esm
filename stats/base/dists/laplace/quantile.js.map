{"version":3,"sources":["@stdlib/stats/base/dists/laplace/quantile/lib/quantile.js","@stdlib/stats/base/dists/laplace/quantile/lib/factory.js","@stdlib/stats/base/dists/laplace/quantile/lib/index.js"],"names":["signum","__var_0__","isnan","__var_1__","abs","__var_2__","ln","__var_3__","quantile","p","mu","b","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"kWAyBA,IAAIA,EAASC,EACTC,EAAQC,EACRC,EAAMC,EACNC,EAAKC,EA8CT,SAASC,EAAUC,EAAGC,EAAIC,GACzB,OACCT,EAAOQ,IACPR,EAAOS,IACPT,EAAOO,IACPE,GAAK,GACLF,EAAI,GACJA,EAAI,EAEGG,IAEDF,EAAOC,EAAIX,EAAQS,EAAE,IAAQH,EAAI,EAAQ,EAAMF,EAAKK,EAAE,KC3D9D,IAAII,EAAmBZ,EACnBD,EAASG,EACTD,EAAQG,EACRD,EAAMG,EACND,EAAKQ,EAoBT,SAASC,EAASL,EAAIC,GACrB,OACCT,EAAOQ,IACPR,EAAOS,IACPA,GAAK,EAEEE,EAAkBD,KAe1B,SAAmBH,GAClB,GAAKP,EAAOO,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOG,IAER,OAAOF,EAAOC,EAAIX,EAAQS,EAAE,IAAQH,EAAI,EAAO,EAAMF,EAAKK,EAAE,MChC9D,IAAIO,EAAcf,EACdO,EAAWL,EACXY,EAAUV,EAKdW,EAAaR,EAAU,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/signum';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/abs';\nimport __var_3__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar signum = __var_0__;\nvar isnan = __var_1__;\nvar abs = __var_2__;\nvar ln = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.916\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tisnan( p ) ||\n\t\tb <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu - ( b * signum( p-0.5 ) * ln( 1.0 - ( 2.0 * abs( p-0.5 ) ) ) );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/special/signum';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/abs';\nimport __var_4__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar signum = __var_1__;\nvar isnan = __var_2__;\nvar abs = __var_3__;\nvar ln = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~11.833\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu - ( b * signum( p-0.5 ) * ln( 1.0 - (2.0 * abs( p-0.5 )) ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/laplace/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/laplace/quantile' );\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.916\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*\n* y = myQuantile( 0.8 );\n* // returns ~11.833\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}