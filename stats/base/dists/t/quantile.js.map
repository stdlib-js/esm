{"version":3,"sources":["@stdlib/stats/base/dists/t/quantile/lib/quantile.js","@stdlib/stats/base/dists/t/quantile/lib/factory.js","@stdlib/stats/base/dists/t/quantile/lib/index.js"],"names":["kernelBetaincinv","__var_0__","isnan","__var_1__","sign","__var_2__","sqrt","__var_3__","quantile","p","v","prob","xs","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"kXAyBA,IAAIA,EAAmBC,EACnBC,EAAQC,EACRC,EAAOC,EACPC,EAAOC,EAwCX,SAASC,EAAUC,EAAGC,GACrB,IAAIC,EACAC,EACJ,OACCV,EAAOQ,IACPR,EAAOO,IACPC,GAAK,GACLD,EAAI,GACJA,EAAI,EAEGI,KAGRD,EAAKZ,EAAkBU,EAAI,EAAK,GAAK,GADrCC,EAASF,EAAI,GAAQ,EAAMA,EAAIA,GACkB,EAAO,EAAME,GACvDP,EAAMK,EAAI,IAAQH,EAAMI,EAAIE,EAAI,GAAMA,EAAI,KCxDlD,IAAIE,EAAmBb,EACnBD,EAAmBG,EACnBD,EAAQG,EACRD,EAAOG,EACPD,EAAOS,EAsBX,SAASC,EAASN,GACjB,OAAKR,EAAOQ,IAAOA,GAAK,EAChBI,EAAkBD,KAe1B,SAAmBJ,GAClB,IAAIE,EACAC,EAEJ,GAAKV,EAAOO,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOI,IAIR,OADAD,EAAKZ,EAAkBU,EAAI,EAAK,GAAK,GADrCC,EAASF,EAAI,GAAQ,EAAMA,EAAIA,GACkB,EAAO,EAAME,GACvDP,EAAMK,EAAI,IAAQH,EAAMI,EAAIE,EAAI,GAAMA,EAAI,KC5BnD,IAAIK,EAAchB,EACdO,EAAWL,EACXa,EAAUX,EAKdY,EAAaT,EAAU,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/kernel-betaincinv';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/signum';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar kernelBetaincinv = __var_0__;\nvar isnan = __var_1__;\nvar sign = __var_2__;\nvar sqrt = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* @example\n* var y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* @example\n* var y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, v ) {\n\tvar prob;\n\tvar xs;\n\tif (\n\t\tisnan( v ) ||\n\t\tisnan( p ) ||\n\t\tv <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/special/kernel-betaincinv';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/signum';\nimport __var_4__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar kernelBetaincinv = __var_1__;\nvar isnan = __var_2__;\nvar sign = __var_3__;\nvar sqrt = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.5 );\n* var y = quantile( 0.5 );\n* // returns 0.0\n*\n* y = quantile( 0.8 );\n* // returns ~2.513\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar prob;\n\t\tvar xs;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\t\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\t\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a Student's t distribution.\n*\n* @module @stdlib/stats/base/dists/t/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/t/quantile' );\n*\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* var myquantile = quantile.factory( 4.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~-0.941\n*\n* y = myquantile( 0.9 );\n* // returns ~1.533\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}