{"version":3,"sources":["@stdlib/stats/base/dists/levy/ctor/lib/ctor.js","@stdlib/stats/base/dists/levy/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","isNumber","__var_4__","isnan","__var_5__","entropy","__var_6__","mean","__var_7__","median","__var_8__","mode","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logcdf","__var_13__","logpdf","__var_14__","pdf","__var_15__","quantile","__var_16__","levyCDF","x","this","mu","c","levyLogCDF","levyLogPDF","levyPDF","levyQuantile","p","Levy","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"8oBAwCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAWC,EAAUF,YACrBG,EAAQC,EACRC,EAAUC,EACVC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAASC,GACjB,OAAOX,EAAKW,EAAGC,KAAKC,GAAID,KAAKE,GAU9B,SAASC,EAAYJ,GACpB,OAAOT,EAAQS,EAAGC,KAAKC,GAAID,KAAKE,GAUjC,SAASE,EAAYL,GACpB,OAAOP,EAAQO,EAAGC,KAAKC,GAAID,KAAKE,GAUjC,SAASG,EAASN,GACjB,OAAOL,EAAKK,EAAGC,KAAKC,GAAID,KAAKE,GAU9B,SAASI,EAAcC,GACtB,OAAOX,EAAUW,EAAGP,KAAKC,GAAID,KAAKE,GAwBnC,SAASM,IACR,IAAIP,EACAC,EACJ,KAAOF,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAMC,UAAW,GAAKA,UAAW,IAE7C,GAAKA,UAAUC,OAAS,CAGvB,GADAR,EAAIO,UAAW,IACTrC,EAFN6B,EAAKQ,UAAW,KAEQnC,EAAO2B,GAC9B,MAAM,IAAIU,UAAW,iFAAmFV,EAAK,KAE9G,IAAMhC,EAAYiC,GACjB,MAAM,IAAIS,UAAW,4EAA8ET,EAAI,UAGxGD,EAAK,EACLC,EAAI,EA4BL,OA1BAvC,EAAgBqC,KAAM,KAAM,CAC3BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM5C,EAAU4C,IAAW1C,EAAO0C,GACjC,MAAM,IAAIL,UAAW,sDAAwDK,EAAQ,KAEtFf,EAAKe,KAGPrD,EAAgBqC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAM/C,EAAY+C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFd,EAAIc,KAGChB,KAiBRjC,EAAqByC,EAAKS,UAAW,WAAW,WAC/C,OAAOzC,EAASwB,KAAKC,GAAID,KAAKE,MAiB/BnC,EAAqByC,EAAKS,UAAW,QAAQ,WAC5C,OAAOvC,EAAMsB,KAAKC,GAAID,KAAKE,MAiB5BnC,EAAqByC,EAAKS,UAAW,UAAU,WAC9C,OAAOrC,EAAQoB,KAAKC,GAAID,KAAKE,MAiB9BnC,EAAqByC,EAAKS,UAAW,QAAQ,WAC5C,OAAOnC,EAAMkB,KAAKC,GAAID,KAAKE,MAiB5BnC,EAAqByC,EAAKS,UAAW,SAAS,WAC7C,OAAOjC,EAAOgB,KAAKC,GAAID,KAAKE,MAiB7BnC,EAAqByC,EAAKS,UAAW,YAAY,WAChD,OAAO/B,EAAUc,KAAKC,GAAID,KAAKE,MAmBhCrC,EAAa2C,EAAKS,UAAW,MAAOnB,GAkBpCjC,EAAa2C,EAAKS,UAAW,SAAUd,GAkBvCtC,EAAa2C,EAAKS,UAAW,SAAUb,GAkBvCvC,EAAa2C,EAAKS,UAAW,MAAOZ,GAkBpCxC,EAAa2C,EAAKS,UAAW,WAAYX,GCzVtC,IAACY,EAAOtD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-number';\nimport __var_5__ from '@stdlib/assert/is-nan';\nimport __var_6__ from '@stdlib/stats/base/dists/levy/entropy';\nimport __var_7__ from '@stdlib/stats/base/dists/levy/mean';\nimport __var_8__ from '@stdlib/stats/base/dists/levy/median';\nimport __var_9__ from '@stdlib/stats/base/dists/levy/mode';\nimport __var_10__ from '@stdlib/stats/base/dists/levy/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/levy/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/levy/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/levy/logcdf';\nimport __var_14__ from '@stdlib/stats/base/dists/levy/logpdf';\nimport __var_15__ from '@stdlib/stats/base/dists/levy/pdf';\nimport __var_16__ from '@stdlib/stats/base/dists/levy/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isNumber = __var_4__.isPrimitive;\nvar isnan = __var_5__;\nvar entropy = __var_6__;\nvar mean = __var_7__;\nvar median = __var_8__;\nvar mode = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logcdf = __var_13__;\nvar logpdf = __var_14__;\nvar pdf = __var_15__;\nvar quantile = __var_16__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction levyCDF( x ) {\n\treturn cdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction levyLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction levyLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction levyPDF( x ) {\n\treturn pdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction levyQuantile( p ) {\n\treturn quantile( p, this.mu, this.c );\n}\n\n\n// MAIN //\n\n/**\n* Lévy distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [c=1.0] - scale parameter\n* @throws {TypeError} `c` must be a positive number\n* @returns {Levy} distribution instance\n*\n* @example\n* var levy = new Levy( 1.0, 1.0 );\n*\n* var y = levy.cdf( 3.0 );\n* // returns ~0.48\n*\n* var v = levy.mode;\n* // returns ~1.333\n*/\nfunction Levy() {\n\tvar mu;\n\tvar c;\n\tif ( !(this instanceof Levy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Levy();\n\t\t}\n\t\treturn new Levy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tc = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );\n\t\t}\n\t\tif ( !isPositive( c ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Scale parameter `c` must be a positive number. Value: `' + c + '`' );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tc = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'c', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn c;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tc = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Lévy distribution differential entropy.\n*\n* @name entropy\n* @memberof Levy.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.entropy;\n* // returns ~5.809\n*/\nsetReadOnlyAccessor( Levy.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.c );\n});\n\n/**\n* Lévy distribution expected value.\n*\n* @name mean\n* @memberof Levy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.mean;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.c );\n});\n\n/**\n* Lévy distribution median.\n*\n* @name median\n* @memberof Levy.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.median;\n* // returns ~30.377\n*/\nsetReadOnlyAccessor( Levy.prototype, 'median', function get() {\n\treturn median( this.mu, this.c );\n});\n\n/**\n* Lévy distribution mode.\n*\n* @name mode\n* @memberof Levy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.mode;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Levy.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.c );\n});\n\n/**\n* Lévy distribution standard deviation.\n*\n* @name stdev\n* @memberof Levy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.stdev;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.c );\n});\n\n/**\n* Lévy distribution variance.\n*\n* @name variance\n* @memberof Levy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.variance;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.c );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.cdf( 2.5 );\n* // returns ~0.005\n*/\nsetReadOnly( Levy.prototype, 'cdf', levyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.logcdf( 2.5 );\n* // returns ~-5.365\n*/\nsetReadOnly( Levy.prototype, 'logcdf', levyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.logpdf( 2.5 );\n* // returns ~-3.186\n*/\nsetReadOnly( Levy.prototype, 'logpdf', levyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.pdf( 2.5 );\n* // returns ~0.041\n*/\nsetReadOnly( Levy.prototype, 'pdf', levyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Levy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.quantile( 0.5 );\n* // returns ~10.792\n*/\nsetReadOnly( Levy.prototype, 'quantile', levyQuantile );\n\n\n// EXPORTS //\nexport default Levy;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution constructor.\n*\n* @module @stdlib/stats/base/dists/levy/ctor\n*\n* @example\n* var Levy = require( '@stdlib/stats/base/dists/levy/ctor' );\n*\n* var levy = new Levy( 1.0, 1.0 );\n*\n* var y = levy.cdf( 1.0 );\n* // returns 0.0\n*\n* var mean = levy.mean;\n* // returns Infinity\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}