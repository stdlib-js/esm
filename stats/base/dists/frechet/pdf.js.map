{"version":3,"sources":["@stdlib/stats/base/dists/frechet/pdf/lib/pdf.js","@stdlib/stats/base/dists/frechet/pdf/lib/factory.js","@stdlib/stats/base/dists/frechet/pdf/lib/index.js"],"names":["logpdf","__var_0__","isnan","__var_1__","exp","__var_2__","pdf","x","alpha","s","m","NaN","constantFunction","ldfrechet","factory","__var_3__","setReadOnly"],"mappings":"+QAwBA,IAAIA,EAASC,EACTC,EAAQC,EACRC,EAAMC,EAkDV,SAASC,EAAKC,EAAGC,EAAOC,EAAGC,GAC1B,OACCR,EAAOK,IACPL,EAAOM,IACPN,EAAOO,IACPP,EAAOQ,IACPF,GAAS,GACTC,GAAK,EAEEE,IAEDP,EAAKJ,EAAQO,EAAGC,EAAOC,EAAGC,IC9DlC,IAAIE,EAAmBX,EACnBY,EAAYV,EAAUW,QACtBZ,EAAQG,EACRD,EAAMW,EAsBV,SAASD,EAASN,EAAOC,EAAGC,GAC3B,IAAIV,EACJ,OACCE,EAAOM,IACPN,EAAOO,IACPP,EAAOQ,IACPF,GAAS,GACTC,GAAK,EAEEG,EAAkBD,MAE1BX,EAASa,EAAWL,EAAOC,EAAGC,GAc9B,SAAcH,GACb,GAAKL,EAAOK,GACX,OAAOI,IAER,OAAOP,EAAKJ,EAAQO,EAAGC,EAAOC,EAAGC,MC/BnC,IAAIM,EAAcf,EACdK,EAAMH,EACNW,EAAUT,EAKdW,EAAaV,EAAK,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dists/frechet/logpdf';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/exp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar logpdf = __var_0__;\nvar isnan = __var_1__;\nvar exp = __var_2__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~0.031\n*\n* @example\n* var y = pdf( -2.0, 1.0, 3.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, 2.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction pdf( x, alpha, s, m ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( logpdf( x, alpha, s, m ) );\n}\n\n\n// EXPORTS //\nexport default pdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/frechet/logpdf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar ldfrechet = __var_1__.factory;\nvar isnan = __var_2__;\nvar exp = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = pdf( 10.0 );\n* // returns ~0.104\n*\n* y = pdf( 7.0 );\n* // returns ~0.173\n*/\nfunction factory( alpha, s, m ) {\n\tvar logpdf;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlogpdf = ldfrechet( alpha, s, m );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( logpdf( x, alpha, s, m ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution probability density function (PDF).\n*\n* @module @stdlib/stats/base/dists/frechet/pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats/base/dists/frechet/pdf' );\n*\n* var y = pdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~0.698\n*\n* y = pdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/frechet/pdf' ).factory;\n* var pdf = factory( 3.0, 3.0, 5.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.806\n*\n* y = pdf( 7.0 );\n* // returns ~0.034\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pdf;\n"]}