{"version":3,"sources":["@stdlib/stats/base/dists/frechet/ctor/lib/ctor.js","@stdlib/stats/base/dists/frechet/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","isNumber","__var_4__","isnan","__var_5__","entropy","__var_6__","kurtosis","__var_7__","mean","__var_8__","median","__var_9__","mode","__var_10__","skewness","__var_11__","stdev","__var_12__","variance","__var_13__","cdf","__var_14__","logcdf","__var_15__","logpdf","__var_16__","pdf","__var_17__","quantile","__var_18__","frechetCDF","x","this","alpha","s","m","frechetLogCDF","frechetLogPDF","frechetPDF","frechetQuantile","p","Frechet","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-number';\nimport __var_5__ from '@stdlib/math/base/assert/is-nan';\nimport __var_6__ from '@stdlib/stats/base/dists/frechet/entropy';\nimport __var_7__ from '@stdlib/stats/base/dists/frechet/kurtosis';\nimport __var_8__ from '@stdlib/stats/base/dists/frechet/mean';\nimport __var_9__ from '@stdlib/stats/base/dists/frechet/median';\nimport __var_10__ from '@stdlib/stats/base/dists/frechet/mode';\nimport __var_11__ from '@stdlib/stats/base/dists/frechet/skewness';\nimport __var_12__ from '@stdlib/stats/base/dists/frechet/stdev';\nimport __var_13__ from '@stdlib/stats/base/dists/frechet/variance';\nimport __var_14__ from '@stdlib/stats/base/dists/frechet/cdf';\nimport __var_15__ from '@stdlib/stats/base/dists/frechet/logcdf';\nimport __var_16__ from '@stdlib/stats/base/dists/frechet/logpdf';\nimport __var_17__ from '@stdlib/stats/base/dists/frechet/pdf';\nimport __var_18__ from '@stdlib/stats/base/dists/frechet/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isNumber = __var_4__.isPrimitive;\nvar isnan = __var_5__;\nvar entropy = __var_6__;\nvar kurtosis = __var_7__;\nvar mean = __var_8__;\nvar median = __var_9__;\nvar mode = __var_10__;\nvar skewness = __var_11__;\nvar stdev = __var_12__;\nvar variance = __var_13__;\nvar cdf = __var_14__;\nvar logcdf = __var_15__;\nvar logpdf = __var_16__;\nvar pdf = __var_17__;\nvar quantile = __var_18__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction frechetCDF( x ) {\n\treturn cdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction frechetLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction frechetLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction frechetPDF( x ) {\n\treturn pdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction frechetQuantile( p ) {\n\treturn quantile( p, this.alpha, this.s, this.m );\n}\n\n\n// MAIN //\n\n/**\n* Fréchet distribution constructor.\n*\n* @constructor\n* @param {number} [alpha=0.0] - shape parameter\n* @param {number} [s=1.0] - scale parameter\n* @param {number} [m=0.0] - location parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @returns {Frechet} distribution instance\n*\n* @example\n* var frechet = new Frechet( 1.0, 1.0, 0.25 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.162\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\nfunction Frechet() {\n\tvar alpha;\n\tvar s;\n\tvar m;\n\tif ( !(this instanceof Frechet) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Frechet();\n\t\t}\n\t\treturn new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tm = arguments[ 2 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Scale parameter `s` must be a number primitive. Value: `' + s + '`' );\n\t\t}\n\t\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Location parameter `m` must be a number primitive. Value: `' + m + '`' );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\ts = 1.0;\n\t\tm = 0.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'm', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn m;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tm = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Fréchet distribution differential entropy.\n*\n* @name entropy\n* @memberof Frechet.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.entropy;\n* // returns ~2.82\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Frechet.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution expected value.\n*\n* @name mean\n* @memberof Frechet.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mean;\n* // returns ~16.705\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution median.\n*\n* @name median\n* @memberof Frechet.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.median;\n* // returns ~15.151\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'median', function get() {\n\treturn median( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution mode.\n*\n* @name mode\n* @memberof Frechet.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mode;\n* // returns ~13.349\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution skewness.\n*\n* @name skewness\n* @memberof Frechet.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.skewness;\n* // returns ~5.605\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution standard deviation.\n*\n* @name stdev\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.stdev;\n* // returns ~6.245\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution variance.\n*\n* @name variance\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.variance;\n* // returns ~38.996\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.s, this.m );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.cdf( 12.0 );\n* // returns ~0.821\n*/\nsetReadOnly( Frechet.prototype, 'cdf', frechetCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logcdf( 12.0 );\n* // returns ~-0.1975\n*/\nsetReadOnly( Frechet.prototype, 'logcdf', frechetLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logpdf( 2.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.pdf( 5.5 );\n* // returns ~0.158\n*/\nsetReadOnly( Frechet.prototype, 'pdf', frechetPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.quantile( 0.5 );\n* // returns ~7.804\n*/\nsetReadOnly( Frechet.prototype, 'quantile', frechetQuantile );\n\n\n// EXPORTS //\nexport default Frechet;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution constructor.\n*\n* @module @stdlib/stats/base/dists/frechet/ctor\n*\n* @example\n* var Frechet = require( '@stdlib/stats/base/dists/frechet/ctor' );\n*\n* var frechet = new Frechet( 1.0, 1.0, 0.5 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.036\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}