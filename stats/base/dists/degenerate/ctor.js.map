{"version":3,"sources":["@stdlib/stats/base/dists/degenerate/ctor/lib/ctor.js","@stdlib/stats/base/dists/degenerate/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isNumber","__var_3__","isnan","__var_4__","entropy","__var_5__","mean","__var_6__","mode","__var_7__","median","__var_8__","stdev","__var_9__","variance","__var_10__","cdf","__var_11__","mgf","__var_12__","pdf","__var_13__","pmf","__var_14__","logcdf","__var_15__","logpdf","__var_16__","logpmf","__var_17__","quantile","__var_18__","degenerateCDF","x","this","mu","degenerateLogCDF","degenerateLogPDF","degeneratePDF","degenerateLogPMF","degenerateMGF","t","degeneratePMF","degenerateQuantile","p","Degenerate","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"yqBA0CA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAWC,EACXC,EAAQC,EACRC,EAAUC,EACVC,EAAOC,EACPC,EAAOC,EACPC,EAASC,EACTC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAASC,EACTC,EAAWC,EAYf,SAASC,EAAeC,GACvB,OAAOjB,EAAKiB,EAAGC,KAAKC,IAUrB,SAASC,EAAkBH,GAC1B,OAAOT,EAAQS,EAAGC,KAAKC,IAUxB,SAASE,EAAkBJ,GAC1B,OAAOP,EAAQO,EAAGC,KAAKC,IAUxB,SAASG,EAAeL,GACvB,OAAOb,EAAKa,EAAGC,KAAKC,IAUrB,SAASI,EAAkBN,GAC1B,OAAOL,EAAQK,EAAGC,KAAKC,IAUxB,SAASK,EAAeC,GACvB,OAAOvB,EAAKuB,EAAGP,KAAKC,IAUrB,SAASO,EAAeT,GACvB,OAAOX,EAAKW,EAAGC,KAAKC,IAUrB,SAASQ,EAAoBC,GAC5B,OAAOd,EAAUc,EAAGV,KAAKC,IAuB1B,SAASU,IACR,IAAIV,EACJ,KAAOD,gBAAgBW,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAYC,UAAW,IAEnC,GAAKA,UAAUC,QAEd,IAAM/C,EADNmC,EAAKW,UAAW,KACQ5C,EAAOiC,GAC9B,MAAM,IAAIa,UAAW,mEAAqEb,EAAK,UAGhGA,EAAK,EAeN,OAbAzC,EAAgBwC,KAAM,KAAM,CAC3Be,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOhB,GAERiB,IAAO,SAAcC,GACpB,IAAMrD,EAAUqD,IAAWnD,EAAOmD,GACjC,MAAM,IAAIL,UAAW,4CAA8CK,EAAQ,KAE5ElB,EAAKkB,KAGAnB,KAiBRpC,EAAqB+C,EAAWS,UAAW,WAAW,WACrD,OAAOlD,EAAS8B,KAAKC,OAiBtBrC,EAAqB+C,EAAWS,UAAW,QAAQ,WAClD,OAAOhD,EAAM4B,KAAKC,OAiBnBrC,EAAqB+C,EAAWS,UAAW,QAAQ,WAClD,OAAO9C,EAAM0B,KAAKC,OAiBnBrC,EAAqB+C,EAAWS,UAAW,UAAU,WACpD,OAAO5C,EAAQwB,KAAKC,OAiBrBrC,EAAqB+C,EAAWS,UAAW,SAAS,WACnD,OAAO1C,EAAOsB,KAAKC,OAiBpBrC,EAAqB+C,EAAWS,UAAW,YAAY,WACtD,OAAOxC,EAAUoB,KAAKC,OAmBvBvC,EAAaiD,EAAWS,UAAW,MAAOtB,GAkB1CpC,EAAaiD,EAAWS,UAAW,SAAUlB,GAkB7CxC,EAAaiD,EAAWS,UAAW,SAAUjB,GAkB7CzC,EAAaiD,EAAWS,UAAW,SAAUf,GAkB7C3C,EAAaiD,EAAWS,UAAW,MAAOd,GAqB1C5C,EAAaiD,EAAWS,UAAW,MAAOhB,GAqB1C1C,EAAaiD,EAAWS,UAAW,MAAOZ,GAkB1C9C,EAAaiD,EAAWS,UAAW,WAAYX,GCta5C,IAACY,EAAO5D","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/stats/base/dists/degenerate/entropy';\nimport __var_6__ from '@stdlib/stats/base/dists/degenerate/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/degenerate/mode';\nimport __var_8__ from '@stdlib/stats/base/dists/degenerate/median';\nimport __var_9__ from '@stdlib/stats/base/dists/degenerate/stdev';\nimport __var_10__ from '@stdlib/stats/base/dists/degenerate/variance';\nimport __var_11__ from '@stdlib/stats/base/dists/degenerate/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/degenerate/mgf';\nimport __var_13__ from '@stdlib/stats/base/dists/degenerate/pdf';\nimport __var_14__ from '@stdlib/stats/base/dists/degenerate/pmf';\nimport __var_15__ from '@stdlib/stats/base/dists/degenerate/logcdf';\nimport __var_16__ from '@stdlib/stats/base/dists/degenerate/logpdf';\nimport __var_17__ from '@stdlib/stats/base/dists/degenerate/logpmf';\nimport __var_18__ from '@stdlib/stats/base/dists/degenerate/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isNumber = __var_3__;\nvar isnan = __var_4__;\nvar entropy = __var_5__;\nvar mean = __var_6__;\nvar mode = __var_7__;\nvar median = __var_8__;\nvar stdev = __var_9__;\nvar variance = __var_10__;\nvar cdf = __var_11__;\nvar mgf = __var_12__;\nvar pdf = __var_13__;\nvar pmf = __var_14__;\nvar logcdf = __var_15__;\nvar logpdf = __var_16__;\nvar logpmf = __var_17__;\nvar quantile = __var_18__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction degenerateCDF( x ) {\n\treturn cdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction degenerateLogCDF( x ) {\n\treturn logcdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction degenerateLogPDF( x ) {\n\treturn logpdf( x, this.mu );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction degeneratePDF( x ) {\n\treturn pdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction degenerateLogPMF( x ) {\n\treturn logpmf( x, this.mu );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction degenerateMGF( t ) {\n\treturn mgf( t, this.mu );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction degeneratePMF( x ) {\n\treturn pmf( x, this.mu );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction degenerateQuantile( p ) {\n\treturn quantile( p, this.mu );\n}\n\n\n// MAIN //\n\n/**\n* Degenerate distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - constant value of distribution\n* @throws {TypeError} `p` must be a probability\n* @returns {Degenerate} distribution instance\n*\n* @example\n* var degenerate = new Degenerate();\n*\n* var y = degenerate.cdf( 1.8 );\n* // returns 1.0\n*\n* var v = degenerate.median;\n* // returns 0.0\n*/\nfunction Degenerate() {\n\tvar mu;\n\tif ( !(this instanceof Degenerate) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Degenerate();\n\t\t}\n\t\treturn new Degenerate( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Mean parameter `mu` must be a number. Value: `' + mu + '`' );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Degenerate distribution differential entropy.\n*\n* @name entropy\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.entropy;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'entropy', function get() {\n\treturn entropy( this.mu );\n});\n\n/**\n* Degenerate distribution expected value.\n*\n* @name mean\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mean;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mean', function get() {\n\treturn mean( this.mu );\n});\n\n/**\n* Degenerate distribution mode.\n*\n* @name mode\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mode;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mode', function get() {\n\treturn mode( this.mu );\n});\n\n/**\n* Degenerate distribution median.\n*\n* @name median\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var degenerate = new Degenerate( -0.4 );\n*\n* var v = degenerate.median;\n* // returns -0.4\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'median', function get() {\n\treturn median( this.mu );\n});\n\n/**\n* Degenerate distribution standard deviation.\n*\n* @name stdev\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.stdev;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'stdev', function get() {\n\treturn stdev( this.mu );\n});\n\n/**\n* Degenerate distribution variance.\n*\n* @name variance\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.variance;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'variance', function get() {\n\treturn variance( this.mu );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( -0.5 );\n*\n* var v = degenerate.cdf( 1.5 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'cdf', degenerateCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( 3.0 );\n*\n* var v = degenerate.logcdf( 4.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logcdf', degenerateLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( -4.0 );\n*\n* var v = degenerate.logpdf( 4.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Degenerate.prototype, 'logpdf', degenerateLogPDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.logpmf( 20.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logpmf', degenerateLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var degenerate = new Degenerate( 2.0 );\n*\n* var v = degenerate.mgf( -3.0 );\n* // returns ~0.002\n*/\nsetReadOnly( Degenerate.prototype, 'mgf', degenerateMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pdf( 0.2 );\n* // returns +Infinity\n*\n* v = degenerate.pdf( 0.4 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'pdf', degeneratePDF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pmf( 0.4 );\n* // returns 0.0\n*\n* v = degenerate.pmf( 0.2 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'pmf', degeneratePMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.quantile( 0.9 );\n* // returns 0.2\n*/\nsetReadOnly( Degenerate.prototype, 'quantile', degenerateQuantile );\n\n\n// EXPORTS //\nexport default Degenerate;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution constructor.\n*\n* @module @stdlib/stats/base/dists/degenerate/ctor\n*\n* @example\n* var Degenerate = require( '@stdlib/stats/base/dists/degenerate/ctor' );\n*\n* var degenerate = new Degenerate( 0.0 );\n*\n* var y = degenerate.cdf( 0.5 );\n* // returns 1.0\n*\n* var median = degenerate.median;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}