{"version":3,"sources":["@stdlib/stats/base/dists/normal/pdf/lib/pdf.js","@stdlib/stats/base/dists/normal/pdf/lib/factory.js","@stdlib/stats/base/dists/normal/pdf/lib/index.js"],"names":["exp","__var_0__","pow","__var_1__","sqrt","__var_2__","TWO_PI","__var_3__","PINF","__var_4__","isnan","__var_5__","pdf","x","mu","sigma","s2","NaN","constantFunction","degenerate","factory","__var_6__","A","B","setReadOnly"],"mappings":"igBA2BA,IAAIA,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAQC,EA8CZ,SAASC,EAAKC,EAAGC,EAAIC,GACpB,IAAIC,EAGJ,OACCN,EAAOG,IACPH,EAAOI,IACPJ,EAAOK,IACPA,EAAQ,EAEDE,IAEO,IAAVF,EACKF,IAAMC,EAAON,EAAO,GAE9BQ,EAAKd,EAAKa,EAAO,GACb,EAAMX,EAAMY,EAAGV,GAERN,GADN,GAAQ,EAAIgB,GACGd,EAAIW,EAAEC,EAAI,KCpE/B,IAAII,EAAmBjB,EACnBkB,EAAahB,EAAUiB,QACvBV,EAAQL,EACRD,EAAOG,EACPP,EAAMS,EACNP,EAAMS,EACNL,EAASe,EAoBb,SAASD,EAASN,EAAIC,GACrB,IAAIC,EACAM,EACAC,EACJ,OACCb,EAAOI,IACPJ,EAAOK,IACPA,EAAQ,EAEDG,EAAkBD,KAEX,IAAVF,EACGI,EAAYL,IAEpBE,EAAKd,EAAKa,EAAO,GACjBO,EAAI,EAAMlB,EAAMY,EAAGV,GACnBiB,GAAK,GAAQ,EAAIP,GAcjB,SAAcH,GACb,GAAKH,EAAOG,GACX,OAAOI,IAER,OAAOK,EAAItB,EAAKuB,EAAIrB,EAAIW,EAAEC,EAAI,MChDhC,IAAIU,EAAcvB,EACdW,EAAMT,EACNiB,EAAUf,EAKdmB,EAAaZ,EAAK,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/exp';\nimport __var_1__ from '@stdlib/math/base/special/pow';\nimport __var_2__ from '@stdlib/math/base/special/sqrt';\nimport __var_3__ from '@stdlib/constants/math/float64-two-pi';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\nimport __var_5__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar exp = __var_0__;\nvar pow = __var_1__;\nvar sqrt = __var_2__;\nvar TWO_PI = __var_3__;\nvar PINF = __var_4__;\nvar isnan = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} evaluated probability density function\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.054\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns ~0.009\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 8.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction pdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / sqrt( s2*TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn A * exp( B * pow(x-mu, 2.0) );\n}\n\n\n// EXPORTS //\nexport default pdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/pdf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/pow';\nimport __var_6__ from '@stdlib/constants/math/float64-two-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar isnan = __var_2__;\nvar sqrt = __var_3__;\nvar exp = __var_4__;\nvar pow = __var_5__;\nvar TWO_PI = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the probability density function\n*\n* @example\n* var pdf = factory( 10.0, 2.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.199\n*\n* y = pdf( 5.0 );\n* // returns ~0.009\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / sqrt( s2*TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated probability density function\n\t*\n\t* @example\n\t* var y = pdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn A * exp( B * pow(x-mu, 2.0) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution probability density function (PDF).\n*\n* @module @stdlib/stats/base/dists/normal/pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats/base/dists/normal/pdf' );\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.054\n*\n* var myPDF = pdf.factory( 10.0, 2.0 );\n* y = myPDF( 10.0 );\n* // returns ~0.199\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pdf;\n"]}