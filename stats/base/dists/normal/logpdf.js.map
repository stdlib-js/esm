{"version":3,"sources":["@stdlib/stats/base/dists/normal/logpdf/lib/logpdf.js","@stdlib/stats/base/dists/normal/logpdf/lib/factory.js","@stdlib/stats/base/dists/normal/logpdf/lib/index.js"],"names":["ln","__var_0__","pow","__var_1__","LN_TWO_PI","__var_2__","NINF","__var_3__","PINF","__var_4__","isnan","__var_5__","logpdf","x","mu","sigma","s2","NaN","constantFunction","degenerate","factory","A","B","setReadOnly"],"mappings":"2gBA2BA,IAAIA,EAAKC,EACLC,EAAMC,EACNC,EAAYC,EACZC,EAAOC,EACPC,EAAOC,EACPC,EAAQC,EA8CZ,SAASC,EAAQC,EAAGC,EAAIC,GACvB,IAAIC,EAGJ,OACCN,EAAOG,IACPH,EAAOI,IACPJ,EAAOK,IACPA,EAAQ,EAEDE,IAEO,IAAVF,EACKF,IAAMC,EAAON,EAAOF,GAE9BU,EAAKd,EAAKa,EAAO,IACX,IAAW,EAAIf,EAAIe,GAAYX,IAChC,GAAQ,EAAIY,GACAd,EAAKW,EAAEC,EAAI,ICrE7B,IAAII,EAAmBjB,EACnBkB,EAAahB,EAAUiB,QACvBhB,EAAYC,EACZK,EAAQH,EACRL,EAAMO,EACNT,EAAKW,EAoBT,SAASS,EAASN,EAAIC,GACrB,IAAIC,EACAK,EACAC,EACJ,OACCZ,EAAOI,IACPJ,EAAOK,IACPA,EAAQ,EAEDG,EAAkBD,KAEX,IAAVF,EACGI,EAAYL,IAEpBE,EAAKd,EAAKa,EAAO,GACjBM,GAAM,IAAW,EAAIrB,EAAIe,GAAYX,GACrCkB,GAAK,GAAQ,EAAIN,GAcjB,SAAiBH,GAChB,OAAOQ,EAAMC,EAAIpB,EAAKW,EAAEC,EAAI,KC3C9B,IAAIS,EAActB,EACdW,EAAST,EACTiB,EAAUf,EAKdkB,EAAaX,EAAQ,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/ln';\nimport __var_1__ from '@stdlib/math/base/special/pow';\nimport __var_2__ from '@stdlib/constants/math/float64-ln-two-pi';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\nimport __var_5__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar ln = __var_0__;\nvar pow = __var_1__;\nvar LN_TWO_PI = __var_2__;\nvar NINF = __var_3__;\nvar PINF = __var_4__;\nvar isnan = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} logarithm of probability density function\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns ~-4.737\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 8.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction logpdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn A + ( B * pow( x-mu, 2.0 ) );\n}\n\n\n// EXPORTS //\nexport default logpdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/logpdf';\nimport __var_2__ from '@stdlib/constants/math/float64-ln-two-pi';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/pow';\nimport __var_5__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar LN_TWO_PI = __var_2__;\nvar isnan = __var_3__;\nvar pow = __var_4__;\nvar ln = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-1.612\n*\n* y = logpdf( 5.0 );\n* // returns ~-4.737\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\treturn A + ( B * pow( x-mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a normal distribution.\n*\n* @module @stdlib/stats/base/dists/normal/logpdf\n*\n* @example\n* var logpdf = require( '@stdlib/stats/base/dists/normal/logpdf' );\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.919\n*\n* var myLogPDF = logpdf.factory( 10.0, 2.0 );\n* y = myLogPDF( 10.0 );\n* // returns ~-1.612\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpdf;\n"]}