{"version":3,"sources":["@stdlib/stats/base/dists/exponential/ctor/lib/ctor.js","@stdlib/stats/base/dists/exponential/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logcdf","__var_13__","logpdf","__var_14__","mgf","__var_15__","pdf","__var_16__","quantile","__var_17__","exponentialCDF","x","this","lambda","exponentialLogCDF","exponentialLogPDF","exponentialMGF","t","exponentialPDF","exponentialQuantile","p","Exponential","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"ioBAyCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAgBC,GACxB,OAAOb,EAAKa,EAAGC,KAAKC,QAUrB,SAASC,EAAmBH,GAC3B,OAAOX,EAAQW,EAAGC,KAAKC,QAUxB,SAASE,EAAmBJ,GAC3B,OAAOT,EAAQS,EAAGC,KAAKC,QAUxB,SAASG,EAAgBC,GACxB,OAAOb,EAAKa,EAAGL,KAAKC,QAUrB,SAASK,EAAgBP,GACxB,OAAOL,EAAKK,EAAGC,KAAKC,QAUrB,SAASM,EAAqBC,GAC7B,OAAOZ,EAAUY,EAAGR,KAAKC,QAuB1B,SAASQ,IACR,IAAIR,EACJ,KAAOD,gBAAgBS,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAaC,UAAW,IAEpC,GAAKA,UAAUC,QAEd,IAAM5C,EADNkC,EAASS,UAAW,IAEnB,MAAM,IAAIE,UAAW,gFAAkFX,EAAS,UAGjHA,EAAS,EAeV,OAbAxC,EAAgBuC,KAAM,SAAU,CAC/Ba,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOd,GAERe,IAAO,SAAcC,GACpB,IAAMlD,EAAYkD,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFhB,EAASgB,KAGJjB,KAiBRnC,EAAqB4C,EAAYS,UAAW,WAAW,WACtD,OAAOhD,EAAS8B,KAAKC,WAiBtBpC,EAAqB4C,EAAYS,UAAW,YAAY,WACvD,OAAO9C,EAAU4B,KAAKC,WAiBvBpC,EAAqB4C,EAAYS,UAAW,QAAQ,WACnD,OAAO5C,EAAM0B,KAAKC,WAiBnBpC,EAAqB4C,EAAYS,UAAW,UAAU,WACrD,OAAO1C,EAAQwB,KAAKC,WAiBrBpC,EAAqB4C,EAAYS,UAAW,QAAQ,WACnD,OAAOxC,EAAMsB,KAAKC,WAiBnBpC,EAAqB4C,EAAYS,UAAW,YAAY,WACvD,OAAOtC,EAAUoB,KAAKC,WAiBvBpC,EAAqB4C,EAAYS,UAAW,SAAS,WACpD,OAAOpC,EAAOkB,KAAKC,WAiBpBpC,EAAqB4C,EAAYS,UAAW,YAAY,WACvD,OAAOlC,EAAUgB,KAAKC,WAmBvBtC,EAAa8C,EAAYS,UAAW,MAAOpB,GAkB3CnC,EAAa8C,EAAYS,UAAW,SAAUhB,GAkB9CvC,EAAa8C,EAAYS,UAAW,SAAUf,GAkB9CxC,EAAa8C,EAAYS,UAAW,MAAOd,GAkB3CzC,EAAa8C,EAAYS,UAAW,MAAOZ,GAkB3C3C,EAAa8C,EAAYS,UAAW,WAAYX,GCxY7C,IAACY,EAAOzD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/exponential/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/exponential/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/exponential/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/exponential/median';\nimport __var_8__ from '@stdlib/stats/base/dists/exponential/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/exponential/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/exponential/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/exponential/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/exponential/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/exponential/logcdf';\nimport __var_14__ from '@stdlib/stats/base/dists/exponential/logpdf';\nimport __var_15__ from '@stdlib/stats/base/dists/exponential/mgf';\nimport __var_16__ from '@stdlib/stats/base/dists/exponential/pdf';\nimport __var_17__ from '@stdlib/stats/base/dists/exponential/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logcdf = __var_13__;\nvar logpdf = __var_14__;\nvar mgf = __var_15__;\nvar pdf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction exponentialCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction exponentialLogCDF( x ) {\n\treturn logcdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction exponentialLogPDF( x ) {\n\treturn logpdf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction exponentialMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction exponentialPDF( x ) {\n\treturn pdf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction exponentialQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Exponential distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Exponential} distribution instance\n*\n* @example\n* var exponential = new Exponential( 1.0 );\n*\n* var y = exponential.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nfunction Exponential() {\n\tvar lambda;\n\tif ( !(this instanceof Exponential) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Exponential();\n\t\t}\n\t\treturn new Exponential( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Exponential distribution differential entropy.\n*\n* @name entropy\n* @memberof Exponential.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.entropy;\n* // returns ~-0.386\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Exponential distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Exponential.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.kurtosis;\n* // returns 6.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Exponential distribution expected value.\n*\n* @name mean\n* @memberof Exponential.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Exponential distribution median.\n*\n* @name median\n* @memberof Exponential.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.median;\n* // returns ~0.173\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Exponential distribution mode.\n*\n* @name mode\n* @memberof Exponential.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Exponential distribution skewness.\n*\n* @name skewness\n* @memberof Exponential.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.skewness;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Exponential distribution standard deviation.\n*\n* @name stdev\n* @memberof Exponential.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.stdev;\n* // returns ~0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Exponential distribution variance.\n*\n* @name variance\n* @memberof Exponential.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.variance;\n* // returns ~0.063\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.cdf( 0.5 );\n* // returns ~0.632\n*/\nsetReadOnly( Exponential.prototype, 'cdf', exponentialCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logcdf( 0.5 );\n* // returns ~-0.459\n*/\nsetReadOnly( Exponential.prototype, 'logcdf', exponentialLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logpdf( 0.8 );\n* // returns ~-0.907\n*/\nsetReadOnly( Exponential.prototype, 'logpdf', exponentialLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.mgf( 0.5 );\n* // returns ~1.333\n*/\nsetReadOnly( Exponential.prototype, 'mgf', exponentialMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.pdf( 0.8 );\n* // returns ~0.404\n*/\nsetReadOnly( Exponential.prototype, 'pdf', exponentialPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.quantile( 0.5 );\n* // returns ~0.347\n*/\nsetReadOnly( Exponential.prototype, 'quantile', exponentialQuantile );\n\n\n// EXPORTS //\nexport default Exponential;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution constructor.\n*\n* @module @stdlib/stats/base/dists/exponential/ctor\n*\n* @example\n* var Exponential = require( '@stdlib/stats/base/dists/exponential/ctor' );\n*\n* var exponential = new Exponential( 1.0 );\n*\n* var y = exponential.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = exponential.mode;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}