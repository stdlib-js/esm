{"version":3,"sources":["@stdlib/stats/base/dists/cosine/quantile/lib/bisect.js","@stdlib/stats/base/dists/cosine/quantile/lib/quantile.js","@stdlib/stats/base/dists/cosine/quantile/lib/factory.js","@stdlib/stats/base/dists/cosine/quantile/lib/index.js"],"names":["cosineCDF","__var_0__","MAX_ITERATIONS","TOLERANCE","bisect","p","mu","s","a","b","m","n","isnan","__var_1__","quantile","NaN","constantFunction","degenerate","factory","__var_2__","__var_3__","setReadOnly"],"mappings":"iQAsBA,IAAIA,EAAYC,EAKZC,EAAiB,IACjBC,EAAY,MAchB,SAASC,EAAQC,EAAGC,EAAIC,GACvB,IAAIC,EACAC,EAEAC,EACAC,EAKJ,IAHAA,EAAI,EACJH,EAAIF,EAAKC,EACTE,EAAIH,EAAKC,EACDI,EAAIT,GAAiB,CAE5B,GADAQ,GAAMF,EAAIC,GAAM,EACXA,EAAID,EAAIL,EACZ,OAAOO,EAGHL,EADDL,EAAWU,EAAGJ,EAAIC,GAErBC,EAAIE,EAEJD,EAAIC,EAELC,GAAK,EAEN,OAAOD,EC1CR,IAAIE,EAAQX,EACRG,EAASS,EA8Cb,SAASC,EAAUT,EAAGC,EAAIC,GACzB,OACCK,EAAON,IACPM,EAAOL,IACPK,EAAOP,IACPE,EAAI,GACJF,EAAI,GACJA,EAAI,EAEGU,IAEG,IAANR,EACGD,EAEDF,EAAQC,EAAGC,EAAIC,GC3DvB,IAAIS,EAAmBf,EACnBgB,EAAaJ,EAAUK,QACvBN,EAAQO,EACRf,EAASgB,EAoBb,SAASF,EAASZ,EAAIC,GACrB,OAAKK,EAAON,IAAQM,EAAOL,IAAOA,EAAI,EAC9BS,EAAkBD,KAEf,IAANR,EACGU,EAAYX,GAepB,SAAmBD,GAClB,GAAKO,EAAOP,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOU,IAER,OAAOX,EAAQC,EAAGC,EAAIC,IChCxB,IAAIc,EAAcpB,EACda,EAAWD,EACXK,EAAUC,EAKdE,EAAaP,EAAU,UAAWI","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dists/cosine/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cosineCDF = __var_0__;\n\n\n// VARIABLES //\n\nvar MAX_ITERATIONS = 1e4;\nvar TOLERANCE = 1e-12;\n\n\n// MAIN //\n\n/**\n* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.\n*\n* @private\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated quantile function\n*/\nfunction bisect( p, mu, s ) {\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar m;\n\tvar n;\n\n\tn = 1;\n\ta = mu - s;\n\tb = mu + s;\n\twhile ( n < MAX_ITERATIONS ) {\n\t\tm = ( a + b ) / 2.0;\n\t\tif ( b - a < TOLERANCE ) {\n\t\t\treturn m;\n\t\t}\n\t\tc = cosineCDF( m, mu, s);\n\t\tif ( p > c ) {\n\t\t\ta = m;\n\t\t} else {\n\t\t\tb = m;\n\t\t}\n\t\tn += 1;\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\nexport default bisect;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from './bisect.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar bisect = __var_1__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.327\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\tisnan( p ) ||\n\t\ts < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn mu;\n\t}\n\treturn bisect( p, mu, s );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/quantile';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from './bisect.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar isnan = __var_2__;\nvar bisect = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns ~10.0\n*\n* y = quantile( 0.8 );\n* // returns ~10.655\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn bisect( p, mu, s );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/cosine/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/cosine/quantile' );\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.327\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns ~10.0\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}