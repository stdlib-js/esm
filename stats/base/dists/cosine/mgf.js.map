{"version":3,"sources":["@stdlib/stats/base/dists/cosine/mgf/lib/mgf.js","@stdlib/stats/base/dists/cosine/mgf/lib/factory.js","@stdlib/stats/base/dists/cosine/mgf/lib/index.js"],"names":["isnan","__var_0__","sinh","__var_1__","exp","__var_2__","PI_SQUARED","__var_3__","mgf","t","mu","s","out","st","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"6WAyBA,IAAIA,EAAQC,EACRC,EAAOC,EACPC,EAAMC,EACNC,EAAaC,EAqCjB,SAASC,EAAKC,EAAGC,EAAIC,GACpB,IAAIC,EACAC,EACJ,OACCb,EAAOS,IACPT,EAAOU,IACPV,EAAOW,IACPA,GAAK,EAEEG,KAGRF,EAAMN,EAAaJ,EADnBW,EAAKF,EAAIF,GAETG,GAAOC,GAAOP,EAAeO,EAAGA,GAChCD,GAAOR,EAAKM,EAAKD,ICrDlB,IAAIM,EAAmBd,EACnBD,EAAQG,EACRD,EAAOG,EACPD,EAAMG,EACND,EAAaU,EAqBjB,SAASC,EAASP,EAAIC,GACrB,OACCX,EAAOU,IACPV,EAAOW,IACPA,GAAK,EAEEI,EAAkBD,KAe1B,SAAcL,GACb,IAAIG,EACAC,EACJ,GAAKb,EAAOS,GACX,OAAOK,IAMR,OAHAF,EAAMN,EAAaJ,EADnBW,EAAKF,EAAIF,GAETG,GAAOC,GAAOP,EAAeO,EAAGA,GAChCD,GAAOR,EAAKM,EAAKD,ICxCnB,IAAIS,EAAcjB,EACdO,EAAML,EACNc,EAAUZ,EAKda,EAAaV,EAAK,UAAWS","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/sinh';\nimport __var_2__ from '@stdlib/math/base/special/exp';\nimport __var_3__ from '@stdlib/constants/math/float64-pi-squared';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar sinh = __var_1__;\nvar exp = __var_2__;\nvar PI_SQUARED = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.016\n*\n* @example\n* var y = mgf( 1.2, 0.0, 1.0 );\n* // returns ~1.098\n*\n* @example\n* var y = mgf( -0.9, 0.0, 3.0);\n* // returns ~1.578\n*\n* @example\n* var y = mgf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction mgf( t, mu, s ) {\n\tvar out;\n\tvar st;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tst = s * t;\n\tout = PI_SQUARED * sinh( st );\n\tout /= st * ( PI_SQUARED + ( st*st ) );\n\tout *= exp( mu * t );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default mgf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/sinh';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/constants/math/float64-pi-squared';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar sinh = __var_2__;\nvar exp = __var_3__;\nvar PI_SQUARED = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 3.0, 1.5 );\n*\n* var y = mgf( 1.9 );\n* // returns ~495.57\n*\n* y = mgf( -1.0 );\n* // returns ~0.058\n*/\nfunction factory( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar out;\n\t\tvar st;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tst = s * t;\n\t\tout = PI_SQUARED * sinh( st );\n\t\tout /= st * ( PI_SQUARED + ( st*st ) );\n\t\tout *= exp( mu * t );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './mgf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution moment-generating function (MGF).\n*\n* @module @stdlib/stats/base/dists/cosine/mgf\n*\n* @example\n* var mgf = require( '@stdlib/stats/base/dists/cosine/mgf' );\n*\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.016\n*\n* var mymgf = mgf.factory( 3.0, 1.5 );\n*\n* y = mymgf( 1.0 );\n* // returns ~23.219\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar mgf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\nexport default mgf;\n"]}