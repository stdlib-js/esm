{"version":3,"sources":["@stdlib/stats/base/dists/binomial/mgf/lib/mgf.js","@stdlib/stats/base/dists/binomial/mgf/lib/factory.js","@stdlib/stats/base/dists/binomial/mgf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isnan","__var_1__","exp","__var_2__","pow","__var_3__","PINF","__var_4__","mgf","t","n","p","base","NaN","constantFunction","__var_5__","factory","setReadOnly"],"mappings":"8aA0BA,IAAIA,EAAuBC,EACvBC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EAyDX,SAASC,EAAKC,EAAGC,EAAGC,GACnB,IAAIC,EACJ,OACCZ,EAAOS,IACPT,EAAOU,IACPV,EAAOW,IACPA,EAAI,GACJA,EAAI,IACHb,EAAsBY,IACvBA,IAAMJ,EAECO,KAERD,EAAO,EAAMD,EAAKA,EAAIT,EAAIO,GACnBL,EAAKQ,EAAMF,IC1EnB,IAAIZ,EAAuBC,EACvBe,EAAmBb,EACnBD,EAAQG,EACRD,EAAMG,EACND,EAAMG,EACND,EAAOS,EAiBX,SAASC,EAASN,EAAGC,GACpB,OAAKX,EAAOU,IACXV,EAAOW,IACPA,EAAI,GACJA,EAAI,IACHb,EAAsBY,IACvBA,IAAMJ,EAECQ,EAAkBD,KAe1B,SAAcJ,GACb,IAAIG,EACJ,GAAKZ,EAAOS,GACX,OAAOI,IAGR,OADAD,EAAO,EAAMD,EAAKA,EAAIT,EAAIO,GACnBL,EAAKQ,EAAMF,IC5BpB,IAAIO,EAAclB,EACdS,EAAMP,EACNe,EAAUb,EAKdc,EAAaT,EAAK,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/exp';\nimport __var_3__ from '@stdlib/math/base/special/pow';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar exp = __var_2__;\nvar pow = __var_3__;\nvar PINF = __var_4__;\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a binomial distribution with number of trials `n` and success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 20, 0.2 );\n* // returns ~11.471\n*\n* @example\n* var y = mgf( 5.0, 20, 0.2 );\n* // returns ~4.798e29\n*\n* @example\n* var y = mgf( 0.9, 10, 0.4 );\n* // returns ~99.338\n*\n* @example\n* var y = mgf( 0.0, 10, 0.4 );\n* // returns 1.0\n*\n* @example\n* var y = mgf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, 1.5 );\n* // returns NaN\n*/\nfunction mgf( t, n, p ) {\n\tvar base;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tbase = 1.0 - p + (p * exp(t));\n\treturn pow( base, n );\n}\n\n\n// EXPORTS //\nexport default mgf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/pow';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar isnan = __var_2__;\nvar exp = __var_3__;\nvar pow = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 10, 0.5 );\n* var y = mgf( 0.3 );\n* // returns ~5.013\n*/\nfunction factory( n, p ) {\n\tif ( isnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar base;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = 1.0 - p + (p * exp(t));\n\t\treturn pow( base, n );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './mgf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a binomial distribution.\n*\n* @module @stdlib/stats/base/dists/binomial/mgf\n*\n* @example\n* var mgf = require( '@stdlib/stats/base/dists/binomial/mgf' );\n*\n* var y = mgf( 0.5, 20, 0.2 );\n* // returns ~11.471\n*\n* y = mgf( 5.0, 20, 0.2 );\n* // returns ~4.798e29\n*\n* y = mgf( 0.9, 10, 0.4 )\n* // returns ~99.338\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/mgf' ).factory;\n*\n* var mgf = factory( 10, 0.5 );\n*\n* var y = mgf( 0.3 );\n* // returns ~5.013\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar mgf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\nexport default mgf;\n"]}