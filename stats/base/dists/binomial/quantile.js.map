{"version":3,"sources":["@stdlib/stats/base/dists/binomial/quantile/lib/search_left.js","@stdlib/stats/base/dists/binomial/quantile/lib/search_right.js","@stdlib/stats/base/dists/binomial/quantile/lib/quantile.js","@stdlib/stats/base/dists/binomial/quantile/lib/factory.js","@stdlib/stats/base/dists/binomial/quantile/lib/index.js"],"names":["cdf","__var_0__","searchLeft","x","r","n","p","searchRight","isNonNegativeInteger","erfcinv","__var_1__","isnan","__var_2__","round","__var_3__","sqrt","__var_4__","__var_5__","SQRT2","__var_6__","PINF","__var_7__","__var_8__","__var_9__","quantile","sigmaInv","guess","sigma","mu","NaN","constantFunction","degenerate","factory","__var_10__","__var_11__","setReadOnly"],"mappings":"8mBAsBA,IAAIA,EAAMC,EAeV,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,GAC7B,KAAc,IAANH,GAAWH,EAAKG,EAAE,EAAGE,EAAGC,IAAMF,GACrCD,GAAI,EAEL,OAAOA,ECnBR,IAAIH,EAAMC,EAeV,SAASM,EAAaJ,EAAGC,EAAGC,EAAGC,GAE9B,IADAH,GAAK,EACGH,EAAKG,EAAGE,EAAGC,GAAMF,GACxBD,GAAK,EAEN,OAAOA,ECXR,IAAIK,EAAuBP,EACvBQ,EAAUC,EACVC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EACPhB,EAAMiB,EACNC,EAAQC,EACRC,EAAOC,EACPnB,EAAaoB,EACbf,EAAcgB,EA6DlB,SAASC,EAAUpB,EAAGC,EAAGC,GACxB,IAAImB,EACAC,EACAC,EAEAC,EAEAzB,EAEJ,OACCQ,EAAOP,IACPO,EAAON,IACPM,EAAOL,IACPF,EAAI,GACJA,EAAI,GACJE,EAAI,GACJA,EAAI,IACHE,EAAsBH,IACvBA,IAAMe,EAECS,IAEG,IAANzB,GAAmB,IAANE,EACVD,EAEG,IAAND,GAAmB,IAANE,GAAmB,IAAND,EACvB,GAGRuB,EAAKvB,EAAIC,EAETmB,EAAW,GADXE,EAAQZ,EAAMV,EAAIC,GAAM,EAAIA,KAG3BH,EADIC,EAAI,IACHK,EAAS,EAAML,GAAMc,EAEtBT,EAAS,GAAQ,EAAIL,IAAQc,EAMlCQ,EAAQb,EAAOe,EAAMD,GADdxB,EAAMsB,GAHRtB,EAAIA,EAGoB,GAAQ,IAEhCH,EAAK0B,EAAOrB,EAAGC,IAAOF,EACnBF,EAAYwB,EAAOtB,EAAGC,EAAGC,GAE1BC,EAAamB,EAAOtB,EAAGC,EAAGC,ICjHlC,IAAIE,EAAuBP,EACvB6B,EAAmBpB,EACnBqB,EAAanB,EAAUoB,QACvBvB,EAAUK,EACVH,EAAQK,EACRH,EAAQI,EACRF,EAAOI,EACPnB,EAAMqB,EACNH,EAAQI,EACRF,EAAOG,EACPrB,EAAa+B,EACb1B,EAAc2B,EAoBlB,SAASF,EAAS3B,EAAGC,GACpB,IAAImB,EACAE,EACAC,EAEJ,OACCjB,EAAON,IACPM,EAAOL,KACNE,EAAsBH,IACvBA,IAAMe,GACNd,EAAI,GACJA,EAAI,EAEGwB,EAAkBD,KAEf,IAANvB,GAAmB,IAAND,EACV0B,EAAY,GAET,IAANzB,EACGyB,EAAY1B,IAEpBuB,EAAKvB,EAAIC,EACTqB,EAAQZ,EAAMV,EAAIC,GAAM,EAAIA,IAC5BmB,EAAW,EAAME,EAcjB,SAAmBvB,GAClB,IAAIsB,EAGAvB,EAEJ,GAAKQ,EAAOP,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOyB,IAER,GAAW,IAANzB,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOC,EAIPF,EADIC,EAAI,IACHK,EAAS,EAAML,GAAMc,EAEtBT,EAAS,GAAQ,EAAIL,IAAQc,EAOlC,GADAQ,EAAQb,EAAOe,EAAMD,GADdxB,EAAMsB,GAHRtB,EAAIA,EAGoB,GAAQ,IAEhCH,EAAK0B,EAAOrB,EAAGC,IAAOF,EAC1B,OAAOF,EAAYwB,EAAOtB,EAAGC,EAAGC,GAEjC,OAAOC,EAAamB,EAAOtB,EAAGC,EAAGC,KC7EnC,IAAI6B,EAAclC,EACduB,EAAWd,EACXsB,EAAUpB,EAKduB,EAAaX,EAAU,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dists/binomial/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cdf = __var_0__;\n\n\n// MAIN //\n\n/**\n* Performs a search to the left.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchLeft( x, r, n, p ) {\n\twhile ( x !== 0 && cdf( x-1, n, p) >= r ) {\n\t\tx -=1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default searchLeft;\n","import __var_0__ from '@stdlib/stats/base/dists/binomial/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cdf = __var_0__;\n\n\n// MAIN //\n\n/**\n* Performs a search to the right.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchRight( x, r, n, p ) {\n\tx += 1;\n\twhile ( cdf( x, n, p ) < r ) {\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default searchRight;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/special/erfcinv';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/round';\nimport __var_4__ from '@stdlib/math/base/special/sqrt';\nimport __var_5__ from '@stdlib/stats/base/dists/binomial/cdf';\nimport __var_6__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\nimport __var_8__ from './search_left.js';\nimport __var_9__ from './search_right.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar erfcinv = __var_1__;\nvar isnan = __var_2__;\nvar round = __var_3__;\nvar sqrt = __var_4__;\nvar cdf = __var_5__;\nvar SQRT2 = __var_6__;\nvar PINF = __var_7__;\nvar searchLeft = __var_8__;\nvar searchRight = __var_9__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p  - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 3\n*\n* @example\n* var y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* @example\n* var y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* var y = quantile( 0.0, 10, 0.4 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.0, 10, 0.4 );\n* // returns 10\n*\n* @example\n* var y = quantile( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, n, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tr < 0.0 ||\n\t\tr > 1.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r === 1.0 || p === 1.0 ) {\n\t\treturn n;\n\t}\n\tif ( r === 0.0 || p === 0.0 || n === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Cornish-Fisher expansion:\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\tif ( r < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\tguess = round( mu + (sigma * corr) );\n\tif ( cdf( guess, n, p ) >= r ) {\n\t\treturn searchLeft( guess, r, n, p );\n\t}\n\treturn searchRight( guess, r, n, p );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/stats/base/dists/degenerate/quantile';\nimport __var_3__ from '@stdlib/math/base/special/erfcinv';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/math/base/special/round';\nimport __var_6__ from '@stdlib/math/base/special/sqrt';\nimport __var_7__ from '@stdlib/stats/base/dists/binomial/cdf';\nimport __var_8__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_9__ from '@stdlib/constants/math/float64-pinf';\nimport __var_10__ from './search_left.js';\nimport __var_11__ from './search_right.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar degenerate = __var_2__.factory;\nvar erfcinv = __var_3__;\nvar isnan = __var_4__;\nvar round = __var_5__;\nvar sqrt = __var_6__;\nvar cdf = __var_7__;\nvar SQRT2 = __var_8__;\nvar PINF = __var_9__;\nvar searchLeft = __var_10__;\nvar searchRight = __var_11__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\nfunction factory( n, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r === 0.0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ( r === 1.0 ) {\n\t\t\treturn n;\n\t\t}\n\t\t// Cornish-Fisher expansion:\n\t\tif ( r < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\t\tguess = round( mu + (sigma * corr) );\n\t\tif ( cdf( guess, n, p ) >= r ) {\n\t\t\treturn searchLeft( guess, r, n, p );\n\t\t}\n\t\treturn searchRight( guess, r, n, p );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/binomial/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/binomial/quantile' );\n*\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 2\n*\n* y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/quantile' ).factory;\n*\n* var quantile = factory( 10, 0.5 );\n*\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}