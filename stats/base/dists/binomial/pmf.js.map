{"version":3,"sources":["@stdlib/stats/base/dists/binomial/pmf/lib/pmf.js","@stdlib/stats/base/dists/binomial/pmf/lib/factory.js","@stdlib/stats/base/dists/binomial/pmf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","binomcoefln","__var_1__","isnan","__var_2__","log1p","__var_3__","exp","__var_4__","ln","__var_5__","PINF","__var_6__","pmf","x","n","p","lnl","NaN","constantFunction","degenerate","factory","__var_7__","__var_8__","setReadOnly"],"mappings":"ykBA4BA,IAAIA,EAAuBC,EACvBC,EAAcC,EACdC,EAAQC,EACRC,EAAQC,EACRC,EAAMC,EACNC,EAAKC,EACLC,EAAOC,EAyDX,SAASC,EAAKC,EAAGC,EAAGC,GACnB,IAAIC,EACJ,OACCd,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPA,EAAI,GACJA,EAAI,IACHjB,EAAsBgB,IACvBA,IAAMJ,EAECO,IAEHnB,EAAsBe,GACrBA,EAAIC,EACD,EAEG,IAANC,EACW,IAANF,EAAY,EAAM,EAEjB,IAANE,EACKF,IAAMC,EAAM,EAAM,GAE5BE,EAAMhB,EAAac,EAAGD,GACtBG,GAAQH,EAAIL,EAAIO,IAAUD,EAAID,GAAMT,GAAQW,GACrCT,EAAKU,IAEN,ECxFR,IAAIlB,EAAuBC,EACvBmB,EAAmBjB,EACnBD,EAAcG,EACdgB,EAAad,EAAUe,QACvBlB,EAAQK,EACRH,EAAQK,EACRH,EAAMK,EACNH,EAAKa,EACLX,EAAOY,EAoBX,SAASF,EAASN,EAAGC,GACpB,OACCb,EAAOY,IACPZ,EAAOa,KACNjB,EAAsBgB,IACvBA,IAAMJ,GACNK,EAAI,GACJA,EAAI,EAEGG,EAAkBD,KAEf,IAANF,GAAmB,IAAND,EACVK,EAAY,GAET,IAANJ,EACGI,EAAYL,GAepB,SAAcD,GACb,IAAIG,EACJ,GAAKd,EAAOW,GACX,OAAOI,IAER,GAAKnB,EAAsBe,GAC1B,OAAKA,EAAIC,EACD,GAERE,EAAMhB,EAAac,EAAGD,GACtBG,GAAQH,EAAIL,EAAIO,IAASD,EAAID,GAAKT,GAAQW,GACnCT,EAAKU,IAEb,OAAO,GC7CT,IAAIO,EAAcxB,EACda,EAAMX,EACNmB,EAAUjB,EAKdoB,EAAaX,EAAK,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/special/binomcoefln';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/log1p';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar binomcoefln = __var_1__;\nvar isnan = __var_2__;\nvar log1p = __var_3__;\nvar exp = __var_4__;\nvar ln = __var_5__;\nvar PINF = __var_6__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* @example\n* var y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* @example\n* var y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = pmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, n, p ) {\n\tvar lnl;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tif ( x > n ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn ( x === 0 ) ? 1.0 : 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( x === n ) ? 1.0 : 0.0;\n\t\t}\n\t\tlnl = binomcoefln( n, x );\n\t\tlnl += (x * ln( p )) + (( n - x ) * log1p( -p ));\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\nexport default pmf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/special/binomcoefln';\nimport __var_3__ from '@stdlib/stats/base/dists/degenerate/pmf';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/math/base/special/log1p';\nimport __var_6__ from '@stdlib/math/base/special/exp';\nimport __var_7__ from '@stdlib/math/base/special/ln';\nimport __var_8__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar binomcoefln = __var_2__;\nvar degenerate = __var_3__.factory;\nvar isnan = __var_4__;\nvar log1p = __var_5__;\nvar exp = __var_6__;\nvar ln = __var_7__;\nvar PINF = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tif ( x > n ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tlnl = binomcoefln( n, x );\n\t\t\tlnl += (x * ln( p )) + ((n - x) * log1p( -p ));\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pmf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/binomial/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/binomial/pmf' );\n*\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/pmf' ).factory;\n*\n* var pmf = factory( 10, 0.5 );\n*\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pmf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pmf;\n"]}