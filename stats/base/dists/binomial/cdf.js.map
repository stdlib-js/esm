{"version":3,"sources":["@stdlib/stats/base/dists/binomial/cdf/lib/cdf.js","@stdlib/stats/base/dists/binomial/cdf/lib/factory.js","@stdlib/stats/base/dists/binomial/cdf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","betainc","__var_1__","isnan","__var_2__","floor","__var_3__","PINF","__var_4__","cdf","x","n","p","NaN","constantFunction","__var_5__","factory","setReadOnly"],"mappings":"obA0BA,IAAIA,EAAuBC,EACvBC,EAAUC,EACVC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EAyDX,SAASC,EAAKC,EAAGC,EAAGC,GACnB,OACCT,EAAOO,IACPP,EAAOQ,IACPR,EAAOS,IACPA,EAAI,GACJA,EAAI,IACHb,EAAsBY,IACvBA,IAAMJ,EAECM,IAEHH,EAAI,EACD,EAEHA,GAAKC,EACF,GAERD,EAAIL,EAAOK,EAAI,MACRT,EAASW,EAAGF,EAAI,EAAKC,EAAID,GAAG,GAAM,IC/E1C,IAAIX,EAAuBC,EACvBc,EAAmBZ,EACnBD,EAAUG,EACVD,EAAQG,EACRD,EAAQG,EACRD,EAAOQ,EAoBX,SAASC,EAASL,EAAGC,GACpB,OACCT,EAAOQ,IACPR,EAAOS,IACPA,EAAI,GACJA,EAAI,IACHb,EAAsBY,IACvBA,IAAMJ,EAECO,EAAkBD,KAe1B,SAAcH,GACb,GAAKP,EAAOO,GACX,OAAOG,IAER,GAAKH,EAAI,EACR,OAAO,EAER,GAAKA,GAAKC,EACT,OAAO,EAIR,OADAD,EAAIL,EAAOK,EAAI,MACRT,EAASW,EAAGF,EAAI,EAAKC,EAAID,GAAG,GAAM,IChC3C,IAAIO,EAAcjB,EACdS,EAAMP,EACNc,EAAUZ,EAKda,EAAaR,EAAK,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/special/betainc';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/floor';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar betainc = __var_1__;\nvar isnan = __var_2__;\nvar floor = __var_3__;\nvar PINF = __var_4__;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* @example\n* var y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* @example\n* var y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, n, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= n ) {\n\t\treturn 1.0;\n\t}\n\tx = floor( x + 1.0e-7 );\n\treturn betainc( p, x + 1.0, n - x, true, true );\n}\n\n\n// EXPORTS //\nexport default cdf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/special/betainc';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/floor';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar betainc = __var_2__;\nvar isnan = __var_3__;\nvar floor = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10, 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= n ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Ensure left-continuity:\n\t\tx = floor( x + 1.0e-7 );\n\t\treturn betainc( p, x + 1.0, n - x, true, true );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './cdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/binomial/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/binomial/cdf' );\n*\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/cdf' ).factory;\n*\n* var cdf = factory( 10, 0.5 );\n*\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default cdf;\n"]}