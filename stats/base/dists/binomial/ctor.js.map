{"version":3,"sources":["@stdlib/stats/base/dists/binomial/ctor/lib/ctor.js","@stdlib/stats/base/dists/binomial/ctor/lib/index.js"],"names":["isPositiveInteger","__var_0__","isPrimitive","isProbability","__var_1__","defineProperty","__var_2__","setReadOnly","__var_3__","setReadOnlyAccessor","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logpmf","__var_13__","mgf","__var_14__","pmf","__var_15__","quantile","__var_16__","binomialCDF","x","this","n","p","binomialLogPMF","binomialMGF","t","binomialPMF","binomialQuantile","Binomial","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"ioBAwCA,IAAIA,EAAoBC,EAAUC,YAC9BC,EAAgBC,EAAUF,YAC1BG,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAaC,GACrB,OAAOX,EAAKW,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASC,EAAgBJ,GACxB,OAAOT,EAAQS,EAAGC,KAAKC,EAAGD,KAAKE,GAUhC,SAASE,EAAaC,GACrB,OAAOb,EAAKa,EAAGL,KAAKC,EAAGD,KAAKE,GAU7B,SAASI,EAAaP,GACrB,OAAOL,EAAKK,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASK,EAAkBL,GAC1B,OAAON,EAAUM,EAAGF,KAAKC,EAAGD,KAAKE,GAyBlC,SAASM,IACR,IAAIP,EACAC,EACJ,KAAOF,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAUC,UAAW,GAAKA,UAAW,IAEjD,GAAKA,UAAUC,OAAS,CAGvB,GADAR,EAAIO,UAAW,IACT9C,EAFNsC,EAAIQ,UAAW,IAGd,MAAM,IAAIE,UAAW,8EAAgFV,EAAI,KAE1G,IAAMnC,EAAeoC,GACpB,MAAM,IAAIS,UAAW,uFAAyFT,EAAI,UAGnHD,EAAI,EACJC,EAAI,GA4BL,OA1BAlC,EAAgBgC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAMrD,EAAmBqD,GACxB,MAAM,IAAIL,UAAW,sDAAwDK,EAAQ,KAEtFf,EAAIe,KAGNhD,EAAgBgC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAMlD,EAAekD,GACpB,MAAM,IAAIL,UAAW,4DAA8DK,EAAQ,KAE5Fd,EAAIc,KAGChB,KAiBR5B,EAAqBoC,EAASS,UAAW,YAAY,WACpD,OAAO3C,EAAU0B,KAAKC,EAAGD,KAAKE,MAiB/B9B,EAAqBoC,EAASS,UAAW,QAAQ,WAChD,OAAOzC,EAAMwB,KAAKC,EAAGD,KAAKE,MAiB3B9B,EAAqBoC,EAASS,UAAW,UAAU,WAClD,OAAOvC,EAAQsB,KAAKC,EAAGD,KAAKE,MAiB7B9B,EAAqBoC,EAASS,UAAW,QAAQ,WAChD,OAAOrC,EAAMoB,KAAKC,EAAGD,KAAKE,MAiB3B9B,EAAqBoC,EAASS,UAAW,YAAY,WACpD,OAAOnC,EAAUkB,KAAKC,EAAGD,KAAKE,MAiB/B9B,EAAqBoC,EAASS,UAAW,SAAS,WACjD,OAAOjC,EAAOgB,KAAKC,EAAGD,KAAKE,MAiB5B9B,EAAqBoC,EAASS,UAAW,YAAY,WACpD,OAAO/B,EAAUc,KAAKC,EAAGD,KAAKE,MAmB/BhC,EAAasC,EAASS,UAAW,MAAOnB,GAkBxC5B,EAAasC,EAASS,UAAW,SAAUd,GAkB3CjC,EAAasC,EAASS,UAAW,MAAOb,GAkBxClC,EAAasC,EAASS,UAAW,MAAOX,GAkBxCpC,EAAasC,EAASS,UAAW,WAAYV,GC5W1C,IAACW,EAAOtD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-probability';\nimport __var_2__ from '@stdlib/utils/define-property';\nimport __var_3__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_4__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_5__ from '@stdlib/stats/base/dists/binomial/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/binomial/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/binomial/median';\nimport __var_8__ from '@stdlib/stats/base/dists/binomial/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/binomial/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/binomial/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/binomial/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/binomial/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/binomial/logpmf';\nimport __var_14__ from '@stdlib/stats/base/dists/binomial/mgf';\nimport __var_15__ from '@stdlib/stats/base/dists/binomial/pmf';\nimport __var_16__ from '@stdlib/stats/base/dists/binomial/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__.isPrimitive;\nvar isProbability = __var_1__.isPrimitive;\nvar defineProperty = __var_2__;\nvar setReadOnly = __var_3__;\nvar setReadOnlyAccessor = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logpmf = __var_13__;\nvar mgf = __var_14__;\nvar pmf = __var_15__;\nvar quantile = __var_16__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction binomialCDF( x ) {\n\treturn cdf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction binomialLogPMF( x ) {\n\treturn logpmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction binomialMGF( t ) {\n\treturn mgf( t, this.n, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction binomialPMF( x ) {\n\treturn pmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction binomialQuantile( p ) {\n\treturn quantile( p, this.n, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [n=1.0] - number of trials\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {Binomial} distribution instance\n*\n* @example\n* var binomial = new Binomial( 5, 0.1 );\n*\n* var y = binomial.cdf( 0.8 );\n* // returns ~0.59\n*\n* var v = binomial.mode;\n* // returns 0.0\n*/\nfunction Binomial() {\n\tvar n;\n\tvar p;\n\tif ( !(this instanceof Binomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Binomial();\n\t\t}\n\t\treturn new Binomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tn = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( n ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Number of trials `n` must be a positive integer. Value: `' + n + '`' );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );\n\t\t}\n\t} else {\n\t\tn = 1;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Binomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.kurtosis;\n* // returns ~-0.153\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.n, this.p );\n});\n\n/**\n* Binomial distribution expected value.\n*\n* @name mean\n* @memberof Binomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mean;\n* // returns ~4.8\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mean', function get() {\n\treturn mean( this.n, this.p );\n});\n\n/**\n* Binomial distribution median.\n*\n* @name median\n* @memberof Binomial.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.median;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'median', function get() {\n\treturn median( this.n, this.p );\n});\n\n/**\n* Binomial distribution mode.\n*\n* @name mode\n* @memberof Binomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mode;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mode', function get() {\n\treturn mode( this.n, this.p );\n});\n\n/**\n* Binomial distribution skewness.\n*\n* @name skewness\n* @memberof Binomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.skewness;\n* // returns ~0.118\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'skewness', function get() {\n\treturn skewness( this.n, this.p );\n});\n\n/**\n* Binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof Binomial.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.stdev;\n* // returns ~1.697\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'stdev', function get() {\n\treturn stdev( this.n, this.p );\n});\n\n/**\n* Binomial distribution variance.\n*\n* @name variance\n* @memberof Binomial.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.variance;\n* // returns ~2.88\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'variance', function get() {\n\treturn variance( this.n, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.cdf( 0.5 );\n* // returns ~0.41\n*/\nsetReadOnly( Binomial.prototype, 'cdf', binomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.logpmf( 2.0 );\n* // returns ~-1.873\n*/\nsetReadOnly( Binomial.prototype, 'logpmf', binomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.mgf( 0.5 );\n* // returns ~1.629\n*/\nsetReadOnly( Binomial.prototype, 'mgf', binomialMGF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.pmf( 2.0 );\n* // returns ~0.154\n*/\nsetReadOnly( Binomial.prototype, 'pmf', binomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.quantile( 0.5 );\n* // returns 1.0\n*/\nsetReadOnly( Binomial.prototype, 'quantile', binomialQuantile );\n\n\n// EXPORTS //\nexport default Binomial;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution constructor.\n*\n* @module @stdlib/stats/base/dists/binomial/ctor\n*\n* @example\n* var Binomial = require( '@stdlib/stats/base/dists/binomial/ctor' );\n*\n* var binomial = new Binomial( 8, 0.2 );\n*\n* var y = binomial.cdf( 2.8 );\n* // returns ~0.797\n*\n* var mode = binomial.mode;\n* // returns 1.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}