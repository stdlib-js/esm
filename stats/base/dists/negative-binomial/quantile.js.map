{"version":3,"sources":["@stdlib/stats/base/dists/negative-binomial/quantile/lib/search.js","@stdlib/stats/base/dists/negative-binomial/quantile/lib/quantile.js","@stdlib/stats/base/dists/negative-binomial/quantile/lib/factory.js","@stdlib/stats/base/dists/negative-binomial/quantile/lib/index.js"],"names":["methods","cdf","__var_0__","searchLeft","x","k","r","p","searchRight","__var_8__","left","right","erfcinv","__var_1__","isnan","__var_2__","round","__var_3__","sqrt","__var_4__","SQRT2","__var_5__","PINF","__var_6__","search","quantile","sigmaInv","guess","sigma","mu","q","NaN","constantFunction","__var_7__","factory","setReadOnly"],"mappings":"2fAsBA,IAKIA,EALAC,EAAMC,EAmBV,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,GAC7B,OAAe,CACd,GAAW,IAANH,GAAWH,EAAKG,EAAI,EAAKE,EAAGC,GAAMF,EACtC,OAAOD,EAERA,GAAK,GAaP,SAASI,EAAaJ,EAAGC,EAAGC,EAAGC,GAC9B,OAEC,GAAKN,EADLG,GAAK,EACQE,EAAGC,IAAOF,EACtB,OAAOD,EAeV,IAAAK,EAPAT,EAAU,CACTU,KAAQP,EACRQ,MAASH,GC5CNP,EAAMC,EACNU,EAAUC,EACVC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EACPC,EAAQC,EACRC,EAAOC,EACPC,ED0CWxB,ECuBf,SAASyB,EAAUpB,EAAGC,EAAGC,GACxB,IAAImB,EACAC,EACAC,EAEAC,EAEAzB,EACA0B,EAEJ,OACChB,EAAOR,IACPQ,EAAOP,IACPO,EAAOT,IACPC,GAAK,GACLC,EAAI,GACJA,EAAI,GACJF,EAAI,GACJA,EAAI,EAEG0B,IAEG,IAAN1B,EACG,EAEG,IAANA,EACGiB,GAGRO,EAAOvB,GADPwB,EAAI,EAAMvB,GACOA,EAEjBmB,EAAW,GADXE,EAAQV,EAAMZ,EAAIwB,GAAMvB,GAKvBH,EADIC,EAAI,IACHO,EAAS,EAAMP,GAAMe,EAEtBR,EAAS,GAAO,EAAIP,IAAOe,EAMhCO,EAAQX,EAAOa,EAAMD,GADdxB,EAAKsB,GAHPtB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAK0B,EAAOrB,EAAGC,IAAOF,EAC9BmB,EAAOd,KAAMiB,EAAOtB,EAAGC,EAAGC,GAC1BiB,EAAOb,MAAOgB,EAAOtB,EAAGC,EAAGC,ICrH7B,IAAIyB,EAAmB9B,EACnBD,EAAMY,EACND,EAAUG,EACVD,EAAQG,EACRD,EAAQG,EACRD,EAAOG,EACPD,EAAQG,EACRD,EAAOW,EACPT,EFwCWxB,EEpBf,SAASkC,EAAS5B,EAAGC,GACpB,IAAImB,EACAE,EACAC,EACAC,EACJ,OACChB,EAAOR,IACPQ,EAAOP,IACPD,GAAK,GACLC,EAAI,GACJA,EAAI,EAEGyB,EAAkBD,MAG1BF,EAAOvB,GADPwB,EAAI,EAAMvB,GACOA,EACjBqB,EAAQV,EAAMZ,EAAIwB,GAAMvB,EACxBmB,GAAc,EAAInB,EAAK,GAAQqB,EAc/B,SAAmBvB,GAClB,IAAIsB,EAGAvB,EAEJ,GAAKU,EAAOT,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAO0B,IAER,GAAW,IAAN1B,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOiB,EAKPlB,EADIC,EAAI,IACHO,EAAS,EAAMP,GAAMe,EAEtBR,EAAS,GAAO,EAAIP,IAAOe,EAOhC,OADAO,EAAQX,EAAOa,EAAMD,GADdxB,EAAKsB,GAHPtB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAK0B,EAAOrB,EAAGC,IAAOF,EAC9BmB,EAAOd,KAAMiB,EAAOtB,EAAGC,EAAGC,GAC1BiB,EAAOb,MAAOgB,EAAOtB,EAAGC,EAAGC,KCxE9B,IAAI4B,EAAcjC,EACduB,EAAWZ,EACXqB,EAAUnB,EAKdoB,EAAaV,EAAU,UAAWS","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dists/negative-binomial/cdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cdf = __var_0__;\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchLeft( x, k, r, p ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, r, p ) < k ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchRight( x, k, r, p ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, r, p ) >= k ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\nexport default methods;\n","import __var_0__ from '@stdlib/stats/base/dists/negative-binomial/cdf';\nimport __var_1__ from '@stdlib/math/base/special/erfcinv';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/round';\nimport __var_4__ from '@stdlib/math/base/special/sqrt';\nimport __var_5__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\nimport __var_7__ from './search.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar cdf = __var_0__;\nvar erfcinv = __var_1__;\nvar isnan = __var_2__;\nvar round = __var_3__;\nvar sqrt = __var_4__;\nvar SQRT2 = __var_5__;\nvar PINF = __var_6__;\nvar search = __var_7__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.\n*\n* @param {Probability} k - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* @example\n* var y = quantile( 0.5, 10.0, 0.4 );\n* // returns 14\n*\n* @example\n* var y = quantile( 0.0, 10.0, 0.9 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, NaN );\n* // returns NaN\n*/\nfunction quantile( k, r, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\tvar q;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tisnan( k ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tk < 0.0 ||\n\t\tk > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = 1.0 / sigma;\n\n\t// Cornish-Fisher expansion:\n\tif ( k < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( mu + (sigma * corr) );\n\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\tsearch.left( guess, k, r, p ) :\n\t\tsearch.right( guess, k, r, p );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/negative-binomial/cdf';\nimport __var_2__ from '@stdlib/math/base/special/erfcinv';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/round';\nimport __var_5__ from '@stdlib/math/base/special/sqrt';\nimport __var_6__ from '@stdlib/constants/math/float64-sqrt-two';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\nimport __var_8__ from './search.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar cdf = __var_1__;\nvar erfcinv = __var_2__;\nvar isnan = __var_3__;\nvar round = __var_4__;\nvar sqrt = __var_5__;\nvar SQRT2 = __var_6__;\nvar PINF = __var_7__;\nvar search = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 5\n*\n* y = quantile( 0.9 );\n* // returns 16\n*/\nfunction factory( r, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\tvar q;\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = ( (2.0/p) - 1.0 ) / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} k - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( k ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( k ) || k < 0.0 || k > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( k === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( k === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\n\t\t// Cornish-Fisher expansion:\n\t\tif ( k < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( mu + (sigma * corr) );\n\t\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\t\tsearch.left( guess, k, r, p ) :\n\t\t\tsearch.right( guess, k, r, p );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/negative-binomial/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/negative-binomial/quantile' );\n*\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* var myquantile = quantile.factory( 10.0, 0.5 );\n* y = myquantile( 0.1 );\n* // returns 5\n*\n* y = myquantile( 0.9 );\n* // returns 16\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}