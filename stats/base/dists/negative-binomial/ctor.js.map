{"version":3,"sources":["@stdlib/stats/base/dists/negative-binomial/ctor/lib/ctor.js","@stdlib/stats/base/dists/negative-binomial/ctor/lib/index.js"],"names":["isProbability","__var_0__","isPrimitive","defineProperty","__var_1__","setReadOnly","__var_2__","setReadOnlyAccessor","__var_3__","isPositive","__var_4__","kurtosis","__var_5__","mean","__var_6__","mode","__var_7__","skewness","__var_8__","stdev","__var_9__","variance","__var_10__","cdf","__var_11__","logpmf","__var_12__","mgf","__var_13__","pmf","__var_14__","quantile","__var_15__","negativeBinomialCDF","x","this","r","p","negativeBinomialLogPMF","negativeBinomialMGF","t","negativeBinomialPMF","negativeBinomialQuantile","NegativeBinomial","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"qmBAuCA,IAAIA,EAAgBC,EAAUC,YAC1BC,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUR,YACvBS,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAqBC,GAC7B,OAAOX,EAAKW,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASC,EAAwBJ,GAChC,OAAOT,EAAQS,EAAGC,KAAKC,EAAGD,KAAKE,GAUhC,SAASE,EAAqBC,GAC7B,OAAOb,EAAKa,EAAGL,KAAKC,EAAGD,KAAKE,GAU7B,SAASI,EAAqBP,GAC7B,OAAOL,EAAKK,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASK,EAA0BL,GAClC,OAAON,EAAUM,EAAGF,KAAKC,EAAGD,KAAKE,GAyBlC,SAASM,IACR,IAAIP,EACAC,EACJ,KAAOF,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAkBC,UAAW,GAAKA,UAAW,IAEzD,GAAKA,UAAUC,OAAS,CAGvB,GADAR,EAAIO,UAAW,IACTnC,EAFN2B,EAAIQ,UAAW,IAGd,MAAM,IAAIE,UAAW,yGAA2GV,EAAI,KAErI,IAAMpC,EAAeqC,GACpB,MAAM,IAAIS,UAAW,uFAAyFT,EAAI,UAGnHD,EAAI,EACJC,EAAI,GA4BL,OA1BAlC,EAAgBgC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM1C,EAAY0C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFf,EAAIe,KAGNhD,EAAgBgC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAMnD,EAAemD,GACpB,MAAM,IAAIL,UAAW,4DAA8DK,EAAQ,KAE5Fd,EAAIc,KAGChB,KAiBR5B,EAAqBoC,EAAiBS,UAAW,YAAY,WAC5D,OAAOzC,EAAUwB,KAAKC,EAAGD,KAAKE,MAiB/B9B,EAAqBoC,EAAiBS,UAAW,QAAQ,WACxD,OAAOvC,EAAMsB,KAAKC,EAAGD,KAAKE,MAiB3B9B,EAAqBoC,EAAiBS,UAAW,QAAQ,WACxD,OAAOrC,EAAMoB,KAAKC,EAAGD,KAAKE,MAiB3B9B,EAAqBoC,EAAiBS,UAAW,YAAY,WAC5D,OAAOnC,EAAUkB,KAAKC,EAAGD,KAAKE,MAiB/B9B,EAAqBoC,EAAiBS,UAAW,SAAS,WACzD,OAAOjC,EAAOgB,KAAKC,EAAGD,KAAKE,MAiB5B9B,EAAqBoC,EAAiBS,UAAW,YAAY,WAC5D,OAAO/B,EAAUc,KAAKC,EAAGD,KAAKE,MAmB/BhC,EAAasC,EAAiBS,UAAW,MAAOnB,GAkBhD5B,EAAasC,EAAiBS,UAAW,SAAUd,GAkBnDjC,EAAasC,EAAiBS,UAAW,MAAOb,GAkBhDlC,EAAasC,EAAiBS,UAAW,MAAOX,GAkBhDpC,EAAasC,EAAiBS,UAAW,WAAYV,GCxVlD,IAACW,EAAOpD","sourcesContent":["import __var_0__ from '@stdlib/assert/is-probability';\nimport __var_1__ from '@stdlib/utils/define-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_3__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_4__ from '@stdlib/assert/is-positive-number';\nimport __var_5__ from '@stdlib/stats/base/dists/negative-binomial/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/negative-binomial/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/negative-binomial/mode';\nimport __var_8__ from '@stdlib/stats/base/dists/negative-binomial/skewness';\nimport __var_9__ from '@stdlib/stats/base/dists/negative-binomial/stdev';\nimport __var_10__ from '@stdlib/stats/base/dists/negative-binomial/variance';\nimport __var_11__ from '@stdlib/stats/base/dists/negative-binomial/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/negative-binomial/logpmf';\nimport __var_13__ from '@stdlib/stats/base/dists/negative-binomial/mgf';\nimport __var_14__ from '@stdlib/stats/base/dists/negative-binomial/pmf';\nimport __var_15__ from '@stdlib/stats/base/dists/negative-binomial/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar isProbability = __var_0__.isPrimitive;\nvar defineProperty = __var_1__;\nvar setReadOnly = __var_2__;\nvar setReadOnlyAccessor = __var_3__;\nvar isPositive = __var_4__.isPrimitive;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar mode = __var_7__;\nvar skewness = __var_8__;\nvar stdev = __var_9__;\nvar variance = __var_10__;\nvar cdf = __var_11__;\nvar logpmf = __var_12__;\nvar mgf = __var_13__;\nvar pmf = __var_14__;\nvar quantile = __var_15__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction negativeBinomialCDF( x ) {\n\treturn cdf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction negativeBinomialLogPMF( x ) {\n\treturn logpmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction negativeBinomialMGF( t ) {\n\treturn mgf( t, this.r, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction negativeBinomialPMF( x ) {\n\treturn pmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction negativeBinomialQuantile( p ) {\n\treturn quantile( p, this.r, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Negative binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {NegativeBinomial} distribution instance\n*\n* @example\n* var nbinomial = new NegativeBinomial( 5.0, 0.1 );\n*\n* var y = nbinomial.cdf( 10.0 );\n* // returns ~0.013\n*\n* var v = nbinomial.mode;\n* // returns 36.0\n*/\nfunction NegativeBinomial() {\n\tvar r;\n\tvar p;\n\tif ( !(this instanceof NegativeBinomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new NegativeBinomial();\n\t\t}\n\t\treturn new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositive( r ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Number of trials until experiment is stopped `r` must be a positive number. Value: `' + r + '`' );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );\n\t\t}\n\t} else {\n\t\tr = 1.0;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'r', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn r;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tr = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Negative binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.kurtosis;\n* // returns ~0.522\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution expected value.\n*\n* @name mean\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mean;\n* // returns ~18.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mean', function get() {\n\treturn mean( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution mode.\n*\n* @name mode\n* @memberof NegativeBinomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mode;\n* // returns 16.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mode', function get() {\n\treturn mode( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution skewness.\n*\n* @name skewness\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.skewness;\n* // returns ~0.596\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'skewness', function get() {\n\treturn skewness( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.stdev;\n* // returns ~6.708\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'stdev', function get() {\n\treturn stdev( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution variance.\n*\n* @name variance\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.variance;\n* // returns ~45.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'variance', function get() {\n\treturn variance( this.r, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.cdf( 3.0 );\n* // returns ~0.033\n*/\nsetReadOnly( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.logpmf( 9.0 );\n* // returns ~-3.052\n*/\nsetReadOnly( NegativeBinomial.prototype, 'logpmf', negativeBinomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.mgf( 0.1 );\n* // returns ~1.66\n*/\nsetReadOnly( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.pmf( 9.0 );\n* // returns ~0.047\n*/\nsetReadOnly( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.quantile( 0.5 );\n* // returns 15.0\n*/\nsetReadOnly( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );\n\n\n// EXPORTS //\nexport default NegativeBinomial;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution constructor.\n*\n* @module @stdlib/stats/base/dists/negative-binomial/ctor\n*\n* @example\n* var NegativeBinomial = require( '@stdlib/stats/base/dists/negative-binomial/ctor' );\n*\n* var nbinomial = new NegativeBinomial( 7.5, 0.2 );\n*\n* var y = nbinomial.cdf( 12.0 );\n* // returns ~0.047\n*\n* var mode = nbinomial.mode;\n* // returns 26.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}