{"version":3,"sources":["@stdlib/stats/base/dists/kumaraswamy/ctor/lib/ctor.js","@stdlib/stats/base/dists/kumaraswamy/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","kurtosis","__var_4__","mean","__var_5__","mode","__var_6__","skewness","__var_7__","stdev","__var_8__","variance","__var_9__","cdf","__var_10__","logcdf","__var_11__","logpdf","__var_12__","pdf","__var_13__","quantile","__var_14__","kumaraswamyCDF","x","this","a","b","kumaraswamyLogCDF","kumaraswamyLogPDF","kumaraswamyPDF","kumaraswamyQuantile","p","Kumaraswamy","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"kjBAsCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAgBC,GACxB,OAAOX,EAAKW,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASC,EAAmBJ,GAC3B,OAAOT,EAAQS,EAAGC,KAAKC,EAAGD,KAAKE,GAUhC,SAASE,EAAmBL,GAC3B,OAAOP,EAAQO,EAAGC,KAAKC,EAAGD,KAAKE,GAUhC,SAASG,EAAgBN,GACxB,OAAOL,EAAKK,EAAGC,KAAKC,EAAGD,KAAKE,GAU7B,SAASI,EAAqBC,GAC7B,OAAOX,EAAUW,EAAGP,KAAKC,EAAGD,KAAKE,GAyBlC,SAASM,IACR,IAAIP,EACAC,EACJ,KAAOF,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAaC,UAAW,GAAKA,UAAW,IAEpD,GAAKA,UAAUC,OAAS,CAGvB,GADAR,EAAIO,UAAW,IACTpC,EAFN4B,EAAIQ,UAAW,IAGd,MAAM,IAAIE,UAAW,kFAAoFV,EAAI,KAE9G,IAAM5B,EAAY6B,GACjB,MAAM,IAAIS,UAAW,mFAAqFT,EAAI,UAG/GD,EAAI,EACJC,EAAI,EA4BL,OA1BAnC,EAAgBiC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM3C,EAAY2C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFf,EAAIe,KAGNjD,EAAgBiC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAM3C,EAAY2C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFd,EAAIc,KAGChB,KAiBR7B,EAAqBqC,EAAYS,UAAW,YAAY,WACvD,OAAOzC,EAAUwB,KAAKC,EAAGD,KAAKE,MAiB/B/B,EAAqBqC,EAAYS,UAAW,QAAQ,WACnD,OAAOvC,EAAMsB,KAAKC,EAAGD,KAAKE,MAiB3B/B,EAAqBqC,EAAYS,UAAW,QAAQ,WACnD,OAAOrC,EAAMoB,KAAKC,EAAGD,KAAKE,MAiB3B/B,EAAqBqC,EAAYS,UAAW,YAAY,WACvD,OAAOnC,EAAUkB,KAAKC,EAAGD,KAAKE,MAiB/B/B,EAAqBqC,EAAYS,UAAW,SAAS,WACpD,OAAOjC,EAAOgB,KAAKC,EAAGD,KAAKE,MAiB5B/B,EAAqBqC,EAAYS,UAAW,YAAY,WACvD,OAAO/B,EAAUc,KAAKC,EAAGD,KAAKE,MAmB/BjC,EAAauC,EAAYS,UAAW,MAAOnB,GAkB3C7B,EAAauC,EAAYS,UAAW,SAAUd,GAkB9ClC,EAAauC,EAAYS,UAAW,SAAUb,GAkB9CnC,EAAauC,EAAYS,UAAW,MAAOZ,GAkB3CpC,EAAauC,EAAYS,UAAW,WAAYX,GCtV7C,IAACY,EAAOlD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/kumaraswamy/kurtosis';\nimport __var_5__ from '@stdlib/stats/base/dists/kumaraswamy/mean';\nimport __var_6__ from '@stdlib/stats/base/dists/kumaraswamy/mode';\nimport __var_7__ from '@stdlib/stats/base/dists/kumaraswamy/skewness';\nimport __var_8__ from '@stdlib/stats/base/dists/kumaraswamy/stdev';\nimport __var_9__ from '@stdlib/stats/base/dists/kumaraswamy/variance';\nimport __var_10__ from '@stdlib/stats/base/dists/kumaraswamy/cdf';\nimport __var_11__ from '@stdlib/stats/base/dists/kumaraswamy/logcdf';\nimport __var_12__ from '@stdlib/stats/base/dists/kumaraswamy/logpdf';\nimport __var_13__ from '@stdlib/stats/base/dists/kumaraswamy/pdf';\nimport __var_14__ from '@stdlib/stats/base/dists/kumaraswamy/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar kurtosis = __var_4__;\nvar mean = __var_5__;\nvar mode = __var_6__;\nvar skewness = __var_7__;\nvar stdev = __var_8__;\nvar variance = __var_9__;\nvar cdf = __var_10__;\nvar logcdf = __var_11__;\nvar logpdf = __var_12__;\nvar pdf = __var_13__;\nvar quantile = __var_14__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction kumaraswamyCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction kumaraswamyLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction kumaraswamyLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction kumaraswamyPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction kumaraswamyQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [a=1.0] - first shape parameter\n* @param {PositiveNumber} [b=1.0] - second shape parameter\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @returns {Kumaraswamy} distribution instance\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var v = kumaraswamy.mode;\n* // returns NaN\n*/\nfunction Kumaraswamy() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Kumaraswamy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Kumaraswamy();\n\t\t}\n\t\treturn new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isPositive( a ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First shape parameter `a` must be a positive number. Value: `' + a + '`' );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second shape parameter `b` must be a positive number. Value: `' + b + '`' );\n\t\t}\n\t} else {\n\t\ta = 1.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Kumaraswamy's double bounded distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.kurtosis;\n* // returns ~2.704\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution expected value.\n*\n* @name mean\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mean;\n* // returns ~0.481\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution mode.\n*\n* @name mode\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mode;\n* // returns ~0.503\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution skewness.\n*\n* @name skewness\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.skewness;\n* // returns ~-0.201\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution standard deviation.\n*\n* @name stdev\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.stdev;\n* // returns ~0.13\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution variance.\n*\n* @name variance\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.variance;\n* // returns ~0.017\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.cdf( 0.5 );\n* // returns ~0.684\n*/\nsetReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logcdf( 0.5 );\n* // returns ~-0.38\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logpdf( 0.9 );\n* // returns ~-3.008\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.pdf( 0.9 );\n* // returns ~0.049\n*/\nsetReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.quantile( 0.5 );\n* // returns ~0.399\n*/\nsetReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );\n\n\n// EXPORTS //\nexport default Kumaraswamy;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @module @stdlib/stats/base/dists/kumaraswamy/ctor\n*\n* @example\n* var Kumaraswamy = require( '@stdlib/stats/base/dists/kumaraswamy/ctor' );\n*\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var mode = kumaraswamy.mode;\n* // returns NaN\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}