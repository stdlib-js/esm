{"version":3,"sources":["@stdlib/stats/base/dists/discrete-uniform/pmf/lib/pmf.js","@stdlib/stats/base/dists/discrete-uniform/pmf/lib/factory.js","@stdlib/stats/base/dists/discrete-uniform/pmf/lib/index.js"],"names":["isInteger","__var_0__","isnan","__var_1__","pmf","x","a","b","NaN","constantFunction","__var_2__","factory","ninv","setReadOnly"],"mappings":"0PAuBA,IAAIA,EAAYC,EACZC,EAAQC,EAyCZ,SAASC,EAAKC,EAAGC,EAAGC,GACnB,OACCL,EAAOG,IACPH,EAAOI,IACPJ,EAAOK,KACNP,EAAWM,KACXN,EAAWO,IACZD,EAAIC,EAEGC,IAEHH,EAAIC,GAAKD,EAAIE,IAAMP,EAAWK,GAC3B,EAED,GAAQE,EAAID,EAAI,GCvDxB,IAAIG,EAAmBR,EACnBD,EAAYG,EACZD,EAAQQ,EAoBZ,SAASC,EAASL,EAAGC,GACpB,IAAIK,EACJ,OACCV,EAAOI,IACPJ,EAAOK,KACNP,EAAWM,KACXN,EAAWO,IACZD,EAAIC,EAEGE,EAAkBD,MAE1BI,EAAO,GAAQL,EAAID,EAAI,GAcvB,SAAcD,GACb,GAAKH,EAAOG,GACX,OAAOG,IAER,GAAKH,EAAIC,GAAKD,EAAIE,IAAMP,EAAWK,GAClC,OAAO,EAER,OAAOO,ICnCT,IAAIC,EAAcZ,EACdG,EAAMD,EACNQ,EAAUD,EAKdG,EAAaT,EAAK,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated PMF\n*\n* @example\n* var y = pmf( 2.0, 0, 4 );\n* // returns ~0.2\n*\n* @example\n* var y = pmf( 5.0, 0, 4 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 2, 0, 8 );\n* // returns ~0.111\n*\n* @example\n* var y = pmf( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 3, 1 );\n* // returns NaN\n*/\nfunction pmf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 / ( b - a + 1.0 );\n}\n\n\n// EXPORTS //\nexport default pmf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-integer';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isInteger = __var_1__;\nvar isnan = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0, 10 );\n* var y = pmf( 2.0 );\n* // returns ~0.091\n*\n* y = pmf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b ) {\n\tvar ninv;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tninv = 1.0 / ( b - a + 1.0 );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ninv;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pmf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/discrete-uniform/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/discrete-uniform/pmf' );\n*\n* var y = pmf( 3.0, 2, 6 );\n* // returns ~0.2\n*\n* var myPMF = pmf.factory( 6, 7 );\n* y = myPMF( 7.0 );\n* // returns 0.5\n*\n* y = myPMF( 5.0 );\n* // returns 0.0\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pmf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pmf;\n"]}