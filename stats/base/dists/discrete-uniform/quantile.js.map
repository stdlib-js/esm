{"version":3,"sources":["@stdlib/stats/base/dists/discrete-uniform/quantile/lib/quantile.js","@stdlib/stats/base/dists/discrete-uniform/quantile/lib/factory.js","@stdlib/stats/base/dists/discrete-uniform/quantile/lib/index.js"],"names":["isInteger","__var_0__","isnan","__var_1__","floor","__var_2__","quantile","p","a","b","NaN","constantFunction","__var_3__","factory","n","setReadOnly"],"mappings":"kTAwBA,IAAIA,EAAYC,EACZC,EAAQC,EACRC,EAAQC,EAiDZ,SAASC,EAAUC,EAAGC,EAAGC,GAExB,OACCP,EAAOK,IACPL,EAAOM,IACPN,EAAOO,KACNT,EAAWQ,KACXR,EAAWS,IACZD,EAAIC,GACJF,EAAI,GACJA,EAAI,EAEGG,IAGDF,EAAIJ,EAAOG,GADdE,EAAID,EAAI,IChEb,IAAIG,EAAmBV,EACnBD,EAAYG,EACZD,EAAQG,EACRD,EAAQQ,EAoBZ,SAASC,EAASL,EAAGC,GACpB,IAAIK,EACJ,OACCZ,EAAOM,IACPN,EAAOO,KACNT,EAAWQ,KACXR,EAAWS,IACZD,EAAIC,EAEGE,EAAkBD,MAE1BI,EAAIL,EAAID,EAAI,EAcZ,SAAmBD,GAClB,GAAKL,EAAOK,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOG,IAER,OAAOF,EAAIJ,EAAOG,EAAIO,KClCxB,IAAIC,EAAcd,EACdK,EAAWH,EACXU,EAAUR,EAKdU,EAAaT,EAAU,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isInteger = __var_0__;\nvar isnan = __var_1__;\nvar floor = __var_2__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a discrete uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {integer} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0, 1 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.5, 0, 10 );\n* // returns 5\n*\n* @example\n* var y = quantile( 1.1, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 2, 1 );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tvar n;\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tn = b - a + 1;\n\treturn a + floor( p * n );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-integer';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isInteger = __var_1__;\nvar isnan = __var_2__;\nvar floor = __var_3__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a discrete uniform distribution with minimum support `a` an maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2, 4 );\n* var y = quantile( 0.4 );\n* // returns 3\n*\n* y = quantile( 0.8 );\n* // returns 4\n*/\nfunction factory( a, b ) {\n\tvar n;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tn = b - a + 1;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn a + floor( p * n );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/discrete-uniform/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/discrete-uniform/quantile' );\n*\n* var y = quantile( 0.8, 0, 1 );\n* // returns 1\n*\n* y = quantile( 0.5, 0, 10 );\n* // returns 5\n*\n* var myQuantile = quantile.factory( 0, 4 );\n* y = myQuantile( 0.8 );\n* // returns 4\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}