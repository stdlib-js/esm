{"version":3,"sources":["@stdlib/stats/base/dists/discrete-uniform/ctor/lib/ctor.js","@stdlib/stats/base/dists/discrete-uniform/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isInteger","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","skewness","__var_8__","stdev","__var_9__","variance","__var_10__","cdf","__var_11__","logcdf","__var_12__","logpmf","__var_13__","mgf","__var_14__","pmf","__var_15__","quantile","__var_16__","discreteUniformCDF","x","this","a","b","discreteUniformLogCDF","discreteUniformLogPMF","discreteUniformMGF","t","discreteUniformPMF","discreteUniformQuantile","p","DiscreteUniform","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-integer';\nimport __var_4__ from '@stdlib/stats/base/dists/discrete-uniform/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/discrete-uniform/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/discrete-uniform/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/discrete-uniform/median';\nimport __var_8__ from '@stdlib/stats/base/dists/discrete-uniform/skewness';\nimport __var_9__ from '@stdlib/stats/base/dists/discrete-uniform/stdev';\nimport __var_10__ from '@stdlib/stats/base/dists/discrete-uniform/variance';\nimport __var_11__ from '@stdlib/stats/base/dists/discrete-uniform/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/discrete-uniform/logcdf';\nimport __var_13__ from '@stdlib/stats/base/dists/discrete-uniform/logpmf';\nimport __var_14__ from '@stdlib/stats/base/dists/discrete-uniform/mgf';\nimport __var_15__ from '@stdlib/stats/base/dists/discrete-uniform/pmf';\nimport __var_16__ from '@stdlib/stats/base/dists/discrete-uniform/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isInteger = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar skewness = __var_8__;\nvar stdev = __var_9__;\nvar variance = __var_10__;\nvar cdf = __var_11__;\nvar logcdf = __var_12__;\nvar logpmf = __var_13__;\nvar mgf = __var_14__;\nvar pmf = __var_15__;\nvar quantile = __var_16__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction discreteUniformCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction discreteUniformLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction discreteUniformLogPMF( x ) {\n\treturn logpmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction discreteUniformMGF( t ) {\n\treturn mgf( t, this.a, this.b );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction discreteUniformPMF( x ) {\n\treturn pmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction discreteUniformQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Discrete uniform distribution constructor.\n*\n* @constructor\n* @param {integer} [a=0] - minimum support\n* @param {integer} [b=1] - maximum support\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be smaller than `b`\n* @returns {DiscreteUniform} distribution instance\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 0, 1 );\n*\n* var y = discreteUniform.cdf( 0.8 );\n* // returns 0.5\n*\n* var mu = discreteUniform.mean;\n* // returns 0.5\n*/\nfunction DiscreteUniform() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof DiscreteUniform) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new DiscreteUniform();\n\t\t}\n\t\treturn new DiscreteUniform( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isInteger( a ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Minimum support `a` must be an integer. Value: `' + a + '`' );\n\t\t}\n\t\tif ( !isInteger( b ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Maximum support `b` must be an integer. Value: `' + b + '`' );\n\t\t}\n\t\tif ( a > b ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Minimum support `a` must be less than or equal to maximum support `b`. Value: `' + a + ',' + b + '`' );\n\t\t}\n\t} else {\n\t\ta = 0;\n\t\tb = 1;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value > b ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be smaller than or equal to `b`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( a > value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be greater than or equal to `a`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Discrete uniform distribution differential entropy.\n*\n* @name entropy\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.entropy;\n* // returns ~2.197\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.kurtosis;\n* // returns -1.23\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution expected value.\n*\n* @name mean\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution median.\n*\n* @name median\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution skewness.\n*\n* @name skewness\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution standard deviation.\n*\n* @name stdev\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.stdev;\n* // returns ~2.582\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution variance.\n*\n* @name variance\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.variance;\n* // returns ~6.667\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.cdf( 3.0 );\n* // returns ~0.667\n*/\nsetReadOnly( DiscreteUniform.prototype, 'cdf', discreteUniformCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logcdf( 2.5 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logcdf', discreteUniformLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logpmf( 3.0 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logpmf', discreteUniformLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.mgf( 0.5 );\n* // returns ~4.863\n*/\nsetReadOnly( DiscreteUniform.prototype, 'mgf', discreteUniformMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.pmf( 3.0 );\n* // returns ~0.333\n*/\nsetReadOnly( DiscreteUniform.prototype, 'pmf', discreteUniformPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.quantile( 0.6 );\n* // returns 3.0\n*/\nsetReadOnly( DiscreteUniform.prototype, 'quantile', discreteUniformQuantile );\n\n\n// EXPORTS //\nexport default DiscreteUniform;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution constructor.\n*\n* @module @stdlib/stats/base/dists/discrete-uniform/ctor\n*\n* @example\n* var DiscreteUniform = require( '@stdlib/stats/base/dists/discrete-uniform/ctor' );\n*\n* var discreteUniform = new DiscreteUniform( 0, 8 );\n*\n* var y = discreteUniform.cdf( 0.8 );\n* // returns ~0.111\n*\n* var mu = discreteUniform.mean;\n* // returns 4.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}