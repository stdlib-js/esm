{"version":3,"sources":["@stdlib/stats/base/dists/beta/logpdf/lib/logpdf.js","@stdlib/stats/base/dists/beta/logpdf/lib/factory.js","@stdlib/stats/base/dists/beta/logpdf/lib/index.js"],"names":["betaln","__var_0__","isnan","__var_1__","log1p","__var_2__","ln","__var_3__","PINF","__var_4__","NINF","__var_5__","logpdf","x","alpha","beta","out","NaN","constantFunction","__var_6__","factory","betalnAB","setReadOnly"],"mappings":"4dA2BA,IAAIA,EAASC,EACTC,EAAQC,EACRC,EAAQC,EACRC,EAAKC,EACLC,EAAOC,EACPC,EAAOC,EAyDX,SAASC,EAAQC,EAAGC,EAAOC,GAC1B,IAAIC,EACJ,OACCd,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPD,GAAS,GACTC,GAAQ,EAEDE,IAEHJ,EAAI,GAAOA,EAAI,EAEZH,EAEG,IAANG,EACCC,EAAQ,EACLN,EAEHM,EAAQ,EACLJ,EAEDJ,EAAIS,GAED,IAANF,EACCE,EAAO,EACJP,EAEHO,EAAO,EACJL,EAEDJ,EAAIQ,IAEZE,GAAQF,EAAM,GAAQR,EAAIO,GAC1BG,IAASD,EAAK,GAAQX,GAAQS,GAC9BG,GAAOhB,EAAQc,EAAOC,IChGvB,IAAIG,EAAmBjB,EACnBD,EAASG,EACTD,EAAQG,EACRD,EAAQG,EACRD,EAAKG,EACLC,EAAOC,EACPH,EAAOW,EAqBX,SAASC,EAASN,EAAOC,GACxB,IAAIM,EACJ,OACCnB,EAAOY,IACPZ,EAAOa,IACPD,GAAS,GACTC,GAAQ,EAEDG,EAAkBD,MAE1BI,EAAWrB,EAAQc,EAAOC,GAc1B,SAAiBF,GAChB,IAAIG,EACJ,GAAKd,EAAOW,GACX,OAAOI,IAER,GAAKJ,EAAI,GAAOA,EAAI,EAEnB,OAAOH,EAER,GAAW,IAANG,EACJ,OAAKC,EAAQ,EACLN,EAEHM,EAAQ,EACLJ,EAEDJ,EAAIS,GAEZ,GAAW,IAANF,EACJ,OAAKE,EAAO,EACJP,EAEHO,EAAO,EACJL,EAEDJ,EAAIQ,GAIZ,OAFAE,GAAOK,EACPL,IAAWF,EAAM,GAAMR,EAAGO,IAAWE,EAAK,GAAMX,GAAOS,KCzDzD,IAAIS,EAAcrB,EACdW,EAAST,EACTiB,EAAUf,EAKdiB,EAAaV,EAAQ,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/betaln';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/log1p';\nimport __var_3__ from '@stdlib/math/base/special/ln';\nimport __var_4__ from '@stdlib/constants/math/float64-pinf';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar betaln = __var_0__;\nvar isnan = __var_1__;\nvar log1p = __var_2__;\nvar ln = __var_3__;\nvar PINF = __var_4__;\nvar NINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.223\n*\n* @example\n* var y = logpdf( 0.2, 2.0, 2.0 );\n* // returns ~-0.041\n*\n* @example\n* var y = logpdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.556\n*\n* @example\n* var y = logpdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 1.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x > 1.0 ) {\n\t\t// Support of the Beta distribution: [0,1]\n\t\treturn NINF;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( alpha < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( alpha > 1.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( beta );\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( beta < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( beta > 1.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( alpha );\n\t}\n\tout = ( alpha-1.0 ) * ln( x );\n\tout += ( beta-1.0 ) * log1p( -x );\n\tout -= betaln( alpha, beta );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default logpdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/special/betaln';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/log1p';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float64-ninf';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar betaln = __var_1__;\nvar isnan = __var_2__;\nvar log1p = __var_3__;\nvar ln = __var_4__;\nvar NINF = __var_5__;\nvar PINF = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.228\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.364\n*/\nfunction factory( alpha, beta ) {\n\tvar betalnAB;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetalnAB = betaln( alpha, beta );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated natural logarithm of the PDF\n\t*\n\t* @example\n\t* var y = logpdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > 1.0 ) {\n\t\t\t// Support of the Beta distribution: [0,1]\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tif ( alpha < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( alpha > 1.0 ) {\n\t\t\t\treturn NINF;\n\t\t\t}\n\t\t\treturn ln( beta );\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\tif ( beta < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( beta > 1.0 ) {\n\t\t\t\treturn NINF;\n\t\t\t}\n\t\t\treturn ln( alpha );\n\t\t}\n\t\tout = -betalnAB;\n\t\tout += ( ( alpha-1.0 )*ln(x) ) + ( ( beta-1.0 )*log1p(-x) );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (logPDF) for a beta distribution.\n*\n* @module @stdlib/stats/base/dists/beta/logpdf\n*\n* @example\n* var logpdf = require( '@stdlib/stats/base/dists/beta/logpdf' );\n*\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.223\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/beta/logpdf' ).factory;\n*\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.228\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.364\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpdf;\n"]}