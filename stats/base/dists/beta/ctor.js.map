{"version":3,"sources":["@stdlib/stats/base/dists/beta/ctor/lib/ctor.js","@stdlib/stats/base/dists/beta/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logcdf","__var_13__","logpdf","__var_14__","mgf","__var_15__","pdf","__var_16__","quantile","__var_17__","betaCDF","x","this","alpha","beta","betaLogCDF","betaLogPDF","betaMGF","t","betaPDF","betaQuantile","p","Beta","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"ioBAyCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAASC,GACjB,OAAOb,EAAKa,EAAGC,KAAKC,MAAOD,KAAKE,MAUjC,SAASC,EAAYJ,GACpB,OAAOX,EAAQW,EAAGC,KAAKC,MAAOD,KAAKE,MAUpC,SAASE,EAAYL,GACpB,OAAOT,EAAQS,EAAGC,KAAKC,MAAOD,KAAKE,MAUpC,SAASG,EAASC,GACjB,OAAOd,EAAKc,EAAGN,KAAKC,MAAOD,KAAKE,MAUjC,SAASK,EAASR,GACjB,OAAOL,EAAKK,EAAGC,KAAKC,MAAOD,KAAKE,MAUjC,SAASM,EAAcC,GACtB,OAAOb,EAAUa,EAAGT,KAAKC,MAAOD,KAAKE,MAyBtC,SAASQ,IACR,IAAIT,EACAC,EACJ,KAAOF,gBAAgBU,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAMC,UAAW,GAAKA,UAAW,IAE7C,GAAKA,UAAUC,OAAS,CAGvB,GADAV,EAAOS,UAAW,IACZ5C,EAFNkC,EAAQU,UAAW,IAGlB,MAAM,IAAIE,UAAW,sFAAwFZ,EAAQ,KAEtH,IAAMlC,EAAYmC,GACjB,MAAM,IAAIW,UAAW,sFAAwFX,EAAO,UAGrHD,EAAQ,EACRC,EAAO,EA4BR,OA1BAzC,EAAgBuC,KAAM,QAAS,CAC9Bc,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOf,GAERgB,IAAO,SAAcC,GACpB,IAAMnD,EAAYmD,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFjB,EAAQiB,KAGVzD,EAAgBuC,KAAM,OAAQ,CAC7Bc,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOd,GAERe,IAAO,SAAcC,GACpB,IAAMnD,EAAYmD,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFhB,EAAOgB,KAGFlB,KAiBRnC,EAAqB6C,EAAKS,UAAW,WAAW,WAC/C,OAAOjD,EAAS8B,KAAKC,MAAOD,KAAKE,SAiBlCrC,EAAqB6C,EAAKS,UAAW,YAAY,WAChD,OAAO/C,EAAU4B,KAAKC,MAAOD,KAAKE,SAiBnCrC,EAAqB6C,EAAKS,UAAW,QAAQ,WAC5C,OAAO7C,EAAM0B,KAAKC,MAAOD,KAAKE,SAiB/BrC,EAAqB6C,EAAKS,UAAW,UAAU,WAC9C,OAAO3C,EAAQwB,KAAKC,MAAOD,KAAKE,SAiBjCrC,EAAqB6C,EAAKS,UAAW,QAAQ,WAC5C,OAAOzC,EAAMsB,KAAKC,MAAOD,KAAKE,SAiB/BrC,EAAqB6C,EAAKS,UAAW,YAAY,WAChD,OAAOvC,EAAUoB,KAAKC,MAAOD,KAAKE,SAiBnCrC,EAAqB6C,EAAKS,UAAW,SAAS,WAC7C,OAAOrC,EAAOkB,KAAKC,MAAOD,KAAKE,SAiBhCrC,EAAqB6C,EAAKS,UAAW,YAAY,WAChD,OAAOnC,EAAUgB,KAAKC,MAAOD,KAAKE,SAmBnCvC,EAAa+C,EAAKS,UAAW,MAAOrB,GAkBpCnC,EAAa+C,EAAKS,UAAW,SAAUhB,GAkBvCxC,EAAa+C,EAAKS,UAAW,SAAUf,GAkBvCzC,EAAa+C,EAAKS,UAAW,MAAOd,GAkBpC1C,EAAa+C,EAAKS,UAAW,MAAOZ,GAkBpC5C,EAAa+C,EAAKS,UAAW,WAAYX,GC7ZtC,IAACY,EAAO1D","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/beta/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/beta/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/beta/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/beta/median';\nimport __var_8__ from '@stdlib/stats/base/dists/beta/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/beta/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/beta/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/beta/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/beta/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/beta/logcdf';\nimport __var_14__ from '@stdlib/stats/base/dists/beta/logpdf';\nimport __var_15__ from '@stdlib/stats/base/dists/beta/mgf';\nimport __var_16__ from '@stdlib/stats/base/dists/beta/pdf';\nimport __var_17__ from '@stdlib/stats/base/dists/beta/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logcdf = __var_13__;\nvar logpdf = __var_14__;\nvar mgf = __var_15__;\nvar pdf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction betaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction betaLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction betaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction betaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction betaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction betaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Beta distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - first shape parameter\n* @param {PositiveNumber} [beta=1.0] - second shape parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Beta} distribution instance\n*\n* @example\n* var beta = new Beta( 1.0, 1.0 );\n*\n* var y = beta.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = beta.mean;\n* // returns 0.5\n*/\nfunction Beta() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Beta) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Beta();\n\t\t}\n\t\treturn new Beta( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Beta distribution differential entropy.\n*\n* @name entropy\n* @memberof Beta.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.entropy;\n* // returns ~-0.869\n*/\nsetReadOnlyAccessor( Beta.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Beta.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.kurtosis;\n* // returns ~0.082\n*/\nsetReadOnlyAccessor( Beta.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution expected value.\n*\n* @name mean\n* @memberof Beta.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution median.\n*\n* @name median\n* @memberof Beta.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.median;\n* // returns ~0.239\n*/\nsetReadOnlyAccessor( Beta.prototype, 'median', function get() {\n\treturn median( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution mode.\n*\n* @name mode\n* @memberof Beta.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mode;\n* // returns ~0.214\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution skewness.\n*\n* @name skewness\n* @memberof Beta.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.skewness;\n* // returns ~0.529\n*/\nsetReadOnlyAccessor( Beta.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution standard deviation.\n*\n* @name stdev\n* @memberof Beta.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.stdev;\n* // returns ~0.105\n*/\nsetReadOnlyAccessor( Beta.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution variance.\n*\n* @name variance\n* @memberof Beta.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.variance;\n* // returns ~0.011\n*/\nsetReadOnlyAccessor( Beta.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.cdf( 0.5 );\n* // returns ~0.813\n*/\nsetReadOnly( Beta.prototype, 'cdf', betaCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logcdf( 0.5 );\n* // returns ~-0.208\n*/\nsetReadOnly( Beta.prototype, 'logcdf', betaLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logpdf( 0.8 );\n* // returns ~-2.0557\n*/\nsetReadOnly( Beta.prototype, 'logpdf', betaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.mgf( 0.5 );\n* // returns ~1.186\n*/\nsetReadOnly( Beta.prototype, 'mgf', betaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.pdf( 0.8 );\n* // returns ~0.13\n*/\nsetReadOnly( Beta.prototype, 'pdf', betaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Beta.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.quantile( 0.5 );\n* // returns ~0.314\n*/\nsetReadOnly( Beta.prototype, 'quantile', betaQuantile );\n\n\n// EXPORTS //\nexport default Beta;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distribution constructor.\n*\n* @module @stdlib/stats/base/dists/beta/ctor\n*\n* @example\n* var Beta = require( '@stdlib/stats/base/dists/beta/ctor' );\n*\n* var beta = new Beta( 1.0, 1.0 );\n*\n* var y = beta.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = beta.mean;\n* // returns 0.5\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}