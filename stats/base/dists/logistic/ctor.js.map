{"version":3,"sources":["@stdlib/stats/base/dists/logistic/ctor/lib/ctor.js","@stdlib/stats/base/dists/logistic/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","isNumber","__var_4__","isnan","__var_5__","entropy","__var_6__","kurtosis","__var_7__","mean","__var_8__","median","__var_9__","mode","__var_10__","skewness","__var_11__","stdev","__var_12__","variance","__var_13__","cdf","__var_14__","logcdf","__var_15__","logpdf","__var_16__","mgf","__var_17__","pdf","__var_18__","quantile","__var_19__","logisticCDF","x","this","mu","s","logisticLogCDF","logisticLogPDF","logisticMGF","t","logisticPDF","logisticQuantile","p","Logistic","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-number';\nimport __var_5__ from '@stdlib/assert/is-nan';\nimport __var_6__ from '@stdlib/stats/base/dists/logistic/entropy';\nimport __var_7__ from '@stdlib/stats/base/dists/logistic/kurtosis';\nimport __var_8__ from '@stdlib/stats/base/dists/logistic/mean';\nimport __var_9__ from '@stdlib/stats/base/dists/logistic/median';\nimport __var_10__ from '@stdlib/stats/base/dists/logistic/mode';\nimport __var_11__ from '@stdlib/stats/base/dists/logistic/skewness';\nimport __var_12__ from '@stdlib/stats/base/dists/logistic/stdev';\nimport __var_13__ from '@stdlib/stats/base/dists/logistic/variance';\nimport __var_14__ from '@stdlib/stats/base/dists/logistic/cdf';\nimport __var_15__ from '@stdlib/stats/base/dists/logistic/logcdf';\nimport __var_16__ from '@stdlib/stats/base/dists/logistic/logpdf';\nimport __var_17__ from '@stdlib/stats/base/dists/logistic/mgf';\nimport __var_18__ from '@stdlib/stats/base/dists/logistic/pdf';\nimport __var_19__ from '@stdlib/stats/base/dists/logistic/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isNumber = __var_4__.isPrimitive;\nvar isnan = __var_5__;\nvar entropy = __var_6__;\nvar kurtosis = __var_7__;\nvar mean = __var_8__;\nvar median = __var_9__;\nvar mode = __var_10__;\nvar skewness = __var_11__;\nvar stdev = __var_12__;\nvar variance = __var_13__;\nvar cdf = __var_14__;\nvar logcdf = __var_15__;\nvar logpdf = __var_16__;\nvar mgf = __var_17__;\nvar pdf = __var_18__;\nvar quantile = __var_19__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction logisticCDF( x ) {\n\treturn cdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction logisticLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction logisticLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction logisticMGF( t ) {\n\treturn mgf( t, this.mu, this.s );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction logisticPDF( x ) {\n\treturn pdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction logisticQuantile( p ) {\n\treturn quantile( p, this.mu, this.s );\n}\n\n\n// MAIN //\n\n/**\n* Logistic distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [s=1.0] - scale parameter\n* @throws {TypeError} `s` must be a positive number\n* @returns {Logistic} distribution instance\n*\n* @example\n* var logistic = new Logistic( 1.0, 1.0 );\n*\n* var y = logistic.cdf( 1.5 );\n* // returns ~0.622\n*\n* var mu = logistic.mean;\n* // returns 1.0\n*/\nfunction Logistic() {\n\tvar mu;\n\tvar s;\n\tif ( !(this instanceof Logistic) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Logistic();\n\t\t}\n\t\treturn new Logistic( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\ts = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Logistic distribution differential entropy.\n*\n* @name entropy\n* @memberof Logistic.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.entropy;\n* // returns ~4.485\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.s );\n});\n\n/**\n* Logistic distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Logistic.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.kurtosis;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.s );\n});\n\n/**\n* Logistic distribution expected value.\n*\n* @name mean\n* @memberof Logistic.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.s );\n});\n\n/**\n* Logistic distribution median.\n*\n* @name median\n* @memberof Logistic.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'median', function get() {\n\treturn median( this.mu, this.s );\n});\n\n/**\n* Logistic distribution mode.\n*\n* @name mode\n* @memberof Logistic.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.s );\n});\n\n/**\n* Logistic distribution skewness.\n*\n* @name skewness\n* @memberof Logistic.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.s );\n});\n\n/**\n* Logistic distribution standard deviation.\n*\n* @name stdev\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.stdev;\n* // returns ~21.766\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.s );\n});\n\n/**\n* Logistic distribution variance.\n*\n* @name variance\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.variance;\n* // returns ~473.741\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.s );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.cdf( 0.5 );\n* // returns ~0.407\n*/\nsetReadOnly( Logistic.prototype, 'cdf', logisticCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logcdf( 0.5 );\n* // returns ~-0.898\n*/\nsetReadOnly( Logistic.prototype, 'logcdf', logisticLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logpdf( 0.8 );\n* // returns ~-2.795\n*/\nsetReadOnly( Logistic.prototype, 'logpdf', logisticLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.mgf( 0.2 );\n* // returns ~6.379\n*/\nsetReadOnly( Logistic.prototype, 'mgf', logisticMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.pdf( 0.8 );\n* // returns ~0.061\n*/\nsetReadOnly( Logistic.prototype, 'pdf', logisticPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Logistic.prototype, 'quantile', logisticQuantile );\n\n\n// EXPORTS //\nexport default Logistic;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution constructor.\n*\n* @module @stdlib/stats/base/dists/logistic/ctor\n*\n* @example\n* var Logistic = require( '@stdlib/stats/base/dists/logistic/ctor' );\n*\n* var logistic = new Logistic( 1.0, 1.0 );\n*\n* var y = logistic.cdf( 1.5 );\n* // returns ~0.622\n*\n* var mu = logistic.mean;\n* // returns 1.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}