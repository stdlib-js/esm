{"version":3,"sources":["@stdlib/stats/base/dists/signrank/quantile/lib/weights.js","@stdlib/stats/base/dists/signrank/quantile/lib/quantile.js","@stdlib/stats/base/dists/signrank/quantile/lib/factory.js","@stdlib/stats/base/dists/signrank/quantile/lib/index.js"],"names":["memoized","memoize","__var_0__","weights","x","n","mlim","__var_6__","isPositiveInteger","isfinite","__var_1__","isnan","__var_2__","exp","__var_3__","LN2","__var_4__","quantile","p","pui","q","r","NaN","constantFunction","__var_5__","factory","setReadOnly"],"mappings":"geAsBA,IAKIA,EALAC,EAAUC,EAkBd,SAASC,EAASC,EAAGC,GACpB,IAAIC,EAEJ,OAAW,IAAND,EACW,IAAND,EAAY,EAAI,GAE1BE,EAAOD,GAAMA,EAAI,GAAM,EAClBD,EAAI,GAAKA,EAAIE,EACV,GAEHF,EAAIE,EAAO,IACfF,EAAIE,EAAOF,GAELJ,EAAUI,EAAIC,EAAGA,EAAI,GAAML,EAAUI,EAAGC,EAAI,KAUpD,IAAAE,EAJAP,EAAWC,EAASE,GChChBK,EAAoBN,EACpBO,EAAWC,EACXC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNb,ED+BWH,ECKf,SAASiB,EAAUC,EAAGb,GACrB,IAAIc,EACAC,EACAC,EACJ,GAAKV,EAAON,KAAQG,EAAmBH,KAAQI,EAAUJ,GACxD,OAAOiB,IAER,GAAKX,EAAOO,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOI,IAER,GAAW,IAANJ,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAASb,GAAMA,EAAI,GAAQ,EAK5B,IAHAc,EAAMN,GAAMR,EAAIU,GAChBM,EAAI,EACJD,GAAK,EACGC,EAAIH,GAEXG,GAAKF,EAAMhB,EADXiB,GAAK,EACkBf,GAExB,OAAOe,EC/DR,IAAIZ,EAAoBN,EACpBqB,EAAmBb,EACnBD,EAAWG,EACXD,EAAQG,EACRD,EAAMG,EACND,EAAMS,EACNrB,EF6BWH,EEVf,SAASyB,EAASpB,GACjB,IAAIc,EACJ,OAAKR,EAAON,IAAQG,EAAmBH,IAAQI,EAAUJ,IAGzDc,EAAMN,GAAMR,EAAIU,GAchB,SAAmBG,GAClB,IAAIG,EACAD,EACJ,GAAKT,EAAOO,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOI,IAER,GAAW,IAANJ,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAASb,GAAMA,EAAI,GAAQ,EAE5BgB,EAAI,EACJD,GAAK,EACL,KAAQC,EAAIH,GAEXG,GAAKF,EAAMhB,EADXiB,GAAK,EACkBf,GAExB,OAAOe,IAlCAG,EAAkBD,KCZ3B,IAAII,EAAcxB,EACde,EAAWP,EACXe,EAAUb,EAKdc,EAAaT,EAAU,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/utils/memoize';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar memoize = __var_0__;\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\nexport default memoized;\n","import __var_0__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-finite';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/constants/math/float64-ln-two';\nimport __var_5__ from './weights.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isfinite = __var_1__;\nvar isnan = __var_2__;\nvar exp = __var_3__;\nvar LN2 = __var_4__;\nvar weights = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {Probability} p - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 5 );\n* // returns 11\n*\n* @example\n* var y = quantile( 0.5, 4 );\n* // returns 5\n*\n* @example\n* var y = quantile( 1.1, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, n ) {\n\tvar pui;\n\tvar q;\n\tvar r;\n\tif ( isnan( n ) || !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn ( n * ( n + 1 ) ) / 2;\n\t}\n\tpui = exp( -n * LN2 );\n\tr = 0;\n\tq = -1;\n\twhile ( r < p ) {\n\t\tq += 1;\n\t\tr += pui * weights( q, n );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/assert/is-finite';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/constants/math/float64-ln-two';\nimport __var_6__ from './weights.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar isfinite = __var_2__;\nvar isnan = __var_3__;\nvar exp = __var_4__;\nvar LN2 = __var_5__;\nvar weights = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10 );\n* var y = quantile( 0.5 );\n* // returns 27\n*\n* y = quantile( 0.8 );\n* // returns 36\n*/\nfunction factory( n ) {\n\tvar pui;\n\tif ( isnan( n ) || !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tpui = exp( -n * LN2 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar r;\n\t\tvar q;\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( n * ( n + 1 ) ) / 2;\n\t\t}\n\t\tr = 0;\n\t\tq = -1;\n\t\twhile ( r < p ) {\n\t\t\tq += 1;\n\t\t\tr += pui * weights( q, n );\n\t\t}\n\t\treturn q;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic quantile function.\n*\n* @module @stdlib/stats/base/dists/signrank/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/signrank/quantile' );\n*\n* var y = quantile( 0.8, 5 );\n* // returns 11\n*\n* var myQuantile = quantile.factory( 4 );\n*\n* y = myQuantile( 0.5 );\n* // returns 5\n*\n* y = myQuantile( 0.0 );\n* // returns 0\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}