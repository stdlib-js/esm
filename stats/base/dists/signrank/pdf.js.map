{"version":3,"sources":["@stdlib/stats/base/dists/signrank/pdf/lib/weights.js","@stdlib/stats/base/dists/signrank/pdf/lib/pdf.js","@stdlib/stats/base/dists/signrank/pdf/lib/factory.js","@stdlib/stats/base/dists/signrank/pdf/lib/index.js"],"names":["memoized","memoize","__var_0__","weights","x","n","mlim","__var_7__","isPositiveInteger","isfinite","__var_1__","isnan","__var_2__","exp","__var_3__","ln","__var_4__","LN2","__var_5__","pdf","NaN","constantFunction","__var_6__","factory","setReadOnly"],"mappings":"qhBAsBA,IAKIA,EALAC,EAAUC,EAkBd,SAASC,EAASC,EAAGC,GACpB,IAAIC,EAEJ,OAAW,IAAND,EACW,IAAND,EAAY,EAAI,GAE1BE,EAAOD,GAAMA,EAAI,GAAM,EAClBD,EAAI,GAAKA,EAAIE,EACV,GAEHF,EAAIE,EAAO,IACfF,EAAIE,EAAOF,GAELJ,EAAUI,EAAIC,EAAGA,EAAI,GAAML,EAAUI,EAAGC,EAAI,KAUpD,IAAAE,EAJAP,EAAWC,EAASE,GC/BhBK,EAAoBN,EACpBO,EAAWC,EACXC,EAAQC,EACRC,EAAMC,EACNC,EAAKC,EACLC,EAAMC,EACNf,ED6BWH,ECWf,SAASmB,EAAKf,EAAGC,GAEhB,OACCM,EAAOP,IACNI,EAAmBH,IACnBI,EAAUJ,GAKPD,EAAI,GAAOA,EADPC,GAAMA,EAAI,GAAQ,EAEnB,EAEDQ,EAAKE,EAAIZ,EAASC,EAAGC,IAAUA,EAAIY,GANlCG,ICpDT,IAAIZ,EAAoBN,EACpBmB,EAAmBX,EACnBD,EAAWG,EACXD,EAAQG,EACRD,EAAMG,EACND,EAAKG,EACLD,EAAMK,EACNnB,EF2BWH,EERf,SAASuB,EAASlB,GACjB,IAAIC,EACJ,OAAME,EAAmBH,IAAQI,EAAUJ,IAG3CC,EAAOD,GAAMA,EAAI,GAAM,EAcvB,SAAcD,GACb,GAAKO,EAAOP,GACX,OAAOgB,IAER,GAAKhB,EAAI,GAAOA,EAAIE,EACnB,OAAO,EAER,OAAOO,EAAKE,EAAIZ,EAASC,EAAGC,IAAUA,EAAIY,KAvBnCI,EAAkBD,KClB3B,IAAII,EAActB,EACdiB,EAAMT,EACNa,EAAUX,EAKdY,EAAaL,EAAK,UAAWI","sourcesContent":["import __var_0__ from '@stdlib/utils/memoize';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar memoize = __var_0__;\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\nexport default memoized;\n","import __var_0__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-finite';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float64-ln-two';\nimport __var_6__ from './weights.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isfinite = __var_1__;\nvar isnan = __var_2__;\nvar exp = __var_3__;\nvar ln = __var_4__;\nvar LN2 = __var_5__;\nvar weights = __var_6__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated PDF\n*\n* @example\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* @example\n* var y = pdf( 7.0, 6 );\n* // returns ~0.063\n*\n* @example\n* var y = pdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction pdf( x, n ) {\n\tvar mlim;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tmlim = ( n * ( n + 1 ) ) / 2;\n\tif ( x < 0.0 || x > mlim ) {\n\t\treturn 0.0;\n\t}\n\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n}\n\n\n// EXPORTS //\nexport default pdf;\n","import __var_0__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/utils/constant-function';\nimport __var_2__ from '@stdlib/math/base/assert/is-finite';\nimport __var_3__ from '@stdlib/math/base/assert/is-nan';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-ln-two';\nimport __var_7__ from './weights.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar constantFunction = __var_1__;\nvar isfinite = __var_2__;\nvar isnan = __var_3__;\nvar exp = __var_4__;\nvar ln = __var_5__;\nvar LN2 = __var_6__;\nvar weights = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 8 );\n* var y = pdf( 4.0 );\n* // returns ~0.008\n*\n* y = pdf( 17.0 );\n* // returns ~0.051\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > mlim ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic probability density function (PDF).\n*\n* @module @stdlib/stats/base/dists/signrank/pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats/base/dists/signrank/pdf' );\n*\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* var mypdf = pdf.factory( 8 );\n* y = mypdf( 4.0 );\n* // returns ~0.008\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pdf;\n"]}