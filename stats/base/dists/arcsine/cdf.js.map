{"version":3,"sources":["@stdlib/stats/base/dists/arcsine/cdf/lib/main.js","@stdlib/stats/base/dists/arcsine/cdf/lib/factory.js","@stdlib/stats/base/dists/arcsine/cdf/lib/index.js"],"names":["isnan","__var_0__","asin","__var_1__","sqrt","__var_2__","PI","__var_3__","TWO_OVER_PI","cdf","x","a","b","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"sWAyBA,IAAIA,EAAQC,EACRC,EAAOC,EACPC,EAAOC,EACPC,EAAKC,EAKLC,EAAc,EAAMF,EA6CxB,SAASG,EAAKC,EAAGC,EAAGC,GACnB,OACCZ,EAAOU,IACPV,EAAOW,IACPX,EAAOY,IACPD,GAAKC,EAEEC,IAEHH,EAAIC,EACD,EAEHD,GAAKE,EACF,EAEDJ,EAAcN,EAAME,GAAQM,EAAEC,IAAQC,EAAED,KCnEhD,IAAIG,EAAmBb,EACnBD,EAAQG,EACRD,EAAOG,EACPD,EAAOG,EACPD,EAAKS,EAKLP,EAAc,EAAMF,EAoBxB,SAASU,EAASL,EAAGC,GACpB,OACCZ,EAAOW,IACPX,EAAOY,IACPD,GAAKC,EAEEE,EAAkBD,KAe1B,SAAcH,GACb,GAAKV,EAAOU,GACX,OAAOG,IAER,GAAKH,EAAIC,EACR,OAAO,EAER,GAAKD,GAAKE,EACT,OAAO,EAER,OAAOJ,EAAcN,EAAME,GAAQM,EAAEC,IAAQC,EAAED,MC3CjD,IAAIM,EAAchB,EACdQ,EAAMN,EACNa,EAAUX,EAKdY,EAAaR,EAAK,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/asin';\nimport __var_2__ from '@stdlib/math/base/special/sqrt';\nimport __var_3__ from '@stdlib/constants/math/float64-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar asin = __var_1__;\nvar sqrt = __var_2__;\nvar PI = __var_3__;\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns ~0.795\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n}\n\n\n// EXPORTS //\nexport default cdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/asin';\nimport __var_3__ from '@stdlib/math/base/special/sqrt';\nimport __var_4__ from '@stdlib/constants/math/float64-pi';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar asin = __var_2__;\nvar sqrt = __var_3__;\nvar PI = __var_4__;\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns ~0.144\n*\n* y = cdf( 8.0 );\n* // returns ~0.705\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './main.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/arcsine/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/arcsine/cdf' );\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns ~0.144\n*\n* y = mycdf( 8.0 );\n* // returns ~0.705\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default cdf;\n"]}