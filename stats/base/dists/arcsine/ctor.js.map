{"version":3,"sources":["@stdlib/stats/base/dists/arcsine/ctor/lib/main.js","@stdlib/stats/base/dists/arcsine/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isNumber","__var_3__","isPrimitive","isnan","__var_4__","entropy","__var_5__","kurtosis","__var_6__","mean","__var_7__","median","__var_8__","mode","__var_9__","skewness","__var_10__","stdev","__var_11__","variance","__var_12__","cdf","__var_13__","logcdf","__var_14__","logpdf","__var_15__","pdf","__var_16__","quantile","__var_17__","arcsineCDF","x","this","a","b","arcsineLogCDF","arcsineLogPDF","arcsinePDF","arcsineQuantile","p","Arcsine","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/stats/base/dists/arcsine/entropy';\nimport __var_6__ from '@stdlib/stats/base/dists/arcsine/kurtosis';\nimport __var_7__ from '@stdlib/stats/base/dists/arcsine/mean';\nimport __var_8__ from '@stdlib/stats/base/dists/arcsine/median';\nimport __var_9__ from '@stdlib/stats/base/dists/arcsine/mode';\nimport __var_10__ from '@stdlib/stats/base/dists/arcsine/skewness';\nimport __var_11__ from '@stdlib/stats/base/dists/arcsine/stdev';\nimport __var_12__ from '@stdlib/stats/base/dists/arcsine/variance';\nimport __var_13__ from '@stdlib/stats/base/dists/arcsine/cdf';\nimport __var_14__ from '@stdlib/stats/base/dists/arcsine/logcdf';\nimport __var_15__ from '@stdlib/stats/base/dists/arcsine/logpdf';\nimport __var_16__ from '@stdlib/stats/base/dists/arcsine/pdf';\nimport __var_17__ from '@stdlib/stats/base/dists/arcsine/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isNumber = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar entropy = __var_5__;\nvar kurtosis = __var_6__;\nvar mean = __var_7__;\nvar median = __var_8__;\nvar mode = __var_9__;\nvar skewness = __var_10__;\nvar stdev = __var_11__;\nvar variance = __var_12__;\nvar cdf = __var_13__;\nvar logcdf = __var_14__;\nvar logpdf = __var_15__;\nvar pdf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction arcsineCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction arcsineLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction arcsineLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction arcsinePDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction arcsineQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Arcsine distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @throws {TypeError} `a` must be a number primitive\n* @throws {TypeError} `b` must be a number primitive\n* @throws {RangeError} `a` must be less than `b`\n* @returns {Arcsine} distribution instance\n*\n* @example\n* var arcsine = new Arcsine( 0.0, 1.0 );\n*\n* var y = arcsine.cdf( 0.8 );\n* // returns ~0.705\n*\n* var mu = arcsine.mean;\n* // returns 0.5\n*/\nfunction Arcsine() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Arcsine) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Arcsine();\n\t\t}\n\t\treturn new Arcsine( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );\n\t\t}\n\t\tif ( a >= b ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value >= b ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be less than `b`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value <= a ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Arcsine distribution differential entropy.\n*\n* @name entropy\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.entropy;\n* // returns ~1.838\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Arcsine distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.kurtosis;\n* // returns -1.5\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Arcsine distribution expected value.\n*\n* @name mean\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Arcsine distribution median.\n*\n* @name median\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Arcsine distribution mode.\n*\n* @name mode\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Arcsine distribution skewness.\n*\n* @name skewness\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Arcsine distribution standard deviation.\n*\n* @name stdev\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Arcsine distribution variance.\n*\n* @name variance\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.cdf( 3.0 );\n* // returns ~0.5\n*/\nsetReadOnly( Arcsine.prototype, 'cdf', arcsineCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Arcsine.prototype, 'logcdf', arcsineLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logpdf( 2.5 );\n* // returns ~-1.0\n*/\nsetReadOnly( Arcsine.prototype, 'logpdf', arcsineLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.pdf( 2.4 );\n* // returns ~0.398\n*/\nsetReadOnly( Arcsine.prototype, 'pdf', arcsinePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Arcsine.prototype, 'quantile', arcsineQuantile );\n\n\n// EXPORTS //\nexport default Arcsine;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution constructor.\n*\n* @module @stdlib/stats/base/dists/arcsine/ctor\n*\n* @example\n* var Arcsine = require( '@stdlib/stats/base/dists/arcsine/ctor' );\n*\n* var arcsine = new Arcsine( 0.0, 1.0 );\n*\n* var y = arcsine.cdf( 0.8 );\n* // returns ~0.705\n*\n* var mu = arcsine.mean;\n* // returns 0.5\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}