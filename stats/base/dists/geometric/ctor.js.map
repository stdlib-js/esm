{"version":3,"sources":["@stdlib/stats/base/dists/geometric/ctor/lib/ctor.js","@stdlib/stats/base/dists/geometric/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isProbability","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","median","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logcdf","__var_13__","logpmf","__var_14__","mgf","__var_15__","pmf","__var_16__","quantile","__var_17__","geometricCDF","x","this","p","geometricLogCDF","geometricLogPMF","geometricMGF","t","geometricPMF","geometricQuantile","Geometric","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"6nBAyCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAgBC,EAAUC,YAC1BC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAcC,GACtB,OAAOb,EAAKa,EAAGC,KAAKC,GAUrB,SAASC,EAAiBH,GACzB,OAAOX,EAAQW,EAAGC,KAAKC,GAUxB,SAASE,EAAiBJ,GACzB,OAAOT,EAAQS,EAAGC,KAAKC,GAUxB,SAASG,EAAcC,GACtB,OAAOb,EAAKa,EAAGL,KAAKC,GAUrB,SAASK,EAAcP,GACtB,OAAOL,EAAKK,EAAGC,KAAKC,GAUrB,SAASM,EAAmBN,GAC3B,OAAOL,EAAUK,EAAGD,KAAKC,GAuB1B,SAASO,IACR,IAAIP,EACJ,KAAOD,gBAAgBQ,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAWC,UAAW,IAElC,GAAKA,UAAUC,QAEd,IAAM3C,EADNkC,EAAIQ,UAAW,IAEd,MAAM,IAAIE,UAAW,uEAAyEV,EAAI,UAGnGA,EAAI,GAeL,OAbAxC,EAAgBuC,KAAM,IAAK,CAC1BY,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAMjD,EAAeiD,GACpB,MAAM,IAAIL,UAAW,iDAAmDK,EAAQ,KAEjFf,EAAIe,KAGChB,KAiBRnC,EAAqB2C,EAAUS,UAAW,WAAW,WACpD,OAAO/C,EAAS8B,KAAKC,MAiBtBpC,EAAqB2C,EAAUS,UAAW,YAAY,WACrD,OAAO7C,EAAU4B,KAAKC,MAiBvBpC,EAAqB2C,EAAUS,UAAW,QAAQ,WACjD,OAAO3C,EAAM0B,KAAKC,MAiBnBpC,EAAqB2C,EAAUS,UAAW,UAAU,WACnD,OAAOzC,EAAQwB,KAAKC,MAiBrBpC,EAAqB2C,EAAUS,UAAW,QAAQ,WACjD,OAAOvC,EAAMsB,KAAKC,MAiBnBpC,EAAqB2C,EAAUS,UAAW,YAAY,WACrD,OAAOrC,EAAUoB,KAAKC,MAiBvBpC,EAAqB2C,EAAUS,UAAW,SAAS,WAClD,OAAOnC,EAAOkB,KAAKC,MAiBpBpC,EAAqB2C,EAAUS,UAAW,YAAY,WACrD,OAAOjC,EAAUgB,KAAKC,MAmBvBtC,EAAa6C,EAAUS,UAAW,MAAOnB,GAkBzCnC,EAAa6C,EAAUS,UAAW,SAAUf,GAkB5CvC,EAAa6C,EAAUS,UAAW,SAAUd,GAkB5CxC,EAAa6C,EAAUS,UAAW,MAAOb,GAqBzCzC,EAAa6C,EAAUS,UAAW,MAAOX,GAkBzC3C,EAAa6C,EAAUS,UAAW,WAAYV,GC3Y3C,IAACW,EAAOxD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-probability';\nimport __var_4__ from '@stdlib/stats/base/dists/geometric/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/geometric/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/geometric/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/geometric/median';\nimport __var_8__ from '@stdlib/stats/base/dists/geometric/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/geometric/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/geometric/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/geometric/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/geometric/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/geometric/logcdf';\nimport __var_14__ from '@stdlib/stats/base/dists/geometric/logpmf';\nimport __var_15__ from '@stdlib/stats/base/dists/geometric/mgf';\nimport __var_16__ from '@stdlib/stats/base/dists/geometric/pmf';\nimport __var_17__ from '@stdlib/stats/base/dists/geometric/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isProbability = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar median = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logcdf = __var_13__;\nvar logpmf = __var_14__;\nvar mgf = __var_15__;\nvar pmf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction geometricCDF( x ) {\n\treturn cdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction geometricLogCDF( x ) {\n\treturn logcdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction geometricLogPMF( x ) {\n\treturn logpmf( x, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction geometricMGF( t ) {\n\treturn mgf( t, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction geometricPMF( x ) {\n\treturn pmf( x, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction geometricQuantile( p ) {\n\treturn quantile( p, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Geometric distribution constructor.\n*\n* @constructor\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `p` must be a probability\n* @returns {Geometric} distribution instance\n*\n* @example\n* var geometric = new Geometric();\n*\n* var y = geometric.cdf( 1.8 );\n* // returns 0.75\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nfunction Geometric() {\n\tvar p;\n\tif ( !(this instanceof Geometric) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Geometric();\n\t\t}\n\t\treturn new Geometric( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Mean parameter `p` must be a probability. Value: `' + p + '`' );\n\t\t}\n\t} else {\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a probability. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Geometric distribution differential entropy.\n*\n* @name entropy\n* @memberof Geometric.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.entropy;\n* // returns ~1.683\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'entropy', function get() {\n\treturn entropy( this.p );\n});\n\n/**\n* Geometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Geometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.kurtosis;\n* // returns ~6.267\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.p );\n});\n\n/**\n* Geometric distribution expected value.\n*\n* @name mean\n* @memberof Geometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mean;\n* // returns ~1.5\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mean', function get() {\n\treturn mean( this.p );\n});\n\n/**\n* Geometric distribution median.\n*\n* @name median\n* @memberof Geometric.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.median;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'median', function get() {\n\treturn median( this.p );\n});\n\n/**\n* Geometric distribution mode.\n*\n* @name mode\n* @memberof Geometric.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mode', function get() {\n\treturn mode( this.p );\n});\n\n/**\n* Geometric distribution skewness.\n*\n* @name skewness\n* @memberof Geometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.skewness;\n* // returns ~2.066\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'skewness', function get() {\n\treturn skewness( this.p );\n});\n\n/**\n* Geometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.stdev;\n* // returns ~1.936\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'stdev', function get() {\n\treturn stdev( this.p );\n});\n\n/**\n* Geometric distribution variance.\n*\n* @name variance\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.variance;\n* // returns ~3.75\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'variance', function get() {\n\treturn variance( this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.cdf( 1.5 );\n* // returns ~0.36\n*/\nsetReadOnly( Geometric.prototype, 'cdf', geometricCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logcdf( 1.5 );\n* // returns ~-1.022\n*/\nsetReadOnly( Geometric.prototype, 'logcdf', geometricLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logpmf( 2.0 );\n* // returns ~-2.056\n*/\nsetReadOnly( Geometric.prototype, 'logpmf', geometricLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.mgf( 0.1 );\n* // returns ~1.908\n*/\nsetReadOnly( Geometric.prototype, 'mgf', geometricMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.pmf( 2.0 );\n* // returns ~0.128\n*\n* v = geometric.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Geometric.prototype, 'pmf', geometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Geometric.prototype, 'quantile', geometricQuantile );\n\n\n// EXPORTS //\nexport default Geometric;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution constructor.\n*\n* @module @stdlib/stats/base/dists/geometric/ctor\n*\n* @example\n* var Geometric = require( '@stdlib/stats/base/dists/geometric/ctor' );\n*\n* var geometric = new Geometric( 0.3 );\n*\n* var y = geometric.cdf( 3.0 );\n* // returns ~0.76\n*\n* var mode = geometric.mode;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}