{"version":3,"sources":["@stdlib/stats/base/dists/geometric/logpmf/lib/logpmf.js","@stdlib/stats/base/dists/geometric/logpmf/lib/factory.js","@stdlib/stats/base/dists/geometric/logpmf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isnan","__var_1__","ln","__var_2__","NINF","__var_3__","logpmf","x","p","q","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"uXAyBA,IAAIA,EAAuBC,EACvBC,EAAQC,EACRC,EAAKC,EACLC,EAAOC,EAqCX,SAASC,EAAQC,EAAGC,GACnB,IAAIC,EACJ,OAAKT,EAAOO,IAAOP,EAAOQ,IAGrBA,EAAI,GAAOA,EAAI,EAFZE,IAKHZ,EAAsBS,IAC1BE,EAAI,EAAMD,EACHN,EAAIM,GAAOD,EAAIL,EAAIO,IAEpBL,ECnDR,IAAIO,EAAmBZ,EACnBD,EAAuBG,EACvBD,EAAQG,EACRD,EAAKG,EACLD,EAAOQ,EAmBX,SAASC,EAASL,GACjB,OACCR,EAAOQ,IACPA,EAAI,GACJA,EAAI,EAEGG,EAAkBD,KAe1B,SAAiBH,GAChB,IAAIE,EACJ,GAAKT,EAAOO,GACX,OAAOG,IAER,GAAKZ,EAAsBS,GAE1B,OADAE,EAAI,EAAMD,EACHN,EAAIM,GAAOD,EAAIL,EAAIO,GAE3B,OAAOL,GCjCT,IAAIU,EAAcf,EACdO,EAASL,EACTY,EAAUV,EAKdW,EAAaR,EAAQ,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar ln = __var_2__;\nvar NINF = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {NonPositiveNumber} logarithm of PMF\n*\n* @example\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* @example\n* var y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* @example\n* var y = logpmf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = logpmf( 2.0, 1.5 );\n* // returns NaN\n*/\nfunction logpmf( x, p ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( p ) ) {\n\t\treturn NaN;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tq = 1.0 - p;\n\t\treturn ln( p ) + (x * ln( q ));\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\nexport default logpmf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/ln';\nimport __var_4__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isNonNegativeInteger = __var_1__;\nvar isnan = __var_2__;\nvar ln = __var_3__;\nvar NINF = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 0.5 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = logpmf( 1.0 );\n* // returns ~-1.386\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {NonPositiveNumber} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar q;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tq = 1.0 - p;\n\t\t\treturn ln( p ) + (x * ln( q ));\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpmf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution logarithm of probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/geometric/logpmf\n*\n* @example\n* var logpmf = require( '@stdlib/stats/base/dists/geometric/logpmf' );\n*\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* var mylogpmf = logpmf.factory( 0.5 );\n* y = mylogpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-1.386\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpmf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpmf;\n"]}