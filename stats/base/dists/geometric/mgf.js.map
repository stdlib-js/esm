{"version":3,"sources":["@stdlib/stats/base/dists/geometric/mgf/lib/mgf.js","@stdlib/stats/base/dists/geometric/mgf/lib/factory.js","@stdlib/stats/base/dists/geometric/mgf/lib/index.js"],"names":["isProbability","__var_0__","isnan","__var_1__","exp","__var_2__","ln","__var_3__","mgf","t","p","et","q","NaN","constantFunction","__var_4__","factory","setReadOnly"],"mappings":"yWAyBA,IAAIA,EAAgBC,EAChBC,EAAQC,EACRC,EAAMC,EACNC,EAAKC,EAyCT,SAASC,EAAKC,EAAGC,GAChB,IAAIC,EACAC,EACJ,OAAKV,EAAOO,KAAQT,EAAeU,IAI9BD,IAAMH,EADXM,EAAI,EAAMF,GAFFG,IAOCH,GADTC,EAAKP,EAAKK,KACY,EAAOG,EAAID,GCtDlC,IAAIG,EAAmBb,EACnBD,EAAgBG,EAChBD,EAAQG,EACRD,EAAMG,EACND,EAAKS,EAgBT,SAASC,EAASN,GACjB,OAAMV,EAAeU,GAgBrB,SAAcD,GACb,IAAIE,EACAC,EACJ,GAAKV,EAAOO,GACX,OAAOI,IAGR,GAAKJ,IAAMH,EADXM,EAAI,EAAMF,GAET,OAAOG,IAGR,OADAF,EAAKP,EAAKK,GACDC,EAAIC,GAAS,EAAOC,EAAID,IA1B1BG,EAAkBD,KCL3B,IAAII,EAAchB,EACdO,EAAML,EACNa,EAAUX,EAKdY,EAAaT,EAAK,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-probability';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/exp';\nimport __var_3__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isProbability = __var_0__;\nvar isnan = __var_1__;\nvar exp = __var_2__;\nvar ln = __var_3__;\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a geometric distribution with success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.569\n*\n* @example\n* var y = mgf( 0.4, 0.5 );\n* // returns ~2.936\n*\n* @example\n* // Case: t >= -ln(1-p)\n* var y = mgf( 0.8, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( -2.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 2.0 );\n* // returns NaN\n*/\nfunction mgf( t, p ) {\n\tvar et;\n\tvar q;\n\tif ( isnan( t ) || !isProbability( p ) ) {\n\t\treturn NaN;\n\t}\n\tq = 1.0 - p;\n\tif ( t >= -ln( q ) ) {\n\t\treturn NaN;\n\t}\n\tet = exp( t );\n\treturn ( p * et ) / ( 1.0 - (q * et) );\n}\n\n\n// EXPORTS //\nexport default mgf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-probability';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/ln';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isProbability = __var_1__;\nvar isnan = __var_2__;\nvar exp = __var_3__;\nvar ln = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.8 );\n* var y = mgf( -0.2 );\n* // returns ~0.783\n*/\nfunction factory( p ) {\n\tif ( !isProbability( p ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar et;\n\t\tvar q;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tq = 1.0 - p;\n\t\tif ( t >= -ln( q ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tet = exp( t );\n\t\treturn ( p * et ) / ( 1.0 - (q * et ));\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './mgf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a geometric distribution.\n*\n* @module @stdlib/stats/base/dists/geometric/mgf\n*\n* @example\n* var mgf = require( '@stdlib/stats/base/dists/geometric/mgf' );\n*\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.569\n*\n* y = mgf( 0.4, 0.5 );\n* // returns ~2.936\n*\n* var mymgf = mgf.factory( 0.8 );\n* y = mymgf( -0.2 );\n* // returns ~0.783\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar mgf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\nexport default mgf;\n"]}