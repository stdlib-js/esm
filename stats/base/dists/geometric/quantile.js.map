{"version":3,"sources":["@stdlib/stats/base/dists/geometric/quantile/lib/quantile.js","@stdlib/stats/base/dists/geometric/quantile/lib/factory.js","@stdlib/stats/base/dists/geometric/quantile/lib/index.js"],"names":["isnan","__var_0__","log1p","__var_1__","ceil","__var_2__","max","__var_3__","ln","__var_4__","PINF","__var_5__","quantile","r","p","NaN","constantFunction","__var_6__","factory","setReadOnly"],"mappings":"odA2BA,IAAIA,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EACPC,EAAMC,EACNC,EAAKC,EACLC,EAAOC,EA4CX,SAASC,EAAUC,EAAGC,GACrB,OACCd,EAAOc,IACPd,EAAOa,IACPC,EAAI,GACJA,EAAI,GACJD,EAAI,GACJA,EAAI,EAEGE,IAEG,IAANF,EACGH,EAEDJ,EAAK,EAAKF,EAAOI,EAAG,EAAIK,GAAKX,GAAOY,IAAO,EAAI,SC9DvD,IAAIE,EAAmBf,EACnBD,EAAQG,EACRD,EAAQG,EACRD,EAAOG,EACPD,EAAMG,EACND,EAAKG,EACLD,EAAOO,EAsBX,SAASC,EAASJ,GACjB,OAAKd,EAAOc,IAAOA,EAAI,GAAOA,EAAI,EAC1BE,EAAkBD,KAe1B,SAAmBF,GAClB,GAAKb,EAAOa,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOE,IAER,GAAW,IAANF,EACJ,OAAOH,EAER,OAAOJ,EAAK,EAAKF,EAAOI,EAAG,EAAIK,GAAKX,GAAOY,IAAO,EAAM,UC/B1D,IAAIK,EAAclB,EACdW,EAAWT,EACXe,EAAUb,EAKdc,EAAaP,EAAU,UAAWM","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/log1p';\nimport __var_2__ from '@stdlib/math/base/special/ceil';\nimport __var_3__ from '@stdlib/math/base/special/max';\nimport __var_4__ from '@stdlib/math/base/special/ln';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar log1p = __var_1__;\nvar ceil = __var_2__;\nvar max = __var_3__;\nvar ln = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a geometric distribution with success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.4 );\n* // returns 3\n*\n* @example\n* var y = quantile( 0.5, 0.4 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.9, 0.1 );\n* // returns 21\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.8 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.4, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( r ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tr < 0.0 ||\n\t\tr > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn max( 0.0, ceil( (ln(1.0-r) / log1p(-p))- ( 1 + 1e-12 ) ) );\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/log1p';\nimport __var_3__ from '@stdlib/math/base/special/ceil';\nimport __var_4__ from '@stdlib/math/base/special/max';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar log1p = __var_2__;\nvar ceil = __var_3__;\nvar max = __var_4__;\nvar ln = __var_5__;\nvar PINF = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n* var y = quantile( 0.4 );\n* // returns 0\n*\n* y = quantile( 0.8 );\n* // returns 3\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a geometric distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn max( 0.0, ceil( (ln(1.0-r) / log1p(-p)) - (1.0 + 1e-12) ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/geometric/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/geometric/quantile' );\n*\n* var y = quantile( 0.8, 0.4 );\n* // returns 3\n*\n* y = quantile( 0.5, 0.4 );\n* // returns 1\n*\n* var myquantile = quantile.factory( 0.4 );\n* y = myquantile( 0.4 );\n* // returns 0\n*\n* y = myquantile( 0.8 );\n* // returns 3\n*\n* y = myquantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}