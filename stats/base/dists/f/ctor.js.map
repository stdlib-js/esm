{"version":3,"sources":["@stdlib/stats/base/dists/f/ctor/lib/ctor.js","@stdlib/stats/base/dists/f/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","mode","__var_7__","skewness","__var_8__","stdev","__var_9__","variance","__var_10__","cdf","__var_11__","pdf","__var_12__","quantile","__var_13__","fCDF","x","this","d1","d2","fPDF","fQuantile","p","F","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"whBAqCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAMC,GACd,OAAOP,EAAKO,EAAGC,KAAKC,GAAID,KAAKE,IAU9B,SAASC,EAAMJ,GACd,OAAOL,EAAKK,EAAGC,KAAKC,GAAID,KAAKE,IAU9B,SAASE,EAAWC,GACnB,OAAOT,EAAUS,EAAGL,KAAKC,GAAID,KAAKE,IAyBnC,SAASI,IACR,IAAIL,EACAC,EACJ,KAAOF,gBAAgBM,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAGC,UAAW,GAAKA,UAAW,IAE1C,GAAKA,UAAUC,OAAS,CAGvB,GADAN,EAAKK,UAAW,IACVhC,EAFN0B,EAAKM,UAAW,IAGf,MAAM,IAAIE,UAAW,0FAA4FR,EAAK,KAEvH,IAAM1B,EAAY2B,GACjB,MAAM,IAAIO,UAAW,4FAA8FP,EAAK,UAGzHD,EAAK,EACLC,EAAK,EA4BN,OA1BAjC,EAAgB+B,KAAM,KAAM,CAC3BU,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,GAERY,IAAO,SAAcC,GACpB,IAAMvC,EAAYuC,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFb,EAAKa,KAGP7C,EAAgB+B,KAAM,KAAM,CAC3BU,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOV,GAERW,IAAO,SAAcC,GACpB,IAAMvC,EAAYuC,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFZ,EAAKY,KAGAd,KAiBR3B,EAAqBiC,EAAES,UAAW,WAAW,WAC5C,OAAOrC,EAASsB,KAAKC,GAAID,KAAKE,OAiB/B7B,EAAqBiC,EAAES,UAAW,YAAY,WAC7C,OAAOnC,EAAUoB,KAAKC,GAAID,KAAKE,OAiBhC7B,EAAqBiC,EAAES,UAAW,QAAQ,WACzC,OAAOjC,EAAMkB,KAAKC,GAAID,KAAKE,OAiB5B7B,EAAqBiC,EAAES,UAAW,QAAQ,WACzC,OAAO/B,EAAMgB,KAAKC,GAAID,KAAKE,OAiB5B7B,EAAqBiC,EAAES,UAAW,YAAY,WAC7C,OAAO7B,EAAUc,KAAKC,GAAID,KAAKE,OAiBhC7B,EAAqBiC,EAAES,UAAW,SAAS,WAC1C,OAAO3B,EAAOY,KAAKC,GAAID,KAAKE,OAiB7B7B,EAAqBiC,EAAES,UAAW,YAAY,WAC7C,OAAOzB,EAAUU,KAAKC,GAAID,KAAKE,OAmBhC/B,EAAamC,EAAES,UAAW,MAAOjB,GAkBjC3B,EAAamC,EAAES,UAAW,MAAOZ,GAkBjChC,EAAamC,EAAES,UAAW,WAAYX,GC5SnC,IAACY,EAAO9C","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/f/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/f/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/f/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/f/mode';\nimport __var_8__ from '@stdlib/stats/base/dists/f/skewness';\nimport __var_9__ from '@stdlib/stats/base/dists/f/stdev';\nimport __var_10__ from '@stdlib/stats/base/dists/f/variance';\nimport __var_11__ from '@stdlib/stats/base/dists/f/cdf';\nimport __var_12__ from '@stdlib/stats/base/dists/f/pdf';\nimport __var_13__ from '@stdlib/stats/base/dists/f/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar mode = __var_7__;\nvar skewness = __var_8__;\nvar stdev = __var_9__;\nvar variance = __var_10__;\nvar cdf = __var_11__;\nvar pdf = __var_12__;\nvar quantile = __var_13__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction fCDF( x ) {\n\treturn cdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction fPDF( x ) {\n\treturn pdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction fQuantile( p ) {\n\treturn quantile( p, this.d1, this.d2 );\n}\n\n\n// MAIN //\n\n/**\n* F distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom\n* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @returns {F} distribution instance\n*\n* @example\n* var f = new F( 1.0, 1.0 );\n*\n* var y = f.cdf( 0.8 );\n* // returns ~0.465\n*\n* var v = f.mode;\n* // returns NaN\n*/\nfunction F() {\n\tvar d1;\n\tvar d2;\n\tif ( !(this instanceof F) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new F();\n\t\t}\n\t\treturn new F( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\td1 = arguments[ 0 ];\n\t\td2 = arguments[ 1 ];\n\t\tif ( !isPositive( d1 ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Numerator degrees of freedom `d1` must be a positive number. Value: `' + d1 + '`' );\n\t\t}\n\t\tif ( !isPositive( d2 ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Denominator degrees of freedom `d2` must be a positive number. Value: `' + d2 + '`' );\n\t\t}\n\t} else {\n\t\td1 = 1.0;\n\t\td2 = 1.0;\n\t}\n\tdefineProperty( this, 'd1', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d1;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\td1 = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'd2', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d2;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\td2 = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* F distribution differential entropy.\n*\n* @name entropy\n* @memberof F.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.entropy;\n* // returns ~1.12\n*/\nsetReadOnlyAccessor( F.prototype, 'entropy', function get() {\n\treturn entropy( this.d1, this.d2 );\n});\n\n/**\n* F distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof F.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.kurtosis;\n* // returns ~26.143\n*/\nsetReadOnlyAccessor( F.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.d1, this.d2 );\n});\n\n/**\n* F distribution expected value.\n*\n* @name mean\n* @memberof F.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mean;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( F.prototype, 'mean', function get() {\n\treturn mean( this.d1, this.d2 );\n});\n\n/**\n* F distribution mode.\n*\n* @name mode\n* @memberof F.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mode;\n* // returns ~0.429\n*/\nsetReadOnlyAccessor( F.prototype, 'mode', function get() {\n\treturn mode( this.d1, this.d2 );\n});\n\n/**\n* F distribution skewness.\n*\n* @name skewness\n* @memberof F.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.skewness;\n* // returns ~3.207\n*/\nsetReadOnlyAccessor( F.prototype, 'skewness', function get() {\n\treturn skewness( this.d1, this.d2 );\n});\n\n/**\n* F distribution standard deviation.\n*\n* @name stdev\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.stdev;\n* // returns ~1.122\n*/\nsetReadOnlyAccessor( F.prototype, 'stdev', function get() {\n\treturn stdev( this.d1, this.d2 );\n});\n\n/**\n* F distribution variance.\n*\n* @name variance\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.variance;\n* // returns 1.26\n*/\nsetReadOnlyAccessor( F.prototype, 'variance', function get() {\n\treturn variance( this.d1, this.d2 );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.cdf( 0.5 );\n* // returns ~0.36\n*/\nsetReadOnly( F.prototype, 'cdf', fCDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.pdf( 2.0 );\n* // returns ~0.125\n*/\nsetReadOnly( F.prototype, 'pdf', fPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof F.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.quantile( 0.5 );\n* // returns ~0.828\n*/\nsetReadOnly( F.prototype, 'quantile', fQuantile );\n\n\n// EXPORTS //\nexport default F;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* F distribution constructor.\n*\n* @module @stdlib/stats/base/dists/f/ctor\n*\n* @example\n* var F = require( '@stdlib/stats/base/dists/f/ctor' );\n*\n* var f = new F( 1.0, 1.0 );\n*\n* var y = f.cdf( 0.8 );\n* // returns ~0.465\n*\n* var mode = f.mode;\n* // returns NaN\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}