{"version":3,"sources":["@stdlib/stats/base/dists/gamma/logpdf/lib/regularised_gamma_prefix.js","@stdlib/stats/base/dists/gamma/logpdf/lib/gamma_p_derivative.js","@stdlib/stats/base/dists/gamma/logpdf/lib/logpdf.js","@stdlib/stats/base/dists/gamma/logpdf/lib/factory.js","@stdlib/stats/base/dists/gamma/logpdf/lib/index.js"],"names":["lanczosSumExpGScaled","__var_0__","gammaln","__var_1__","gamma","__var_2__","log1p","__var_3__","sqrt","__var_4__","abs","__var_5__","exp","__var_6__","pow","__var_7__","max","__var_8__","min","__var_9__","ln","__var_10__","MAX_LN","__var_11__","MIN_LN","__var_12__","G","__var_13__","E","__var_14__","regularisedGammaPrefix","a","z","prefix","amza","agh","alz","amz","sq","d","PINF","FLOAT64_MAX","gammaPDerivative","x","f1","NaN","isnan","NINF","gammaDeriv","logpdf","alpha","beta","constantFunction","degenerate","factory","setReadOnly"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled';\nimport __var_1__ from '@stdlib/math/base/special/gammaln';\nimport __var_2__ from '@stdlib/math/base/special/gamma';\nimport __var_3__ from '@stdlib/math/base/special/log1p';\nimport __var_4__ from '@stdlib/math/base/special/sqrt';\nimport __var_5__ from '@stdlib/math/base/special/abs';\nimport __var_6__ from '@stdlib/math/base/special/exp';\nimport __var_7__ from '@stdlib/math/base/special/pow';\nimport __var_8__ from '@stdlib/math/base/special/max';\nimport __var_9__ from '@stdlib/math/base/special/min';\nimport __var_10__ from '@stdlib/math/base/special/ln';\nimport __var_11__ from '@stdlib/constants/math/float64-max-ln';\nimport __var_12__ from '@stdlib/constants/math/float64-min-ln';\nimport __var_13__ from '@stdlib/constants/math/float64-gamma-lanczos-g';\nimport __var_14__ from '@stdlib/constants/math/float64-e';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar lanczosSumExpGScaled = __var_0__;\nvar gammaln = __var_1__;\nvar gamma = __var_2__;\nvar log1p = __var_3__;\nvar sqrt = __var_4__;\nvar abs = __var_5__;\nvar exp = __var_6__;\nvar pow = __var_7__;\nvar max = __var_8__;\nvar min = __var_9__;\nvar ln = __var_10__;\nvar MAX_LN = __var_11__;\nvar MIN_LN = __var_12__;\nvar G = __var_13__;\nvar E = __var_14__;\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\nexport default regularisedGammaPrefix;\n","import __var_0__ from '@stdlib/math/base/special/gammaln';\nimport __var_1__ from '@stdlib/math/base/special/exp';\nimport __var_2__ from '@stdlib/math/base/special/ln';\nimport __var_3__ from '@stdlib/constants/math/float64-pinf';\nimport __var_4__ from '@stdlib/constants/math/float64-max';\nimport __var_5__ from './regularised_gamma_prefix.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\nvar gammaln = __var_0__;\nvar exp = __var_1__;\nvar ln = __var_2__;\nvar PINF = __var_3__;\nvar FLOAT64_MAX = __var_4__;\nvar regularisedGammaPrefix = __var_5__;\n\n\n// MAIN //\n\n/**\n* Calculates the partial derivative with respect to x of the incomplete gamma function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {NonNegativeNumber} x - function parameter\n* @returns {number} function value\n*/\nfunction gammaPDerivative( a, x ) {\n\tvar f1;\n\tif ( a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( a === 1.0 ) ? 1.0 : PINF;\n\t}\n\tf1 = regularisedGammaPrefix( a, x );\n\tif ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {\n\t\treturn PINF;\n\t}\n\tif ( f1 === 0.0 ) {\n\t\t// Underflow in calculation, use logs instead:\n\t\tf1 = (a * ln( x )) - x - gammaln( a ) - ln( x );\n\t\tf1 = exp( f1 );\n\t} else {\n\t\tf1 /= x;\n\t}\n\treturn f1;\n}\n\n\n// EXPORTS //\nexport default gammaPDerivative;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/ln';\nimport __var_2__ from '@stdlib/constants/math/float64-pinf';\nimport __var_3__ from '@stdlib/constants/math/float64-ninf';\nimport __var_4__ from './gamma_p_derivative.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar ln = __var_1__;\nvar PINF = __var_2__;\nvar NINF = __var_3__;\nvar gammaDeriv = __var_4__;\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* var y = logpdf( 0.1, 1.0, 1.0 );\n* // returns ~-0.1\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = logpdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = logpdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn NINF;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : NINF;\n\t}\n\treturn ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );\n}\n\n\n// EXPORTS //\nexport default logpdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/logpdf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/ln';\nimport __var_4__ from '@stdlib/constants/math/float64-ninf';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\nimport __var_6__ from './gamma_p_derivative.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar isnan = __var_2__;\nvar ln = __var_3__;\nvar NINF = __var_4__;\nvar PINF = __var_5__;\nvar gammaDeriv = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 3.0, 1.5 );\n*\n* var y = logpdf( 1.0 );\n* // returns ~-0.977\n*\n* y = logpdf( 4.0 );\n* // returns ~-2.704\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logpdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats/base/dists/gamma/logpdf\n*\n* @example\n* var logpdf = require( '@stdlib/stats/base/dists/gamma/logpdf' );\n*\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/gamma/logpdf' ).factory;\n*\n* var logpdf = factory( 6.0, 7.0 );\n* var y = logpdf( 2.0 );\n* // returns ~-3.646\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logpdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logpdf;\n"]}