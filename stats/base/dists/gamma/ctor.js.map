{"version":3,"sources":["@stdlib/stats/base/dists/gamma/ctor/lib/ctor.js","@stdlib/stats/base/dists/gamma/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","entropy","__var_4__","kurtosis","__var_5__","mean","__var_6__","mode","__var_7__","quantile","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logpdf","__var_13__","mgf","__var_14__","pdf","__var_15__","gammaCDF","x","this","alpha","beta","gammaLogPDF","gammaMGF","t","gammaPDF","gammaQuantile","p","Gamma","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"2kBAuCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EAYV,SAASC,EAAUC,GAClB,OAAOT,EAAKS,EAAGC,KAAKC,MAAOD,KAAKE,MAUjC,SAASC,EAAaJ,GACrB,OAAOP,EAAQO,EAAGC,KAAKC,MAAOD,KAAKE,MAUpC,SAASE,EAAUC,GAClB,OAAOX,EAAKW,EAAGL,KAAKC,MAAOD,KAAKE,MAUjC,SAASI,EAAUP,GAClB,OAAOH,EAAKG,EAAGC,KAAKC,MAAOD,KAAKE,MAUjC,SAASK,EAAeC,GACvB,OAAO1B,EAAU0B,EAAGR,KAAKC,MAAOD,KAAKE,MAyBtC,SAASO,IACR,IAAIR,EACAC,EACJ,KAAOF,gBAAgBS,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAOC,UAAW,GAAKA,UAAW,IAE9C,GAAKA,UAAUC,OAAS,CAGvB,GADAT,EAAOQ,UAAW,IACZvC,EAFN8B,EAAQS,UAAW,IAGlB,MAAM,IAAIE,UAAW,gFAAkFX,EAAQ,KAEhH,IAAM9B,EAAY+B,GACjB,MAAM,IAAIU,UAAW,8EAAgFV,EAAO,UAG7GD,EAAQ,EACRC,EAAO,EA4BR,OA1BArC,EAAgBmC,KAAM,QAAS,CAC9Ba,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOd,GAERe,IAAO,SAAcC,GACpB,IAAM9C,EAAY8C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFhB,EAAQgB,KAGVpD,EAAgBmC,KAAM,OAAQ,CAC7Ba,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM9C,EAAY8C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFf,EAAOe,KAGFjB,KAiBR/B,EAAqBwC,EAAMS,UAAW,WAAW,WAChD,OAAO5C,EAAS0B,KAAKC,MAAOD,KAAKE,SAiBlCjC,EAAqBwC,EAAMS,UAAW,YAAY,WACjD,OAAO1C,EAAUwB,KAAKC,MAAOD,KAAKE,SAiBnCjC,EAAqBwC,EAAMS,UAAW,QAAQ,WAC7C,OAAOxC,EAAMsB,KAAKC,MAAOD,KAAKE,SAiB/BjC,EAAqBwC,EAAMS,UAAW,QAAQ,WAC7C,OAAOtC,EAAMoB,KAAKC,MAAOD,KAAKE,SAiB/BjC,EAAqBwC,EAAMS,UAAW,YAAY,WACjD,OAAOlC,EAAUgB,KAAKC,MAAOD,KAAKE,SAiBnCjC,EAAqBwC,EAAMS,UAAW,SAAS,WAC9C,OAAOhC,EAAOc,KAAKC,MAAOD,KAAKE,SAiBhCjC,EAAqBwC,EAAMS,UAAW,YAAY,WACjD,OAAO9B,EAAUY,KAAKC,MAAOD,KAAKE,SAmBnCnC,EAAa0C,EAAMS,UAAW,MAAOpB,GAkBrC/B,EAAa0C,EAAMS,UAAW,SAAUf,GAkBxCpC,EAAa0C,EAAMS,UAAW,MAAOd,GAkBrCrC,EAAa0C,EAAMS,UAAW,MAAOZ,GAkBrCvC,EAAa0C,EAAMS,UAAW,WAAYX,GC1WvC,IAACY,EAAOrD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/stats/base/dists/gamma/entropy';\nimport __var_5__ from '@stdlib/stats/base/dists/gamma/kurtosis';\nimport __var_6__ from '@stdlib/stats/base/dists/gamma/mean';\nimport __var_7__ from '@stdlib/stats/base/dists/gamma/mode';\nimport __var_8__ from '@stdlib/stats/base/dists/gamma/quantile';\nimport __var_9__ from '@stdlib/stats/base/dists/gamma/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/gamma/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/gamma/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/gamma/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/gamma/logpdf';\nimport __var_14__ from '@stdlib/stats/base/dists/gamma/mgf';\nimport __var_15__ from '@stdlib/stats/base/dists/gamma/pdf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar entropy = __var_4__;\nvar kurtosis = __var_5__;\nvar mean = __var_6__;\nvar mode = __var_7__;\nvar quantile = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logpdf = __var_13__;\nvar mgf = __var_14__;\nvar pdf = __var_15__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction gammaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction gammaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction gammaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction gammaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction gammaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Gamma distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - rate parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Gamma} distribution instance\n*\n* @example\n* var gamma = new Gamma( 1.0, 1.0 );\n*\n* var y = gamma.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = gamma.mode;\n* // returns 0.0\n*/\nfunction Gamma() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Gamma) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Gamma();\n\t\t}\n\t\treturn new Gamma( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Rate parameter `beta` must be a positive number. Value: `' + beta + '`' );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Gamma distribution differential entropy.\n*\n* @name entropy\n* @memberof Gamma.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Gamma.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution expected value.\n*\n* @name mean\n* @memberof Gamma.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution mode.\n*\n* @name mode\n* @memberof Gamma.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution skewness.\n*\n* @name skewness\n* @memberof Gamma.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution standard deviation.\n*\n* @name stdev\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution variance.\n*\n* @name variance\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Gamma.prototype, 'cdf', gammaCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.logpdf( 0.8 );\n* // returns ~-0.651\n*/\nsetReadOnly( Gamma.prototype, 'logpdf', gammaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Gamma.prototype, 'mgf', gammaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.pdf( 0.8 );\n* // returns ~0.522\n*/\nsetReadOnly( Gamma.prototype, 'pdf', gammaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Gamma.prototype, 'quantile', gammaQuantile );\n\n\n// EXPORTS //\nexport default Gamma;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution constructor.\n*\n* @module @stdlib/stats/base/dists/gamma/ctor\n*\n* @example\n* var Gamma = require( '@stdlib/stats/base/dists/gamma/ctor' );\n*\n* var gamma = new Gamma( 1.0, 1.0 );\n*\n* var y = gamma.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = gamma.mode;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}