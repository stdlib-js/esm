{"version":3,"sources":["@stdlib/stats/base/dists/weibull/logcdf/lib/logcdf.js","@stdlib/stats/base/dists/weibull/logcdf/lib/factory.js","@stdlib/stats/base/dists/weibull/logcdf/lib/index.js"],"names":["isnan","__var_0__","expm1","__var_1__","log1p","__var_2__","exp","__var_3__","pow","__var_4__","ln","__var_5__","LNHALF","__var_6__","NINF","__var_7__","logcdf","x","k","lambda","p","NaN","constantFunction","__var_8__","factory","setReadOnly"],"mappings":"0kBA6BA,IAAIA,EAAQC,EACRC,EAAQC,EACRC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAKC,EACLC,EAASC,EACTC,EAAOC,EA6CX,SAASC,EAAQC,EAAGC,EAAGC,GACtB,IAAIC,EACJ,OACCpB,EAAOkB,IACPlB,EAAOmB,IACPD,GAAK,GACLC,GAAU,EAEHE,IAEHJ,EAAI,EACDH,GAERM,GAAKZ,EAAKS,EAAIE,EAAQD,IACTN,EAAWR,GAAQE,EAAKc,IAAQV,GAAKR,EAAOkB,ICjE1D,IAAIE,EAAmBrB,EACnBD,EAAQG,EACRD,EAAQG,EACRD,EAAQG,EACRD,EAAMG,EACND,EAAMG,EACND,EAAKG,EACLD,EAASG,EACTD,EAAOS,EAoBX,SAASC,EAASN,EAAGC,GACpB,OACCnB,EAAOkB,IACPlB,EAAOmB,IACPD,GAAK,GACLC,GAAU,EAEHG,EAAkBD,KAe1B,SAAiBJ,GAChB,IAAIG,EACJ,GAAKpB,EAAOiB,GACX,OAAOI,IAER,GAAKJ,EAAI,EACR,OAAOH,EAGR,OADAM,GAAKZ,EAAKS,EAAIE,EAAQD,IACTN,EAAWR,GAAQE,EAAKc,IAAQV,GAAKR,EAAOkB,KCjD3D,IAAIK,EAAcxB,EACde,EAASb,EACTqB,EAAUnB,EAKdoB,EAAaT,EAAQ,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/expm1';\nimport __var_2__ from '@stdlib/math/base/special/log1p';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/pow';\nimport __var_5__ from '@stdlib/math/base/special/ln';\nimport __var_6__ from '@stdlib/constants/math/float64-ln-half';\nimport __var_7__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar expm1 = __var_1__;\nvar log1p = __var_2__;\nvar exp = __var_3__;\nvar pow = __var_4__;\nvar ln = __var_5__;\nvar LNHALF = __var_6__;\nvar NINF = __var_7__;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} natural logarithm of CDF\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.145\n*\n* @example\n* var y = logcdf( -1.0, 2.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( +Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -Infinity, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, k, lambda ) {\n\tvar p;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tp = -pow( x / lambda, k );\n\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n}\n\n\n// EXPORTS //\nexport default logcdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/expm1';\nimport __var_3__ from '@stdlib/math/base/special/log1p';\nimport __var_4__ from '@stdlib/math/base/special/exp';\nimport __var_5__ from '@stdlib/math/base/special/pow';\nimport __var_6__ from '@stdlib/math/base/special/ln';\nimport __var_7__ from '@stdlib/constants/math/float64-ln-half';\nimport __var_8__ from '@stdlib/constants/math/float64-ninf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar expm1 = __var_2__;\nvar log1p = __var_3__;\nvar exp = __var_4__;\nvar pow = __var_5__;\nvar ln = __var_6__;\nvar LNHALF = __var_7__;\nvar NINF = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 2.0, 10.0 );\n* var y = logcdf( 12.0 );\n* // returns ~-0.27\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.749\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tp = -pow( x / lambda, k );\n\t\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './logcdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/weibull/logcdf\n*\n* @example\n* var logcdf = require( '@stdlib/stats/base/dists/weibull/logcdf' );\n*\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.145\n*\n* var mylogcdf = logcdf.factory( 2.0, 10.0 );\n* y = mylogcdf( 12.0 );\n* // returns ~-0.27\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar logcdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default logcdf;\n"]}