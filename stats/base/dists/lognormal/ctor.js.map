{"version":3,"sources":["@stdlib/stats/base/dists/lognormal/ctor/lib/ctor.js","@stdlib/stats/base/dists/lognormal/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositive","__var_3__","isPrimitive","isNumber","__var_4__","isnan","__var_5__","entropy","__var_6__","kurtosis","__var_7__","mean","__var_8__","median","__var_9__","mode","__var_10__","skewness","__var_11__","stdev","__var_12__","variance","__var_13__","cdf","__var_14__","logpdf","__var_15__","pdf","__var_16__","quantile","__var_17__","lognormalCDF","x","this","mu","sigma","lognormalLogPDF","lognormalPDF","lognormalQuantile","p","LogNormal","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"6qBAyCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAAUC,YACvBC,EAAWC,EAAUF,YACrBG,EAAQC,EACRC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAcC,GACtB,OAAOT,EAAKS,EAAGC,KAAKC,GAAID,KAAKE,OAU9B,SAASC,EAAiBJ,GACzB,OAAOP,EAAQO,EAAGC,KAAKC,GAAID,KAAKE,OAUjC,SAASE,EAAcL,GACtB,OAAOL,EAAKK,EAAGC,KAAKC,GAAID,KAAKE,OAU9B,SAASG,EAAmBC,GAC3B,OAAOV,EAAUU,EAAGN,KAAKC,GAAID,KAAKE,OAwBnC,SAASK,IACR,IAAIL,EACAD,EACJ,KAAOD,gBAAgBO,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAWC,UAAW,GAAKA,UAAW,IAElD,GAAKA,UAAUC,OAAS,CAGvB,GADAP,EAAQM,UAAW,IACbtC,EAFN+B,EAAKO,UAAW,KAEQpC,EAAO6B,GAC9B,MAAM,IAAIS,UAAW,iFAAmFT,EAAK,KAE9G,IAAMlC,EAAYmC,GACjB,MAAM,IAAIQ,UAAW,gFAAkFR,EAAQ,UAGhHD,EAAK,EACLC,EAAQ,EA4BT,OA1BAzC,EAAgBuC,KAAM,KAAM,CAC3BW,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAM7C,EAAU6C,IAAW3C,EAAO2C,GACjC,MAAM,IAAIL,UAAW,sDAAwDK,EAAQ,KAEtFd,EAAKc,KAGPtD,EAAgBuC,KAAM,QAAS,CAC9BW,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,GAERY,IAAO,SAAcC,GACpB,IAAMhD,EAAYgD,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFb,EAAQa,KAGHf,KAiBRnC,EAAqB0C,EAAUS,UAAW,WAAW,WACpD,OAAO1C,EAAS0B,KAAKC,GAAID,KAAKE,UAiB/BrC,EAAqB0C,EAAUS,UAAW,YAAY,WACrD,OAAOxC,EAAUwB,KAAKC,GAAID,KAAKE,UAiBhCrC,EAAqB0C,EAAUS,UAAW,QAAQ,WACjD,OAAOtC,EAAMsB,KAAKC,GAAID,KAAKE,UAiB5BrC,EAAqB0C,EAAUS,UAAW,UAAU,WACnD,OAAOpC,EAAQoB,KAAKC,GAAID,KAAKE,UAiB9BrC,EAAqB0C,EAAUS,UAAW,QAAQ,WACjD,OAAOlC,EAAMkB,KAAKC,GAAID,KAAKE,UAiB5BrC,EAAqB0C,EAAUS,UAAW,YAAY,WACrD,OAAOhC,EAAUgB,KAAKC,GAAID,KAAKE,UAiBhCrC,EAAqB0C,EAAUS,UAAW,SAAS,WAClD,OAAO9B,EAAOc,KAAKC,GAAID,KAAKE,UAiB7BrC,EAAqB0C,EAAUS,UAAW,YAAY,WACrD,OAAO5B,EAAUY,KAAKC,GAAID,KAAKE,UAmBhCvC,EAAa4C,EAAUS,UAAW,MAAOlB,GAkBzCnC,EAAa4C,EAAUS,UAAW,SAAUb,GAkB5CxC,EAAa4C,EAAUS,UAAW,MAAOZ,GAkBzCzC,EAAa4C,EAAUS,UAAW,WAAYX,GClW3C,IAACY,EAAOvD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-number';\nimport __var_4__ from '@stdlib/assert/is-number';\nimport __var_5__ from '@stdlib/assert/is-nan';\nimport __var_6__ from '@stdlib/stats/base/dists/lognormal/entropy';\nimport __var_7__ from '@stdlib/stats/base/dists/lognormal/kurtosis';\nimport __var_8__ from '@stdlib/stats/base/dists/lognormal/mean';\nimport __var_9__ from '@stdlib/stats/base/dists/lognormal/median';\nimport __var_10__ from '@stdlib/stats/base/dists/lognormal/mode';\nimport __var_11__ from '@stdlib/stats/base/dists/lognormal/skewness';\nimport __var_12__ from '@stdlib/stats/base/dists/lognormal/stdev';\nimport __var_13__ from '@stdlib/stats/base/dists/lognormal/variance';\nimport __var_14__ from '@stdlib/stats/base/dists/lognormal/cdf';\nimport __var_15__ from '@stdlib/stats/base/dists/lognormal/logpdf';\nimport __var_16__ from '@stdlib/stats/base/dists/lognormal/pdf';\nimport __var_17__ from '@stdlib/stats/base/dists/lognormal/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositive = __var_3__.isPrimitive;\nvar isNumber = __var_4__.isPrimitive;\nvar isnan = __var_5__;\nvar entropy = __var_6__;\nvar kurtosis = __var_7__;\nvar mean = __var_8__;\nvar median = __var_9__;\nvar mode = __var_10__;\nvar skewness = __var_11__;\nvar stdev = __var_12__;\nvar variance = __var_13__;\nvar cdf = __var_14__;\nvar logpdf = __var_15__;\nvar pdf = __var_16__;\nvar quantile = __var_17__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction lognormalCDF( x ) {\n\treturn cdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction lognormalLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction lognormalPDF( x ) {\n\treturn pdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction lognormalQuantile( p ) {\n\treturn quantile( p, this.mu, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Lognormal distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {LogNormal} distribution instance\n*\n* @example\n* var lognormal = new LogNormal( 1.0, 1.0 );\n*\n* var y = lognormal.cdf( 1.5 );\n* // returns ~0.276\n*\n* var v = lognormal.mean;\n* // returns ~4.482\n*/\nfunction LogNormal() {\n\tvar sigma;\n\tvar mu;\n\tif ( !(this instanceof LogNormal) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new LogNormal();\n\t\t}\n\t\treturn new LogNormal( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );\n\t\t}\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Lognormal distribution differential entropy.\n*\n* @name entropy\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.entropy;\n* // returns ~7.904\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.kurtosis;\n* // returns 1.4243659274306933e+250\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution expected value.\n*\n* @name mean\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mean;\n* // returns 1.0148003881138887e+33\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution median.\n*\n* @name median\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.median;\n* // returns ~54.598\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'median', function get() {\n\treturn median( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution mode.\n*\n* @name mode\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mode;\n* // returns 1.580420060273613e-61\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution skewness.\n*\n* @name skewness\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.skewness;\n* // returns 6.421080152185613e+93\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution standard deviation.\n*\n* @name stdev\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.stdev;\n* // returns 1.886180808490652e+64\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution variance.\n*\n* @name variance\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.variance;\n* // returns 3.55767804231845e+128\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.cdf( 0.5 );\n* // returns ~0.25\n*/\nsetReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.logpdf( 0.8 );\n* // returns ~-2.237\n*/\nsetReadOnly( LogNormal.prototype, 'logpdf', lognormalLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.pdf( 0.8 );\n* // returns ~0.107\n*/\nsetReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.quantile( 0.5 );\n* // returns ~7.389\n*/\nsetReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );\n\n\n// EXPORTS //\nexport default LogNormal;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lognormal distribution constructor.\n*\n* @module @stdlib/stats/base/dists/lognormal/ctor\n*\n* @example\n* var LogNormal = require( '@stdlib/stats/base/dists/lognormal/ctor' );\n*\n* var lognormal = new LogNormal( 1.0, 1.0 );\n*\n* var y = lognormal.cdf( 1.5 );\n* // returns ~0.276\n*\n* var mean = lognormal.mean;\n* // returns ~4.482\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}