{"version":3,"sources":["@stdlib/stats/base/dists/rayleigh/cdf/lib/cdf.js","@stdlib/stats/base/dists/rayleigh/cdf/lib/factory.js","@stdlib/stats/base/dists/rayleigh/cdf/lib/index.js"],"names":["isnan","__var_0__","exp","__var_1__","pow","__var_2__","cdf","x","sigma","s2","NaN","constantFunction","degenerate","factory","__var_3__","__var_4__","setReadOnly"],"mappings":"gVAwBA,IAAIA,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EAqCV,SAASC,EAAKC,EAAGC,GAChB,IAAIC,EACJ,OACCT,EAAOO,IACPP,EAAOQ,IACPA,EAAQ,EAEDE,IAEO,IAAVF,EACKD,EAAI,EAAQ,EAAM,EAEvBA,EAAI,EACD,GAERE,EAAKL,EAAKI,EAAO,GACV,EAAMN,GAAME,EAAKG,EAAG,IAAU,EAAME,KCrD5C,IAAIE,EAAmBV,EACnBW,EAAaT,EAAUU,QACvBb,EAAQK,EACRH,EAAMY,EACNV,EAAMW,EAmBV,SAASF,EAASL,GACjB,IAAIC,EACJ,OAAKT,EAAOQ,IAAWA,EAAQ,EACvBG,EAAkBD,KAEX,IAAVF,EACGI,EAAY,IAEpBH,EAAKL,EAAKI,EAAO,GAcjB,SAAcD,GACb,GAAKP,EAAOO,GACX,OAAOG,IAER,GAAKH,EAAI,EACR,OAAO,EAER,OAAO,EAAML,GAAME,EAAKG,EAAG,IAAU,EAAME,MCnC7C,IAAIO,EAAcf,EACdK,EAAMH,EACNU,EAAUR,EAKdW,EAAaV,EAAK,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/exp';\nimport __var_2__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar exp = __var_1__;\nvar pow = __var_2__;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.199\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.118\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x < 0.0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n}\n\n\n// EXPORTS //\nexport default cdf;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/stats/base/dists/degenerate/cdf';\nimport __var_2__ from '@stdlib/math/base/assert/is-nan';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/pow';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar degenerate = __var_1__.factory;\nvar isnan = __var_2__;\nvar exp = __var_3__;\nvar pow = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.675\n*\n* y = cdf( 1.0 );\n* // returns ~0.118\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './cdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/rayleigh/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/rayleigh/cdf' );\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns ~0.077\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 1.0 );\n* // returns ~0.865\n*\n* y = myCDF( 0.5 );\n* // returns ~0.393\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default cdf;\n"]}