{"version":3,"sources":["@stdlib/stats/base/dists/hypergeometric/pmf/lib/pmf.js","@stdlib/stats/base/dists/hypergeometric/pmf/lib/factory.js","@stdlib/stats/base/dists/hypergeometric/pmf/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isnan","__var_1__","exp","__var_2__","fln","__var_3__","max","__var_4__","min","__var_5__","PINF","__var_6__","pmf","x","N","K","n","ldenom","lnum","maxs","mins","NaN","constantFunction","__var_7__","factory","setReadOnly"],"mappings":"kiBA4BA,IAAIA,EAAuBC,EACvBC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EAkEX,SAASC,EAAKC,EAAGC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EAEAC,EACAC,EAEJ,OACCpB,EAAOa,IACPb,EAAOc,IACPd,EAAOe,IACPf,EAAOgB,KACNlB,EAAsBgB,KACtBhB,EAAsBiB,KACtBjB,EAAsBkB,IACvBF,IAAMJ,GACNK,IAAML,GACNK,EAAID,GACJE,EAAIF,EAEGO,KAERD,EAAOd,EAAK,EAAGU,EAAID,EAAID,GACvBK,EAAOX,EAAKO,EAAGC,GAEdlB,EAAsBe,IACtBO,GAAQP,GACRA,GAAKM,GAELD,EAAOd,EAAKY,GAAMZ,EAAKW,GAAMX,EAAKU,EAAIE,GAAMZ,EAAKU,EAAIC,GACrDE,EAASb,EAAKU,GAAMV,EAAKS,GAAMT,EAAKY,EAAIH,GACxCI,GAAUb,EAAKW,EAAIF,GAAMT,EAAKU,EAAIC,EAAIF,EAAIG,GAEnCd,EADAgB,EAAOD,IAGR,GC1GR,IAAInB,EAAuBC,EACvBC,EAAQC,EACRqB,EAAmBnB,EACnBD,EAAMG,EACND,EAAMG,EACND,EAAMG,EACND,EAAMG,EACND,EAAOa,EAqBX,SAASC,EAASV,EAAGC,EAAGC,GACvB,IAAIG,EACAC,EACJ,OACCpB,EAAOc,IACPd,EAAOe,IACPf,EAAOgB,KACNlB,EAAsBgB,KACtBhB,EAAsBiB,KACtBjB,EAAsBkB,IACvBF,IAAMJ,GACNK,IAAML,GACNK,EAAID,GACJE,EAAIF,EAEGQ,EAAkBD,MAG1BD,EAAOd,EAAK,EAAGU,EAAID,EAAID,GACvBK,EAAOX,EAAKO,EAAGC,GAUf,SAAcH,GACb,IAAII,EACAC,EAEJ,GAAKlB,EAAOa,GACX,OAAOQ,IAER,GACCvB,EAAsBe,IACtBO,GAAQP,GACRA,GAAKM,EAML,OAJAD,EAAOd,EAAKY,GAAMZ,EAAKW,GAAMX,EAAKU,EAAIE,GAAMZ,EAAKU,EAAIC,GACrDE,EAASb,EAAKU,GAAMV,EAAKS,GAAMT,EAAKY,EAAIH,GACxCI,GAAUb,EAAKW,EAAIF,GAAMT,EAAKU,EAAIC,EAAIF,EAAIG,GAEnCd,EADAgB,EAAOD,GAGf,OAAO,ICpDT,IAAIQ,EAAc1B,EACda,EAAMX,EACNuB,EAAUrB,EAKdsB,EAAab,EAAK,UAAWY","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/exp';\nimport __var_3__ from '@stdlib/math/base/special/factorialln';\nimport __var_4__ from '@stdlib/math/base/special/max';\nimport __var_5__ from '@stdlib/math/base/special/min';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar exp = __var_2__;\nvar fln = __var_3__;\nvar max = __var_4__;\nvar min = __var_5__;\nvar PINF = __var_6__;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* @example\n* var y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction pmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar lpmf;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\tlpmf = lnum - ldenom;\n\t\treturn exp( lpmf );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\nexport default pmf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/utils/constant-function';\nimport __var_3__ from '@stdlib/math/base/special/exp';\nimport __var_4__ from '@stdlib/math/base/special/factorialln';\nimport __var_5__ from '@stdlib/math/base/special/max';\nimport __var_6__ from '@stdlib/math/base/special/min';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar constantFunction = __var_2__;\nvar exp = __var_3__;\nvar fln = __var_4__;\nvar max = __var_5__;\nvar min = __var_6__;\nvar PINF = __var_7__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} PMF\n*\n* @example\n* var mypmf = factory( 30, 20, 5 );\n* var y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*/\n\tfunction pmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tvar lpmf;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\tlpmf = lnum - ldenom;\n\t\t\treturn exp( lpmf );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './pmf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/hypergeometric/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/hypergeometric/pmf' );\n*\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 30, 20, 5 );\n* y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar pmf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\nexport default pmf;\n"]}