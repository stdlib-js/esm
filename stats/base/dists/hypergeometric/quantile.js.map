{"version":3,"sources":["@stdlib/stats/base/dists/hypergeometric/quantile/lib/quantile.js","@stdlib/stats/base/dists/hypergeometric/quantile/lib/factory.js","@stdlib/stats/base/dists/hypergeometric/quantile/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isnan","__var_1__","max","__var_2__","min","__var_3__","cdf","__var_4__","PINF","__var_5__","quantile","p","N","K","n","x","NaN","constantFunction","__var_6__","factory","setReadOnly"],"mappings":"scA2BA,IAAIA,EAAuBC,EACvBC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EAkDX,SAASC,EAAUC,EAAGC,EAAGC,EAAGC,GAC3B,IACIC,EAEJ,GACCf,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPb,EAAOc,KACNhB,EAAsBc,KACtBd,EAAsBe,KACtBf,EAAsBgB,IACvBF,IAAMJ,GACNK,IAAML,GACNK,EAAID,GACJE,EAAIF,GACJD,EAAI,GACJA,EAAI,EAEJ,OAAOK,IAER,GAAW,IAANL,EACJ,OAAOT,EAAK,EAAGY,EAAID,EAAID,GAExB,GAAW,IAAND,EACJ,OAAOP,EAAKU,EAAGD,GAGhB,IADAE,EAAIb,EAAK,EAAGY,EAAID,EAAID,KAEZN,EAAKS,EAAGH,EAAGC,EAAGC,GACTH,IAGZI,GAAK,EAEN,OAAOA,ECzFR,IAAIjB,EAAuBC,EACvBC,EAAQC,EACRgB,EAAmBd,EACnBD,EAAMG,EACND,EAAMG,EACND,EAAMG,EACND,EAAOU,EAqBX,SAASC,EAASP,EAAGC,EAAGC,GACvB,OACCd,EAAOY,IACPZ,EAAOa,IACPb,EAAOc,KACNhB,EAAsBc,KACtBd,EAAsBe,KACtBf,EAAsBgB,IACvBF,IAAMJ,GACNK,IAAML,GACNK,EAAID,GACJE,EAAIF,EAEGK,EAAkBD,KAW1B,SAAmBL,GAClB,IACII,EAEJ,GAAKf,EAAOW,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOK,IAER,GAAW,IAANL,EACJ,OAAOT,EAAK,EAAGY,EAAID,EAAID,GAExB,GAAW,IAAND,EACJ,OAAOP,EAAKU,EAAGD,GAEhBE,EAAIb,EAAK,EAAGY,EAAID,EAAID,GACpB,OACQN,EAAKS,EAAGH,EAAGC,EAAGC,GACTH,IAGZI,GAAK,EAEN,OAAOA,GC7CT,IAAIK,EAAcrB,EACdW,EAAWT,EACXkB,EAAUhB,EAKdiB,EAAaV,EAAU,UAAWS","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/max';\nimport __var_3__ from '@stdlib/math/base/special/min';\nimport __var_4__ from '@stdlib/stats/base/dists/hypergeometric/cdf';\nimport __var_5__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar max = __var_2__;\nvar min = __var_3__;\nvar cdf = __var_4__;\nvar PINF = __var_5__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.4, 40, 20, 10 );\n* // returns 5\n*\n* @example\n* var y = quantile( 0.8, 60, 40, 20 );\n* // returns 15\n*\n* @example\n* var y = quantile( 0.5, 100, 10, 10 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.0, 100, 40, 20 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.0, 100, 40, 20 );\n* // returns 20\n*\n* @example\n* var y = quantile( NaN, 40, 20, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, NaN, 20, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 40, NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 40, 20, NaN );\n* // returns NaN\n*/\nfunction quantile( p, N, K, n ) {\n\tvar prob;\n\tvar x;\n\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn max( 0, n + K - N );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn min( n, K );\n\t}\n\tx = max( 0, n + K - N );\n\twhile ( true ) {\n\t\tprob = cdf( x, N, K, n );\n\t\tif ( prob > p ) {\n\t\t\tbreak;\n\t\t}\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/utils/constant-function';\nimport __var_3__ from '@stdlib/math/base/special/max';\nimport __var_4__ from '@stdlib/math/base/special/min';\nimport __var_5__ from '@stdlib/stats/base/dists/hypergeometric/cdf';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar constantFunction = __var_2__;\nvar max = __var_3__;\nvar min = __var_4__;\nvar cdf = __var_5__;\nvar PINF = __var_6__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 100, 20, 10 );\n* var y = quantile( 0.2 );\n* // returns 1\n*\n* y = quantile( 0.9 );\n* // returns 4\n*/\nfunction factory( N, K, n ) {\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*/\n\tfunction quantile( p ) {\n\t\tvar prob;\n\t\tvar x;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn max( 0, n + K - N );\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn min( n, K );\n\t\t}\n\t\tx = max( 0, n + K - N );\n\t\twhile ( true ) {\n\t\t\tprob = cdf( x, N, K, n );\n\t\t\tif ( prob > p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx += 1;\n\t\t}\n\t\treturn x;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/hypergeometric/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/hypergeometric/quantile' );\n*\n* var y = quantile( 0.4, 40, 20, 10 );\n* // returns 5\n*\n* y = quantile( 0.8, 60, 40, 20 );\n* // returns 15\n*\n* y = quantile( 0.5, 100, 10, 10 );\n* // returns 1\n*\n* y = quantile( 0.0, 100, 40, 20 );\n* // returns 0\n*\n* y = quantile( 1.0, 100, 40, 20 );\n* // returns 20\n*\n* var myquantile = quantile.factory( 100, 20, 10 );\n* y = myquantile( 0.2 );\n* // returns 1\n*\n* y = myquantile( 0.9 );\n* // returns 4\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}