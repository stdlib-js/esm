{"version":3,"sources":["@stdlib/stats/base/dists/hypergeometric/ctor/lib/ctor.js","@stdlib/stats/base/dists/hypergeometric/ctor/lib/index.js"],"names":["isNonNegativeInteger","__var_0__","isPrimitive","defineProperty","__var_1__","setReadOnly","__var_2__","setReadOnlyAccessor","__var_3__","kurtosis","__var_4__","mean","__var_5__","mode","__var_6__","skewness","__var_7__","stdev","__var_8__","variance","__var_9__","cdf","__var_10__","logpmf","__var_11__","pmf","__var_12__","quantile","__var_13__","hypergeometricCDF","x","this","N","K","n","hypergeometricLogPMF","hypergeometricPMF","hypergeometricQuantile","p","Hypergeometric","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/utils/define-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_3__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_4__ from '@stdlib/stats/base/dists/hypergeometric/kurtosis';\nimport __var_5__ from '@stdlib/stats/base/dists/hypergeometric/mean';\nimport __var_6__ from '@stdlib/stats/base/dists/hypergeometric/mode';\nimport __var_7__ from '@stdlib/stats/base/dists/hypergeometric/skewness';\nimport __var_8__ from '@stdlib/stats/base/dists/hypergeometric/stdev';\nimport __var_9__ from '@stdlib/stats/base/dists/hypergeometric/variance';\nimport __var_10__ from '@stdlib/stats/base/dists/hypergeometric/cdf';\nimport __var_11__ from '@stdlib/stats/base/dists/hypergeometric/logpmf';\nimport __var_12__ from '@stdlib/stats/base/dists/hypergeometric/pmf';\nimport __var_13__ from '@stdlib/stats/base/dists/hypergeometric/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__.isPrimitive;\nvar defineProperty = __var_1__;\nvar setReadOnly = __var_2__;\nvar setReadOnlyAccessor = __var_3__;\nvar kurtosis = __var_4__;\nvar mean = __var_5__;\nvar mode = __var_6__;\nvar skewness = __var_7__;\nvar stdev = __var_8__;\nvar variance = __var_9__;\nvar cdf = __var_10__;\nvar logpmf = __var_11__;\nvar pmf = __var_12__;\nvar quantile = __var_13__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction hypergeometricCDF( x ) {\n\treturn cdf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricLogPMF( x ) {\n\treturn logpmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricPMF( x ) {\n\treturn pmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*/\nfunction hypergeometricQuantile( p ) {\n\treturn quantile( p, this.N, this.K, this.n );\n}\n\n\n// MAIN //\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `K` must not exceed `N`\n* @throws {RangeError} `n` must not exceed `N`\n* @returns {Hypergeometric} distribution instance\n*\n* @example\n* var hypergeometric = new Hypergeometric( 10, 5, 7 );\n*\n* var y = hypergeometric.cdf( 0.8 );\n* // returns 0.0\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nfunction Hypergeometric( N, K, n ) {\n\tif ( !(this instanceof Hypergeometric) ) {\n\t\treturn new Hypergeometric( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( 'invalid argument. Population size `N` must be a nonnegative integer. Value: `' + N + '`' );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( 'invalid argument. Subpopulation size `K` must be a nonnegative integer. Value: `' + K + '`' );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( 'invalid argument. Number of draws `n` must be a nonnegative integer. Value: `' + n + '`' );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Subpopulation size `K` must be smaller than or equal to `N`.' );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Number of draws `n` must be smaller than or equal to `N`.' );\n\t}\n\tdefineProperty( this, 'N', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn N;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( K > value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be larger than or equal to `K`. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( n > value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be larger than or equal to `n`. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tN = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'K', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn K;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tK = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Hypergeometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.kurtosis;\n* // returns ~-0.276\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution expected value.\n*\n* @name mean\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mean;\n* // returns 3.75\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mean', function get() {\n\treturn mean( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution mode.\n*\n* @name mode\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mode', function get() {\n\treturn mode( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution skewness.\n*\n* @name skewness\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.skewness;\n* // returns ~-0.323\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'skewness', function get() {\n\treturn skewness( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.stdev;\n* // returns ~0.86\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'stdev', function get() {\n\treturn stdev( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution variance.\n*\n* @name variance\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.variance;\n* // returns ~0.74\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'variance', function get() {\n\treturn variance( this.N, this.K, this.n );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.cdf( 0.5 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.logpmf( 2.0 );\n* // returns ~-1.54\n*/\nsetReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.pmf( 2.0 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.quantile( 0.8 );\n* // returns 2\n*/\nsetReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );\n\n\n// EXPORTS //\nexport default Hypergeometric;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @module @stdlib/stats/base/dists/hypergeometric/ctor\n*\n* @example\n* var Hypergeometric = require( '@stdlib/stats/base/dists/hypergeometric/ctor' );\n*\n* var hypergeometric = new Hypergeometric( 40, 10, 8 );\n*\n* var y = hypergeometric.cdf( 2.8 );\n* // returns ~0.688\n*\n* var mode = hypergeometric.mode;\n* // returns 2.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}