{"version":3,"sources":["@stdlib/stats/base/dists/hypergeometric/cdf/lib/sum.js","@stdlib/stats/base/dists/hypergeometric/cdf/lib/cdf.js","@stdlib/stats/base/dists/hypergeometric/cdf/lib/factory.js","@stdlib/stats/base/dists/hypergeometric/cdf/lib/index.js"],"names":["sum","arr","len","s","i","length","isNonNegativeInteger","__var_0__","isnan","__var_1__","trunc","__var_2__","max","__var_3__","min","__var_4__","pmf","__var_5__","PINF","__var_6__","__var_7__","cdf","x","N","K","n","denom","probs","num","ret","NaN","Array","constantFunction","__var_8__","factory","setReadOnly"],"mappings":"8fA4BA,SAASA,EAAKC,GACb,IAAIC,EACAC,EACAC,EAGJ,IAFAF,EAAMD,EAAII,OACVF,EAAI,EACEC,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,GAAKF,EAAKG,GAEX,OAAOD,ECRR,IAAIG,EAAuBC,EACvBC,EAAQC,EACRC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EACPnB,EAAMoB,EAkEV,SAASC,EAAKC,EAAGC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAzB,EAEJ,GACCI,EAAOc,IACPd,EAAOe,IACPf,EAAOgB,IACPhB,EAAOiB,KACNnB,EAAsBiB,KACtBjB,EAAsBkB,KACtBlB,EAAsBmB,IACvBF,IAAML,GACNM,IAAMN,GACNM,EAAID,GACJE,EAAIF,EAEJ,OAAOO,IAGR,IADAR,EAAIZ,EAAOY,IACFV,EAAK,EAAGa,EAAID,EAAID,GACxB,OAAO,EAER,GAAKD,GAAKR,EAAKW,EAAGD,GACjB,OAAO,EAUR,KAPAG,EAAQ,IAAII,MAAOT,EAAI,IAChBA,GAAMN,EAAKM,EAAGC,EAAGC,EAAGC,GAMrBrB,EAAIkB,EAAI,EAAGlB,GAAK,EAAGA,IACxBwB,GAAQxB,EAAI,IAAQmB,EAAIC,GAAKC,EAAErB,EAAE,IACjCsB,GAAUF,EAAIpB,IAAQqB,EAAIrB,GAC1BuB,EAAOvB,GAAQwB,EAAMF,EAAUC,EAAOvB,EAAI,GAG3C,OADAyB,EAAM7B,EAAK2B,GACJb,EAAKe,EAAK,GCnHlB,IAAIvB,EAAuBC,EACvBC,EAAQC,EACRuB,EAAmBrB,EACnBD,EAAQG,EACRD,EAAMG,EACND,EAAMG,EACND,EAAMG,EACND,EAAOE,EACPpB,EAAMiC,EAqBV,SAASC,EAASX,EAAGC,EAAGC,GACvB,OACCjB,EAAOe,IACPf,EAAOgB,IACPhB,EAAOiB,KACNnB,EAAsBiB,KACtBjB,EAAsBkB,KACtBlB,EAAsBmB,IACvBF,IAAML,GACNM,IAAMN,GACNM,EAAID,GACJE,EAAIF,EAEGS,EAAkBF,KAe1B,SAAcR,GACb,IAAII,EACAC,EACAC,EACAC,EACAzB,EAEJ,GAAKI,EAAOc,GACX,OAAOQ,IAGR,IADAR,EAAIZ,EAAOY,IACFV,EAAK,EAAGa,EAAID,EAAID,GACxB,OAAO,EAER,GAAKD,GAAKR,EAAKW,EAAGD,GACjB,OAAO,EAUR,KAPAG,EAAQ,IAAII,MAAOT,EAAI,IAChBA,GAAMN,EAAKM,EAAGC,EAAGC,EAAGC,GAMrBrB,EAAIkB,EAAI,EAAGlB,GAAK,EAAGA,IACxBwB,GAAQxB,EAAI,IAAQmB,EAAIC,GAAKC,EAAErB,EAAE,IACjCsB,GAAUF,EAAIpB,IAAQqB,EAAIrB,GAC1BuB,EAAOvB,GAAQwB,EAAMF,EAAUC,EAAOvB,EAAI,GAG3C,OADAyB,EAAM7B,EAAK2B,GACJb,EAAKe,EAAK,IClEnB,IAAIM,EAAc5B,EACdc,EAAMZ,EACNyB,EAAUvB,EAKdwB,EAAad,EAAK,UAAWa","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the sum of elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {number} sum\n*/\nfunction sum( arr ) {\n\tvar len;\n\tvar s;\n\tvar i;\n\tlen = arr.length;\n\ts = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ts += arr[ i ];\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\nexport default sum;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/trunc';\nimport __var_3__ from '@stdlib/math/base/special/max';\nimport __var_4__ from '@stdlib/math/base/special/min';\nimport __var_5__ from '@stdlib/stats/base/dists/hypergeometric/pmf';\nimport __var_6__ from '@stdlib/constants/math/float64-pinf';\nimport __var_7__ from './sum.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar trunc = __var_2__;\nvar max = __var_3__;\nvar min = __var_4__;\nvar pmf = __var_5__;\nvar PINF = __var_6__;\nvar sum = __var_7__;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 1.0, 8, 4, 2 );\n* // returns ~0.786\n*\n* @example\n* var y = cdf( 1.5, 8, 4, 2 );\n* // returns ~0.786\n*\n* @example\n* var y = cdf( 2.0, 8, 4, 2 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = cdf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction cdf( x, N, K, n ) {\n\tvar denom;\n\tvar probs;\n\tvar num;\n\tvar ret;\n\tvar i;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tx = trunc( x );\n\tif ( x < max( 0, n + K - N ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= min( n, K ) ) {\n\t\treturn 1.0;\n\t}\n\n\tprobs = new Array( x + 1 );\n\tprobs[ x ] = pmf( x, N, K, n );\n\n\t/*\n\t* Use recurrence relation:\n\t* (x+1)( N - K - (n-x-1))P(X=x+1)=(K-x)(n-x)P(X=x)\n\t*/\n\tfor ( i = x - 1; i >= 0; i-- ) {\n\t\tnum = ( i + 1 ) * ( N - K - (n-i-1) );\n\t\tdenom = ( K - i ) * ( n - i );\n\t\tprobs[ i ] = ( num / denom ) * probs[ i + 1 ];\n\t}\n\tret = sum( probs );\n\treturn min( ret, 1.0 );\n}\n\n\n// EXPORTS //\nexport default cdf;\n","import __var_0__ from '@stdlib/math/base/assert/is-nonnegative-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/utils/constant-function';\nimport __var_3__ from '@stdlib/math/base/special/trunc';\nimport __var_4__ from '@stdlib/math/base/special/max';\nimport __var_5__ from '@stdlib/math/base/special/min';\nimport __var_6__ from '@stdlib/stats/base/dists/hypergeometric/pmf';\nimport __var_7__ from '@stdlib/constants/math/float64-pinf';\nimport __var_8__ from './sum.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isNonNegativeInteger = __var_0__;\nvar isnan = __var_1__;\nvar constantFunction = __var_2__;\nvar trunc = __var_3__;\nvar max = __var_4__;\nvar min = __var_5__;\nvar pmf = __var_6__;\nvar PINF = __var_7__;\nvar sum = __var_8__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} CDF\n*\n* @example\n* var mycdf = factory( 30, 20, 5 );\n* var y = mycdf( 4.0 );\n* // returns ~0.891\n*\n* y = mycdf( 1.0 );\n* // returns ~0.031\n*/\nfunction factory( N, K, n ) {\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar denom;\n\t\tvar probs;\n\t\tvar num;\n\t\tvar ret;\n\t\tvar i;\n\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tx = trunc( x );\n\t\tif ( x < max( 0, n + K - N ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= min( n, K ) ) {\n\t\t\treturn 1.0;\n\t\t}\n\n\t\tprobs = new Array( x + 1 );\n\t\tprobs[ x ] = pmf( x, N, K, n );\n\n\t\t/*\n\t\t* Use recurrence relation:\n\t\t* (x+1)( N - K - (n-x-1) )P(X=x+1)=(K-x)(n-x)P(X=x)\n\t\t*/\n\t\tfor ( i = x - 1; i >= 0; i-- ) {\n\t\t\tnum = ( i + 1 ) * ( N - K - (n-i-1) );\n\t\t\tdenom = ( K - i ) * ( n - i );\n\t\t\tprobs[ i ] = ( num / denom ) * probs[ i + 1 ];\n\t\t}\n\t\tret = sum( probs );\n\t\treturn min( ret, 1.0 );\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './cdf.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/hypergeometric/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/hypergeometric/cdf' );\n*\n* var y = cdf( 1.0, 8, 4, 2 );\n* // returns ~0.786\n*\n* y = cdf( 1.5, 8, 4, 2 );\n* // returns ~0.786\n*\n* y = cdf( 2.0, 8, 4, 2 );\n* // returns 1.0\n*\n* y = cdf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* var mycdf = cdf.factory( 30, 20, 5 );\n* y = mycdf( 4.0 );\n* // returns ~0.891\n*\n* y = mycdf( 1.0 );\n* // returns ~0.031\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar cdf = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\nexport default cdf;\n"]}