{"version":3,"sources":["@stdlib/stats/base/dists/triangular/quantile/lib/quantile.js","@stdlib/stats/base/dists/triangular/quantile/lib/factory.js","@stdlib/stats/base/dists/triangular/quantile/lib/index.js"],"names":["isnan","__var_0__","sqrt","__var_1__","quantile","p","a","b","c","pInflection","fact2","NaN","constantFunction","__var_2__","factory","fact1","setReadOnly"],"mappings":"qPAuBA,IAAIA,EAAQC,EACRC,EAAOC,EA0DX,SAASC,EAAUC,EAAGC,EAAGC,EAAGC,GAC3B,IAAIC,EAEAC,EAEJ,OACCV,EAAOK,IACPL,EAAOM,IACPN,EAAOO,IACPP,EAAOQ,IACPF,EAAIE,GACJA,EAAID,GACJF,EAAI,GACJA,EAAI,EAEGM,KAIRD,GAAUH,EAAID,IAAQC,EAAIC,GACrBH,GAHLI,GAAgBD,EAAIF,IAAQC,EAAID,IAIxBA,EAAIJ,GAHFK,EAAID,IAAQE,EAAIF,GAGAD,GAErBA,EAAII,EACDF,EAAIL,EAAMQ,GAAU,EAAML,IAG3BG,GCrFR,IAAII,EAAmBX,EACnBD,EAAQG,EACRD,EAAOW,EAqBX,SAASC,EAASR,EAAGC,EAAGC,GACvB,IAAIC,EACAM,EACAL,EAEJ,OACCV,EAAOM,IACPN,EAAOO,IACPP,EAAOQ,IACPF,EAAIE,GACJA,EAAID,EAEGK,EAAkBD,MAG1BF,GAAgBD,EAAIF,IAAQC,EAAID,GAChCS,GAAUR,EAAID,IAAQE,EAAIF,GAC1BI,GAAUH,EAAID,IAAQC,EAAIC,GAc1B,SAAmBH,GAClB,GAAKL,EAAOK,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOM,IAER,GAAKN,EAAII,EACR,OAAOH,EAAIJ,EAAMa,EAAQV,GAE1B,GAAKA,EAAII,EACR,OAAOF,EAAIL,EAAMQ,GAAU,EAAML,IAGlC,OAAOG,ICrCT,IAAIQ,EAAcf,EACdG,EAAWD,EACXW,EAAUD,EAKdG,EAAaZ,EAAU,UAAWU","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, -1.0, 1.0, 0.0 );\n* // returns ~0.553\n*\n* @example\n* var y = quantile( 0.1, -1.0, 1.0, 0.5 );\n* // returns ~-0.452\n*\n* @example\n* var y = quantile( 0.1, -20.0, 0.0, -2.0 );\n* // returns -14.0\n*\n* @example\n* var y = quantile( 0.8, 0.0, 20.0, 0.0 );\n* // returns ~11.056\n*\n* @example\n* var y = quantile( 1.1, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction quantile( p, a, b, c ) {\n\tvar pInflection;\n\tvar fact1;\n\tvar fact2;\n\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tpInflection = ( c - a ) / ( b - a );\n\tfact1 = ( b - a ) * ( c - a);\n\tfact2 = ( b - a ) * ( b - c );\n\tif ( p < pInflection ) {\n\t\treturn a + sqrt( fact1 * p );\n\t}\n\tif ( p > pInflection ) {\n\t\treturn b - sqrt( fact2 * ( 1.0 - p ) );\n\t}\n\t// Case: p = pInflection\n\treturn c;\n}\n\n\n// EXPORTS //\nexport default quantile;\n","import __var_0__ from '@stdlib/utils/constant-function';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\nimport __var_2__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar constantFunction = __var_0__;\nvar isnan = __var_1__;\nvar sqrt = __var_2__;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a triangular distribution with lower limit `a`, upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.0, 4.0, 2.5 );\n* var y = quantile( 0.4 );\n* // returns ~2.658\n*\n* y = quantile( 0.8 );\n* // returns ~3.225\n*/\nfunction factory( a, b, c ) {\n\tvar pInflection;\n\tvar fact1;\n\tvar fact2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tpInflection = ( c - a ) / ( b - a );\n\tfact1 = ( b - a ) * ( c - a);\n\tfact2 = ( b - a ) * ( b - c );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a triangular distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p < pInflection ) {\n\t\t\treturn a + sqrt( fact1 * p );\n\t\t}\n\t\tif ( p > pInflection ) {\n\t\t\treturn b - sqrt( fact2 * ( 1.0 - p ) );\n\t\t}\n\t\t// Case: p = pInflection\n\t\treturn c;\n\t}\n}\n\n\n// EXPORTS //\nexport default factory;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './quantile.js';\nimport __var_2__ from './factory.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/triangular/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/triangular/quantile' );\n*\n* var y = quantile( 0.9, -1.0, 1.0, 0.0 );\n* // returns ~0.553\n*\n* y = quantile( 0.1, -1.0, 1.0, 0.5 );\n* // returns ~-0.452\n*\n* y = quantile( 0.1, -20.0, 0.0, -2.0 );\n* // returns -14.0\n*\n* y = quantile( 0.8, 0.0, 20.0, 0.0 );\n* // returns ~11.056\n*\n* var myquantile = quantile.factory( 2.0, 4.0, 2.5 );\n* y = myquantile( 0.4 );\n* // returns ~2.658\n*\n* y = myquantile( 0.8 );\n* // returns ~3.225\n*/\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar quantile = __var_1__;\nvar factory = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\nexport default quantile;\n"]}