{"version":3,"sources":["@stdlib/stats/base/dists/triangular/ctor/lib/ctor.js","@stdlib/stats/base/dists/triangular/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isNumber","__var_3__","isPrimitive","isnan","__var_4__","entropy","__var_5__","kurtosis","__var_6__","mean","__var_7__","median","__var_8__","mode","__var_9__","skewness","__var_10__","stdev","__var_11__","variance","__var_12__","cdf","__var_13__","logcdf","__var_14__","logpdf","__var_15__","mgf","__var_16__","pdf","__var_17__","quantile","__var_18__","triangularCDF","x","this","a","b","c","triangularLogCDF","triangularLogPDF","triangularMGF","t","triangularPDF","triangularQuantile","p","Triangular","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-number';\nimport __var_4__ from '@stdlib/math/base/assert/is-nan';\nimport __var_5__ from '@stdlib/stats/base/dists/triangular/entropy';\nimport __var_6__ from '@stdlib/stats/base/dists/triangular/kurtosis';\nimport __var_7__ from '@stdlib/stats/base/dists/triangular/mean';\nimport __var_8__ from '@stdlib/stats/base/dists/triangular/median';\nimport __var_9__ from '@stdlib/stats/base/dists/triangular/mode';\nimport __var_10__ from '@stdlib/stats/base/dists/triangular/skewness';\nimport __var_11__ from '@stdlib/stats/base/dists/triangular/stdev';\nimport __var_12__ from '@stdlib/stats/base/dists/triangular/variance';\nimport __var_13__ from '@stdlib/stats/base/dists/triangular/cdf';\nimport __var_14__ from '@stdlib/stats/base/dists/triangular/logcdf';\nimport __var_15__ from '@stdlib/stats/base/dists/triangular/logpdf';\nimport __var_16__ from '@stdlib/stats/base/dists/triangular/mgf';\nimport __var_17__ from '@stdlib/stats/base/dists/triangular/pdf';\nimport __var_18__ from '@stdlib/stats/base/dists/triangular/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isNumber = __var_3__.isPrimitive;\nvar isnan = __var_4__;\nvar entropy = __var_5__;\nvar kurtosis = __var_6__;\nvar mean = __var_7__;\nvar median = __var_8__;\nvar mode = __var_9__;\nvar skewness = __var_10__;\nvar stdev = __var_11__;\nvar variance = __var_12__;\nvar cdf = __var_13__;\nvar logcdf = __var_14__;\nvar logpdf = __var_15__;\nvar mgf = __var_16__;\nvar pdf = __var_17__;\nvar quantile = __var_18__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction triangularCDF( x ) {\n\treturn cdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction triangularLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction triangularLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction triangularMGF( t ) {\n\treturn mgf( t, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction triangularPDF( x ) {\n\treturn pdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction triangularQuantile( p ) {\n\treturn quantile( p, this.a, this.b, this.c );\n}\n\n\n// MAIN //\n\n/**\n* Triangular distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @param {number} [c=0.5] - mode\n* @throws {TypeError} `a` must be a number primitive\n* @throws {TypeError} `b` must be a number primitive\n* @throws {TypeError} `c` must be a number primitive\n* @throws {RangeError} `a` must be smaller than or equal to `b` and `c`\n* @throws {RangeError} `b` must be greater than or equal to `a` and `b`\n* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`\n* @returns {Triangular} distribution instance\n*\n* @example\n* var triangular = new Triangular( 0.0, 1.0, 0.25 );\n*\n* var y = triangular.cdf( 0.8 );\n* // returns ~0.947\n*\n* var mu = triangular.mean;\n* // returns ~0.417\n*/\nfunction Triangular() {\n\tvar a;\n\tvar b;\n\tvar c;\n\tif ( !(this instanceof Triangular) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Triangular();\n\t\t}\n\t\treturn new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tc = arguments[ 2 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );\n\t\t}\n\t\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Mode `c` must be a number primitive. Value: `' + c + '`' );\n\t\t}\n\t\tif ( !( a <= c && c <= b ) ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Parameters must satisfy `a <= c <= b`. Value: `' + a + ',' + b + ',' + c + '`' );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t\tc = 0.5;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( value > b || value > c ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be smaller than or equal to `b` and `c`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( a > value || c > value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be greater than or equal to `a` and `c`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'c', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn c;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tif ( a > value || b < value ) {\n\t\t\t\tthrow new RangeError( 'invalid value. Must be greater than or equal to `a` and smaller than or equal to `b`. Value: `'+ value + '`' );\n\t\t\t}\n\t\t\tc = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Triangular distribution differential entropy.\n*\n* @name entropy\n* @memberof Triangular.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.entropy;\n* // returns ~1.886\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Triangular.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.kurtosis;\n* // returns -0.6\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution expected value.\n*\n* @name mean\n* @memberof Triangular.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mean;\n* // returns ~8.667\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution median.\n*\n* @name median\n* @memberof Triangular.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.median;\n* // returns ~8.899\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'median', function get() {\n\treturn median( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution mode.\n*\n* @name mode\n* @memberof Triangular.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mode;\n* // returns 10.0\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution skewness.\n*\n* @name skewness\n* @memberof Triangular.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.skewness;\n* // returns ~-0.422\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution standard deviation.\n*\n* @name stdev\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.stdev;\n* // returns ~1.7\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution variance.\n*\n* @name variance\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.variance;\n* // returns ~2.889\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b, this.c );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.cdf( 3.0 );\n* // returns 0.5\n*/\nsetReadOnly( Triangular.prototype, 'cdf', triangularCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Triangular.prototype, 'logcdf', triangularLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logpdf( 2.4 );\n* // returns ~-0.916\n*/\nsetReadOnly( Triangular.prototype, 'logpdf', triangularLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.mgf( 0.5 );\n* // returns ~4.576\n*/\nsetReadOnly( Triangular.prototype, 'mgf', triangularMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.pdf( 2.4 );\n* // returns ~0.40\n*/\nsetReadOnly( Triangular.prototype, 'pdf', triangularPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Triangular.prototype, 'quantile', triangularQuantile );\n\n\n// EXPORTS //\nexport default Triangular;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution constructor.\n*\n* @module @stdlib/stats/base/dists/triangular/ctor\n*\n* @example\n* var Triangular = require( '@stdlib/stats/base/dists/triangular/ctor' );\n*\n* var triangular = new Triangular( 0.0, 1.0, 0.5 );\n*\n* var y = triangular.cdf( 0.8 );\n* // returns 0.92\n*\n* var mu = triangular.mean;\n* // returns 0.5\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}