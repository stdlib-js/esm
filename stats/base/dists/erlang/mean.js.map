{"version":3,"sources":["@stdlib/stats/base/dists/erlang/mean/lib/mean.js","@stdlib/stats/base/dists/erlang/mean/lib/index.js"],"names":["isPositiveInteger","__var_0__","isnan","__var_1__","mean","k","lambda","NaN"],"mappings":"6HAuBA,IAAIA,EAAoBC,EACpBC,EAAQC,EA4CZ,SAASC,EAAMC,EAAGC,GACjB,OACEN,EAAmBK,IACpBH,EAAOI,IACPA,GAAU,EAEHC,IAEDF,EAAIC,ECpCT,IAACF,EAAOH","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isnan = __var_1__;\n\n\n// MAIN //\n\n/**\n* Returns the expected value of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 1, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 4, 12.0 );\n* // returns ~0.333\n*\n* @example\n* var v = mean( 8, 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = mean( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn k / lambda;\n}\n\n\n// EXPORTS //\nexport default mean;\n","import __var_0__ from './mean.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution expected value.\n*\n* @module @stdlib/stats/base/dists/erlang/mean\n*\n* @example\n* var mean = require( '@stdlib/stats/base/dists/erlang/mean' );\n*\n* var v = mean( 1, 1.0 );\n* // returns 1.0\n*\n* v = mean( 4, 12.0 );\n* // returns ~0.333\n*\n* v = mean( 8, 2.0 );\n* // returns 4.0\n*/\n\n// MODULES //\nvar mean = __var_0__;\n\n\n// EXPORTS //\nexport default mean;\n"]}