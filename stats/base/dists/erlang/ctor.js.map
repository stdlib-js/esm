{"version":3,"sources":["@stdlib/stats/base/dists/erlang/ctor/lib/ctor.js","@stdlib/stats/base/dists/erlang/ctor/lib/index.js"],"names":["defineProperty","__var_0__","setReadOnly","__var_1__","setReadOnlyAccessor","__var_2__","isPositiveInteger","__var_3__","isPrimitive","isPositive","__var_4__","entropy","__var_5__","kurtosis","__var_6__","mean","__var_7__","mode","__var_8__","skewness","__var_9__","stdev","__var_10__","variance","__var_11__","cdf","__var_12__","logpdf","__var_13__","mgf","__var_14__","pdf","__var_15__","quantile","__var_16__","erlangCDF","x","this","k","lambda","erlangLogPDF","erlangMGF","t","erlangPDF","erlangQuantile","p","Erlang","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","ctor"],"mappings":"soBAwCA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAoBC,EAAUC,YAC9BC,EAAaC,EAAUF,YACvBG,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EAYf,SAASC,EAAWC,GACnB,OAAOX,EAAKW,EAAGC,KAAKC,EAAGD,KAAKE,QAU7B,SAASC,EAAcJ,GACtB,OAAOT,EAAQS,EAAGC,KAAKC,EAAGD,KAAKE,QAUhC,SAASE,EAAWC,GACnB,OAAOb,EAAKa,EAAGL,KAAKC,EAAGD,KAAKE,QAU7B,SAASI,EAAWP,GACnB,OAAOL,EAAKK,EAAGC,KAAKC,EAAGD,KAAKE,QAU7B,SAASK,EAAgBC,GACxB,OAAOZ,EAAUY,EAAGR,KAAKC,EAAGD,KAAKE,QAyBlC,SAASO,IACR,IAAIP,EACAD,EACJ,KAAOD,gBAAgBS,GACtB,OAA0B,IAArBC,UAAUC,OACP,IAAIF,EAEL,IAAIA,EAAQC,UAAW,GAAKA,UAAW,IAE/C,GAAKA,UAAUC,OAAS,CAGvB,GADAT,EAASQ,UAAW,IACdzC,EAFNgC,EAAIS,UAAW,IAGd,MAAM,IAAIE,UAAW,6EAA+EX,EAAI,KAEzG,IAAM7B,EAAY8B,GACjB,MAAM,IAAIU,UAAW,gFAAkFV,EAAS,UAGjHD,EAAI,EACJC,EAAS,EA4BV,OA1BAvC,EAAgBqC,KAAM,IAAK,CAC1Ba,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOd,GAERe,IAAO,SAAcC,GACpB,IAAMhD,EAAmBgD,GACxB,MAAM,IAAIL,UAAW,sDAAwDK,EAAQ,KAEtFhB,EAAIgB,KAGNtD,EAAgBqC,KAAM,SAAU,CAC/Ba,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAM7C,EAAY6C,GACjB,MAAM,IAAIL,UAAW,qDAAuDK,EAAQ,KAErFf,EAASe,KAGJjB,KAiBRjC,EAAqB0C,EAAOS,UAAW,WAAW,WACjD,OAAO5C,EAAS0B,KAAKC,EAAGD,KAAKE,WAiB9BnC,EAAqB0C,EAAOS,UAAW,YAAY,WAClD,OAAO1C,EAAUwB,KAAKC,EAAGD,KAAKE,WAiB/BnC,EAAqB0C,EAAOS,UAAW,QAAQ,WAC9C,OAAOxC,EAAMsB,KAAKC,EAAGD,KAAKE,WAiB3BnC,EAAqB0C,EAAOS,UAAW,QAAQ,WAC9C,OAAOtC,EAAMoB,KAAKC,EAAGD,KAAKE,WAiB3BnC,EAAqB0C,EAAOS,UAAW,YAAY,WAClD,OAAOpC,EAAUkB,KAAKC,EAAGD,KAAKE,WAiB/BnC,EAAqB0C,EAAOS,UAAW,SAAS,WAC/C,OAAOlC,EAAOgB,KAAKC,EAAGD,KAAKE,WAiB5BnC,EAAqB0C,EAAOS,UAAW,YAAY,WAClD,OAAOhC,EAAUc,KAAKC,EAAGD,KAAKE,WAmB/BrC,EAAa4C,EAAOS,UAAW,MAAOpB,GAkBtCjC,EAAa4C,EAAOS,UAAW,SAAUf,GAkBzCtC,EAAa4C,EAAOS,UAAW,MAAOd,GAkBtCvC,EAAa4C,EAAOS,UAAW,MAAOZ,GAkBtCzC,EAAa4C,EAAOS,UAAW,WAAYX,GC5WxC,IAACY,EAAOvD","sourcesContent":["import __var_0__ from '@stdlib/utils/define-property';\nimport __var_1__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_2__ from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport __var_3__ from '@stdlib/assert/is-positive-integer';\nimport __var_4__ from '@stdlib/assert/is-positive-number';\nimport __var_5__ from '@stdlib/stats/base/dists/erlang/entropy';\nimport __var_6__ from '@stdlib/stats/base/dists/erlang/kurtosis';\nimport __var_7__ from '@stdlib/stats/base/dists/erlang/mean';\nimport __var_8__ from '@stdlib/stats/base/dists/erlang/mode';\nimport __var_9__ from '@stdlib/stats/base/dists/erlang/skewness';\nimport __var_10__ from '@stdlib/stats/base/dists/erlang/stdev';\nimport __var_11__ from '@stdlib/stats/base/dists/erlang/variance';\nimport __var_12__ from '@stdlib/stats/base/dists/erlang/cdf';\nimport __var_13__ from '@stdlib/stats/base/dists/erlang/logpdf';\nimport __var_14__ from '@stdlib/stats/base/dists/erlang/mgf';\nimport __var_15__ from '@stdlib/stats/base/dists/erlang/pdf';\nimport __var_16__ from '@stdlib/stats/base/dists/erlang/quantile';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\nvar defineProperty = __var_0__;\nvar setReadOnly = __var_1__;\nvar setReadOnlyAccessor = __var_2__;\nvar isPositiveInteger = __var_3__.isPrimitive;\nvar isPositive = __var_4__.isPrimitive;\nvar entropy = __var_5__;\nvar kurtosis = __var_6__;\nvar mean = __var_7__;\nvar mode = __var_8__;\nvar skewness = __var_9__;\nvar stdev = __var_10__;\nvar variance = __var_11__;\nvar cdf = __var_12__;\nvar logpdf = __var_13__;\nvar mgf = __var_14__;\nvar pdf = __var_15__;\nvar quantile = __var_16__;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction erlangCDF( x ) {\n\treturn cdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction erlangLogPDF( x ) {\n\treturn logpdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction erlangMGF( t ) {\n\treturn mgf( t, this.k, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction erlangPDF( x ) {\n\treturn pdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction erlangQuantile( p ) {\n\treturn quantile( p, this.k, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Erlang distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [k=1.0] - shape parameter\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Erlang} distribution instance\n*\n* @example\n* var erlang = new Erlang( 1.0, 1.0 );\n*\n* var y = erlang.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = erlang.mode;\n* // returns 0.0\n*/\nfunction Erlang() {\n\tvar lambda;\n\tvar k;\n\tif ( !(this instanceof Erlang) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Erlang();\n\t\t}\n\t\treturn new Erlang( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( k ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Shape parameter `k` must be a positive integer. Value: `' + k + '`' );\n\t\t}\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Erlang distribution differential entropy.\n*\n* @name entropy\n* @memberof Erlang.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'entropy', function get() {\n\treturn entropy( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Erlang.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution expected value.\n*\n* @name mean\n* @memberof Erlang.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mean', function get() {\n\treturn mean( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution mode.\n*\n* @name mode\n* @memberof Erlang.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mode', function get() {\n\treturn mode( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution skewness.\n*\n* @name skewness\n* @memberof Erlang.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'skewness', function get() {\n\treturn skewness( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution standard deviation.\n*\n* @name stdev\n* @memberof Erlang.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'stdev', function get() {\n\treturn stdev( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution variance.\n*\n* @name variance\n* @memberof Erlang.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'variance', function get() {\n\treturn variance( this.k, this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Erlang.prototype, 'cdf', erlangCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.logpdf( 2.0 );\n* // returns ~-4.534\n*/\nsetReadOnly( Erlang.prototype, 'logpdf', erlangLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Erlang.prototype, 'mgf', erlangMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.pdf( 2.0 );\n* // returns ~0.011\n*/\nsetReadOnly( Erlang.prototype, 'pdf', erlangPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Erlang.prototype, 'quantile', erlangQuantile );\n\n\n// EXPORTS //\nexport default Erlang;\n","import __var_0__ from './ctor.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution constructor.\n*\n* @module @stdlib/stats/base/dists/erlang/ctor\n*\n* @example\n* var Erlang = require( '@stdlib/stats/base/dists/erlang/ctor' );\n*\n* var erlang = new Erlang( 1, 1.0 );\n*\n* var y = erlang.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = erlang.mode;\n* // returns 0.0\n*/\n\n// MODULES //\nvar ctor = __var_0__;\n\n\n// EXPORTS //\nexport default ctor;\n"]}