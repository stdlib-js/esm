{"version":3,"sources":["@stdlib/stats/base/dstdevwd/lib/dstdevwd.js","@stdlib/stats/base/dstdevwd/lib/ndarray.js","@stdlib/stats/base/dstdevwd/lib/index.js"],"names":["dvariancewd","__var_0__","sqrt","__var_1__","dstdevwd","N","correction","x","stride","ndarray","offset","setReadOnly","__var_2__"],"mappings":"yJAuBA,IAAIA,EAAcC,EACdC,EAAOC,EA4BX,SAASC,EAAUC,EAAGC,EAAYC,EAAGC,GACpC,OAAON,EAAMF,EAAaK,EAAGC,EAAYC,EAAGC,IC9B7C,IAAIR,EAAcC,EAAUQ,QACxBP,EAAOC,EA8BX,SAASC,EAAUC,EAAGC,EAAYC,EAAGC,EAAQE,GAC5C,OAAOR,EAAMF,EAAaK,EAAGC,EAAYC,EAAGC,EAAQE,IC/BrD,IAAIC,EAAcV,EACdG,EAAWD,EACXM,EAAUG,EAKdD,EAAaP,EAAU,UAAWK","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dvariancewd';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dvariancewd = __var_0__;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a double-precision floating-point strided array using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} standard deviation\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dstdevwd( N, 1, x, 1 );\n* // returns ~2.0817\n*/\nfunction dstdevwd( N, correction, x, stride ) {\n\treturn sqrt( dvariancewd( N, correction, x, stride ) );\n}\n\n\n// EXPORTS //\nexport default dstdevwd;\n","import __var_0__ from '@stdlib/stats/base/dvariancewd';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dvariancewd = __var_0__.ndarray;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a double-precision floating-point strided array using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} standard deviation\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dstdevwd( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\nfunction dstdevwd( N, correction, x, stride, offset ) {\n\treturn sqrt( dvariancewd( N, correction, x, stride, offset ) );\n}\n\n\n// EXPORTS //\nexport default dstdevwd;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dstdevwd.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dstdevwd = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dstdevwd, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dstdevwd;\n"]}