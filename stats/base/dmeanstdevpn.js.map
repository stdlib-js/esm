{"version":3,"sources":["@stdlib/stats/base/dmeanstdevpn/lib/dmeanstdevpn.js","@stdlib/stats/base/dmeanstdevpn/lib/ndarray.js","@stdlib/stats/base/dmeanstdevpn/lib/index.js"],"names":["dmeanvarpn","__var_0__","sqrt","__var_1__","dmeanstdevpn","N","correction","x","strideX","out","strideOut","io","ndarray","offsetX","offsetOut","setReadOnly","__var_2__"],"mappings":"wJAuBA,IAAIA,EAAaC,EACbC,EAAOC,EAyBX,SAASC,EAAcC,EAAGC,EAAYC,EAAGC,EAASC,EAAKC,GACtD,IAAIC,EASJ,OAPAX,EAAYK,EAAGC,EAAYC,EAAGC,EAASC,EAAKC,GAM5CD,EAJCE,EADID,EAAY,EACX,EAEAA,GAEMR,EAAMO,EAAKE,IAChBF,ECpCR,IAAIT,EAAaC,EAAUW,QACvBV,EAAOC,EA8BX,SAASC,EAAcC,EAAGC,EAAYC,EAAGC,EAASK,EAASJ,EAAKC,EAAWI,GAC1E,IAAIH,EAAKG,EAAYJ,EAGrB,OAFAV,EAAYK,EAAGC,EAAYC,EAAGC,EAASK,EAASJ,EAAKC,EAAWI,GAChEL,EAAKE,GAAOT,EAAMO,EAAKE,IAChBF,EClCR,IAAIM,EAAcd,EACdG,EAAeD,EACfS,EAAUI,EAKdD,EAAaX,EAAc,UAAWQ","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dmeanvarpn';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmeanvarpn = __var_0__;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the mean and standard deviation of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanstdevpn( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~2.0817 ]\n*/\nfunction dmeanstdevpn( N, correction, x, strideX, out, strideOut ) {\n\tvar io;\n\n\tdmeanvarpn( N, correction, x, strideX, out, strideOut );\n\tif ( strideOut < 0 ) {\n\t\tio = 0;\n\t} else {\n\t\tio = strideOut;\n\t}\n\tout[ io ] = sqrt( out[ io ] );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dmeanstdevpn;\n","import __var_0__ from '@stdlib/stats/base/dmeanvarpn';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmeanvarpn = __var_0__.ndarray;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the mean and standard deviation of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanstdevpn( N, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 2.5 ]\n*/\nfunction dmeanstdevpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar io = offsetOut + strideOut;\n\tdmeanvarpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut );\n\tout[ io ] = sqrt( out[ io ] );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dmeanstdevpn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dmeanstdevpn.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dmeanstdevpn = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dmeanstdevpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dmeanstdevpn;\n"]}