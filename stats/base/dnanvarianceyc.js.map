{"version":3,"sources":["@stdlib/stats/base/dnanvarianceyc/lib/dnanvarianceyc.js","@stdlib/stats/base/dnanvarianceyc/lib/ndarray.js","@stdlib/stats/base/dnanvarianceyc/lib/index.js"],"names":["dnanvarianceyc","N","correction","x","stride","sum","ix","nc","S","v","d","n","i","NaN","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAiDA,SAASA,EAAgBC,EAAGC,EAAYC,EAAGC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAER,GAAW,IAANZ,GAAsB,IAAXG,EAEf,OADAK,EAAIN,EAAG,KACIM,GAAKR,EAAEC,EAAa,EACvB,EAEDW,IAQR,IALCP,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAGAQ,EAAI,EAAGA,EAAIX,IAChBQ,EAAIN,EAAGG,KACIG,EAFQG,IAKnBN,GAAMF,EAEP,GAAKQ,IAAMX,EACV,OAAOY,IAOR,IALAP,GAAMF,EACNC,EAAMI,EACND,EAAI,EACJI,GAAK,EACLD,EAAI,EACKC,EAAIX,EAAGW,KACfH,EAAIN,EAAGG,KACIG,IAIVD,GAAM,IAHNG,GAAK,IAGSA,EAAE,KADhBD,EAAKC,EAAEF,GADPJ,GAAOI,IAEoBC,GAE5BJ,GAAMF,EAGP,OADAG,EAAKI,EAAIT,IACE,EACHW,IAEDL,EAAID,ECrDZ,SAASP,EAAgBC,EAAGC,EAAYC,EAAGC,EAAQU,GAClD,IAAIT,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAER,GAAW,IAANZ,GAAsB,IAAXG,EAEf,OADAK,EAAIN,EAAGW,KACIL,GAAKR,EAAEC,EAAa,EACvB,EAEDW,IAKR,IAHAP,EAAKQ,EAGCF,EAAI,EAAGA,EAAIX,IAChBQ,EAAIN,EAAGG,KACIG,EAFQG,IAKnBN,GAAMF,EAEP,GAAKQ,IAAMX,EACV,OAAOY,IAOR,IALAP,GAAMF,EACNC,EAAMI,EACND,EAAI,EACJI,GAAK,EACLD,EAAI,EACKC,EAAIX,EAAGW,KACfH,EAAIN,EAAGG,KACIG,IAIVD,GAAM,IAHNG,GAAK,IAGSA,EAAE,KADhBD,EAAKC,EAAEF,GADPJ,GAAOI,IAEoBC,GAE5BJ,GAAMF,EAGP,OADAG,EAAKI,EAAIT,IACE,EACHW,IAEDL,EAAID,EC/EZ,IAAIQ,EAAcC,EACdhB,EAAiBiB,EACjBC,EAAUC,EAKdJ,EAAaf,EAAgB,UAAWkB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanvarianceyc( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dnanvarianceyc( N, correction, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\nexport default dnanvarianceyc;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanvarianceyc( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dnanvarianceyc( N, correction, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\nexport default dnanvarianceyc;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dnanvarianceyc.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dnanvarianceyc = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dnanvarianceyc, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dnanvarianceyc;\n"]}