{"version":3,"sources":["@stdlib/stats/base/nanvariancepn/lib/nansumpw.js","@stdlib/stats/base/nanvariancepn/lib/nanvariancepn.js","@stdlib/stats/base/nanvariancepn/lib/ndarray.js","@stdlib/stats/base/nanvariancepn/lib/index.js"],"names":["floor","__var_0__","BLOCKSIZE","nansumpw","N","out","x","stride","offset","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","v","i","WORKSPACE","nanvariancepn","correction","mu","M2","nc","d","NaN","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var out = [ 0.0, 0 ];\n* var v = nansumpw( N, out, x, 2, 1 );\n* // returns [ 5.0, 4 ]\n*/\nfunction nansumpw( N, out, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn nansumpw( n, out, x, stride, ix ) + nansumpw( N-n, out, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default nansumpw;\n","import __var_0__ from './nansumpw.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar nansumpw = __var_0__;\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancepn( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvariancepn( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Compute an estimate for the mean...\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tnansumpw( N, WORKSPACE, x, stride, ix );\n\tn = WORKSPACE[ 1 ];\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = WORKSPACE[ 0 ] / n;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\nexport default nanvariancepn;\n","import __var_0__ from './nansumpw.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar nansumpw = __var_0__;\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanvariancepn( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancepn( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Compute an estimate for the mean...\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tnansumpw( N, WORKSPACE, x, stride, offset );\n\tn = WORKSPACE[ 1 ];\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = WORKSPACE[ 0 ] / n;\n\n\t// Compute the variance...\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\nexport default nanvariancepn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanvariancepn.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanvariancepn = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanvariancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanvariancepn;\n"]}