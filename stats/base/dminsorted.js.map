{"version":3,"sources":["@stdlib/stats/base/dminsorted/lib/dminsorted.js","@stdlib/stats/base/dminsorted/lib/ndarray.js","@stdlib/stats/base/dminsorted/lib/index.js"],"names":["isnan","__var_0__","isNegativeZero","__var_1__","dminsorted","N","x","stride","v1","v2","NaN","offset","setReadOnly","ndarray","__var_2__"],"mappings":"sLAuBA,IAAIA,EAAQC,EACRC,EAAiBC,EAsBrB,SAASC,EAAYC,EAAGC,EAAGC,GAC1B,IAAIC,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAG,IAENC,EAAS,GACbC,EAAKF,GAAI,EAAED,GAAKE,GAChBE,EAAKH,EAAG,KAERE,EAAKF,EAAG,GACRG,EAAKH,GAAID,EAAE,GAAKE,IAEZP,EAAOQ,IAAQR,EAAOS,GACnBC,IAEHF,IAAOC,EACNP,EAAgBM,IAAQN,EAAgBO,IACpC,EAEFD,EAEHA,EAAKC,EACFD,EAEDC,GCpDR,IAAIT,EAAQC,EACRC,EAAiBC,EAwBrB,SAASC,EAAYC,EAAGC,EAAGC,EAAQI,GAClC,IAAIH,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAG,IAEXE,EAAKF,EAAGK,GACRF,EAAKH,EAAGK,GAAWN,EAAE,GAAGE,GACnBP,EAAOQ,IAAQR,EAAOS,GACnBC,IAEHF,IAAOC,EACNP,EAAgBM,IAAQN,EAAgBO,IACpC,EAEFD,EAEHA,EAAKC,EACFD,EAEDC,GChDR,IAAIG,EAAcX,EACdG,EAAaD,EACbU,EAAUC,EAKdF,EAAaR,EAAY,UAAWS","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} stride - stride length\n* @returns {number} minimum value\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var N = x.length;\n*\n* var v = dminsorted( N, x, 1 );\n* // returns 1.0\n*/\nfunction dminsorted( N, x, stride ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tv1 = x[ (1-N) * stride ];\n\t\tv2 = x[ 0 ];\n\t} else {\n\t\tv1 = x[ 0 ];\n\t\tv2 = x[ (N-1) * stride ];\n\t}\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isNegativeZero( v1 ) || isNegativeZero( v2 ) ) {\n\t\t\treturn -0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 < v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\nexport default dminsorted;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} minimum value\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dminsorted( N, x, 2, 1 );\n* // returns -3.0\n*/\nfunction dminsorted( N, x, stride, offset ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offset ];\n\tv2 = x[ offset + ((N-1)*stride) ];\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isNegativeZero( v1 ) || isNegativeZero( v2 ) ) {\n\t\t\treturn -0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 < v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\nexport default dminsorted;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dminsorted.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dminsorted = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dminsorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dminsorted;\n"]}