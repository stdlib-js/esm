{"version":3,"sources":["@stdlib/stats/base/dnanmskmin/lib/dnanmskmin.js","@stdlib/stats/base/dnanmskmin/lib/ndarray.js","@stdlib/stats/base/dnanmskmin/lib/index.js"],"names":["isnan","__var_0__","isNegativeZero","__var_1__","dnanmskmin","N","x","strideX","mask","strideMask","min","ix","im","v","i","NaN","offsetX","offsetMask","setReadOnly","ndarray","__var_2__"],"mappings":"sLAuBA,IAAIA,EAAQC,EACRC,EAAiBC,EAyBrB,SAASC,EAAYC,EAAGC,EAAGC,EAASC,EAAMC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAYR,IATCJ,EADIJ,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLK,EADIH,EAAa,GACX,EAAEJ,GAAKI,EAER,EAEAK,EAAI,EAAGA,EAAIT,KAChBQ,EAAIP,EAAGK,KACIE,GAAoB,IAAfL,EAAMI,IAFHE,IAKnBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,OAAOU,IAGR,GAAKf,EADLU,EAAMG,GAEL,OAAOH,EAGR,IADAI,GAAK,EACIA,EAAIT,EAAGS,IACfH,GAAMJ,EAEDC,EADLI,GAAMH,KAINI,EAAIP,EAAGK,GACFX,EAAOa,KAGPA,EAAIH,GAASG,IAAMH,GAAOR,EAAgBW,MAC9CH,EAAMG,IAGR,OAAOH,EC5ER,IAAIV,EAAQC,EACRC,EAAiBC,EA6BrB,SAASC,EAAYC,EAAGC,EAAGC,EAASS,EAASR,EAAMC,EAAYQ,GAC9D,IAAIP,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAIR,IAFAJ,EAAKK,EACLJ,EAAKK,EACCH,EAAI,EAAGA,EAAIT,KAChBQ,EAAIP,EAAGK,KACIE,GAAoB,IAAfL,EAAMI,IAFHE,IAKnBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,OAAOU,IAGR,GAAKf,EADLU,EAAMG,GAEL,OAAOH,EAGR,IADAI,GAAK,EACIA,EAAIT,EAAGS,IACfH,GAAMJ,EAEDC,EADLI,GAAMH,KAINI,EAAIP,EAAGK,GACFX,EAAOa,KAGPA,EAAIH,GAASG,IAAMH,GAAOR,EAAgBW,MAC9CH,EAAMG,IAGR,OAAOH,ECvER,IAAIQ,EAAcjB,EACdG,EAAaD,EACbgB,EAAUC,EAKdF,EAAad,EAAY,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} minimum value\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, -4.0, 2.0, NaN ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n*\n* var v = dnanmskmin( x.length, x, 1, mask, 1 );\n* // returns -2.0\n*/\nfunction dnanmskmin( N, x, strideX, mask, strideMask ) {\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tif ( isnan( min ) ) {\n\t\treturn min;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default dnanmskmin;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} minimum value\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, -5.0, -6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmskmin( N, x, 2, 1, mask, 2, 1 );\n* // returns -2.0\n*/\nfunction dnanmskmin( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tif ( isnan( min ) ) {\n\t\treturn min;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default dnanmskmin;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dnanmskmin.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dnanmskmin = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dnanmskmin, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dnanmskmin;\n"]}