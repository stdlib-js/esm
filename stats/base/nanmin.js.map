{"version":3,"sources":["@stdlib/stats/base/nanmin/lib/nanmin.js","@stdlib/stats/base/nanmin/lib/ndarray.js","@stdlib/stats/base/nanmin/lib/main.js","@stdlib/stats/base/nanmin/lib/index.js"],"names":["isnan","__var_0__","isNegativeZero","__var_1__","nanmin","N","x","stride","min","ix","v","i","NaN","offset","setReadOnly","ndarray","__var_2__"],"mappings":"sLAuBA,IAAIA,EAAQC,EACRC,EAAiBC,EAoBrB,SAASC,EAAQC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAG,GAOX,IAJCG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAEAI,EAAI,EAAGA,EAAIN,IAChBK,EAAIJ,EAAGG,KACIC,EAFQC,IAKnBF,GAAMF,EAEP,GAAKI,IAAMN,EACV,OAAOO,IAIR,IAFAJ,EAAME,EACNC,GAAK,EACIA,EAAIN,EAAGM,IAEfD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,KAGPA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,EC5DR,IAAIR,EAAQC,EACRC,EAAiBC,EAuBrB,SAASC,EAAQC,EAAGC,EAAGC,EAAQM,GAC9B,IAAIL,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAGO,GAGX,IADAJ,EAAKI,EACCF,EAAI,EAAGA,EAAIN,IAChBK,EAAIJ,EAAGG,KACIC,EAFQC,IAKnBF,GAAMF,EAEP,GAAKI,IAAMN,EACV,OAAOO,IAIR,IAFAJ,EAAME,EACNC,GAAK,EACIA,EAAIN,EAAGM,IAEfD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,KAGPA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,EC1DR,IAAIM,EAAcb,EACdG,EAASD,EACTY,EAAUC,EAKdF,EAAaV,EAAQ,UAAWW,GCgB7B,IAACX,EAASH","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} minimum value\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmin( N, x, 1 );\n* // returns -2.0\n*/\nfunction nanmin( N, x, stride ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default nanmin;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} minimum value\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmin( N, x, 2, 1 );\n* // returns -2.0\n*/\nfunction nanmin( N, x, stride, offset ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default nanmin;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanmin.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanmin = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanmin, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanmin;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a strided array, ignoring `NaN` values.\n*\n* @module @stdlib/stats/base/nanmin\n*\n* @example\n* var nanmin = require( '@stdlib/stats/base/nanmin' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmin( N, x, 1 );\n* // returns -2.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var nanmin = require( '@stdlib/stats/base/nanmin' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmin.ndarray( N, x, 2, 1 );\n* // returns -2.0\n*/\n\n// MODULES //\nvar nanmin = __var_0__;\n\n\n// EXPORTS //\nexport default nanmin;\n"]}