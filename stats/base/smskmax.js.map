{"version":3,"sources":["@stdlib/stats/base/smskmax/lib/smskmax.js","@stdlib/stats/base/smskmax/lib/ndarray.js","@stdlib/stats/base/smskmax/lib/index.js"],"names":["isnanf","__var_0__","isPositiveZerof","__var_1__","smskmax","N","x","strideX","mask","strideMask","max","ix","im","v","i","NaN","offsetX","offsetMask","setReadOnly","ndarray","__var_2__"],"mappings":"wLAuBA,IAAIA,EAASC,EACTC,EAAkBC,EAyBtB,SAASC,EAASC,EAAGC,EAAGC,EAASC,EAAMC,GACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAYR,IATCJ,EADIJ,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLK,EADIH,EAAa,GACX,EAAEJ,GAAKI,EAER,EAEAK,EAAI,EAAGA,EAAIT,GACI,IAAfG,EAAMI,GADQE,IAInBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,OAAOU,IAGR,GADAL,EAAMJ,EAAGK,GACJX,EAAQU,GACZ,OAAOA,EAGR,IADAI,GAAK,EACIA,EAAIT,EAAGS,IAGf,GAFAH,GAAMJ,GAEDC,EADLI,GAAMH,GACN,CAIA,GADAI,EAAIP,EAAGK,GACFX,EAAQa,GACZ,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOR,EAAiBW,MAC/CH,EAAMG,GAGR,OAAOH,EC3ER,IAAIV,EAASC,EACTC,EAAkBC,EA6BtB,SAASC,EAASC,EAAGC,EAAGC,EAASS,EAASR,EAAMC,EAAYQ,GAC3D,IAAIP,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAIR,IAFAJ,EAAKK,EACLJ,EAAKK,EACCH,EAAI,EAAGA,EAAIT,GACI,IAAfG,EAAMI,GADQE,IAInBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,OAAOU,IAGR,GADAL,EAAMJ,EAAGK,GACJX,EAAQU,GACZ,OAAOA,EAGR,IADAI,GAAK,EACIA,EAAIT,EAAGS,IAGf,GAFAH,GAAMJ,GAEDC,EADLI,GAAMH,GACN,CAIA,GADAI,EAAIP,EAAGK,GACFX,EAAQa,GACZ,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOR,EAAiBW,MAC/CH,EAAMG,GAGR,OAAOH,ECtER,IAAIQ,EAAcjB,EACdG,EAAUD,EACVgB,EAAUC,EAKdF,EAAad,EAAS,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from '@stdlib/math/base/assert/is-positive-zerof';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar isPositiveZerof = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0 ] );\n*\n* var v = smskmax( x.length, x, 1, mask, 1 );\n* // returns 2.0\n*/\nfunction smskmax( N, x, strideX, mask, strideMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = x[ ix ];\n\tif ( isnanf( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\nexport default smskmax;\n","import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from '@stdlib/math/base/assert/is-positive-zerof';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar isPositiveZerof = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smskmax( N, x, 2, 1, mask, 2, 1 );\n* // returns 4.0\n*/\nfunction smskmax( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = x[ ix ];\n\tif ( isnanf( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\nexport default smskmax;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './smskmax.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar smskmax = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( smskmax, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default smskmax;\n"]}