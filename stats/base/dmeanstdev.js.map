{"version":3,"sources":["@stdlib/stats/base/dmeanstdev/lib/dmeanstdev.js","@stdlib/stats/base/dmeanstdev/lib/ndarray.js","@stdlib/stats/base/dmeanstdev/lib/index.js"],"names":["dmeanstdevpn","__var_0__","dmeanstdev","N","correction","x","strideX","out","strideOut","ndarray","offsetX","offsetOut","setReadOnly","__var_1__","__var_2__"],"mappings":"yGAsBA,IAAIA,EAAeC,EAyBnB,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAASC,EAAKC,GACpD,OAAOR,EAAcG,EAAGC,EAAYC,EAAGC,EAASC,EAAKC,GC1BtD,IAAIR,EAAeC,EAAUQ,QA8B7B,SAASP,EAAYC,EAAGC,EAAYC,EAAGC,EAASI,EAASH,EAAKC,EAAWG,GACxE,OAAOX,EAAcG,EAAGC,EAAYC,EAAGC,EAASI,EAASH,EAAKC,EAAWG,GC7B1E,IAAIC,EAAcX,EACdC,EAAaW,EACbJ,EAAUK,EAKdF,EAAaV,EAAY,UAAWO","sourcesContent":["import __var_0__ from '@stdlib/stats/base/dmeanstdevpn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmeanstdevpn = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the mean and standard deviation of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanstdev( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~2.0817 ]\n*/\nfunction dmeanstdev( N, correction, x, strideX, out, strideOut ) {\n\treturn dmeanstdevpn( N, correction, x, strideX, out, strideOut );\n}\n\n\n// EXPORTS //\nexport default dmeanstdev;\n","import __var_0__ from '@stdlib/stats/base/dmeanstdevpn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dmeanstdevpn = __var_0__.ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the mean and standard deviation of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanstdev( N, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 2.5 ]\n*/\nfunction dmeanstdev( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\treturn dmeanstdevpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default dmeanstdev;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dmeanstdev.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dmeanstdev = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dmeanstdev, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dmeanstdev;\n"]}