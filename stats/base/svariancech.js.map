{"version":3,"sources":["@stdlib/stats/base/svariancech/lib/svariancech.js","@stdlib/stats/base/svariancech/lib/ndarray.js","@stdlib/stats/base/svariancech/lib/index.js"],"names":["float64ToFloat32","__var_0__","svariancech","N","correction","x","stride","mu","ix","M2","M","d","n","i","NaN","offset","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"iIAsBA,IAAIA,EAAmBC,EAkCvB,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,OAAOE,IAER,GAAW,IAANX,GAAsB,IAAXG,EACf,OAAO,EAcR,IANAC,EAAKF,EALJG,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,GAINE,GAAMF,EAGNG,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIX,EAAkBK,EAAGG,GAAOD,GAChCE,EAAKT,EAAkBS,EAAKT,EAAkBW,EAAEA,IAChDD,EAAIV,EAAkBU,EAAIC,GAC1BH,GAAMF,EAEP,OAAON,EAAkBA,EAAiBS,EAAGG,GAAKZ,EAAkBA,EAAiBU,EAAEP,GAAGH,EAAiBU,EAAEE,KCpE9G,IAAIZ,EAAmBC,EAoCvB,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAAQS,GAC/C,IAAIR,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,OAAOE,IAER,GAAW,IAANX,GAAsB,IAAXG,EACf,OAAO,EAWR,IANAC,EAAKF,EAHLG,EAAKO,GAILP,GAAMF,EAGNG,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIX,EAAkBK,EAAGG,GAAOD,GAChCE,EAAKT,EAAkBS,EAAKT,EAAkBW,EAAEA,IAChDD,EAAIV,EAAkBU,EAAIC,GAC1BH,GAAMF,EAEP,OAAON,EAAkBA,EAAiBS,EAAGG,GAAKZ,EAAkBA,EAAiBU,EAAEP,GAAGH,EAAiBU,EAAEE,KCjE9G,IAAII,EAAcf,EACdC,EAAce,EACdC,EAAUC,EAKdH,EAAad,EAAa,UAAWgB","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = svariancech( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svariancech( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Use an estimate for the mean:\n\tmu = x[ ix ];\n\tix += stride;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 1; i < N; i++ ) {\n\t\td = float64ToFloat32( x[ ix ] - mu );\n\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\tM = float64ToFloat32( M + d );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/n) - float64ToFloat32( float64ToFloat32(M/N)*float64ToFloat32(M/n) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default svariancech;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = svariancech( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svariancech( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Use an estimate for the mean:\n\tmu = x[ ix ];\n\tix += stride;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 1; i < N; i++ ) {\n\t\td = float64ToFloat32( x[ ix ] - mu );\n\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\tM = float64ToFloat32( M + d );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/n) - float64ToFloat32( float64ToFloat32(M/N)*float64ToFloat32(M/n) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default svariancech;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './svariancech.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar svariancech = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( svariancech, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default svariancech;\n"]}