{"version":3,"sources":["@stdlib/stats/base/dvariancetk/lib/dvariancetk.js","@stdlib/stats/base/dvariancetk/lib/ndarray.js","@stdlib/stats/base/dvariancetk/lib/index.js"],"names":["dvariancetk","N","correction","x","stride","S2","ix","S","v","n","i","NaN","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAyCA,SAASA,EAAaC,EAAGC,EAAYC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIR,EAAIC,EACHD,GAAK,GAAKQ,GAAK,EACnB,OAAOE,IAER,GAAW,IAANV,GAAsB,IAAXG,EACf,OAAO,EASR,IANCE,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAENC,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIT,EAAGS,IAEnBL,IADAG,EAAIL,EAAGG,IACGE,EACVD,GAAKC,EACLF,GAAMF,EAEP,OAAQC,EAAOE,EAAEN,EAAGM,GAAME,EC1B3B,SAAST,EAAaC,EAAGC,EAAYC,EAAGC,EAAQQ,GAC/C,IAAIP,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIR,EAAIC,EACHD,GAAK,GAAKQ,GAAK,EACnB,OAAOE,IAER,GAAW,IAANV,GAAsB,IAAXG,EACf,OAAO,EAKR,IAHAE,EAAKM,EACLP,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIT,EAAGS,IAEnBL,IADAG,EAAIL,EAAGG,IACGE,EACVD,GAAKC,EACLF,GAAMF,EAEP,OAAQC,EAAOE,EAAEN,EAAGM,GAAME,EC3C3B,IAAII,EAAcC,EACdd,EAAce,EACdC,EAAUC,EAKdJ,EAAab,EAAa,UAAWgB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dvariancetk( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dvariancetk( N, correction, x, stride ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 += v * v;\n\t\tS += v;\n\t\tix += stride;\n\t}\n\treturn (S2 - ((S/N)*S)) / n;\n}\n\n\n// EXPORTS //\nexport default dvariancetk;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dvariancetk( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dvariancetk( N, correction, x, stride, offset ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 += v * v;\n\t\tS += v;\n\t\tix += stride;\n\t}\n\treturn (S2 - ((S/N)*S)) / n;\n}\n\n\n// EXPORTS //\nexport default dvariancetk;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dvariancetk.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dvariancetk = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dvariancetk, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dvariancetk;\n"]}