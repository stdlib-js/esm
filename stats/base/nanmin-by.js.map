{"version":3,"sources":["@stdlib/stats/base/nanmin-by/lib/nanmin_by.js","@stdlib/stats/base/nanmin-by/lib/ndarray.js","@stdlib/stats/base/nanmin-by/lib/main.js","@stdlib/stats/base/nanmin-by/lib/index.js"],"names":["isnan","__var_0__","isNegativeZero","__var_1__","nanminBy","N","x","stride","clbk","thisArg","min","ix","v","i","NaN","call","offset","setReadOnly","ndarray","__var_2__"],"mappings":"sLAuBA,IAAIA,EAAQC,EACRC,EAAiBC,EAyBrB,SAASC,EAAUC,EAAGC,EAAGC,EAAQC,EAAMC,GACtC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,EACT,OAAOS,IAER,GAAW,IAANT,GAAsB,IAAXE,EAEf,YAAW,KADXK,EAAIJ,EAAKO,KAAMN,EAASH,EAAG,GAAK,EAAG,EAAGA,IAE9BQ,IAEDF,EAOR,IAJCD,EADIJ,EAAS,GACP,EAAEF,GAAKE,EAER,EAEAM,EAAI,EAAGA,EAAIR,KAChBK,EAAMF,EAAKO,KAAMN,EAASH,EAAGK,GAAME,EAAGF,EAAIL,KAC7BI,QAAe,IAARA,GAFDG,IAKnBF,GAAMJ,EAEP,GAAKM,IAAMR,EACV,OAAOS,IAGR,IADAD,GAAK,EACIA,EAAIR,EAAGQ,IACfF,GAAMJ,OAEK,KADXK,EAAIJ,EAAKO,KAAMN,EAASH,EAAGK,GAAME,EAAGF,EAAIL,KACnBN,EAAOY,KAGvBA,EAAIF,GAASE,IAAMF,GAAOR,EAAgBU,MAC9CF,EAAME,GAGR,OAAOF,ECpER,IAAIV,EAAQC,EACRC,EAAiBC,EA0BrB,SAASC,EAAUC,EAAGC,EAAGC,EAAQS,EAAQR,EAAMC,GAC9C,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,EACT,OAAOS,IAER,GAAW,IAANT,GAAsB,IAAXE,EAEf,YAAW,KADXK,EAAIJ,EAAKO,KAAMN,EAASH,EAAG,GAAK,EAAG,EAAGA,IAE9BQ,IAEDF,EAGR,IADAD,EAAKK,EACCH,EAAI,EAAGA,EAAIR,KAChBK,EAAMF,EAAKO,KAAMN,EAASH,EAAGK,GAAME,EAAGF,EAAIL,KAC7BI,QAAe,IAARA,GAFDG,IAKnBF,GAAMJ,EAEP,GAAKM,IAAMR,EACV,OAAOS,IAGR,IADAD,GAAK,EACIA,EAAIR,EAAGQ,IACfF,GAAMJ,OAEK,KADXK,EAAIJ,EAAKO,KAAMN,EAASH,EAAGK,GAAME,EAAGF,EAAIL,KACnBN,EAAOY,KAGvBA,EAAIF,GAASE,IAAMF,GAAOR,EAAgBU,MAC9CF,EAAME,GAGR,OAAOF,EChER,IAAIO,EAAchB,EACdG,EAAWD,EACXe,EAAUC,EAKdF,EAAab,EAAU,UAAWc,GCqB/B,IAACd,EAAWH","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Calculates the minimum value of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} stride - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanminBy( x.length, x, 1, accessor );\n* // returns -10.0\n*/\nfunction nanminBy( N, x, stride, clbk, thisArg ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = clbk.call( thisArg, x[ 0 ], 0, 0, x );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default nanminBy;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/assert/is-negative-zero';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar isNegativeZero = __var_1__;\n\n\n// MAIN //\n\n/**\n* Calculates the minimum value of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanminBy( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\nfunction nanminBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = clbk.call( thisArg, x[ 0 ], 0, 0, x );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\nexport default nanminBy;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanmin_by.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanminBy = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanminBy, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanminBy;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate the minimum value of a strided array via a callback function and ignoring `NaN` values.\n*\n* @module @stdlib/stats/base/nanmin-by\n*\n* @example\n* var nanminBy = require( '@stdlib/stats/base/nanmin-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanminBy( x.length, x, 1, accessor );\n* // returns -10.0\n*\n* @example\n* var nanminBy = require( '@stdlib/stats/base/nanmin-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanminBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\n\n// MODULES //\nvar nanminBy = __var_0__;\n\n\n// EXPORTS //\nexport default nanminBy;\n"]}