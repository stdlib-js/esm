{"version":3,"sources":["@stdlib/stats/base/nanrange/lib/nanrange.js","@stdlib/stats/base/nanrange/lib/ndarray.js","@stdlib/stats/base/nanrange/lib/main.js","@stdlib/stats/base/nanrange/lib/index.js"],"names":["isnan","__var_0__","nanrange","N","x","stride","max","min","ix","v","i","NaN","offset","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"0HAsBA,IAAIA,EAAQC,EAoBZ,SAASC,EAAUC,EAAGC,EAAGC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAKL,EAAOI,EAAG,IACPO,IAED,EAOR,IAJCH,EADIH,EAAS,GACP,EAAEF,GAAKE,EAER,EAEAK,EAAI,EAAGA,EAAIP,IAChBM,EAAIL,EAAGI,KACIC,EAFQC,IAKnBF,GAAMH,EAEP,GAAKK,IAAMP,EACV,OAAOQ,IAKR,IAFAL,EADAC,EAAME,EAENC,GAAK,EACIA,EAAIP,EAAGO,IAEfD,EAAIL,EADJI,GAAMH,GAEDL,EAAOS,KAGPA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,IAGR,OAAOH,EAAMC,EClEd,IAAIP,EAAQC,EAuBZ,SAASC,EAAUC,EAAGC,EAAGC,EAAQO,GAChC,IAAIN,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAKL,EAAOI,EAAGQ,IACPD,IAED,EAGR,IADAH,EAAKI,EACCF,EAAI,EAAGA,EAAIP,IAChBM,EAAIL,EAAGI,KACIC,EAFQC,IAKnBF,GAAMH,EAEP,GAAKK,IAAMP,EACV,OAAOQ,IAKR,IAFAL,EADAC,EAAME,EAENC,GAAK,EACIA,EAAIP,EAAGO,IAEfD,EAAIL,EADJI,GAAMH,GAEDL,EAAOS,KAGPA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,IAGR,OAAOH,EAAMC,EC/Dd,IAAIM,EAAcZ,EACdC,EAAWY,EACXC,EAAUC,EAKdH,EAAaX,EAAU,UAAWa,GCgB/B,IAACb,EAAWD","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanrange( N, x, 1 );\n* // returns 4.0\n*/\nfunction nanrange( N, x, stride ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\nexport default nanrange;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} range\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanrange( N, x, 2, 1 );\n* // returns 6.0\n*/\nfunction nanrange( N, x, stride, offset ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\nexport default nanrange;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanrange.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanrange = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanrange;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array, ignoring `NaN` values.\n*\n* @module @stdlib/stats/base/nanrange\n*\n* @example\n* var nanrange = require( '@stdlib/stats/base/nanrange' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanrange( N, x, 1 );\n* // returns 4.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var nanrange = require( '@stdlib/stats/base/nanrange' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanrange.ndarray( N, x, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\nvar nanrange = __var_0__;\n\n\n// EXPORTS //\nexport default nanrange;\n"]}