{"version":3,"sources":["@stdlib/stats/base/snanvariancewd/lib/snanvariancewd.js","@stdlib/stats/base/snanvariancewd/lib/ndarray.js","@stdlib/stats/base/snanvariancewd/lib/index.js"],"names":["float64ToFloat32","__var_0__","snanvariancewd","N","correction","x","stride","delta","mu","M2","ix","nc","v","n","i","NaN","offset","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"iIAsBA,IAAIA,EAAmBC,EA4BvB,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAER,GAAW,IAANZ,GAAsB,IAAXG,EAEf,OADAM,EAAIP,EAAG,KACIO,GAAKT,EAAEC,EAAa,EACvB,EAEDW,IAUR,IAPCL,EADIJ,EAAS,GACP,EAAEH,GAAKG,EAER,EAENG,EAAK,EACLD,EAAK,EACLK,EAAI,EACEC,EAAI,EAAGA,EAAIX,EAAGW,KACnBF,EAAIP,EAAGK,KACIE,IACVL,EAAQP,EAAkBY,EAAIJ,GAE9BA,EAAKR,EAAkBQ,EAAKR,EAAkBO,GAD9CM,GAAK,KAELJ,EAAKT,EAAkBS,EAAKT,EAAkBO,EAAMP,EAAkBY,EAAEJ,MAEzEE,GAAMJ,EAGP,OADAK,EAAKE,EAAIT,IACE,EACHW,IAEDf,EAAkBS,EAAKE,GCtE/B,IAAIX,EAAmBC,EA8BvB,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAAQU,GAClD,IAAIT,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAER,GAAW,IAANZ,GAAsB,IAAXG,EAEf,OADAM,EAAIP,EAAGW,KACIJ,GAAKT,EAAEC,EAAa,EACvB,EAEDW,IAMR,IAJAL,EAAKM,EACLP,EAAK,EACLD,EAAK,EACLK,EAAI,EACEC,EAAI,EAAGA,EAAIX,EAAGW,KACnBF,EAAIP,EAAGK,KACIE,IACVL,EAAQP,EAAkBY,EAAIJ,GAE9BA,EAAKR,EAAkBQ,EAAKR,EAAkBO,GAD9CM,GAAK,KAELJ,EAAKT,EAAkBS,EAAKT,EAAkBO,EAAMP,EAAkBY,EAAEJ,MAEzEE,GAAMJ,EAGP,OADAK,EAAKE,EAAIT,IACE,EACHW,IAEDf,EAAkBS,EAAKE,GClE/B,IAAIM,EAAchB,EACdC,EAAiBgB,EACjBC,EAAUC,EAKdH,EAAaf,EAAgB,UAAWiB","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snanvariancewd( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction snanvariancewd( N, correction, x, stride ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = float64ToFloat32( v - mu );\n\t\t\tn += 1;\n\t\t\tmu = float64ToFloat32( mu + float64ToFloat32( delta/n ) );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( delta*float64ToFloat32( v-mu ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( M2 / nc );\n}\n\n\n// EXPORTS //\nexport default snanvariancewd;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanvariancewd( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction snanvariancewd( N, correction, x, stride, offset ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = float64ToFloat32( v - mu );\n\t\t\tn += 1;\n\t\t\tmu = float64ToFloat32( mu + float64ToFloat32( delta/n ) );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( delta*float64ToFloat32( v-mu ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( M2 / nc );\n}\n\n\n// EXPORTS //\nexport default snanvariancewd;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './snanvariancewd.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar snanvariancewd = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( snanvariancewd, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default snanvariancewd;\n"]}