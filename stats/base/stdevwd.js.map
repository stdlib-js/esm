{"version":3,"sources":["@stdlib/stats/base/stdevwd/lib/stdevwd.js","@stdlib/stats/base/stdevwd/lib/ndarray.js","@stdlib/stats/base/stdevwd/lib/main.js","@stdlib/stats/base/stdevwd/lib/index.js"],"names":["variancewd","__var_0__","sqrt","__var_1__","stdevwd","N","correction","x","stride","ndarray","offset","setReadOnly","__var_2__"],"mappings":"wJAuBA,IAAIA,EAAaC,EACbC,EAAOC,EAyBX,SAASC,EAASC,EAAGC,EAAYC,EAAGC,GACnC,OAAON,EAAMF,EAAYK,EAAGC,EAAYC,EAAGC,IC3B5C,IAAIR,EAAaC,EAAUQ,QACvBP,EAAOC,EA6BX,SAASC,EAASC,EAAGC,EAAYC,EAAGC,EAAQE,GAC3C,OAAOR,EAAMF,EAAYK,EAAGC,EAAYC,EAAGC,EAAQE,IC9BpD,IAAIC,EAAcV,EACdG,EAAUD,EACVM,EAAUG,EAKdD,EAAaP,EAAS,UAAWK,GCe9B,IAACL,EAAUH","sourcesContent":["import __var_0__ from '@stdlib/stats/base/variancewd';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar variancewd = __var_0__;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} standard deviation\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = stdevwd( x.length, 1, x, 1 );\n* // returns ~2.0817\n*/\nfunction stdevwd( N, correction, x, stride ) {\n\treturn sqrt( variancewd( N, correction, x, stride ) );\n}\n\n\n// EXPORTS //\nexport default stdevwd;\n","import __var_0__ from '@stdlib/stats/base/variancewd';\nimport __var_1__ from '@stdlib/math/base/special/sqrt';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar variancewd = __var_0__.ndarray;\nvar sqrt = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} standard deviation\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = stdevwd( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\nfunction stdevwd( N, correction, x, stride, offset ) {\n\treturn sqrt( variancewd( N, correction, x, stride, offset ) );\n}\n\n\n// EXPORTS //\nexport default stdevwd;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './stdevwd.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar stdevwd = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( stdevwd, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default stdevwd;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the standard deviation of a strided array using Welford's algorithm.\n*\n* @module @stdlib/stats/base/stdevwd\n*\n* @example\n* var stdevwd = require( '@stdlib/stats/base/stdevwd' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = stdevwd( x.length, 1, x, 1 );\n* // returns ~2.0817\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var stdevwd = require( '@stdlib/stats/base/stdevwd' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = stdevwd.ndarray( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\n\n// MODULES //\nvar stdevwd = __var_0__;\n\n\n// EXPORTS //\nexport default stdevwd;\n"]}