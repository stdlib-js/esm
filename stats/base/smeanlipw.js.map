{"version":3,"sources":["@stdlib/stats/base/smeanlipw/lib/smeanlipw.js","@stdlib/stats/base/smeanlipw/lib/ndarray.js","@stdlib/stats/base/smeanlipw/lib/index.js"],"names":["float64ToFloat32","__var_0__","sapxsumpw","__var_1__","ndarray","smeanlipw","N","x","stride","ix","NaN","offset","setReadOnly","__var_2__"],"mappings":"mLAuBA,IAAIA,EAAmBC,EACnBC,EAAYC,EAAUC,QA0B1B,SAASC,EAAWC,EAAGC,EAAGC,GACzB,IAAIC,EAEJ,OAAKH,GAAK,EACFI,IAEG,IAANJ,GAAsB,IAAXE,EACRD,EAAG,GAOJP,EAAkBO,EAJxBE,EADID,EAAS,GACP,EAAEF,GAAKE,EAER,GAE6BR,EAAkBE,EAAWI,EAAE,GAAIC,EAAGE,GAAMF,EAAGC,EAAQC,EAAGD,GAAWF,ICzCzG,IAAIN,EAAmBC,EACnBC,EAAYC,EAAUC,QA4B1B,SAASC,EAAWC,EAAGC,EAAGC,EAAQG,GACjC,OAAKL,GAAK,EACFI,IAEG,IAANJ,GAAsB,IAAXE,EACRD,EAAGI,GAEJX,EAAkBO,EAAGI,GAAWX,EAAkBE,EAAWI,EAAE,GAAIC,EAAGI,GAAUJ,EAAGC,EAAQG,EAAOH,GAAWF,ICnCrH,IAAIM,EAAcX,EACdI,EAAYF,EACZC,EAAUS,EAKdD,EAAaP,EAAW,UAAWD","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/blas/ext/base/sapxsumpw';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar sapxsumpw = __var_1__.ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a one-pass trial mean algorithm with pairwise summation.\n*\n* ## References\n*\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smeanlipw( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction smeanlipw( N, x, stride ) {\n\tvar ix;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\treturn float64ToFloat32( x[ ix ] + float64ToFloat32( sapxsumpw( N-1, -x[ ix ], x, stride, ix+stride ) / N ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default smeanlipw;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\nimport __var_1__ from '@stdlib/blas/ext/base/sapxsumpw';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\nvar sapxsumpw = __var_1__.ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a one-pass trial mean algorithm with pairwise summation.\n*\n* ## References\n*\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smeanlipw( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smeanlipw( N, x, stride, offset ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\treturn float64ToFloat32( x[ offset ] + float64ToFloat32( sapxsumpw( N-1, -x[ offset ], x, stride, offset+stride ) / N ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default smeanlipw;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './smeanlipw.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar smeanlipw = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( smeanlipw, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default smeanlipw;\n"]}