{"version":3,"sources":["@stdlib/stats/base/svariancetk/lib/svariancetk.js","@stdlib/stats/base/svariancetk/lib/ndarray.js","@stdlib/stats/base/svariancetk/lib/index.js"],"names":["float64ToFloat32","__var_0__","svariancetk","N","correction","x","stride","S2","ix","S","v","n","i","NaN","offset","setReadOnly","__var_1__","ndarray","__var_2__"],"mappings":"iIAsBA,IAAIA,EAAmBC,EAuBvB,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIR,EAAIC,EACHD,GAAK,GAAKQ,GAAK,EACnB,OAAOE,IAER,GAAW,IAANV,GAAsB,IAAXG,EACf,OAAO,EASR,IANCE,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAENC,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIT,EAAGS,IACnBF,EAAIL,EAAGG,GACPD,EAAKP,EAAkBO,EAAKP,EAAkBU,EAAEA,IAChDD,EAAIT,EAAkBS,EAAEC,GACxBF,GAAMF,EAEP,OAAON,EAAkBA,EAAiBO,EAAKP,EAAiBA,EAAiBS,EAAEN,GAAGM,IAAME,GCnD7F,IAAIX,EAAmBC,EAyBvB,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAAQQ,GAC/C,IAAIP,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIR,EAAIC,EACHD,GAAK,GAAKQ,GAAK,EACnB,OAAOE,IAER,GAAW,IAANV,GAAsB,IAAXG,EACf,OAAO,EAKR,IAHAE,EAAKM,EACLP,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIT,EAAGS,IACnBF,EAAIL,EAAGG,GACPD,EAAKP,EAAkBO,EAAKP,EAAkBU,EAAEA,IAChDD,EAAIT,EAAkBS,EAAEC,GACxBF,GAAMF,EAEP,OAAON,EAAkBA,EAAiBO,EAAKP,EAAiBA,EAAiBS,EAAEN,GAAGM,IAAME,GC/C7F,IAAII,EAAcd,EACdC,EAAcc,EACdC,EAAUC,EAKdH,EAAab,EAAa,UAAWe","sourcesContent":["import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = svariancetk( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svariancetk( N, correction, x, stride ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 = float64ToFloat32( S2 + float64ToFloat32( v*v ) );\n\t\tS = float64ToFloat32( S+v );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(S2 - float64ToFloat32(float64ToFloat32(S/N)*S)) / n ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default svariancetk;\n","import __var_0__ from '@stdlib/number/float64/base/to-float32';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar float64ToFloat32 = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = svariancetk( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svariancetk( N, correction, x, stride, offset ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 = float64ToFloat32( S2 + float64ToFloat32( v*v ) );\n\t\tS = float64ToFloat32( S+v );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(S2 - float64ToFloat32(float64ToFloat32(S/N)*S)) / n ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default svariancetk;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './svariancetk.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar svariancetk = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( svariancetk, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default svariancetk;\n"]}