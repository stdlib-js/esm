{"version":3,"sources":["@stdlib/stats/base/nanmeanpn/lib/nanmeanpn.js","@stdlib/stats/base/nanmeanpn/lib/ndarray.js","@stdlib/stats/base/nanmeanpn/lib/main.js","@stdlib/stats/base/nanmeanpn/lib/index.js"],"names":["nanmeanpn","N","x","stride","ix","v","s","t","n","i","o","NaN","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEA+CA,SAASA,EAAWC,EAAGC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAER,GAAW,IAANV,GAAsB,IAAXE,EACf,OAAOD,EAAG,GAYX,IALAQ,EAJCN,EADID,EAAS,GACP,EAAEF,GAAKE,EAER,EAKNG,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIR,EAAGQ,KACnBJ,EAAIH,EAAGE,KACIC,IACVG,GAAK,EACLF,GAAKD,GAEND,GAAMD,EAEP,GAAW,IAANK,EACJ,OAAOG,IAOR,IALAL,GAAKE,EAGLD,EAAI,EACJH,EAAKM,EACCD,EAAI,EAAGA,EAAIR,EAAGQ,KACnBJ,EAAIH,EAAGE,KACIC,IACVE,GAAKF,EAAIC,GAEVF,GAAMD,EAEP,OAAOG,EAAKC,EAAEC,EC7Cf,SAASR,EAAWC,EAAGC,EAAGC,EAAQS,GACjC,IAAIR,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,EACT,OAAOU,IAER,GAAW,IAANV,GAAsB,IAAXE,EACf,OAAOD,EAAGU,GAOX,IALAR,EAAKQ,EAGLN,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIR,EAAGQ,KACnBJ,EAAIH,EAAGE,KACIC,IACVG,GAAK,EACLF,GAAKD,GAEND,GAAMD,EAEP,GAAW,IAANK,EACJ,OAAOG,IAOR,IALAL,GAAKE,EAGLJ,EAAKQ,EACLL,EAAI,EACEE,EAAI,EAAGA,EAAIR,EAAGQ,KACnBJ,EAAIH,EAAGE,KACIC,IACVE,GAAKF,EAAIC,GAEVF,GAAMD,EAEP,OAAOG,EAAKC,EAAEC,ECpEf,IAAIK,EAAcC,EACdd,EAAYe,EACZC,EAAUC,EAKdJ,EAAab,EAAW,UAAWgB,GCgBhC,IAAChB,EAAYc","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanpn( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction nanmeanpn( N, x, stride ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\to = ix;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tt = 0.0;\n\tix = o;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\nexport default nanmeanpn;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanpn( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction nanmeanpn( N, x, stride, offset ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tix = offset;\n\tt = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\nexport default nanmeanpn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanmeanpn.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanmeanpn = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanmeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanmeanpn;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* @module @stdlib/stats/base/nanmeanpn\n*\n* @example\n* var nanmeanpn = require( '@stdlib/stats/base/nanmeanpn' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanpn( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var nanmeanpn = require( '@stdlib/stats/base/nanmeanpn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanpn.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\nvar nanmeanpn = __var_0__;\n\n\n// EXPORTS //\nexport default nanmeanpn;\n"]}