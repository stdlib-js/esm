{"version":3,"sources":["@stdlib/stats/base/smaxabs/lib/smaxabs.js","@stdlib/stats/base/smaxabs/lib/ndarray.js","@stdlib/stats/base/smaxabs/lib/index.js"],"names":["isnanf","__var_0__","abs","__var_1__","smaxabs","N","x","stride","max","ix","v","i","NaN","offset","setReadOnly","ndarray","__var_2__"],"mappings":"2KAuBA,IAAIA,EAASC,EACTC,EAAMC,EAsBV,SAASC,EAASC,EAAGC,EAAGC,GACvB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOL,EAAKI,EAAG,IAQhB,IADAE,EAAMN,EAAKI,EAJVG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,IAGAI,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIR,EAAKI,EADTG,GAAMF,IAEDP,EAAQU,GACZ,OAAOA,EAEHA,EAAIF,IACRA,EAAME,GAGR,OAAOF,ECnDR,IAAIR,EAASC,EACTC,EAAMC,EAwBV,SAASC,EAASC,EAAGC,EAAGC,EAAQM,GAC/B,IAAIL,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOL,EAAKI,EAAGO,IAIhB,IADAL,EAAMN,EAAKI,EADXG,EAAKI,IAECF,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIR,EAAKI,EADTG,GAAMF,IAEDP,EAAQU,GACZ,OAAOA,EAEHA,EAAIF,IACRA,EAAME,GAGR,OAAOF,EChDR,IAAIM,EAAcb,EACdG,EAAUD,EACVY,EAAUC,EAKdF,EAAaV,EAAS,UAAWW","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} maximum absolute value\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smaxabs( N, x, 1 );\n* // returns 2.0\n*/\nfunction smaxabs( N, x, stride ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmax = abs( x[ ix ] );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = abs( x[ ix ] );\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\nexport default smaxabs;\n","import __var_0__ from '@stdlib/math/base/assert/is-nanf';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnanf = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum absolute value\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smaxabs( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction smaxabs( N, x, stride, offset ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tmax = abs( x[ ix ] );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = abs( x[ ix ] );\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\nexport default smaxabs;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './smaxabs.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar smaxabs = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( smaxabs, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default smaxabs;\n"]}