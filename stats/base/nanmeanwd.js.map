{"version":3,"sources":["@stdlib/stats/base/nanmeanwd/lib/nanmeanwd.js","@stdlib/stats/base/nanmeanwd/lib/ndarray.js","@stdlib/stats/base/nanmeanwd/lib/main.js","@stdlib/stats/base/nanmeanwd/lib/index.js"],"names":["nanmeanwd","N","x","stride","mu","ix","v","n","i","NaN","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAwDA,SAASA,EAAWC,EAAGC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAG,GASX,IANCG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAENC,EAAK,EACLG,EAAI,EACEC,EAAI,EAAGA,EAAIP,EAAGO,KACnBF,EAAIJ,EAAGG,KACIC,IAEVF,IAAQE,EAAEF,IADVG,GAAK,IAGNF,GAAMF,EAEP,OAAW,IAANI,EACGE,IAEDL,EC5BR,SAASJ,EAAWC,EAAGC,EAAGC,EAAQO,GACjC,IAAIN,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAGQ,GAKX,IAHAL,EAAKK,EACLN,EAAK,EACLG,EAAI,EACEC,EAAI,EAAGA,EAAIP,EAAGO,KACnBF,EAAIJ,EAAGG,KACIC,IAEVF,IAAQE,EAAEF,IADVG,GAAK,IAGNF,GAAMF,EAEP,OAAW,IAANI,EACGE,IAEDL,EC9DR,IAAIO,EAAcC,EACdZ,EAAYa,EACZC,EAAUC,EAKdJ,EAAaX,EAAW,UAAWc,GCgBhC,IAACd,EAAYY","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using Welford's algorithm.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanwd( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction nanmeanwd( N, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tmu += ( v-mu ) / n;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\nexport default nanmeanwd;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using Welford's algorithm.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanwd( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction nanmeanwd( N, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tmu += ( v-mu ) / n;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\nexport default nanmeanwd;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './nanmeanwd.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar nanmeanwd = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( nanmeanwd, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default nanmeanwd;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array, ignoring `NaN` values and using Welford's algorithm.\n*\n* @module @stdlib/stats/base/nanmeanwd\n*\n* @example\n* var nanmeanwd = require( '@stdlib/stats/base/nanmeanwd' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanwd( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var nanmeanwd = require( '@stdlib/stats/base/nanmeanwd' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanwd.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\nvar nanmeanwd = __var_0__;\n\n\n// EXPORTS //\nexport default nanmeanwd;\n"]}