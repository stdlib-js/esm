{"version":3,"sources":["@stdlib/stats/base/dnanmeanpw/lib/dnansumpw.js","@stdlib/stats/base/dnanmeanpw/lib/ndarray.js","@stdlib/stats/base/dnanmeanpw/lib/dnanmeanpw.js","@stdlib/stats/base/dnanmeanpw/lib/index.js"],"names":["isnan","__var_0__","floor","__var_1__","BLOCKSIZE","dnansumpw","N","out","x","stride","offset","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","v","i","WORKSPACE","dnanmeanpw","mean","NaN","setReadOnly","ndarray","__var_2__"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar floor = __var_1__;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783â€“99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var out = [ 0.0, 0 ];\n* var v = dnansumpw( N, out, x, 2, 1 );\n* // returns [ 5.0, 4 ]\n*/\nfunction dnansumpw( N, out, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] += x[ offset ];\n\t\tout[ 1 ] += 1;\n\t\treturn out;\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, out, x, stride, ix ) + dnansumpw( N-n, out, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\nexport default dnansumpw;\n","import __var_0__ from './dnansumpw.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar dnansumpw = __var_0__;\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmeanpw( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dnanmeanpw( N, x, stride, offset ) {\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tdnansumpw( N, WORKSPACE, x, stride, offset );\n\treturn WORKSPACE[ 0 ] / WORKSPACE[ 1 ];\n}\n\n\n// EXPORTS //\nexport default dnanmeanpw;\n","import __var_0__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar mean = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanmeanpw( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction dnanmeanpw( N, x, stride ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tif ( n === 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn s / n;\n\t}\n\treturn mean( N, x, stride, ix );\n}\n\n\n// EXPORTS //\nexport default dnanmeanpw;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dnanmeanpw.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dnanmeanpw = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dnanmeanpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dnanmeanpw;\n"]}