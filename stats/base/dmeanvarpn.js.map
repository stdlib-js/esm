{"version":3,"sources":["@stdlib/stats/base/dmeanvarpn/lib/dmeanvarpn.js","@stdlib/stats/base/dmeanvarpn/lib/ndarray.js","@stdlib/stats/base/dmeanvarpn/lib/index.js"],"names":["isnan","__var_0__","dsumpw","__var_1__","dmeanvarpn","N","correction","x","strideX","out","strideOut","mu","ix","io","M2","M","d","c","n","i","NaN","ndarray","offsetX","offsetOut","setReadOnly","__var_2__"],"mappings":"yKAuBA,IAAIA,EAAQC,EACRC,EAASC,EAkCb,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAASC,EAAKC,GACpD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAYJ,GATCP,EADIJ,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLK,EADIH,EAAY,GACVA,EAED,EAEDL,GAAK,EAGT,OAFAI,EAAKI,GAAOO,IACZX,EAAKI,EAAGH,GAAcU,IACfX,EAGR,GADAS,EAAIb,EAAIC,EACG,IAAND,GAAuB,IAAZG,EAOf,OANAC,EAAKI,GAAON,EAAGK,GAEdH,EAAKI,EAAGH,GADJQ,GAAK,EACaE,IAEA,EAEhBX,EAIR,GADAE,EAAKT,EAAQG,EAAGE,EAAGC,GAAYH,EAC1BL,EAAOW,GAGX,OAFAF,EAAKI,GAAOO,IACZX,EAAKI,EAAGH,GAAcU,IACfX,EAKR,IAFAK,EAAK,EACLC,EAAI,EACEI,EAAI,EAAGA,EAAId,EAAGc,IAEnBL,IADAE,EAAIT,EAAGK,GAAOD,GACJK,EACVD,GAAKC,EACLJ,GAAMJ,EAWP,OARAS,EAAIF,EAAIV,EAERI,EAAKI,GAAOF,EAAKM,EAEhBR,EAAKI,EAAGH,GADJQ,GAAK,EACaE,IAECN,EAAGI,EAAMD,GAAGF,EAAEG,GAE/BT,EChGR,IAAIT,EAAQC,EACRC,EAASC,EAAUkB,QAuCvB,SAASjB,EAAYC,EAAGC,EAAYC,EAAGC,EAASc,EAASb,EAAKC,EAAWa,GACxE,IAAIZ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIJ,GAFAP,EAAKU,EACLT,EAAKU,EACAlB,GAAK,EAGT,OAFAI,EAAKI,GAAOO,IACZX,EAAKI,EAAGH,GAAcU,IACfX,EAGR,GADAS,EAAIb,EAAIC,EACG,IAAND,GAAuB,IAAZG,EAOf,OANAC,EAAKI,GAAON,EAAGK,GAEdH,EAAKI,EAAGH,GADJQ,GAAK,EACaE,IAEA,EAEhBX,EAIR,GADAE,EAAKT,EAAQG,EAAGE,EAAGC,EAASc,GAAYjB,EACnCL,EAAOW,GAGX,OAFAF,EAAKI,GAAOO,IACZX,EAAKI,EAAGH,GAAcU,IACfX,EAKR,IAFAK,EAAK,EACLC,EAAI,EACEI,EAAI,EAAGA,EAAId,EAAGc,IAEnBL,IADAE,EAAIT,EAAGK,GAAOD,GACJK,EACVD,GAAKC,EACLJ,GAAMJ,EAWP,OARAS,EAAIF,EAAIV,EAERI,EAAKI,GAAOF,EAAKM,EAEhBR,EAAKI,EAAGH,GADJQ,GAAK,EACaE,IAECN,EAAGI,EAAMD,GAAGF,EAAEG,GAE/BT,EC5FR,IAAIe,EAAcvB,EACdG,EAAaD,EACbkB,EAAUI,EAKdD,EAAapB,EAAY,UAAWiB","sourcesContent":["import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/blas/ext/base/dsumpw';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar dsumpw = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanvarpn( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~4.3333 ]\n*/\nfunction dmeanvarpn( N, correction, x, strideX, out, strideOut ) {\n\tvar mu;\n\tvar ix;\n\tvar io;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tif ( N <= 0 ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\tn = N - correction;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tout[ io ] = x[ ix ];\n\t\tif ( n <= 0.0 ) {\n\t\t\tout[ io+strideOut ] = NaN;\n\t\t} else {\n\t\t\tout[ io+strideOut ] = 0.0;\n\t\t}\n\t\treturn out;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, strideX ) / N;\n\tif ( isnan( mu ) ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\t// Compute the sum of squared differences from the mean...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\t// Compute an error term for the mean:\n\tc = M / N;\n\n\tout[ io ] = mu + c;\n\tif ( n <= 0.0 ) {\n\t\tout[ io+strideOut ] = NaN;\n\t} else {\n\t\tout[ io+strideOut ] = (M2/n) - (c*(M/n));\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dmeanvarpn;\n","import __var_0__ from '@stdlib/math/base/assert/is-nan';\nimport __var_1__ from '@stdlib/blas/ext/base/dsumpw';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isnan = __var_0__;\nvar dsumpw = __var_1__.ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanvarpn( N, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 6.25 ]\n*/\nfunction dmeanvarpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar mu;\n\tvar ix;\n\tvar io;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\tn = N - correction;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tout[ io ] = x[ ix ];\n\t\tif ( n <= 0.0 ) {\n\t\t\tout[ io+strideOut ] = NaN;\n\t\t} else {\n\t\t\tout[ io+strideOut ] = 0.0;\n\t\t}\n\t\treturn out;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, strideX, offsetX ) / N;\n\tif ( isnan( mu ) ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\t// Compute the sum of squared differences from the mean...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\t// Compute an error term for the mean:\n\tc = M / N;\n\n\tout[ io ] = mu + c;\n\tif ( n <= 0.0 ) {\n\t\tout[ io+strideOut ] = NaN;\n\t} else {\n\t\tout[ io+strideOut ] = (M2/n) - (c*(M/n));\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default dmeanvarpn;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dmeanvarpn.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dmeanvarpn = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dmeanvarpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dmeanvarpn;\n"]}