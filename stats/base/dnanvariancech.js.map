{"version":3,"sources":["@stdlib/stats/base/dnanvariancech/lib/dnanvariancech.js","@stdlib/stats/base/dnanvariancech/lib/ndarray.js","@stdlib/stats/base/dnanvariancech/lib/index.js"],"names":["dnanvariancech","N","correction","x","stride","mu","ix","M2","nc","M","d","v","n","i","NaN","offset","setReadOnly","__var_0__","__var_1__","ndarray","__var_2__"],"mappings":"wEAoDA,SAASA,EAAgBC,EAAGC,EAAYC,EAAGC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAOa,IAER,GAAW,IAANb,GAAsB,IAAXG,EAEf,OADAO,EAAIR,EAAG,KACIQ,GAAKV,EAAEC,EAAa,EACvB,EAEDY,IAQR,IALCR,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAGAS,EAAI,EAAGA,EAAIZ,EAAGY,IAAM,CAEzB,IADAF,EAAIR,EAAGG,KACIK,EAAI,CACdN,EAAKM,EACL,MAEDL,GAAMF,EAEP,GAAKS,IAAMZ,EACV,OAAOa,IASR,IAPAR,GAAMF,EACNS,GAAK,EAGLN,EAAK,EACLE,EAAI,EACJG,EAAI,EACKC,EAAIZ,EAAGY,KACfF,EAAIR,EAAGG,KACIK,IAEVJ,IADAG,EAAIC,EAAIN,GACEK,EACVD,GAAKC,EACLE,GAAK,GAENN,GAAMF,EAGP,OADAI,EAAKI,EAAIV,IACE,EACHY,IAEAP,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,GCzD5B,SAASR,EAAgBC,EAAGC,EAAYC,EAAGC,EAAQW,GAClD,IAAIV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAOa,IAER,GAAW,IAANb,GAAsB,IAAXG,EAEf,OADAO,EAAIR,EAAGY,KACIJ,GAAKV,EAAEC,EAAa,EACvB,EAEDY,IAKR,IAHAR,EAAKS,EAGCF,EAAI,EAAGA,EAAIZ,EAAGY,IAAM,CAEzB,IADAF,EAAIR,EAAGG,KACIK,EAAI,CACdN,EAAKM,EACL,MAEDL,GAAMF,EAEP,GAAKS,IAAMZ,EACV,OAAOa,IASR,IAPAR,GAAMF,EACNS,GAAK,EAGLN,EAAK,EACLE,EAAI,EACJG,EAAI,EACKC,EAAIZ,EAAGY,KACfF,EAAIR,EAAGG,KACIK,IAEVJ,IADAG,EAAIC,EAAIN,GACEK,EACVD,GAAKC,EACLE,GAAK,GAENN,GAAMF,EAGP,OADAI,EAAKI,EAAIV,IACE,EACHY,IAEAP,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,GCtF5B,IAAIQ,EAAcC,EACdjB,EAAiBkB,EACjBC,EAAUC,EAKdJ,EAAahB,EAAgB,UAAWmB","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanvariancech( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dnanvariancech( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\nexport default dnanvariancech;\n","\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanvariancech( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dnanvariancech( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\nexport default dnanvariancech;\n","import __var_0__ from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport __var_1__ from './dnanvariancech.js';\nimport __var_2__ from './ndarray.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar dnanvariancech = __var_1__;\nvar ndarray = __var_2__;\n\n\n// MAIN //\n\nsetReadOnly( dnanvariancech, 'ndarray', ndarray );\n\n\n// EXPORTS //\nexport default dnanvariancech;\n"]}