{"version":3,"sources":["@stdlib/stats/kruskal-test/lib/validate.js","@stdlib/stats/kruskal-test/lib/print.js","@stdlib/stats/kruskal-test/lib/main.js","@stdlib/stats/kruskal-test/lib/index.js"],"names":["isArray","__var_0__","isNumber","__var_1__","isPrimitive","isObject","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","groups","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","length","digits","this","method","pValue","statistic","df","rejected","isArrayLike","isPlainObject","setReadOnly","countBy","objectKeys","rank","__var_5__","pow","__var_6__","chisqCDF","__var_7__","identity","__var_8__","incrspace","__var_9__","__var_10__","__var_11__","kruskal","groupsIndicators","groupRankSums","tieSumTerm","ngroups","levels","param","ranks","vals","pval","stat","ties","arg","err","key","out","i","j","n","N","x","v","RangeError","Error","push","kruskalTest"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-array';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( 'invalid option. `groups` option must be an array. Option: `' + opts.groups + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the medians of all groups are the same';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '    df: ' + this.df;\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-array-like';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/utils/count-by';\nimport __var_4__ from '@stdlib/utils/keys';\nimport __var_5__ from '@stdlib/stats/ranks';\nimport __var_6__ from '@stdlib/math/base/special/pow';\nimport __var_7__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_8__ from '@stdlib/utils/identity-function';\nimport __var_9__ from '@stdlib/math/utils/incrspace';\nimport __var_10__ from './validate.js';\nimport __var_11__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLike = __var_0__;\nvar isPlainObject = __var_1__;\nvar setReadOnly = __var_2__;\nvar countBy = __var_3__;\nvar objectKeys = __var_4__;\nvar rank = __var_5__;\nvar pow = __var_6__;\nvar chisqCDF = __var_7__;\nvar identity = __var_8__;\nvar incrspace = __var_9__;\nvar validate = __var_10__;\nvar print = __var_11__;\n\n\n// MAIN //\n\n/**\n* Computes the Kruskal-Wallis test for equality of medians.\n*\n* @param {...NumberArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} must provide array-like arguments\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskal( x, y, z );\n* // returns {...}\n*/\nfunction kruskal() {\n\tvar groupsIndicators;\n\tvar groupRankSums;\n\tvar tieSumTerm;\n\tvar ngroups;\n\tvar options;\n\tvar levels;\n\tvar alpha;\n\tvar param;\n\tvar ranks;\n\tvar vals;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar ties;\n\tvar arg;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar n;\n\tvar N;\n\tvar x;\n\tvar v;\n\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tgroupRankSums = {};\n\tn = {};\n\tif ( opts.groups ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== opts.groups.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. First argument and `opts.groups` must be arrays of the same length.' );\n\t\t}\n\t\tn = countBy( opts.groups, identity );\n\t\tlevels = objectKeys( n );\n\t\tngroups = levels.length;\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\tkey = levels[ i ];\n\t\t\tgroupRankSums[ key ] = 0;\n\t\t}\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( 'invalid number of groups. `groups` array must contain at least two unique elements. Value: `' + levels + '`.' );\n\t\t}\n\t\tgroupsIndicators = opts.groups;\n\t} else {\n\t\tx = [];\n\t\tgroupsIndicators = [];\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( 'invalid number of input arguments. Must provide at least two array-like arguments. Value: `' + arg + '`.' );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( !isArrayLike( arg ) ) {\n\t\t\t\tthrow new TypeError( 'invalid input argument. Must provide array-like arguments. Value: `' + arg + '`.' );\n\t\t\t}\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( 'invalid input argument. Supplied arrays cannot be empty. Value: `' + arg + '`.' );\n\t\t\t} else {\n\t\t\t\tn[ i ] = arg.length;\n\t\t\t}\n\t\t\tgroupRankSums[ i ] = 0;\n\t\t\tfor ( j = 0; j < n[ i ]; j++ ) {\n\t\t\t\tgroupsIndicators.push( i );\n\t\t\t\tx.push( arg[ j ] );\n\t\t\t}\n\t\t}\n\t\tlevels = incrspace( 0, ngroups, 1 );\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid option. `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\n\tN = x.length;\n\tranks = rank( x );\n\n\t// Calculate # ties for each value & rank sums per group:\n\tties = {};\n\tfor ( i = 0; i < N; i++ ) {\n\t\tgroupRankSums[ groupsIndicators[ i ] ] += ranks[ i ];\n\t\tif ( x[ i ] in ties ) {\n\t\t\tties[ x[ i ] ] += 1;\n\t\t} else {\n\t\t\tties[ x[ i ] ] = 1;\n\t\t}\n\t}\n\n\t// Calculate test statistic using short-cut formula:\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tkey = levels[ i ];\n\t\tstat += pow( groupRankSums[ key ], 2.0 ) / n[ key ];\n\t}\n\tstat = ( ( 12.0 / ( N * (N+1) ) ) * stat ) - ( 3.0 * (N+1) );\n\n\t// Correction for ties:\n\ttieSumTerm = 0;\n\tvals = objectKeys( ties );\n\tfor ( i = 0; i < vals.length; i++ ) {\n\t\tv = ties[ vals[ i ] ];\n\t\ttieSumTerm += pow( v, 3.0 ) - v;\n\t}\n\n\tstat /= 1.0 - ( ( tieSumTerm ) / ( pow( N, 3 ) - N ) );\n\tparam = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kruskal-Wallis Test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default kruskal;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Kruskal-Wallis test for equal medians.\n*\n* @module @stdlib/stats/kruskal-test\n*\n* @example\n* var kruskalTest = require( '@stdlib/stats/kruskal-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskalTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\nvar kruskalTest = __var_0__;\n\n\n// EXPORTS //\nexport default kruskalTest;\n"]}