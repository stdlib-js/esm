{"version":3,"sources":["@stdlib/stats/chi2test/lib/print.js","@stdlib/stats/chi2test/lib/sum.js","@stdlib/stats/chi2test/lib/outer.js","@stdlib/stats/chi2test/lib/absdiff.js","@stdlib/stats/chi2test/lib/validate.js","@stdlib/stats/chi2test/lib/main.js","@stdlib/stats/chi2test/lib/index.js"],"names":["isPositiveInteger","__var_0__","isObject","__var_1__","isBoolean","__var_2__","isPrimitive","hasOwnProp","__var_3__","roundn","__var_4__","prettyPrint","results","opts","decision","dgts","str","arguments","length","TypeError","digits","method","pValue","statistic","df","rejected","alpha","Float64Array","sum","mat","dim","out","s0","s1","s","M","N","o","i","j","k","shape","strides","offset","data","array","outer","x","y","xlen","ylen","set","abs","absdiff","get","isNumber","isnan","validate","options","RangeError","correct","simulate","setReadOnly","isNonNegativeIntegerArray","isMatrixLike","isArrayArray","incrmin","__var_5__","gsum","__var_6__","min","__var_7__","copy","__var_8__","chisqCDF","__var_9__","__var_10__","defaults","__var_11__","sumByDimension","__var_12__","__var_13__","__var_14__","__var_15__","chi2test","absDiff","colSums","rowSums","minAbs","yates","means","param","nrow","ncol","pval","stat","err"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Options} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar decision;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Null hypothesis: the two variables are independent';\n\t\tstr += '\\n\\n';\n\t\tstr += '    pValue: ' + roundn( results.pValue, -dgts ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( results.statistic, -dgts ) + '\\n';\n\t\tstr += '    degrees of freedom: ' + results.df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\nexport default prettyPrint;\n","import __var_0__ from '@stdlib/array/float64';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Float64Array = __var_0__;\n\n\n// MAIN //\n\n/**\n* Computes the sum along a matrix dimension.\n*\n* @param {Matrix} mat - input matrix\n* @param {number} [dim=2] - matrix dimension along which to compute the sum. If `dim=1`, compute along matrix rows. If `dim=2`, compute along matrix columns.\n* @returns {(Int32Array|number)} sums or 0\n*/\nfunction sum( mat, dim ) {\n\tvar out;\n\tvar s0;\n\tvar s1;\n\tvar s;\n\tvar M;\n\tvar N;\n\tvar o;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( dim === 1 ) {\n\t\t// Compute along the rows...\n\t\tM = mat.shape[ 1 ];\n\t\tN = mat.shape[ 0 ];\n\t\ts0 = mat.strides[ 1 ];\n\t\ts1 = mat.strides[ 0 ];\n\t} else {\n\t\t// Compute along the columns...\n\t\tM = mat.shape[ 0 ];\n\t\tN = mat.shape[ 1 ];\n\t\ts0 = mat.strides[ 0 ];\n\t\ts1 = mat.strides[ 1 ];\n\t}\n\tif ( M === 0 || N === 0 ) {\n\t\treturn 0;\n\t}\n\tout = new Float64Array( M );\n\to = mat.offset;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tk = o + ( i*s0 );\n\t\ts = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ts += mat.data[ k + ( j*s1 ) ];\n\t\t}\n\t\tout[ i ] = s;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default sum;\n","import __var_0__ from '@stdlib/ndarray/array';\nimport __var_1__ from '@stdlib/array/float64';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar array = __var_0__;\nvar Float64Array = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes the outer product.\n*\n* @param {Float64Array} x - first factor of outer product\n* @param {Float64Array} y - second factor of outer product\n* @returns {Matrix} output matrix\n*/\nfunction outer( x, y ) {\n\tvar xlen = x.length;\n\tvar ylen = y.length;\n\tvar out = array( new Float64Array( xlen * ylen ), {\n\t\t'shape': [ xlen, ylen ]\n\t});\n\tvar i;\n\tvar j;\n\tfor ( i = 0; i < xlen; i++ ) {\n\t\tfor ( j = 0; j < ylen; j++ ) {\n\t\t\tout.set( i, j, x[ i ] * y[ j ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default outer;\n","import __var_0__ from '@stdlib/array/float64';\nimport __var_1__ from '@stdlib/math/base/special/abs';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar Float64Array = __var_0__;\nvar abs = __var_1__;\n\n\n// MAIN //\n\n/**\n* Computes an element-wise absolute difference of two matrices and stores the results in a typed array.\n*\n* @param {Matrix} x - first input matrix\n* @param {Matrix} y - second input matrix\n* @returns {Float64Array} output array\n*/\nfunction absdiff( x, y ) {\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar M;\n\tvar N;\n\n\tout = new Float64Array( x.length );\n\tM = x.shape[ 0 ];\n\tN = x.shape[ 1 ];\n\tfor ( i = 0; i < M; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tout[ ( i*M ) + j ] = abs( x.get( i, j ) - y.get( i, j ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default absdiff;\n","import __var_0__ from '@stdlib/assert/is-boolean';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isBoolean = __var_0__.isPrimitive;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.correct] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'correct': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( 'invalid option. `alpha` option must be a number on the interval `[0,1]`. Value: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correct' ) ) {\n\t\topts.correct = options.correct;\n\t\tif ( !isBoolean( opts.correct ) ) {\n\t\t\treturn new TypeError( 'invalid option. `correct` option must be a boolean primitive. Option: `' + opts.simulate + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/utils/define-read-only-property';\nimport __var_1__ from '@stdlib/assert/is-nonnegative-integer-array';\nimport __var_2__ from '@stdlib/assert/is-matrix-like';\nimport __var_3__ from '@stdlib/assert/is-array-array';\nimport __var_4__ from '@stdlib/ndarray/array';\nimport __var_5__ from '@stdlib/stats/incr/min';\nimport __var_6__ from '@stdlib/blas/ext/base/gsum';\nimport __var_7__ from '@stdlib/math/base/special/min';\nimport __var_8__ from '@stdlib/utils/copy';\nimport __var_9__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_10__ from './print.js';\nimport __var_11__ from './defaults.json';\nimport __var_12__ from './sum.js';\nimport __var_13__ from './outer.js';\nimport __var_14__ from './absdiff.js';\nimport __var_15__ from './validate.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar setReadOnly = __var_0__;\nvar isNonNegativeIntegerArray = __var_1__;\nvar isMatrixLike = __var_2__;\nvar isArrayArray = __var_3__;\nvar array = __var_4__;\nvar incrmin = __var_5__;\nvar gsum = __var_6__;\nvar min = __var_7__;\nvar copy = __var_8__;\nvar chisqCDF = __var_9__;\nvar prettyPrint = __var_10__;\nvar defaults = __var_11__;\nvar sumByDimension = __var_12__;\nvar outer = __var_13__;\nvar absdiff = __var_14__;\nvar validate = __var_15__;\n\n\n// MAIN //\n\n/**\n* Performs a chi-square independence test.\n*\n* @param {(ndarray|ArrayArray)} x - two-way table of cell counts\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.correct=true] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @throws {TypeError} first argument must be an array of arrays or ndarray-like object with dimension two\n* @returns {Object} test results\n*\n* @example\n*\n* @example\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n* var out = chi2test( x );\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\nfunction chi2test( x, options ) {\n\tvar absDiff;\n\tvar colSums;\n\tvar rowSums;\n\tvar minAbs;\n\tvar yates;\n\tvar means;\n\tvar param;\n\tvar nrow;\n\tvar ncol;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar err;\n\tvar out;\n\tvar N;\n\tvar i;\n\n\tif ( isArrayArray( x ) ) {\n\t\tx = array( x );\n\t}\n\tif ( !isMatrixLike( x ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must be an array of arrays or ndarray-like object with dimension two. Value: `' + x + '`.' );\n\t}\n\tif ( !isNonNegativeIntegerArray( x.data ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument `x` must contain nonnegative integers. Value: `' + x + '`.' );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tN = gsum( x.length, x.data, 1 );\n\tnrow = x.shape[ 0 ];\n\tncol = x.shape[ 1 ];\n\n\tcolSums = sumByDimension( x, 1 );\n\trowSums = sumByDimension( x, 2 );\n\tmeans = outer( rowSums, colSums );\n\tfor ( i = 0; i < means.length; i++ ) {\n\t\tmeans.data[ i ] /= N;\n\t}\n\tabsDiff = absdiff( x, means );\n\n\tif ( opts.correct && nrow === 2 && ncol === 2 ) {\n\t\t// Apply Yates' continuity correction:\n\t\tminAbs = incrmin();\n\t\tfor ( i = 0; i < absDiff.length; i++ ) {\n\t\t\tminAbs( absDiff[ i ] );\n\t\t}\n\t\tyates = min( 0.5, minAbs() );\n\t\tfor ( i = 0; i < absDiff.length; i++ ) {\n\t\t\tabsDiff[ i ] -= yates;\n\t\t}\n\t}\n\tfor ( i = 0; i < absDiff.length; i++ ) {\n\t\tabsDiff[ i ] *= absDiff[ i ];\n\t\tabsDiff[ i ] /= means.data[ i ];\n\t}\n\tstat = gsum( absDiff.length, absDiff, 1 );\n\tparam = ( nrow - 1 ) * ( ncol - 1 );\n\tpval = 1 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'expected', means );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Chi-square independence test' );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default chi2test;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square independence test.\n*\n* @module @stdlib/stats/chi2test\n*\n* @example\n* var chi2test = require( '@stdlib/stats/chi2test' );\n*\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n* var out = chi2test( x );\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*\n* var table = out.print();\n* /*\n*     Chi-square independence test\n*\n*     Null hypothesis: the two variables are independent\n*\n*         pValue: 0.0719\n*         statistic: 3.24\n*         degrees of freedom: 1\n*\n*     Test Decision: Fail to reject null in favor of alternative at 5% significance level\n* /*\n*/\n\n// MODULES //\nvar chi2test = __var_0__;\n\n\n// EXPORTS //\nexport default chi2test;\n"]}