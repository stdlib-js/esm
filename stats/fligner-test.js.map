{"version":3,"sources":["@stdlib/stats/fligner-test/lib/median.js","@stdlib/stats/fligner-test/lib/validate.js","@stdlib/stats/fligner-test/lib/print.js","@stdlib/stats/fligner-test/lib/main.js","@stdlib/stats/fligner-test/lib/index.js"],"names":["floor","__var_0__","ascending","a","b","median","arr","id","d","i","len","length","push","sort","isArray","isNumber","__var_1__","isPrimitive","isObject","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","groups","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","digits","this","method","pValue","statistic","df","rejected","isArrayLike","isPlainObject","setReadOnly","objectKeys","qnorm","chisqCDF","__var_5__","group","__var_6__","ranks","__var_7__","abs","__var_8__","pow","__var_9__","indexOf","__var_10__","__var_11__","__var_12__","__var_13__","repeat","val","out","Array","fligner","variance","ngroups","levels","scores","table","delta","args","mean","pval","sums","xabs","stat","err","loc","M2","n","x","j","Error","concat","RangeError","flignerTest"],"mappings":"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","sourcesContent":["import __var_0__ from '@stdlib/math/base/special/floor';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar floor = __var_0__;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Computes the median of an array.\n*\n* @param {Array} arr - input array\n* @returns {number} median value\n*/\nfunction median( arr ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar d;\n\tvar i;\n\n\tif ( !len ) {\n\t\treturn null;\n\t}\n\n\t// Copy and sort data in ascending order:\n\td = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\td.push( arr[ i ] );\n\t}\n\td.sort( ascending );\n\n\t// Get the middle index:\n\tid = floor( len / 2 );\n\n\tif ( len % 2 ) {\n\t\t// The number of elements is not evenly divisible by two, hence we have a middle index:\n\t\treturn d[ id ];\n\t}\n\t// Even number of elements, so must take the mean of the two middle values:\n\treturn ( d[ id-1 ] + d[ id ] ) / 2.0;\n}\n\n\n// EXPORTS //\nexport default median;\n","import __var_0__ from '@stdlib/assert/is-array';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( 'invalid option. `groups` option must be an array. Option: `' + opts.groups + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-array-like';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/utils/keys';\nimport __var_4__ from '@stdlib/stats/base/dists/normal/quantile';\nimport __var_5__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_6__ from '@stdlib/utils/group';\nimport __var_7__ from '@stdlib/stats/ranks';\nimport __var_8__ from '@stdlib/math/base/special/abs';\nimport __var_9__ from '@stdlib/math/base/special/pow';\nimport __var_10__ from '@stdlib/utils/index-of';\nimport __var_11__ from './median.js';\nimport __var_12__ from './validate.js';\nimport __var_13__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLike = __var_0__;\nvar isPlainObject = __var_1__;\nvar setReadOnly = __var_2__;\nvar objectKeys = __var_3__;\nvar qnorm = __var_4__;\nvar chisqCDF = __var_5__;\nvar group = __var_6__;\nvar ranks = __var_7__;\nvar abs = __var_8__;\nvar pow = __var_9__;\nvar indexOf = __var_10__;\nvar median = __var_11__;\nvar validate = __var_12__;\nvar print = __var_13__;\n\n\n// FUNCTIONS //\n\n/**\n* Returns an array of a chosen length filled with the supplied value.\n*\n* @private\n* @param {*} val - value to repeat\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*/\nfunction repeat( val, len ) {\n\tvar out = new Array( len );\n\tvar i;\n\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = val;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Computes the Fligner-Killeen test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = fligner( x, y, z );\n* // returns {...}\n*/\nfunction fligner() {\n\tvar variance;\n\tvar options;\n\tvar ngroups;\n\tvar levels;\n\tvar groups;\n\tvar scores;\n\tvar table;\n\tvar alpha;\n\tvar delta;\n\tvar args;\n\tvar mean;\n\tvar opts;\n\tvar pval;\n\tvar sums;\n\tvar xabs;\n\tvar stat;\n\tvar err;\n\tvar loc;\n\tvar out;\n\tvar df;\n\tvar M2;\n\tvar a;\n\tvar n;\n\tvar x;\n\tvar i;\n\tvar j;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\tgroups = opts.groups;\n\t\ttable = group( arguments[ 0 ], groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( 'invalid number of groups. `groups` array must contain at least two unique elements. Value: `' + levels + '`.' );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t\tgroups = groups.concat( repeat( i, arguments[ i ].length ) );\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\tx = [];\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tif ( !isArrayLike( args[ i ] ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Must provide array-like arguments. Value: `' + args[ i ] + '`.' );\n\t\t}\n\t\tif ( args[ i ].length === 0 ) {\n\t\t\tthrow new Error( 'invalid input argument. Supplied arrays cannot be empty. Value: `' + args[ i ] + '`.' );\n\t\t}\n\t\tloc = median( args[ i ] );\n\t\tfor ( j = 0; j < args[ i ].length; j++ ) {\n\t\t\targs[ i ][ j ] -= loc;\n\t\t}\n\t\tx = x.concat( args[ i ] );\n\t}\n\tn = x.length;\n\txabs = new Array( n );\n\tfor ( i = 0; i < n; i++ ) {\n\t\txabs[ i ] = abs( x[ i ] );\n\t}\n\tscores = ranks( xabs );\n\ta = new Array( n );\n\tmean = 0.0;\n\tM2 = 0.0;\n\tsums = repeat( 0.0, ngroups );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ta[ i ] = qnorm( ( 1.0 + ( scores[ i ]/(n+1) ) ) / 2.0, 0.0, 1.0 );\n\t\tsums[ ( levels ) ? indexOf( levels, groups[i] ) : groups[i] ] += a[ i ];\n\t\tdelta = a[ i ] - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( a[ i ] - mean );\n\t}\n\tvariance = M2 / ( n - 1 );\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tstat += pow( sums[ i ], 2 ) / args[ i ].length;\n\t}\n\tstat = ( stat - ( n * pow( mean, 2 ) ) ) / variance;\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Fligner-Killeen test of homogeneity of variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default fligner;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Fligner-Killeen test for equal variances.\n*\n* @module @stdlib/stats/fligner-test\n*\n* @example\n* var flignerTest = require( '@stdlib/stats/fligner-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = flignerTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\nvar flignerTest = __var_0__;\n\n\n// EXPORTS //\nexport default flignerTest;\n"]}