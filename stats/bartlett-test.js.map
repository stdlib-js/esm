{"version":3,"sources":["@stdlib/stats/bartlett-test/lib/variance.js","@stdlib/stats/bartlett-test/lib/validate.js","@stdlib/stats/bartlett-test/lib/print.js","@stdlib/stats/bartlett-test/lib/main.js","@stdlib/stats/bartlett-test/lib/index.js"],"names":["variance","arr","delta","mean","len","M2","i","x","length","isArray","__var_0__","isNumber","__var_1__","isPrimitive","isObject","__var_2__","isnan","__var_3__","hasOwnProp","__var_4__","validate","opts","options","alpha","TypeError","groups","isPositiveInteger","isBoolean","roundn","print","decision","dgts","str","arguments","digits","this","method","pValue","statistic","df","rejected","isArrayLike","isPlainObject","setReadOnly","objectKeys","chisqCDF","group","__var_5__","ln","__var_6__","__var_7__","__var_8__","__var_9__","bartlett","ngroups","ninvSum","levels","table","nSum","vSum","args","pval","stat","arg","err","lnv","out","n","v","Error","push","Array","RangeError","bartlettTest"],"mappings":"6lBA4BA,SAASA,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,IAJAL,EAAQ,EACRC,EAAO,EACPE,EAAK,EACLD,EAAMH,EAAIO,OACJF,EAAI,EAAGA,EAAIF,EAAKE,IAIrBD,IAFAH,GADAK,EAAIN,EAAKK,IACGH,IAEII,GADhBJ,GAAQD,GAASI,EAAE,KAGpB,OAAOD,GAAOC,EAAI,GCpBnB,IAAIG,EAAUC,EACVC,EAAWC,EAAUC,YACrBC,EAAWC,EACXC,EAAQC,EACRC,EAAaC,EAejB,SAASC,EAAUC,EAAMC,GACxB,OAAMR,EAAUQ,GAGXJ,EAAYI,EAAS,WACzBD,EAAKE,MAAQD,EAAQC,OACfZ,EAAUU,EAAKE,QAAWP,EAAOK,EAAKE,QACpC,IAAIC,UAAW,uEAAyEH,EAAKE,MAAQ,MAGzGL,EAAYI,EAAS,YACzBD,EAAKI,OAASH,EAAQG,QAChBhB,EAASY,EAAKI,SACZ,IAAID,UAAW,8DAAgEH,EAAKI,OAAS,MAG/F,KAdC,IAAID,UAAW,iEAAmEF,EAAU,MCrBrG,IAAII,EAAoBhB,EACpBI,EAAWF,EACXe,EAAYZ,EAAUF,YACtBK,EAAaD,EACbW,EAAST,EAeb,SAASU,EAAOR,GAEf,IAAIS,EACAC,EACAC,EAIJ,GAFAD,EAAO,EACPD,GAAW,EACNG,UAAUzB,OAAS,EAAI,CAC3B,IAAMM,EAAUO,GACf,MAAM,IAAIG,UAAW,uEAAyEH,EAAO,MAEtG,GAAKH,EAAYG,EAAM,UAAa,CACnC,IAAMK,EAAmBL,EAAKa,QAC7B,MAAM,IAAIV,UAAW,wEAA0EH,EAAKa,OAAS,MAE9GH,EAAOV,EAAKa,OAEb,GAAKhB,EAAYG,EAAM,YAAe,CACrC,IAAMM,EAAWN,EAAKS,UACrB,MAAM,IAAIN,UAAW,2EAA6EH,EAAKS,SAAW,MAEnHA,EAAWT,EAAKS,UAsBlB,OAlBAE,EAAM,GACNA,GAAOG,KAAKC,OACZJ,GAAO,OACPA,GAAO,6DACPA,GAAO,OACPA,GAAO,eAAiBJ,EAAQO,KAAKE,QAASN,GAAS,KACvDC,GAAO,kBAAoBJ,EAAQO,KAAKG,WAAYP,GAAS,KAC7DC,GAAO,WAAaJ,EAAQO,KAAKI,IAAKR,GACtCC,GAAO,OACFF,IACJE,GAAO,kBACFG,KAAKK,SACTR,GAAO,0CAAwD,IAAXG,KAAKZ,MAAa,uBAEtES,GAAO,kDAAgE,IAAXG,KAAKZ,MAAa,uBAE/ES,GAAO,MAEDA,EC1DR,IAAIS,EAAc/B,EACdgC,EAAgB9B,EAChB+B,EAAc5B,EACd6B,EAAa3B,EACb4B,EAAW1B,EACX2B,EAAQC,EACRC,EAAKC,EACLjD,EAAWkD,EACX9B,EAAW+B,EACXtB,EAAQuB,EA4BZ,SAASC,IACR,IAAI/B,EACAgC,EACAC,EACAC,EACAC,EACAlC,EACAmC,EACAC,EACAC,EACAvC,EACAwC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3B,EACA4B,EACAC,EACA9D,EAKJ,GAHAsD,EAAO,GAEPvC,EAAO,GACFqB,EAAeT,WAFpBqB,EAAUrB,UAAUzB,QAEqB,MACxCc,EAAUW,UAAWqB,EAAU,GAC/BA,GAAW,EACXU,EAAM5C,EAAUC,EAAMC,IAErB,MAAM0C,EAGR,GAAK3C,EAAKI,OAAS,CAIlB,GAHAgC,EAAQX,EAAOb,UAAW,GAAKZ,EAAKI,SAEpC6B,GADAE,EAASZ,EAAYa,IACJjD,QACF,EACd,MAAM,IAAI6D,MAAO,+FAAiGb,EAAS,MAE5H,IAAMlD,EAAI,EAAGA,EAAIgD,EAAShD,IACzBsD,EAAKU,KAAMb,EAAOD,EAAQlD,UAG3B,IAAMA,EAAI,EAAGA,EAAIgD,EAAShD,IACzBsD,EAAKU,KAAMrC,UAAW3B,IASxB,IANAoD,EAAO,EACPH,EAAU,EACVI,EAAO,EACPM,EAAM,EACNE,EAAI,IAAII,MAAOjB,GACfc,EAAI,IAAIG,MAAOjB,GACThD,EAAI,EAAGA,EAAIgD,EAAShD,IAAM,CAE/B,GADAyD,EAAMH,EAAMtD,IACNmC,EAAasB,GAClB,MAAM,IAAIvC,UAAW,sEAAwEuC,EAAM,MAEpG,GAAoB,IAAfA,EAAIvD,OACR,MAAM,IAAI6D,MAAO,oEAAsEN,EAAM,MAE9FI,EAAG7D,GAAMyD,EAAIvD,OAAS,EACtBkD,GAAQS,EAAG7D,GACXiD,GAAW,EAAMY,EAAG7D,GACpB8D,EAAG9D,GAAMN,EAAU+D,GACnBJ,GAAUQ,EAAG7D,GAAM8D,EAAG9D,GACtB2D,GAAOE,EAAG7D,GAAM0C,EAAIoB,EAAG9D,IAQxB,GANAqD,GAAQD,GAEPnC,OADmB,IAAfF,EAAKE,MACD,IAEAF,EAAKE,OAED,GAAOA,EAAQ,EAC3B,MAAM,IAAIiD,WAAY,kFAAoFjD,EAAQ,MAgBnH,OAbAuC,EAAWJ,EAAOV,EAAIW,GAAWM,EAGjCJ,EAAO,EAAMhB,EAFbiB,GAAU,GAAUP,EAAY,EAAMG,IAAa,GAAMJ,EAAQ,IACjEf,EAAKe,EAAU,GAIfX,EADAuB,EAAM,GACY,WAAYL,GAAQtC,GACtCoB,EAAauB,EAAK,QAAS3C,GAC3BoB,EAAauB,EAAK,SAAUL,GAC5BlB,EAAauB,EAAK,YAAaJ,GAC/BnB,EAAauB,EAAK,KAAM3B,GACxBI,EAAauB,EAAK,SAAU,sCAC5BvB,EAAauB,EAAK,QAASrC,GACpBqC,ECzHL,IAACO,EAAe/D","sourcesContent":["\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the unbiased variance of an array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} variance\n*/\nfunction variance( arr ) {\n\tvar delta;\n\tvar mean;\n\tvar len;\n\tvar M2;\n\tvar i;\n\tvar x;\n\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tx = arr[ i ];\n\t\tdelta = x - mean;\n\t\tmean += delta / (i+1);\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn M2 / ( i - 1 );\n}\n\n\n// EXPORTS //\nexport default variance;\n","import __var_0__ from '@stdlib/assert/is-array';\nimport __var_1__ from '@stdlib/assert/is-number';\nimport __var_2__ from '@stdlib/assert/is-plain-object';\nimport __var_3__ from '@stdlib/assert/is-nan';\nimport __var_4__ from '@stdlib/assert/has-own-property';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArray = __var_0__;\nvar isNumber = __var_1__.isPrimitive;\nvar isObject = __var_2__;\nvar isnan = __var_3__;\nvar hasOwnProp = __var_4__;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( 'invalid option. `alpha` option must be a number primitive. Option: `' + opts.alpha + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( 'invalid option. `groups` option must be an array. Option: `' + opts.groups + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\nexport default validate;\n","import __var_0__ from '@stdlib/assert/is-positive-integer';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/assert/is-boolean';\nimport __var_3__ from '@stdlib/assert/has-own-property';\nimport __var_4__ from '@stdlib/math/base/special/roundn';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isPositiveInteger = __var_0__;\nvar isObject = __var_1__;\nvar isBoolean = __var_2__.isPrimitive;\nvar hasOwnProp = __var_3__;\nvar roundn = __var_4__;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an options object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `digits` option must be a positive integer. Option: `' + opts.digits + '`.' );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `decision` option must be a boolean primitive. Option: `' + opts.decision + '`.' );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\nexport default print;\n","import __var_0__ from '@stdlib/assert/is-array-like';\nimport __var_1__ from '@stdlib/assert/is-plain-object';\nimport __var_2__ from '@stdlib/utils/define-read-only-property';\nimport __var_3__ from '@stdlib/utils/keys';\nimport __var_4__ from '@stdlib/stats/base/dists/chisquare/cdf';\nimport __var_5__ from '@stdlib/utils/group';\nimport __var_6__ from '@stdlib/math/base/special/ln';\nimport __var_7__ from './variance.js';\nimport __var_8__ from './validate.js';\nimport __var_9__ from './print.js'; // eslint-disable-line stdlib/no-redeclare\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isArrayLike = __var_0__;\nvar isPlainObject = __var_1__;\nvar setReadOnly = __var_2__;\nvar objectKeys = __var_3__;\nvar chisqCDF = __var_4__;\nvar group = __var_5__;\nvar ln = __var_6__;\nvar variance = __var_7__;\nvar validate = __var_8__;\nvar print = __var_9__;\n\n\n// MAIN //\n\n/**\n* Computes Bartlett’s test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlett( x, y, z );\n* // returns {...}\n*/\nfunction bartlett() {\n\tvar options;\n\tvar ngroups;\n\tvar ninvSum;\n\tvar levels;\n\tvar table;\n\tvar alpha;\n\tvar nSum;\n\tvar vSum;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar arg;\n\tvar err;\n\tvar lnv;\n\tvar out;\n\tvar df;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\ttable = group( arguments[ 0 ], opts.groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( 'invalid number of groups. `groups` array must contain at least two unique elements. Value: `' + levels + '`.' );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tnSum = 0;\n\tninvSum = 0.0;\n\tvSum = 0.0;\n\tlnv = 0.0;\n\tn = new Array( ngroups );\n\tv = new Array( ngroups );\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\targ = args[ i ];\n\t\tif ( !isArrayLike( arg ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Must provide array-like arguments. Value: `' + arg + '`.' );\n\t\t}\n\t\tif ( arg.length === 0 ) {\n\t\t\tthrow new Error( 'invalid input argument. Supplied arrays cannot be empty. Value: `' + arg + '`.' );\n\t\t}\n\t\tn[ i ] = arg.length - 1;\n\t\tnSum += n[ i ];\n\t\tninvSum += 1.0 / n[ i ];\n\t\tv[ i ] = variance( arg );\n\t\tvSum += ( n[ i ] * v[ i ] );\n\t\tlnv += n[ i ] * ln( v[ i ] );\n\t}\n\tvSum /= nSum;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );\n\t}\n\n\tstat = ( ( nSum * ln( vSum ) ) - lnv );\n\tstat /= ( 1.0 + ( ( ninvSum - ( 1.0 / nSum ) ) / ( 3 * ( ngroups-1 ) ) ) );\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Bartlett\\'s test of equal variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\nexport default bartlett;\n","import __var_0__ from './main.js';\n/**\n\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Bartlett’s test for equal variances.\n*\n* @module @stdlib/stats/bartlett-test\n*\n* @example\n* var bartlettTest = require( '@stdlib/stats/bartlett-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlettTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\nvar bartlettTest = __var_0__;\n\n\n// EXPORTS //\nexport default bartlettTest;\n"]}